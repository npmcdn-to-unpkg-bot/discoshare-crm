/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _angular = __webpack_require__(1);

	var _angular2 = _interopRequireDefault(_angular);

	var _angularCookies = __webpack_require__(3);

	var _angularCookies2 = _interopRequireDefault(_angularCookies);

	var _angularResource = __webpack_require__(5);

	var _angularResource2 = _interopRequireDefault(_angularResource);

	var _angularAnimate = __webpack_require__(7);

	var _angularAnimate2 = _interopRequireDefault(_angularAnimate);

	var _angularEnvironment = __webpack_require__(9);

	var _angularEnvironment2 = _interopRequireDefault(_angularEnvironment);

	var _ngTable = __webpack_require__(11);

	var _ngTable2 = _interopRequireDefault(_ngTable);

	var _angularUiGrid = __webpack_require__(12);

	var _angularUiGrid2 = _interopRequireDefault(_angularUiGrid);

	var _angularGoogleMaps = __webpack_require__(13);

	var _angularGoogleMaps2 = _interopRequireDefault(_angularGoogleMaps);

	var _ngmap = __webpack_require__(14);

	var _ngmap2 = _interopRequireDefault(_ngmap);

	__webpack_require__(15);

	var _angularToastr = __webpack_require__(16);

	var _angularToastr2 = _interopRequireDefault(_angularToastr);

	var _common = __webpack_require__(18);

	var _common2 = _interopRequireDefault(_common);

	var _routes = __webpack_require__(23);

	var _routes2 = _interopRequireDefault(_routes);

	var _services = __webpack_require__(40);

	var _services2 = _interopRequireDefault(_services);

	__webpack_require__(49);

	var _indexNocss = __webpack_require__(51);

	var _indexNocss2 = _interopRequireDefault(_indexNocss);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// import modal from 'angular-ui-bootstrap/src/modal';

	var app = _angular2.default.module('app', [_angularCookies2.default, _angularAnimate2.default,
	// modalcss,
	// modal,
	'ui.bootstrap', 'angularModalService', _ngmap2.default, _angularToastr2.default, _angularEnvironment2.default, _common2.default, _routes2.default, _angularResource2.default, _services2.default]);

	// import modalService from 'angular-modal-service';

	app.config(function (envServiceProvider) {
		// set the domains and variables for each environment
		envServiceProvider.config({
			domains: {
				development: ['localhost'],
				production: ['https://discoshare-crm.herokuapp.com']
			},
			vars: {
				development: {
					endpoint: 'http://localhost:9000'
				},
				production: {
					endpoint: 'https://discoshare-checkout.herokuapp.com'
				}
			}
		});

		// run the environment check, so the comprobation is made
		// before controllers and services are built
		envServiceProvider.check();
	});

	app.factory('authInterceptor', function ($rootScope, $q, $cookieStore, $location) {
		return {
			// Add authorization token to headers
			request: function request(config) {
				config.headers = config.headers || {};
				if (config.url && $cookieStore.get('token')) {
					config.headers.Authorization = 'Bearer ' + $cookieStore.get('token');
				}
				return config;
			},

			// Intercept 401s and redirect you to login
			responseError: function responseError(response) {
				if (response.status === 401) {
					$location.path('/login');
					// remove any stale tokens
					$cookieStore.remove('token');
					return $q.reject(response);
				} else {
					return $q.reject(response);
				}
			}
		};
	});

	app.constant('config', {
		'endpoint': "https://discoshare-checkout.herokuapp.com",
		'statuses': [{
			slug: "sold",
			title: "Sold"
		}, {
			slug: "expensive",
			title: "To expensive"
		}, {
			slug: "empty",
			title: "Wasn't there"
		}, {
			slug: "busy",
			title: "Busy"
		}]
	});

	app.run(function ($rootScope, $location, $state, Auth, envService, singletonService) {
		if (navigator.geolocation) {
			window.onload = function () {
				var startPos;
				var geoSuccess = function geoSuccess(position) {
					startPos = position;
					console.log("test:", startPos.coords);
					singletonService.setCurrentPosition(startPos.coords);
				};
				navigator.geolocation.getCurrentPosition(geoSuccess);
			};
		} else {
			console.log('Geolocation is not supported for this Browser/OS version yet.');
		}

		if (envService.is('development')) {
			$rootScope.currentUser = Auth.getCurrentUser();
			$rootScope.debug = false;
		}

		// Redirect to login if route requires auth and you're not logged in
		$rootScope.$on('$stateChangeStart', function (event, next) {
			Auth.isLoggedInAsync(function (loggedIn) {
				if (next.authenticate && !loggedIn) {
					console.log("Not logged");
					event.preventDefault();
					$location.path('/login');
					$state.go('login');
				}

				if (next.admin && !Auth.isAdmin()) {
					console.log("Can't go there");
					event.preventDefault();
					$state.go('login');
				}
			});
		});
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	module.exports = angular;


/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.7
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window) {'use strict';

	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */

	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;

	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;

	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;

	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }

	      return match;
	    });

	    message += '\nhttp://errors.angularjs.org/1.5.7/' +
	      (module ? module + '/' : '') + code;

	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }

	    return new ErrorConstructor(message);
	  };
	}

	/* We need to tell jshint what variables are being exported */
	/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,

	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,

	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/

	////////////////////////////////////

	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */

	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


	var manualLowercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	};
	var manualUppercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	};


	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}


	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),

	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;

	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = window.document.documentMode;


	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {

	  // `null`, `undefined` and `window` are not array-like
	  if (obj == null || isWindow(obj)) return false;

	  // arrays, strings and jQuery/jqLite objects are array like
	  // * jqLite is either the jQuery or jqLite constructor function
	  // * we have to check the existence of jqLite first as this method is called
	  //   via the forEach method when constructing the jqLite object in the first place
	  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;

	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = "length" in Object(obj) && obj.length;

	  // NodeList objects (with `item` method) and
	  // other objects with suitable length characteristics are array-like
	  return isNumber(length) &&
	    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item == 'function');

	}

	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */

	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}

	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}


	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) {iteratorFn(key, value);};
	}

	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}


	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}


	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;

	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];

	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else if (src.nodeName) {
	          dst[key] = src.cloneNode(true);
	        } else if (isElement(src)) {
	          dst[key] = src.clone();
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }

	  setHashKey(dst, h);
	  return dst;
	}

	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}


	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}



	function toInt(str) {
	  return parseInt(str, 10);
	}


	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}

	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];


	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	   function transformer(transformationFn, value) {
	     return (transformationFn || angular.identity)(value);
	   };

	   // E.g.
	   function getResult(fn, input) {
	     return (fn || angular.identity)(input);
	   };

	   getResult(function(n) { return n * 2; }, 21);   // returns 42
	   getResult(null, 21);                            // returns 21
	   getResult(undefined, 21);                       // returns 21
	   ```
	 *
	 * @param {*} value to be returned.
	 * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];


	function valueFn(value) {return function valueRef() {return value;};}

	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== toString;
	}


	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}


	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}


	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}


	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}


	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}


	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;

	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}


	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}


	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}


	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}


	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}


	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}


	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}


	function isBoolean(value) {
	  return typeof value === 'boolean';
	}


	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}


	var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
	function isTypedArray(value) {
	  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
	}

	function isArrayBuffer(obj) {
	  return toString.call(obj) === '[object ArrayBuffer]';
	}


	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};

	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	           replace(/\x08/g, '\\x08');
	};


	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // We are a direct element.
	    || (node.prop && node.attr && node.find)));  // We have an on and find method part of jQuery API.
	}

	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}


	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}

	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) != -1;
	}

	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}

	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>

	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};

	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };

	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };

	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
	function copy(source, destination) {
	  var stackSource = [];
	  var stackDest = [];

	  if (destination) {
	    if (isTypedArray(destination) || isArrayBuffer(destination)) {
	      throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");
	    }
	    if (source === destination) {
	      throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
	    }

	    // Empty the destination object
	    if (isArray(destination)) {
	      destination.length = 0;
	    } else {
	      forEach(destination, function(value, key) {
	        if (key !== '$$hashKey') {
	          delete destination[key];
	        }
	      });
	    }

	    stackSource.push(source);
	    stackDest.push(destination);
	    return copyRecurse(source, destination);
	  }

	  return copyElement(source);

	  function copyRecurse(source, destination) {
	    var h = destination.$$hashKey;
	    var key;
	    if (isArray(source)) {
	      for (var i = 0, ii = source.length; i < ii; i++) {
	        destination.push(copyElement(source[i]));
	      }
	    } else if (isBlankObject(source)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in source) {
	        destination[key] = copyElement(source[key]);
	      }
	    } else if (source && typeof source.hasOwnProperty === 'function') {
	      // Slow path, which must rely on hasOwnProperty
	      for (key in source) {
	        if (source.hasOwnProperty(key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    } else {
	      // Slowest path --- hasOwnProperty can't be called as a method
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    }
	    setHashKey(destination, h);
	    return destination;
	  }

	  function copyElement(source) {
	    // Simple values
	    if (!isObject(source)) {
	      return source;
	    }

	    // Already copied values
	    var index = stackSource.indexOf(source);
	    if (index !== -1) {
	      return stackDest[index];
	    }

	    if (isWindow(source) || isScope(source)) {
	      throw ngMinErr('cpws',
	        "Can't copy! Making copies of Window or Scope instances is not supported.");
	    }

	    var needsRecurse = false;
	    var destination = copyType(source);

	    if (destination === undefined) {
	      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
	      needsRecurse = true;
	    }

	    stackSource.push(source);
	    stackDest.push(destination);

	    return needsRecurse
	      ? copyRecurse(source, destination)
	      : destination;
	  }

	  function copyType(source) {
	    switch (toString.call(source)) {
	      case '[object Int8Array]':
	      case '[object Int16Array]':
	      case '[object Int32Array]':
	      case '[object Float32Array]':
	      case '[object Float64Array]':
	      case '[object Uint8Array]':
	      case '[object Uint8ClampedArray]':
	      case '[object Uint16Array]':
	      case '[object Uint32Array]':
	        return new source.constructor(copyElement(source.buffer));

	      case '[object ArrayBuffer]':
	        //Support: IE10
	        if (!source.slice) {
	          var copied = new ArrayBuffer(source.byteLength);
	          new Uint8Array(copied).set(new Uint8Array(source));
	          return copied;
	        }
	        return source.slice(0);

	      case '[object Boolean]':
	      case '[object Number]':
	      case '[object String]':
	      case '[object Date]':
	        return new source.constructor(source.valueOf());

	      case '[object RegExp]':
	        var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        re.lastIndex = source.lastIndex;
	        return re;

	      case '[object Blob]':
	        return new source.constructor([source], {type: source.type});
	    }

	    if (isFunction(source.cloneNode)) {
	      return source.cloneNode(true);
	    }
	  }
	}


	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">

	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">

	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.result;
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 == t2 && t1 == 'object') {
	    if (isArray(o1)) {
	      if (!isArray(o2)) return false;
	      if ((length = o1.length) == o2.length) {
	        for (key = 0; key < length; key++) {
	          if (!equals(o1[key], o2[key])) return false;
	        }
	        return true;
	      }
	    } else if (isDate(o1)) {
	      if (!isDate(o2)) return false;
	      return equals(o1.getTime(), o2.getTime());
	    } else if (isRegExp(o1)) {
	      if (!isRegExp(o2)) return false;
	      return o1.toString() == o2.toString();
	    } else {
	      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	      keySet = createMap();
	      for (key in o1) {
	        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	        if (!equals(o1[key], o2[key])) return false;
	        keySet[key] = true;
	      }
	      for (key in o2) {
	        if (!(key in keySet) &&
	            key.charAt(0) !== '$' &&
	            isDefined(o2[key]) &&
	            !isFunction(o2[key])) return false;
	      }
	      return true;
	    }
	  }
	  return false;
	}

	var csp = function() {
	  if (!isDefined(csp.rules)) {


	    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
	                    window.document.querySelector('[data-ng-csp]'));

	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }

	  return csp.rules;

	  function noUnsafeEval() {
	    try {
	      /* jshint -W031, -W054 */
	      new Function('');
	      /* jshint +W031, +W054 */
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};

	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    if (el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }

	  return (jq.name_ = name);
	};

	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}

	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}


	/* jshint -W101 */
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	/* jshint +W101 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
	    return fn;
	  }
	}


	function toJsonReplacer(key, value) {
	  var val = value;

	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  window.document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }

	  return val;
	}


	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 * @knownIssue
	 *
	 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
	 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
	 * `Date.prototype.toJSON` method as follows:
	 *
	 * ```
	 * var _DatetoJSON = Date.prototype.toJSON;
	 * Date.prototype.toJSON = function() {
	 *   try {
	 *     return _DatetoJSON.call(this);
	 *   } catch(e) {
	 *     if (e instanceof RangeError) {
	 *       return null;
	 *     }
	 *     throw e;
	 *   }
	 * };
	 * ```
	 *
	 * See https://github.com/angular/angular.js/pull/14221 for more information.
	 */
	function toJson(obj, pretty) {
	  if (isUndefined(obj)) return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}


	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}


	var ALL_COLONS = /:/g;
	function timezoneToOffset(timezone, fallback) {
	  // IE/Edge do not "understand" colon (`:`) in timezone
	  timezone = timezone.replace(ALL_COLONS, '');
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}


	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}


	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var dateTimezoneOffset = date.getTimezoneOffset();
	  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	}


	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) {}
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w\-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
	  } catch (e) {
	    return lowercase(elemHtml);
	  }

	}


	/////////////////////////////////////////////////

	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component.
	  }
	}


	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || "").split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}

	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}


	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}


	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}

	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}

	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};

	  // The element `element` has priority over any other element.
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';

	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;

	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);

	    if (element.injector()) {
	      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
	      // Encode angle brackets to prevent input from being sanitized to empty string #8683.
	      throw ngMinErr(
	          'btstrpd',
	          "App already bootstrapped with this element '{0}'",
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }

	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);

	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }

	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };

	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }

	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }

	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };

	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}

	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}

	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}

	var bindJQueryFired = false;
	function bindJQuery() {
	  var originalCleanData;

	  if (bindJQueryFired) {
	    return;
	  }

	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`

	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });

	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	        events = jQuery._data(elem, "events");
	        if (events && events.$destroy) {
	          jQuery(elem).triggerHandler('$destroy');
	        }
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }

	  angular.element = jqLite;

	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}

	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}

	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }

	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}

	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
	  }
	}

	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;

	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}

	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;

	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }

	  return blockNodes || nodes;
	}


	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}

	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */

	function setupModuleLoader(window) {

	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');

	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }

	  var angular = ensure(window, 'angular', Object);

	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;

	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};

	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };

	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
	             "the module name or forgot to load it. If registering a module ensure that you " +
	             "specify the dependencies as the second argument.", name);
	        }

	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];

	        /** @type {!Array.<Function>} */
	        var configBlocks = [];

	        /** @type {!Array.<Function>} */
	        var runBlocks = [];

	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,

	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,

	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,


	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),

	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
	          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,

	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };

	        if (configFn) {
	          config(configFn);
	        }

	        return moduleInstance;

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method) {
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            invokeQueue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });

	}

	/* global shallowCopy: true */

	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];

	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};

	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }

	  return dst || src;
	}

	/* global toDebugString: true */

	function serializeObject(obj) {
	  var seen = [];

	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {

	      if (seen.indexOf(val) >= 0) return '...';

	      seen.push(val);
	    }
	    return val;
	  });
	}

	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}

	/* global angularModule: true,
	  version: true,

	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/


	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  full: '1.5.7',    // all of these placeholder strings will be replaced by grunt's
	  major: 1,    // package task
	  minor: 5,
	  dot: 7,
	  codeName: 'hexagonal-circumvolution'
	};


	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {counter: 0},
	    'getTestability': getTestability,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    'reloadWithDebugInfo': reloadWithDebugInfo
	  });

	  angularModule = setupModuleLoader(window);

	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            style: styleDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateJs: $$CoreAnimateJsProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
	        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/

	//////////////////////////////////
	//JQLite
	//////////////////////////////////

	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */

	JQLite.expando = 'ng339';

	var jqCache = JQLite.cache = {},
	    jqId = 1,
	    addEventListenerFn = function(element, type, fn) {
	      element.addEventListener(type, fn, false);
	    },
	    removeEventListenerFn = function(element, type, fn) {
	      element.removeEventListener(type, fn, false);
	    };

	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};

	function jqNextId() { return ++jqId; }


	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
	var jqLiteMinErr = minErr('jqLite');

	/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
	function camelCase(name) {
	  return name.
	    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	      return offset ? letter.toUpperCase() : letter;
	    }).
	    replace(MOZ_HACK_REGEXP, 'Moz$1');
	}

	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],

	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, "", ""]
	};

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}

	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}

	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}

	function jqLiteCleanData(nodes) {
	  for (var i = 0, ii = nodes.length; i < ii; i++) {
	    jqLiteRemoveData(nodes[i]);
	  }
	}

	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;

	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = tmp || fragment.appendChild(context.createElement("div"));
	    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }

	    nodes = concat(nodes, tmp.childNodes);

	    tmp = fragment.firstChild;
	    tmp.textContent = "";
	  }

	  // Remove wrapper from fragment
	  fragment.textContent = "";
	  fragment.innerHTML = ""; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });

	  return fragment;
	}

	function jqLiteParseHTML(html, context) {
	  context = context || window.document;
	  var parsed;

	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }

	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }

	  return [];
	}

	function jqLiteWrapNode(node, wrapper) {
	  var parent = node.parentNode;

	  if (parent) {
	    parent.replaceChild(wrapper, node);
	  }

	  wrapper.appendChild(node);
	}


	// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains = window.Node.prototype.contains || function(arg) {
	  // jshint bitwise: false
	  return !!(this.compareDocumentPosition(arg) & 16);
	  // jshint bitwise: true
	};

	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }

	  var argIsString;

	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) != '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }

	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}

	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}

	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);

	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}

	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;

	  if (!handle) return; //no listeners registered

	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        removeEventListenerFn(element, type, handle);
	      }
	      delete events[type];
	    }
	  } else {

	    var removeHandler = function(type) {
	      var listenerFns = events[type];
	      if (isDefined(fn)) {
	        arrayRemove(listenerFns || [], fn);
	      }
	      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
	        removeEventListenerFn(element, type, handle);
	        delete events[type];
	      }
	    };

	    forEach(type.split(' '), function(type) {
	      removeHandler(type);
	      if (MOUSE_EVENT_MAP[type]) {
	        removeHandler(MOUSE_EVENT_MAP[type]);
	      }
	    });
	  }
	}

	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];

	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }

	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}


	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];

	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }

	  return expandoStore;
	}


	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {

	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;

	    if (isSimpleSetter) { // data('key', value)
	      data[key] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[key];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          extend(data, key);
	        }
	      }
	    }
	  }
	}

	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
	      indexOf(" " + selector + " ") > -1);
	}

	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (" " + (element.getAttribute('class') || '') + " ")
	          .replace(/[\n\t]/g, " ")
	          .replace(" " + trim(cssClass) + " ", " "))
	      );
	    });
	  }
	}

	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, " ");

	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });

	    element.setAttribute('class', trim(existingClasses));
	  }
	}


	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

	  if (elements) {

	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;

	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}


	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}

	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType == NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];

	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }

	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}

	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}

	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}


	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behavior
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}

	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: function(fn) {
	    var fired = false;

	    function trigger() {
	      if (fired) return;
	      fired = true;
	      fn();
	    }

	    // check if document is already loaded
	    if (window.document.readyState === 'complete') {
	      window.setTimeout(trigger);
	    } else {
	      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
	      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
	      // jshint -W064
	      JQLite(window).on('load', trigger); // fallback to window.onload for others
	      // jshint +W064
	    }
	  },
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },

	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },

	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};

	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern'
	};

	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}

	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}

	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData,
	  cleanData: jqLiteCleanData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});

	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,

	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },

	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },

	  controller: jqLiteController,

	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },

	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },

	  hasClass: jqLiteHasClass,

	  css: function(element, name, value) {
	    name = camelCase(name);

	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },

	  attr: function(element, name, value) {
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
	      return;
	    }
	    var lowercasedName = lowercase(name);
	    if (BOOLEAN_ATTR[lowercasedName]) {
	      if (isDefined(value)) {
	        if (!!value) {
	          element[name] = true;
	          element.setAttribute(name, lowercasedName);
	        } else {
	          element[name] = false;
	          element.removeAttribute(lowercasedName);
	        }
	      } else {
	        return (element[name] ||
	                 (element.attributes.getNamedItem(name) || noop).specified)
	               ? lowercasedName
	               : undefined;
	      }
	    } else if (isDefined(value)) {
	      element.setAttribute(name, value);
	    } else if (element.getAttribute) {
	      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
	      // some elements (e.g. Document) don't have get attribute, so return undefined
	      var ret = element.getAttribute(name, 2);
	      // normalize non-existing attributes to undefined (as jQuery)
	      return ret === null ? undefined : ret;
	    }
	  },

	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },

	  text: (function() {
	    getText.$dv = '';
	    return getText;

	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),

	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result.length === 0 ? null : result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },

	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },

	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;

	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {

	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});

	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };

	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;

	    if (!eventFnsLength) return;

	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;

	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }

	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }

	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };

	    // Some events have special handlers that wrap the real handler
	    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;

	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }

	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        handlerWrapper(element, event, eventFns[i]);
	      }
	    }
	  };

	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}

	function defaultHandlerWrapper(element, event, handler) {
	  handler.call(element, event);
	}

	function specialMouseHandlerWrapper(target, event, handler) {
	  // Refer to jQuery's implementation of mouseenter & mouseleave
	  // Read about mouseenter and mouseleave:
	  // http://www.quirksmode.org/js/events_mouse.html#link8
	  var related = event.relatedTarget;
	  // For mousenter/leave call the handler if related is outside the target.
	  // NB: No relatedTarget if the mouse left/entered the browser window
	  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
	    handler.call(target, event);
	  }
	}

	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,

	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }

	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;

	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }

	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;

	    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
	      var eventFns = events[type];

	      if (!eventFns) {
	        eventFns = events[type] = [];
	        eventFns.specialHandlerWrapper = specialHandlerWrapper;
	        if (type !== '$destroy' && !noEventListener) {
	          addEventListenerFn(element, type, handle);
	        }
	      }

	      eventFns.push(fn);
	    };

	    while (i--) {
	      type = types[i];
	      if (MOUSE_EVENT_MAP[type]) {
	        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
	        addHandler(type, undefined, true);
	      } else {
	        addHandler(type);
	      }
	    }
	  },

	  off: jqLiteOff,

	  one: function(element, type, fn) {
	    element = jqLite(element);

	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },

	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },

	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },

	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },

	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

	    node = new JQLite(node);

	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },

	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },

	  wrap: function(element, wrapNode) {
	    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
	  },

	  remove: jqLiteRemove,

	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },

	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);

	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },

	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,

	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },

	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },

	  next: function(element) {
	    return element.nextElementSibling;
	  },

	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },

	  clone: jqLiteClone,

	  triggerHandler: function(element, event, extraParameters) {

	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];

	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };

	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }

	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;

	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };

	  // bind legacy bind/unbind to on/off
	  JQLite.prototype.bind = JQLite.prototype.on;
	  JQLite.prototype.unbind = JQLite.prototype.off;
	});


	// Provider for private $$jqLite service
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}

	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;

	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }

	  var objType = typeof obj;
	  if (objType == 'function' || (objType == 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }

	  return key;
	}

	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },

	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },

	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};

	var $$HashMapProvider = [function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];

	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */


	/**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */

	var ARROW_ARG = /^([^\(]+?)=>/;
	var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');

	function stringifyFn(fn) {
	  // Support: Chrome 50-51 only
	  // Creating a new string by adding `' '` at the end, to hack around some bug in Chrome v50/51
	  // (See https://github.com/angular/angular.js/issues/14487.)
	  // TODO (gkalpak): Remove workaround when Chrome v52 is released
	  return Function.prototype.toString.call(fn) + ' ';
	}

	function extractArgs(fn) {
	  var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
	      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
	  return args;
	}

	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var args = extractArgs(fn);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}

	function annotate(fn, strictDi, name) {
	  var $inject,
	      argDecl,
	      last;

	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        argDecl = extractArgs(fn);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}

	///////////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */




	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
	 *      will be able to modify or replace the implementation of another service.
	 *
	 * See the individual methods for more information and examples.
	 */

	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */

	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The return value of the decorator function may be the original service, or a new service
	 * that replaces (or wraps and delegates to) the original service.
	 *
	 * You can find out more about using decorators in the {@link guide/decorators} guide.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    provided and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */


	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
	          })),
	      instanceCache = {},
	      protoInstanceInjector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(
	                provider.$get, provider, undefined, serviceName);
	          }),
	      instanceInjector = protoInstanceInjector;

	  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
	  var runBlocks = loadModules(modulesToLoad);
	  instanceInjector = protoInstanceInjector.get('$injector');
	  instanceInjector.strictDi = strictDi;
	  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });

	  return instanceInjector;

	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////

	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }

	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
	    }
	    return providerCache[name + providerSuffix] = provider_;
	  }

	  function enforceReturnValue(name, factory) {
	    return function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
	      }
	      return result;
	    };
	  }

	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }

	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }

	  function value(name, val) { return factory(name, valueFn(val), false); }

	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }

	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;

	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }

	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);

	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);

	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }

	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          /* jshint -W022 */
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }

	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////

	  function createInternalInjector(cache, factory) {

	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          return cache[serviceName] = factory(serviceName, caller);
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }


	    function injectionArgs(fn, locals, serviceName) {
	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName);

	      for (var i = 0, length = $inject.length; i < length; i++) {
	        var key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
	                                                         getService(key, serviceName));
	      }
	      return args;
	    }

	    function isClass(func) {
	      // IE 9-11 do not support classes and IE9 leaks with the code below.
	      if (msie <= 11) {
	        return false;
	      }
	      // Workaround for MS Edge.
	      // Check https://connect.microsoft.com/IE/Feedback/Details/2211653
	      return typeof func === 'function'
	        && /^(?:class\s|constructor\()/.test(stringifyFn(func));
	    }

	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }

	      var args = injectionArgs(fn, locals, serviceName);
	      if (isArray(fn)) {
	        fn = fn[fn.length - 1];
	      }

	      if (!isClass(fn)) {
	        // http://jsperf.com/angularjs-invoke-apply-vs-switch
	        // #5388
	        return fn.apply(self, args);
	      } else {
	        args.unshift(null);
	        return new (Function.prototype.bind.apply(fn, args))();
	      }
	    }


	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
	      var args = injectionArgs(Type, locals, serviceName);
	      // Empty object at position 0 is ignored for invocation with `new`, but required.
	      args.unshift(null);
	      return new (Function.prototype.bind.apply(ctor, args))();
	    }


	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}

	createInjector.$$annotate = annotate;

	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {

	  var autoScrollingEnabled = true;

	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };

	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;

	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }

	    function getYOffset() {

	      var offset = scroll.yOffset;

	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }

	      return offset;
	    }

	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();

	        var offset = getYOffset();

	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }

	    function scroll(hash) {
	      hash = isString(hash) ? hash : $location.hash();
	      var elm;

	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);

	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);

	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

	      // no element and hash == 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }

	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;

	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }

	    return scroll;
	  }];
	}

	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }

	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}

	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}

	var $$CoreAnimateJsProvider = function() {
	  this.$get = noop;
	};

	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];

	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,

	      push: function(element, event, options, domOperation) {
	        domOperation        && domOperation();

	        options = options || {};
	        options.from        && element.css(options.from);
	        options.to          && element.css(options.to);

	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }

	        var runner = new $$AnimateRunner(); // jshint ignore:line

	        // since there are no animations to run the runner needs to be
	        // notified that the animation call is complete.
	        runner.complete();
	        return runner;
	      }
	    };


	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }

	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });

	          forEach(element, function(elm) {
	            toAdd    && jqLiteAddClass(elm, toAdd);
	            toRemove && jqLiteRemoveClass(elm, toRemove);
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }


	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};

	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);

	      if (classesAdded || classesRemoved) {

	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);

	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};

	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', function($provide) {
	  var provider = this;

	  this.$$registeredAnimations = Object.create(null);

	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
	    }

	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };

	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };

	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      afterElement ? afterElement.after(element) : parentElement.prepend(element);
	    }

	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,

	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,

	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        runner.end && runner.end();
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;

	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];

	var $$AnimateAsyncRunFactoryProvider = function() {
	  this.$get = ['$$rAF', function($$rAF) {
	    var waitQueue = [];

	    function waitForTick(fn) {
	      waitQueue.push(fn);
	      if (waitQueue.length > 1) return;
	      $$rAF(function() {
	        for (var i = 0; i < waitQueue.length; i++) {
	          waitQueue[i]();
	        }
	        waitQueue = [];
	      });
	    }

	    return function() {
	      var passed = false;
	      waitForTick(function() {
	        passed = true;
	      });
	      return function(callback) {
	        passed ? callback() : waitForTick(callback);
	      };
	    };
	  }];
	};

	var $$AnimateRunnerFactoryProvider = function() {
	  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$document', '$timeout',
	       function($q,   $sniffer,   $$animateAsyncRun,   $document,   $timeout) {

	    var INITIAL_STATE = 0;
	    var DONE_PENDING_STATE = 1;
	    var DONE_COMPLETE_STATE = 2;

	    AnimateRunner.chain = function(chain, callback) {
	      var index = 0;

	      next();
	      function next() {
	        if (index === chain.length) {
	          callback(true);
	          return;
	        }

	        chain[index](function(response) {
	          if (response === false) {
	            callback(false);
	            return;
	          }
	          index++;
	          next();
	        });
	      }
	    };

	    AnimateRunner.all = function(runners, callback) {
	      var count = 0;
	      var status = true;
	      forEach(runners, function(runner) {
	        runner.done(onProgress);
	      });

	      function onProgress(response) {
	        status = status && response;
	        if (++count === runners.length) {
	          callback(status);
	        }
	      }
	    };

	    function AnimateRunner(host) {
	      this.setHost(host);

	      var rafTick = $$animateAsyncRun();
	      var timeoutTick = function(fn) {
	        $timeout(fn, 0, false);
	      };

	      this._doneCallbacks = [];
	      this._tick = function(fn) {
	        var doc = $document[0];

	        // the document may not be ready or attached
	        // to the module for some internal tests
	        if (doc && doc.hidden) {
	          timeoutTick(fn);
	        } else {
	          rafTick(fn);
	        }
	      };
	      this._state = 0;
	    }

	    AnimateRunner.prototype = {
	      setHost: function(host) {
	        this.host = host || {};
	      },

	      done: function(fn) {
	        if (this._state === DONE_COMPLETE_STATE) {
	          fn();
	        } else {
	          this._doneCallbacks.push(fn);
	        }
	      },

	      progress: noop,

	      getPromise: function() {
	        if (!this.promise) {
	          var self = this;
	          this.promise = $q(function(resolve, reject) {
	            self.done(function(status) {
	              status === false ? reject() : resolve();
	            });
	          });
	        }
	        return this.promise;
	      },

	      then: function(resolveHandler, rejectHandler) {
	        return this.getPromise().then(resolveHandler, rejectHandler);
	      },

	      'catch': function(handler) {
	        return this.getPromise()['catch'](handler);
	      },

	      'finally': function(handler) {
	        return this.getPromise()['finally'](handler);
	      },

	      pause: function() {
	        if (this.host.pause) {
	          this.host.pause();
	        }
	      },

	      resume: function() {
	        if (this.host.resume) {
	          this.host.resume();
	        }
	      },

	      end: function() {
	        if (this.host.end) {
	          this.host.end();
	        }
	        this._resolve(true);
	      },

	      cancel: function() {
	        if (this.host.cancel) {
	          this.host.cancel();
	        }
	        this._resolve(false);
	      },

	      complete: function(response) {
	        var self = this;
	        if (self._state === INITIAL_STATE) {
	          self._state = DONE_PENDING_STATE;
	          self._tick(function() {
	            self._resolve(response);
	          });
	        }
	      },

	      _resolve: function(response) {
	        if (this._state !== DONE_COMPLETE_STATE) {
	          forEach(this._doneCallbacks, function(fn) {
	            fn(response);
	          });
	          this._doneCallbacks.length = 0;
	          this._state = DONE_COMPLETE_STATE;
	        }
	      }
	    };

	    return AnimateRunner;
	  }];
	};

	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {

	    return function(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = copy(options);
	      }

	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }

	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }

	      /* jshint newcap: false */
	      var closed, runner = new $$AnimateRunner();
	      return {
	        start: run,
	        end: run
	      };

	      function run() {
	        $$rAF(function() {
	          applyAnimationContents();
	          if (!closed) {
	            runner.complete();
	          }
	          closed = true;
	        });
	        return runner;
	      }

	      function applyAnimationContents() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};

	/* global stripHash: true */

	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};

	  self.isMock = false;

	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];

	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }

	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }

	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };

	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////

	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null,
	      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
	        try {
	          return history.state;
	        } catch (e) {
	          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	        }
	      };

	  cacheState();
	  lastHistoryState = cachedState;

	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }

	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;

	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;

	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      if (pendingLocation) {
	        pendingLocation = url;
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,"'");
	    }
	  };

	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };

	  var urlChangeListeners = [],
	      urlChangeInit = false;

	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }

	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;

	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }

	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }

	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }

	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState

	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

	      urlChangeInit = true;
	    }

	    urlChangeListeners.push(callback);
	    return callback;
	  };

	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };

	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;

	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////

	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
	  };

	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };


	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };

	}

	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}

	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {

	  this.$get = function() {
	    var caches = {};

	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
	      }

	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = createMap(),
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = createMap(),
	          freshEnd = null,
	          staleEnd = null;

	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return caches[cacheId] = {

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

	            refresh(lruEntry);
	          }

	          if (!(key in data)) size++;
	          data[key] = value;

	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }

	          return value;
	        },

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            refresh(lruEntry);
	          }

	          return data[key];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);

	            delete lruHash[key];
	          }

	          if (!(key in data)) return;

	          delete data[key];
	          size--;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = createMap();
	          size = 0;
	          lruHash = createMap();
	          freshEnd = staleEnd = null;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      };


	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry != freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd == entry) {
	            staleEnd = entry.n;
	          }

	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }


	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry != prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };


	    return cacheFactory;
	  };
	}

	/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */


	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
	 * or just the `postLink` function (all other properties will have the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `true`, an object or a falsy value:
	 *
	 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created. The new scope rule does not apply for the root of the template
	 * since the root of the template always gets a new scope.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property. Additionally, a controller
	 * alias must be set, either by using `controllerAs: 'myAlias'` or by specifying the alias in the controller
	 * definition: `controller: 'myCtrl as myAlias'`.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default translusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * The controller can provide the following methods that act as life-cycle hooks:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * If the name of the required controller is the same as the local name (the key), the name can be
	 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude`
	 *     parameter of directive controllers, see there for details.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */

	var $compileMinErr = minErr('$compile');

	function UNINITIALIZED_VALUE() {}
	var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();

	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
	  var bindingCache = createMap();

	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;

	    var bindings = createMap();

	    forEach(scope, function(definition, scopeName) {
	      if (definition in bindingCache) {
	        bindings[scopeName] = bindingCache[definition];
	        return;
	      }
	      var match = definition.match(LOCAL_REGEXP);

	      if (!match) {
	        throw $compileMinErr('iscp',
	            "Invalid {3} for directive '{0}'." +
	            " Definition: {... {1}: '{2}' ...}",
	            directiveName, scopeName, definition,
	            (isController ? "controller bindings definition" :
	            "isolate scope definition"));
	      }

	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	      if (match[4]) {
	        bindingCache[definition] = bindings[scopeName];
	      }
	    });

	    return bindings;
	  }

	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (isObject(bindings.bindToController)) {
	      var controller = directive.controller;
	      var controllerAs = directive.controllerAs;
	      if (!controller) {
	        // There is no controller, there may or may not be a controllerAs property
	        throw $compileMinErr('noctrl',
	              "Cannot bind to controller without directive '{0}'s controller.",
	              directiveName);
	      } else if (!identifierForController(controller, controllerAs)) {
	        // There is a controller, but no identifier or controllerAs property
	        throw $compileMinErr('noident',
	              "Cannot bind to controller without identifier for directive '{0}'.",
	              directiveName);
	      }
	    }
	    return bindings;
	  }

	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
	            name);
	    }
	  }

	  function getDirectiveRequire(directive) {
	    var require = directive.require || (directive.controller && directive.name);

	    if (!isArray(require) && isObject(require)) {
	      forEach(require, function(value, key) {
	        var match = value.match(REQUIRE_PREFIX_REGEXP);
	        var name = value.substring(match[0].length);
	        if (!name) require[key] = match[0] + key;
	      });
	    }

	    return require;
	  }

	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	  this.directive = function registerDirective(name, directiveFactory) {
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = getDirectiveRequire(directive);
	                directive.restrict = directive.restrict || 'EA';
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };

	  /**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
	  this.component = function registerComponent(name, options) {
	    var controller = options.controller || function() {};

	    function factory($injector) {
	      function makeInjectable(fn) {
	        if (isFunction(fn) || isArray(fn)) {
	          return function(tElement, tAttrs) {
	            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
	          };
	        } else {
	          return fn;
	        }
	      }

	      var template = (!options.template && !options.templateUrl ? '' : options.template);
	      var ddo = {
	        controller: controller,
	        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
	        template: makeInjectable(template),
	        templateUrl: makeInjectable(options.templateUrl),
	        transclude: options.transclude,
	        scope: {},
	        bindToController: options.bindings || {},
	        restrict: 'E',
	        require: options.require
	      };

	      // Copy annotations (starting with $) over to the DDO
	      forEach(options, function(val, key) {
	        if (key.charAt(0) === '$') ddo[key] = val;
	      });

	      return ddo;
	    }

	    // TODO(pete) remove the following `forEach` before we release 1.6.0
	    // The component-router@0.2.0 looks for the annotations on the controller constructor
	    // Nothing in Angular looks for annotations on the factory function but we can't remove
	    // it from 1.5.x yet.

	    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	    // These could be used by libraries such as the new component router
	    forEach(options, function(val, key) {
	      if (key.charAt(0) === '$') {
	        factory[key] = val;
	        // Don't try to copy over annotations to named controller
	        if (isFunction(controller)) controller[key] = val;
	      }
	    });

	    factory.$inject = ['$injector'];

	    return this.directive(name, factory);
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };


	  var TTL = 10;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
	  this.onChangesTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	      return this;
	    }
	    return TTL;
	  };

	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {

	    var SIMPLE_ATTR_NAME = /^\w/;
	    var specialAttrHolder = window.document.createElement('div');



	    var onChangesTtl = TTL;
	    // The onChanges hooks should all be run together in a single digest
	    // When changes occur, the call to trigger their hooks will be added to this queue
	    var onChangesQueue;

	    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	    function flushOnChangesQueue() {
	      try {
	        if (!(--onChangesTtl)) {
	          // We have hit the TTL limit so reset everything
	          onChangesQueue = undefined;
	          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
	        }
	        // We must run this hook in an apply since the $$postDigest runs outside apply
	        $rootScope.$apply(function() {
	          var errors = [];
	          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
	            try {
	              onChangesQueue[i]();
	            } catch (e) {
	              errors.push(e);
	            }
	          }
	          // Reset the queue to trigger a new schedule next time there is a change
	          onChangesQueue = undefined;
	          if (errors.length) {
	            throw errors;
	          }
	        });
	      } finally {
	        onChangesTtl++;
	      }
	    }


	    function Attributes(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;

	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }

	      this.$$element = element;
	    }

	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }

	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },

	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.

	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;

	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }

	        this[key] = value;

	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }

	        nodeName = nodeName_(this.$$element);

	        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {
	          // sanitize img[srcset] values
	          var result = "";

	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);

	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (" " + trim(rawUris[innerIdx + 1]));
	          }

	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);

	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (" " + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }

	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            if (SIMPLE_ATTR_NAME.test(attrName)) {
	              this.$$element.attr(attrName, value);
	            } else {
	              setSpecialAttr(this.$$element[0], attrName, value);
	            }
	          }
	        }

	        // fire observers
	        var $$observers = this.$$observers;
	        $$observers && forEach($$observers[observer], function(fn) {
	          try {
	            fn(value);
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        });
	      },


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));

	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });

	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };

	    function setSpecialAttr(element, attrName, value) {
	      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	      // so we have to jump through some hoops to get such an attribute
	      // https://github.com/angular/angular.js/pull/13318
	      specialAttrHolder.innerHTML = "<span " + attrName + ">";
	      var attributes = specialAttrHolder.firstChild.attributes;
	      var attribute = attributes[0];
	      // We have to remove the attribute from its container element before we can add it to the destination element
	      attributes.removeNamedItem(attribute.name);
	      attribute.value = value;
	      element.attributes.setNamedItem(attribute);
	    }

	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }


	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol == '{{' && endSymbol  == '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
	    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;

	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];

	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }

	      $element.data('$binding', bindings);
	    } : noop;

	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;

	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;

	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;

	    compile.$$createComment = function(directiveName, comment) {
	      var content = '';
	      if (debugInfoEnabled) {
	        content = ' ' + (directiveName || '') + ': ';
	        if (comment) content += comment + ' ';
	      }
	      return window.document.createComment(content);
	    };

	    return compile;

	    //================================

	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }

	      var NOT_EMPTY = /\S+/;

	      // We can not compile top level text elements since text nodes can be merged and we will
	      // not be able to attach scope data to them, so we will wrap them in <span>
	      for (var i = 0, len = $compileNodes.length; i < len; i++) {
	        var domNode = $compileNodes[i];

	        if (domNode.nodeType === NODE_TYPE_TEXT && domNode.nodeValue.match(NOT_EMPTY) /* non-empty */) {
	          jqLiteWrapNode(domNode, $compileNodes[i] = window.document.createElement('span'));
	        }
	      }

	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        assertArg(scope, 'scope');

	        if (previousCompileContext && previousCompileContext.needsNewScope) {
	          // A parent directive did a replace and a directive on this element asked
	          // for transclusion, which caused us to lose a layer of element on which
	          // we could hold the new transclusion scope, so we will create it manually
	          // here.
	          scope = scope.$parent.$new();
	        }

	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;

	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }

	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }

	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }

	        compile.$$addScopeInfo($linkNode, scope);

	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	        return $linkNode;
	      };
	    }

	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
	      }
	    }

	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();

	        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);

	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;

	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }

	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);

	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }

	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }

	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;

	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;


	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);

	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i+=3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }

	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];

	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	            } else {
	              childScope = scope;
	            }

	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;

	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

	            } else {
	              childBoundTranscludeFn = null;
	            }

	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }

	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
	      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }

	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      }

	      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
	      // so that they are available inside the `controllersBoundTransclude` function
	      var boundSlots = boundTranscludeFn.$$slots = createMap();
	      for (var slotName in transcludeFn.$$slots) {
	        if (transcludeFn.$$slots[slotName]) {
	          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
	        } else {
	          boundSlots[slotName] = null;
	        }
	      }

	      return boundTranscludeFn;
	    }

	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          className;

	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;

	            attr = nAttrs[j];
	            name = attr.name;
	            value = trim(attr.value);

	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }

	            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
	            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
	              attrStartName = name;
	              attrEndName = name.substr(0, name.length - 5) + 'end';
	              name = name.substr(0, name.length - 6);
	            }

	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }

	          // use class as directive
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          if (msie === 11) {
	            // Workaround for #11781
	            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
	              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
	              node.parentNode.removeChild(node.nextSibling);
	            }
	          }
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          try {
	            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	            if (match) {
	              nName = directiveNormalize(match[1]);
	              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[2]);
	              }
	            }
	          } catch (e) {
	            // turns out that under some circumstances IE9 throws errors when one attempts to read
	            // comment's node value.
	            // Just ignore it and continue. (Can't seem to reproduce in test case.)
	          }
	          break;
	      }

	      directives.sort(byPriority);
	      return directives;
	    }

	    /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType == NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }

	      return jqLite(nodes);
	    }

	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }

	    /**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
	    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
	      var compiled;

	      if (eager) {
	        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	      }
	      return function lazyCompilation() {
	        if (!compiled) {
	          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);

	          // Null out all of these references in order to make them eligible for garbage collection
	          // since this is a potentially long lived closure
	          $compileNodes = transcludeFn = previousCompileContext = null;
	        }
	        return compiled.apply(this, arguments);
	      };
	    }

	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};

	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          didScanForMultipleTransclusion = false,
	          mightHaveMultipleTransclusionError = false,
	          directiveValue;

	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;

	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;

	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }

	        if (directiveValue = directive.scope) {

	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }

	          newScopeDirective = newScopeDirective || directive;
	        }

	        directiveName = directive.name;

	        // If we encounter a condition that can result in transclusion on the directive,
	        // then scan ahead in the remaining directives for others that may cause a multiple
	        // transclusion error to be thrown during the compilation process.  If a matching directive
	        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
	        // compile the `transclude` function rather than doing it lazily in order to throw
	        // exceptions at the correct time
	        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
	            || (directive.transclude && !directive.$$tlb))) {
	                var candidateDirective;

	                for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++];) {
	                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
	                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
	                        mightHaveMultipleTransclusionError = true;
	                        break;
	                    }
	                }

	                didScanForMultipleTransclusion = true;
	        }

	        if (!directive.templateUrl && directive.controller) {
	          directiveValue = directive.controller;
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate("'" + directiveName + "' controller",
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }

	        if (directiveValue = directive.transclude) {
	          hasTranscludeDirective = true;

	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }

	          if (directiveValue == 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);

	            // Support: Chrome < 50
	            // https://github.com/angular/angular.js/issues/14041

	            // In the versions of V8 prior to Chrome 50, the document fragment that is created
	            // in the `replaceWith` function is improperly garbage collected despite still
	            // being referenced by the `parentNode` property of all of the child nodes.  By adding
	            // a reference to the fragment via a different property, we can avoid that incorrect
	            // behavior.
	            // TODO: remove this line after Chrome 50 has been released
	            $template[0].$$parentNode = $template[0].parentNode;

	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {

	            var slots = createMap();

	            $template = jqLite(jqLiteClone(compileNode)).contents();

	            if (isObject(directiveValue)) {

	              // We have transclusion slots,
	              // collect them up, compile them and store their transclusion functions
	              $template = [];

	              var slotMap = createMap();
	              var filledSlots = createMap();

	              // Parse the element selectors
	              forEach(directiveValue, function(elementSelector, slotName) {
	                // If an element selector starts with a ? then it is optional
	                var optional = (elementSelector.charAt(0) === '?');
	                elementSelector = optional ? elementSelector.substring(1) : elementSelector;

	                slotMap[elementSelector] = slotName;

	                // We explicitly assign `null` since this implies that a slot was defined but not filled.
	                // Later when calling boundTransclusion functions with a slot name we only error if the
	                // slot is `undefined`
	                slots[slotName] = null;

	                // filledSlots contains `true` for all slots that are either optional or have been
	                // filled. This is used to check that we have not missed any required slots
	                filledSlots[slotName] = optional;
	              });

	              // Add the matching elements into their slot
	              forEach($compileNode.contents(), function(node) {
	                var slotName = slotMap[directiveNormalize(nodeName_(node))];
	                if (slotName) {
	                  filledSlots[slotName] = true;
	                  slots[slotName] = slots[slotName] || [];
	                  slots[slotName].push(node);
	                } else {
	                  $template.push(node);
	                }
	              });

	              // Check for required slots that were not filled
	              forEach(filledSlots, function(filled, slotName) {
	                if (!filled) {
	                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
	                }
	              });

	              for (var slotName in slots) {
	                if (slots[slotName]) {
	                  // Only define a transclusion function if the slot was filled
	                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
	                }
	              }
	            }

	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
	                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
	            childTranscludeFn.$$slots = slots;
	          }
	        }

	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;

	          directiveValue = denormalizeTemplate(directiveValue);

	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  directiveName, '');
	            }

	            replaceWith(jqCollection, $compileNode, compileNode);

	            var newTemplateAttrs = {$attr: {}};

	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

	            if (newIsolateScopeDirective || newScopeDirective) {
	              // The original directive caused the current element to be replaced but this element
	              // also needs to have a new scope, so we need to tell the template directives
	              // that they would need to get their scope from further up, if they require transclusion
	              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }

	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          if (directive.replace) {
	            replaceDirective = directive;
	          }

	          /* jshint -W021 */
	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	          /* jshint +W021 */
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            var context = directive.$$originalDirective || directive;
	            if (isFunction(linkFn)) {
	              addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }

	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }

	      }

	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;

	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;

	      ////////////////////

	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }

	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
	        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
	            attrs, scopeBindingInfo;

	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }

	        controllerScope = scope;
	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        } else if (newScopeDirective) {
	          controllerScope = scope.$parent;
	        }

	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	          // expose the slots on the `$transclude` function
	          transcludeFn.isSlotFilled = function(slotName) {
	            return !!boundTranscludeFn.$$slots[slotName];
	          };
	        }

	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
	        }

	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
	                                        isolateScope.$$isolateBindings,
	                                        newIsolateScopeDirective);
	          if (scopeBindingInfo.removeWatches) {
	            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
	          }
	        }

	        // Initialize bindToController bindings
	        for (var name in elementControllers) {
	          var controllerDirective = controllerDirectives[name];
	          var controller = elementControllers[name];
	          var bindings = controllerDirective.$$bindings.bindToController;

	          if (controller.identifier && bindings) {
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          } else {
	            controller.bindingInfo = {};
	          }

	          var controllerResult = controller();
	          if (controllerResult !== controller.instance) {
	            // If the controller constructor has a return value, overwrite the instance
	            // from setupControllers
	            controller.instance = controllerResult;
	            $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
	            controller.bindingInfo.removeWatches && controller.bindingInfo.removeWatches();
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          }
	        }

	        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	        forEach(controllerDirectives, function(controllerDirective, name) {
	          var require = controllerDirective.require;
	          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
	            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
	          }
	        });

	        // Handle the init and destroy lifecycle hooks on all controllers that have them
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$onChanges)) {
	            try {
	              controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$onInit)) {
	            try {
	              controllerInstance.$onInit();
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$onDestroy)) {
	            controllerScope.$on('$destroy', function callOnDestroyHook() {
	              controllerInstance.$onDestroy();
	            });
	          }
	        });

	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // Trigger $postLink lifecycle hooks
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$postLink)) {
	            controllerInstance.$postLink();
	          }
	        });

	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
	          var transcludeControllers;
	          // No scope passed in:
	          if (!isScope(scope)) {
	            slotName = futureParentElement;
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }

	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          if (slotName) {
	            // slotTranscludeFn can be one of three things:
	            //  * a transclude function - a filled slot
	            //  * `null` - an optional slot that was not filled
	            //  * `undefined` - a slot that was not declared (i.e. invalid)
	            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
	            if (slotTranscludeFn) {
	              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	            } else if (isUndefined(slotTranscludeFn)) {
	              throw $compileMinErr('noslot',
	               'No parent directive that requires a transclusion with slot name "{0}". ' +
	               'Element: {1}',
	               slotName, startingTag($element));
	            }
	          } else {
	            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	          }
	        }
	      }
	    }

	    function getControllers(directiveName, require, $element, elementControllers) {
	      var value;

	      if (isString(require)) {
	        var match = require.match(REQUIRE_PREFIX_REGEXP);
	        var name = require.substring(match[0].length);
	        var inheritType = match[1] || match[3];
	        var optional = match[2] === '?';

	        //If only parents then start at the parent element
	        if (inheritType === '^^') {
	          $element = $element.parent();
	        //Otherwise attempt getting the controller from elementControllers in case
	        //the element is transcluded (and has no data) and to avoid .data if possible
	        } else {
	          value = elementControllers && elementControllers[name];
	          value = value && value.instance;
	        }

	        if (!value) {
	          var dataName = '$' + name + 'Controller';
	          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	        }

	        if (!value && !optional) {
	          throw $compileMinErr('ctreq',
	              "Controller '{0}', required by directive '{1}', can't be found!",
	              name, directiveName);
	        }
	      } else if (isArray(require)) {
	        value = [];
	        for (var i = 0, ii = require.length; i < ii; i++) {
	          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	        }
	      } else if (isObject(require)) {
	        value = {};
	        forEach(require, function(controller, property) {
	          value[property] = getControllers(directiveName, controller, $element, elementControllers);
	        });
	      }

	      return value || null;
	    }

	    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
	      var elementControllers = createMap();
	      for (var controllerKey in controllerDirectives) {
	        var directive = controllerDirectives[controllerKey];
	        var locals = {
	          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	          $element: $element,
	          $attrs: attrs,
	          $transclude: transcludeFn
	        };

	        var controller = directive.controller;
	        if (controller == '@') {
	          controller = attrs[directive.name];
	        }

	        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

	        // For directives with element transclusion the element is a comment.
	        // In this case .data will not attach any data.
	        // Instead, we save the controllers for the element in a local hash and attach to .data
	        // later, once we have the actual element.
	        elementControllers[directive.name] = controllerInstance;
	        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	      }
	      return elementControllers;
	    }

	    // Depending upon the context in which a directive finds itself it might need to have a new isolated
	    // or child scope created. For instance:
	    // * if the directive has been pulled into a template because another directive with a higher priority
	    // asked for element transclusion
	    // * if the directive itself asks for transclusion but it is at the root of a template and the original
	    // element was replaced. See https://github.com/angular/angular.js/issues/12936
	    function markDirectiveScope(directives, isolateScope, newScope) {
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
	      }
	    }

	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          try {
	            directive = directives[i];
	            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	                 directive.restrict.indexOf(location) != -1) {
	              if (startAttrName) {
	                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	              }
	              if (!directive.$$bindings) {
	                var bindings = directive.$$bindings =
	                    parseDirectiveBindings(directive, directive.name);
	                if (isObject(bindings.isolateScope)) {
	                  directive.$$isolateBindings = bindings.isolateScope;
	                }
	              }
	              tDirectives.push(directive);
	              match = directive;
	            }
	          } catch (e) { $exceptionHandler(e); }
	        }
	      }
	      return match;
	    }


	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr,
	          $element = dst.$$element;

	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) != '$') {
	          if (src[key] && src[key] !== value) {
	            value += (key === 'style' ? ';' : ' ') + src[key];
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });

	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        // Check if we already set this attribute in the loop above.
	        // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	        // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	        // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
	          dst[key] = value;

	          if (key !== 'class' && key !== 'style') {
	            dstAttr[key] = srcAttr[key];
	          }
	        }
	      });
	    }


	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;

	      $compileNode.empty();

	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

	          content = denormalizeTemplate(content);

	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  origAsyncDirective.name, templateUrl);
	            }

	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

	            if (isObject(origAsyncDirective.scope)) {
	              // the original directive that caused the template to be loaded async required
	              // an isolate scope
	              markDirectiveScope(templateDirectives, true);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }

	          directives.unshift(derivedSyncDirective);

	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node == compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];

	            if (scope.$$destroyed) continue;

	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;

	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn);
	          }
	          linkQueue = null;
	        });

	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
	        }
	      };
	    }


	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }

	    function assertNoDuplicate(what, previousDirective, directive, element) {

	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }

	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }


	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;

	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }


	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = window.document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }


	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName == "srcdoc") {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      if (attrNormalizedName == "xlinkHref" ||
	          (tag == "form" && attrNormalizedName == "action") ||
	          (tag != "img" && (attrNormalizedName == "src" ||
	                            attrNormalizedName == "ngSrc"))) {
	        return $sce.RESOURCE_URL;
	      }
	    }


	    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
	      var trustedContext = getTrustedContext(node, name);
	      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

	      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

	      // no interpolation found -> ignore
	      if (!interpolateFn) return;


	      if (name === "multiple" && nodeName_(node) === "select") {
	        throw $compileMinErr("selmulti",
	            "Binding to the 'multiple' attribute is not supported. Element: {0}",
	            startingTag(node));
	      }

	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

	                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	                  throw $compileMinErr('nodomevents',
	                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
	                          "ng- versions (such as ng-click instead of onclick) instead.");
	                }

	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }

	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;

	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);

	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue != oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }


	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;

	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] == firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;

	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }

	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }

	      // Append all the `elementsToRemove` to a fragment. This will...
	      // - remove them from the DOM
	      // - allow them to still be traversed with .nextSibling
	      // - allow a single fragment.qSA to fetch all elements being removed
	      var fragment = window.document.createDocumentFragment();
	      for (i = 0; i < removeCount; i++) {
	        fragment.appendChild(elementsToRemove[i]);
	      }

	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite.data(newNode, jqLite.data(firstElementToRemove));

	        // Remove $destroy event listeners from `firstElementToRemove`
	        jqLite(firstElementToRemove).off('$destroy');
	      }

	      // Cleanup any data/listeners on the elements and children.
	      // This includes invoking the $destroy event on any elements with listeners.
	      jqLite.cleanData(fragment.querySelectorAll('*'));

	      // Update the jqLite collection to only contain the `newNode`
	      for (i = 1; i < removeCount; i++) {
	        delete elementsToRemove[i];
	      }
	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }


	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }


	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }


	    // Set up $watches for isolate scope and controller bindings. This process
	    // only occurs for isolate scopes and new scopes with controllerAs.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
	      var removeWatchCollection = [];
	      var initialChanges = {};
	      var changes;
	      forEach(bindings, function initializeBinding(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, or &
	        lastValue,
	        parentGet, parentSet, compare, removeWatch;

	        switch (mode) {

	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = void 0;
	            }
	            attrs.$observe(attrName, function(value) {
	              if (isString(value) || isBoolean(value)) {
	                var oldValue = destination[scopeName];
	                recordChanges(scopeName, value, oldValue);
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            lastValue = attrs[attrName];
	            if (isString(lastValue)) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(lastValue)(scope);
	            } else if (isBoolean(lastValue)) {
	              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	              // the value to boolean rather than a string, so we special case this situation
	              destination[scopeName] = lastValue;
	            }
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	            break;

	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",
	                  attrs[attrName], attrName, directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              return lastValue = parentValue;
	            };
	            parentValueWatch.$stateful = true;
	            if (definition.collection) {
	              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            removeWatchCollection.push(removeWatch);
	            break;

	          case '<':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);

	            var initialValue = destination[scopeName] = parentGet(scope);
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);

	            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
	              if (oldValue === newValue) {
	                if (oldValue === initialValue) return;
	                oldValue = initialValue;
	              }
	              recordChanges(scopeName, newValue, oldValue);
	              destination[scopeName] = newValue;
	            }, parentGet.literal);

	            removeWatchCollection.push(removeWatch);
	            break;

	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;

	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });

	      function recordChanges(key, currentValue, previousValue) {
	        if (isFunction(destination.$onChanges) && currentValue !== previousValue) {
	          // If we have not already scheduled the top level onChangesQueue handler then do so now
	          if (!onChangesQueue) {
	            scope.$$postDigest(flushOnChangesQueue);
	            onChangesQueue = [];
	          }
	          // If we have not already queued a trigger of onChanges for this controller then do so now
	          if (!changes) {
	            changes = {};
	            onChangesQueue.push(triggerOnChangesHook);
	          }
	          // If the has been a change on this property already then we need to reuse the previous value
	          if (changes[key]) {
	            previousValue = changes[key].previousValue;
	          }
	          // Store this change
	          changes[key] = new SimpleChange(previousValue, currentValue);
	        }
	      }

	      function triggerOnChangesHook() {
	        destination.$onChanges(changes);
	        // Now clear the changes so that we schedule onChanges when more changes arrive
	        changes = undefined;
	      }

	      return {
	        initialChanges: initialChanges,
	        removeWatches: removeWatchCollection.length && function removeWatches() {
	          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
	            removeWatchCollection[i]();
	          }
	        }
	      };
	    }
	  }];
	}

	function SimpleChange(previous, current) {
	  this.previousValue = previous;
	  this.currentValue = current;
	}
	SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };


	var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return camelCase(name.replace(PREFIX_REGEXP, ''));
	}

	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */

	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */


	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */



	/**
	 * Closure compiler type information
	 */

	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);

	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token == tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}

	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;

	  if (i <= 1) {
	    return jqNodes;
	  }

	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT) {
	      splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}

	var $controllerMinErr = minErr('$controller');


	var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}


	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
	  this.has = function(name) {
	    return controllers.hasOwnProperty(name);
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };


	  this.$get = ['$injector', '$window', function($injector, $window) {

	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function $controller(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }

	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            "Badly formed controller string '{0}'. " +
	            "Must match `__name__ as __id__` or `__name__`.", expression);
	        }
	        constructor = match[1],
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);

	        assertArgFn(expression, constructor, true);
	      }

	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);

	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }

	        var instantiate;
	        return instantiate = extend(function $controllerInit() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }

	      instance = $injector.instantiate(expression, locals, constructor);

	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }

	      return instance;
	    };

	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
	          name, identifier);
	      }

	      locals.$scope[identifier] = instance;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
	 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
	 * of `$log.error()`.
	 *
	 * ```js
	 *   angular.
	 *     module('exceptionOverwrite', []).
	 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
	 *       return function myExceptionHandler(exception, cause) {
	 *         logErrorsToBackend(exception, cause);
	 *         $log.warn(exception, cause);
	 *       };
	 *     });
	 * ```
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause Optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}

	var $$ForceReflowProvider = function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};

	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var $httpMinErr = minErr('$http');
	var $httpMinErrLegacyFn = function(method) {
	  return function() {
	    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
	  };
	};

	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}


	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */

	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });

	      return parts.join('&');
	    };
	  };
	}

	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');

	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}

	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }

	  return data;
	}

	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}

	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;

	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }

	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }

	  return parsed;
	}


	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;

	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);

	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === void 0) {
	        value = null;
	      }
	      return value;
	    }

	    return headersObj;
	  };
	}


	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }

	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });

	  return data;
	}


	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}


	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],

	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],

	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },

	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',

	    paramSerializer: '$httpParamSerializer'
	  };

	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };

	  var useLegacyPromise = true;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to true. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useLegacyPromiseExtensions = function(value) {
	    if (isDefined(value)) {
	      useLegacyPromise = !!value;
	      return this;
	    }
	    return useLegacyPromise;
	  };

	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];

	  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
	      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

	    var defaultCache = $cacheFactory('$http');

	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];

	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });

	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and will result in
	     * the success callback being called. Any response status code outside of that range is
	     * considered an error status and will result in the error callback being called.
	     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
	     * aborted, e.g. using a `config.timeout`.
	     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
	     * that the outcome (success or error) will be determined by the final response status code.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory($http)` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {

	      if (!isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }

	      if (!isString(requestConfig.url)) {
	        throw minErr('$http')('badreq', 'Http request configuration url must be a string.  Received: {0}', requestConfig.url);
	      }

	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer
	      }, requestConfig);

	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	        $injector.get(config.paramSerializer) : config.paramSerializer;

	      var serverRequest = function(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	                delete headers[header];
	            }
	          });
	        }

	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }

	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      };

	      var chain = [serverRequest, undefined];
	      var promise = $q.when(config);

	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          chain.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          chain.push(interceptor.response, interceptor.responseError);
	        }
	      });

	      while (chain.length) {
	        var thenFn = chain.shift();
	        var rejectFn = chain.shift();

	        promise = promise.then(thenFn, rejectFn);
	      }

	      if (useLegacyPromise) {
	        promise.success = function(fn) {
	          assertArgFn(fn, 'fn');

	          promise.then(function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };

	        promise.error = function(fn) {
	          assertArgFn(fn, 'fn');

	          promise.then(null, function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	      } else {
	        promise.success = $httpMinErrLegacyFn('success');
	        promise.error = $httpMinErrLegacyFn('error');
	      }

	      return promise;

	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        resp.data = transformData(response.data, response.headers, response.status,
	                                  config.transformResponse);
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }

	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};

	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });

	        return processedHeaders;
	      }

	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

	        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);

	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }

	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }

	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	    }

	    $http.pendingRequests = [];

	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');

	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');

	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;


	    return $http;


	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }


	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }


	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          url = buildUrl(config.url, config.paramSerializer(config.params));

	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);


	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }

	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }


	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }

	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType,
	            createApplyHandlers(config.eventHandlers),
	            createApplyHandlers(config.uploadEventHandlers));
	      }

	      return promise;

	      function createApplyHandlers(eventHandlers) {
	        if (eventHandlers) {
	          var applyHandlers = {};
	          forEach(eventHandlers, function(eventHandler, key) {
	            applyHandlers[key] = function(event) {
	              if (useApplyAsync) {
	                $rootScope.$applyAsync(callEventHandler);
	              } else if ($rootScope.$$phase) {
	                callEventHandler();
	              } else {
	                $rootScope.$apply(callEventHandler);
	              }

	              function callEventHandler() {
	                eventHandler(event);
	              }
	            };
	          });
	          return applyHandlers;
	        }
	      }


	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }

	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }

	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }


	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;

	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }

	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }

	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }


	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}

	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
	  }];
	}

	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
	    $browser.$$incOutstandingRequestCount();
	    url = url || $browser.url();

	    if (lowercase(method) == 'jsonp') {
	      var callbackId = '_' + (callbacks.counter++).toString(36);
	      callbacks[callbackId] = function(data) {
	        callbacks[callbackId].data = data;
	        callbacks[callbackId].called = true;
	      };

	      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
	          callbackId, function(status, text) {
	        completeRequest(callback, status, callbacks[callbackId].data, "", text);
	        callbacks[callbackId] = noop;
	      });
	    } else {

	      var xhr = createXhr(method, url);

	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });

	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';

	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;

	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
	        }

	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };

	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };

	      xhr.onerror = requestError;
	      xhr.onabort = requestError;

	      forEach(eventHandlers, function(value, key) {
	          xhr.addEventListener(key, value);
	      });

	      forEach(uploadEventHandlers, function(value, key) {
	        xhr.upload.addEventListener(key, value);
	      });

	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }

	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }

	      xhr.send(isUndefined(post) ? null : post);
	    }

	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }


	    function timeoutRequest() {
	      jsonpDone && jsonpDone();
	      xhr && xhr.abort();
	    }

	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;

	      callback(status, response, headersString, statusText);
	      $browser.$$completeOutstandingRequest(noop);
	    }
	  };

	  function jsonpReq(url, callbackId, done) {
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = "text/javascript";
	    script.src = url;
	    script.async = true;

	    callback = function(event) {
	      removeEventListenerFn(script, "load", callback);
	      removeEventListenerFn(script, "error", callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = "unknown";

	      if (event) {
	        if (event.type === "load" && !callbacks[callbackId].called) {
	          event = { type: "error" };
	        }
	        text = event.type;
	        status = event.type === "error" ? 404 : 200;
	      }

	      if (done) {
	        done(status, text);
	      }
	    };

	    addEventListenerFn(script, "load", callback);
	    addEventListenerFn(script, "error", callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}

	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
	      "interpolations that concatenate multiple expressions when a trusted value is " +
	      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
	};

	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
	};

	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };


	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }

	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }

	    function stringify(value) {
	      if (value == null) { // null || undefined
	        return '';
	      }
	      switch (typeof value) {
	        case 'string':
	          break;
	        case 'number':
	          value = '' + value;
	          break;
	        default:
	          value = toJson(value);
	      }

	      return value;
	    }

	    //TODO: this is the same as the constantWatchDelegate in parse.js
	    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantInterpolateWatch(scope) {
	        unwatch();
	        return constantInterp(scope);
	      }, listener, objectEquality);
	    }

	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @knownIssue
	     * It is currently not possible for an interpolated expression to contain the interpolation end
	     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
	     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
	     *
	     * @knownIssue
	     * All directives and components must use the standard `{{` `}}` interpolation symbols
	     * in their templates. If you change the application interpolation symbols the {@link $compile}
	     * service will attempt to denormalize the standard symbols to the custom symbols.
	     * The denormalization process is not clever enough to know not to replace instances of the standard
	     * symbols where they would not normally be treated as interpolation symbols. For example in the following
	     * code snippet the closing braces of the literal object will get incorrectly denormalized:
	     *
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"}}">
	     * ```
	     *
	     * The workaround is to ensure that such instances are separated by whitespace:
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"} }">
	     * ```
	     *
	     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      // Provide a quick exit and simplified result function for text with no interpolation
	      if (!text.length || text.indexOf(startSymbol) === -1) {
	        var constantInterp;
	        if (!mustHaveExpression) {
	          var unescapedText = unescapeText(text);
	          constantInterp = valueFn(unescapedText);
	          constantInterp.exp = text;
	          constantInterp.expressions = [];
	          constantInterp.$$watchDelegate = constantWatchDelegate;
	        }
	        return constantInterp;
	      }

	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];

	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }

	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }

	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };

	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };

	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);

	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }

	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }

	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }

	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }


	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };


	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };

	    return $interpolate;
	  }];
	}

	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
	       function($rootScope,   $window,   $q,   $$q,   $browser) {
	    var intervals = {};


	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;

	      count = isDefined(count) ? count : 0;

	      promise.$$intervalId = setInterval(function tick() {
	        if (skipApply) {
	          $browser.defer(callback);
	        } else {
	          $rootScope.$evalAsync(callback);
	        }
	        deferred.notify(iteration++);

	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }

	        if (!skipApply) $rootScope.$apply();

	      }, delay);

	      intervals[promise.$$intervalId] = deferred;

	      return promise;

	      function callback() {
	        if (!hasParams) {
	          fn(iteration);
	        } else {
	          fn.apply(null, args);
	        }
	      }
	    }


	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };

	    return interval;
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */

	var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');


	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;

	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }

	  return segments.join('/');
	}

	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);

	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}


	function parseAppUrl(relativeUrl, locationObj) {
	  var prefixed = (relativeUrl.charAt(0) !== '/');
	  if (prefixed) {
	    relativeUrl = '/' + relativeUrl;
	  }
	  var match = urlResolve(relativeUrl);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);

	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}

	function startsWith(haystack, needle) {
	  return haystack.lastIndexOf(needle, 0) === 0;
	}

	/**
	 *
	 * @param {string} base
	 * @param {string} url
	 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
	 *                   the expected string.
	 */
	function stripBaseUrl(base, url) {
	  if (startsWith(url, base)) {
	    return url.substr(base.length);
	  }
	}


	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index == -1 ? url : url.substr(0, index);
	}

	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}


	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}

	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}


	/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = stripBaseUrl(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }

	    parseAppUrl(pathUrl, this);

	    if (!this.$$path) {
	      this.$$path = '/';
	    }

	    this.$$compose();
	  };

	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;

	    if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile == url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
	    var withoutHashUrl;

	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

	      // The rest of the url starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }

	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }

	    parseAppUrl(withoutHashUrl, this);

	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

	    this.$$compose();

	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

	      var firstPathSegmentMatch;

	      //Get the relative path from the input URL.
	      if (startsWith(url, base)) {
	        url = url.replace(base, '');
	      }

	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }

	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };

	  /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) == stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }

	    var rewrittenUrl;
	    var appUrl;

	    if (appBase == stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };

	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };

	}


	var locationPrototype = {

	  /**
	   * Ensure absolute url is initialized.
	   * @private
	   */
	  $$absUrl:'',

	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,

	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,

	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
	  absUrl: locationGetter('$$absUrl'),

	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }

	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');

	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
	  protocol: locationGetter('$$protocol'),

	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
	  host: locationGetter('$$host'),

	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),

	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) == '/' ? path : '/' + path;
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });

	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }

	    this.$$compose();
	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};

	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);

	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }

	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;

	    return this;
	  };
	});


	function locationGetter(property) {
	  return function() {
	    return this[property];
	  };
	}


	function locationGetterSetter(property, preprocess) {
	  return function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }

	    this[property] = preprocess(value);
	    this.$$compose();

	    return this;
	  };
	}


	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */

	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {

	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }

	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }

	      if (isBoolean(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }

	      return this;
	    } else {
	      return html5Mode;
	    }
	  };

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;

	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          "$location in HTML5 mode requires a <base> tag to be present!");
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);

	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);

	    $location.$$state = $browser.state();

	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);

	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;

	        throw e;
	      }
	    }

	    $rootElement.on('click', function(event) {
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then

	      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

	      var elm = jqLite(event.target);

	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }

	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');

	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }

	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;

	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() != $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });


	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }

	    var initializing = true;

	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {

	      if (isUndefined(stripBaseUrl(appBaseNoFile, newUrl))) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }

	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;
	        newUrl = trimEmptyHash(newUrl);
	        $location.$$parse(newUrl);
	        $location.$$state = newState;

	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;

	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;

	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });

	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

	      if (initializing || urlOrStateChanged) {
	        initializing = false;

	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;

	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;

	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }

	      $location.$$replace = false;

	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });

	    return $location;

	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}

	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;

	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };

	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),

	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),

	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),

	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),

	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');

	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      }())
	    };

	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }

	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;

	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) {}

	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }

	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $parseMinErr = minErr('$parse');

	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
	// native objects.
	//
	// See https://docs.angularjs.org/guide/security


	function ensureSafeMemberName(name, fullExpression) {
	  if (name === "__defineGetter__" || name === "__defineSetter__"
	      || name === "__lookupGetter__" || name === "__lookupSetter__"
	      || name === "__proto__") {
	    throw $parseMinErr('isecfld',
	        'Attempting to access a disallowed field in Angular expressions! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}

	function getStringValue(name) {
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	  // to a string. It's not always possible. If `name` is an object and its `toString` method is
	  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	  //
	  // TypeError: Cannot convert object to primitive value
	  //
	  // For performance reasons, we don't catch this error here and allow it to propagate up the call
	  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
	  // such a 'broken' object as a key.
	  return name + '';
	}

	function ensureSafeObject(obj, fullExpression) {
	  // nifty check if obj is Function that is fast and works across iframes and other contexts
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isWindow(obj)
	        obj.window === obj) {
	      throw $parseMinErr('isecwindow',
	          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isElement(obj)
	        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
	      throw $parseMinErr('isecdom',
	          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// block Object so that we can't get hold of dangerous Object.* methods
	        obj === Object) {
	      throw $parseMinErr('isecobj',
	          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    }
	  }
	  return obj;
	}

	var CALL = Function.prototype.call;
	var APPLY = Function.prototype.apply;
	var BIND = Function.prototype.bind;

	function ensureSafeFunction(obj, fullExpression) {
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    } else if (obj === CALL || obj === APPLY || obj === BIND) {
	      throw $parseMinErr('isecff',
	        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    }
	  }
	}

	function ensureSafeAssignContext(obj, fullExpression) {
	  if (obj) {
	    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
	        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
	      throw $parseMinErr('isecaf',
	        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
	    }
	  }
	}

	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


	/////////////////////////////////////////


	/**
	 * @constructor
	 */
	var Lexer = function(options) {
	  this.options = options;
	};

	Lexer.prototype = {
	  constructor: Lexer,

	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];

	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === "'") {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdentifierStart(this.peekMultichar())) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },

	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },

	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },

	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === "string";
	  },

	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },

	  isIdentifierStart: function(ch) {
	    return this.options.isIdentifierStart ?
	        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierStart(ch);
	  },

	  isValidIdentifierStart: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },

	  isIdentifierContinue: function(ch) {
	    return this.options.isIdentifierContinue ?
	        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierContinue(ch);
	  },

	  isValidIdentifierContinue: function(ch, cp) {
	    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
	  },

	  codePointAt: function(ch) {
	    if (ch.length === 1) return ch.charCodeAt(0);
	    /*jshint bitwise: false*/
	    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
	    /*jshint bitwise: true*/
	  },

	  peekMultichar: function() {
	    var ch = this.text.charAt(this.index);
	    var peek = this.peek();
	    if (!peek) {
	      return ch;
	    }
	    var cp1 = ch.charCodeAt(0);
	    var cp2 = peek.charCodeAt(0);
	    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
	      return ch + peek;
	    }
	    return ch;
	  },

	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },

	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },

	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch == '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch == 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) == 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) == 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },

	  readIdent: function() {
	    var start = this.index;
	    this.index += this.peekMultichar().length;
	    while (this.index < this.text.length) {
	      var ch = this.peekMultichar();
	      if (!this.isIdentifierContinue(ch)) {
	        break;
	      }
	      this.index += ch.length;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },

	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};

	var AST = function(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};

	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';
	AST.LocalsExpression = 'LocalsExpression';

	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';

	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);

	    var value = this.program();

	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }

	    return value;
	  },

	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },

	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },

	  filterChain: function() {
	    var left = this.expression();
	    var token;
	    while ((token = this.expect('|'))) {
	      left = this.filter(left);
	    }
	    return left;
	  },

	  expression: function() {
	    return this.assignment();
	  },

	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },

	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },

	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },

	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },

	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },

	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },

	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },

	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },

	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },

	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.selfReferential[this.consume().text]);
	    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
	      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }

	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },

	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

	    while (this.expect(':')) {
	      args.push(this.expression());
	    }

	    return result;
	  },

	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.filterChain());
	      } while (this.expect(','));
	    }
	    return args;
	  },

	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },

	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },

	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');

	    return { type: AST.ArrayExpression, elements: elements };
	  },

	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	          property.computed = false;
	          this.consume(':');
	          property.value = this.expression();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	          property.computed = false;
	          if (this.peek(':')) {
	            this.consume(':');
	            property.value = this.expression();
	          } else {
	            property.value = property.key;
	          }
	        } else if (this.peek('[')) {
	          this.consume('[');
	          property.key = this.expression();
	          this.consume(']');
	          property.computed = true;
	          this.consume(':');
	          property.value = this.expression();
	        } else {
	          this.throwError("invalid key", this.peek());
	        }
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');

	    return {type: AST.ObjectExpression, properties: properties };
	  },

	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },

	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }

	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },

	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },

	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },

	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },

	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },

	  selfReferential: {
	    'this': {type: AST.ThisExpression },
	    '$locals': {type: AST.LocalsExpression }
	  }
	};

	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}

	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}

	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}

	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant && !property.computed;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  case AST.LocalsExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}

	function getInputs(body) {
	  if (body.length != 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}

	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}

	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}

	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}

	function isConstant(ast) {
	  return ast.constant;
	}

	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTCompiler.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      expensiveChecks: expensiveChecks,
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';

	    /* jshint -W054 */
	    var fn = (new Function('$filter',
	        'ensureSafeMemberName',
	        'ensureSafeObject',
	        'ensureSafeFunction',
	        'getStringValue',
	        'ensureSafeAssignContext',
	        'ifDefined',
	        'plus',
	        'text',
	        fnString))(
	          this.$filter,
	          ensureSafeMemberName,
	          ensureSafeObject,
	          ensureSafeFunction,
	          getStringValue,
	          ensureSafeAssignContext,
	          ifDefined,
	          plusFn,
	          expression);
	    /* jshint +W054 */
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  USE: 'use',

	  STRICT: 'strict',

	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },

	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },

	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },

	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },

	  body: function(section) {
	    return this.state[section].body.join('');
	  },

	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression, computed;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      ensureSafeMemberName(ast.name);
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.not(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
	        self.addEnsureSafeObject(intoId);
	      }
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (create && create !== 1) {
	            self.addEnsureSafeAssignContext(left);
	          }
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            self.addEnsureSafeMemberName(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.ensureSafeObject(self.computedMember(left, right));
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            ensureSafeMemberName(ast.property.name);
	            if (create && create !== 1) {
	              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
	              expression = self.ensureSafeObject(expression);
	            }
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            self.addEnsureSafeFunction(right);
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, self.nextId(), undefined, function(argument) {
	                args.push(self.ensureSafeObject(argument));
	              });
	            });
	            if (left.name) {
	              if (!self.state.expensiveChecks) {
	                self.addEnsureSafeObject(left.context);
	              }
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            expression = self.ensureSafeObject(expression);
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      if (!isAssignable(ast.left)) {
	        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
	      }
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
	          self.addEnsureSafeAssignContext(left.context);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      computed = false;
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          computed = true;
	        }
	      });
	      if (computed) {
	        intoId = intoId || this.nextId();
	        this.assign(intoId, '{}');
	        forEach(ast.properties, function(property) {
	          if (property.computed) {
	            left = self.nextId();
	            self.recurse(property.key, left);
	          } else {
	            left = property.key.type === AST.Identifier ?
	                       property.key.name :
	                       ('' + property.key.value);
	          }
	          right = self.nextId();
	          self.recurse(property.value, right);
	          self.assign(self.member(intoId, left, property.computed), right);
	        });
	      } else {
	        forEach(ast.properties, function(property) {
	          self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
	            args.push(self.escape(
	                property.key.type === AST.Identifier ? property.key.name :
	                  ('' + property.key.value)) +
	                ':' + expr);
	          });
	        });
	        expression = '{' + args.join(',') + '}';
	        this.assign(intoId, expression);
	      }
	      recursionFn(intoId || expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn('s');
	      break;
	    case AST.LocalsExpression:
	      this.assign(intoId, 'l');
	      recursionFn('l');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn('v');
	      break;
	    }
	  },

	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },

	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },

	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },

	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },

	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },

	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },

	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },

	  not: function(expression) {
	    return '!(' + expression + ')';
	  },

	  notNull: function(expression) {
	    return expression + '!=null';
	  },

	  nonComputedMember: function(left, right) {
	    var SAFE_IDENTIFIER = /[$_a-zA-Z][$_a-zA-Z0-9]*/;
	    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
	    if (SAFE_IDENTIFIER.test(right)) {
	      return left + '.' + right;
	    } else {
	      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
	    }
	  },

	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },

	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },

	  addEnsureSafeObject: function(item) {
	    this.current().body.push(this.ensureSafeObject(item), ';');
	  },

	  addEnsureSafeMemberName: function(item) {
	    this.current().body.push(this.ensureSafeMemberName(item), ';');
	  },

	  addEnsureSafeFunction: function(item) {
	    this.current().body.push(this.ensureSafeFunction(item), ';');
	  },

	  addEnsureSafeAssignContext: function(item) {
	    this.current().body.push(this.ensureSafeAssignContext(item), ';');
	  },

	  ensureSafeObject: function(item) {
	    return 'ensureSafeObject(' + item + ',text)';
	  },

	  ensureSafeMemberName: function(item) {
	    return 'ensureSafeMemberName(' + item + ',text)';
	  },

	  ensureSafeFunction: function(item) {
	    return 'ensureSafeFunction(' + item + ',text)';
	  },

	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ')');
	  },

	  ensureSafeAssignContext: function(item) {
	    return 'ensureSafeAssignContext(' + item + ',text)';
	  },

	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },

	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },

	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },

	  escape: function(value) {
	    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';

	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },

	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },

	  current: function() {
	    return this.state[this.state.computing];
	  }
	};


	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTInterpreter.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.expression = expression;
	    this.expensiveChecks = expensiveChecks;
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? noop :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  recurse: function(ast, context, create) {
	    var left, right, self = this, args, expression;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      ensureSafeMemberName(ast.name, self.expression);
	      return self.identifier(ast.name,
	                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
	                             context, create, self.expression);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        ensureSafeMemberName(ast.property.name, self.expression);
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create, self.expression) :
	        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            ensureSafeObject(rhs.context, self.expression);
	            ensureSafeFunction(rhs.value, self.expression);
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
	            }
	            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        ensureSafeObject(lhs.value, self.expression);
	        ensureSafeAssignContext(lhs.context);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          args.push({key: self.recurse(property.key),
	                     computed: true,
	                     value: self.recurse(property.value)
	          });
	        } else {
	          args.push({key: property.key.type === AST.Identifier ?
	                          property.key.name :
	                          ('' + property.key.value),
	                     computed: false,
	                     value: self.recurse(property.value)
	          });
	        }
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          if (args[i].computed) {
	            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
	          } else {
	            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	          }
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.LocalsExpression:
	      return function(scope, locals) {
	        return context ? {value: locals} : locals;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },

	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && !(base[name])) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (expensiveChecks) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        ensureSafeMemberName(rhs, expression);
	        if (create && create !== 1) {
	          ensureSafeAssignContext(lhs);
	          if (lhs && !(lhs[rhs])) {
	            lhs[rhs] = {};
	          }
	        }
	        value = lhs[rhs];
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1) {
	        ensureSafeAssignContext(lhs);
	        if (lhs && !(lhs[right])) {
	          lhs[right] = {};
	        }
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};

	/**
	 * @constructor
	 */
	var Parser = function(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(lexer, options);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};

	Parser.prototype = {
	  constructor: Parser,

	  parse: function(text) {
	    return this.astCompiler.compile(text, this.options.expensiveChecks);
	  }
	};

	function isPossiblyDangerousMemberName(name) {
	  return name == 'constructor';
	}

	var objectValueOf = Object.prototype.valueOf;

	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}

	///////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */


	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cacheDefault = createMap();
	  var cacheExpensive = createMap();
	  var literals = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var identStart, identContinue;

	  /**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
	  this.addLiteral = function(literalName, literalValue) {
	    literals[literalName] = literalValue;
	  };

	 /**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensivelly, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
	  this.setIdentifierFns = function(identifierStart, identifierContinue) {
	    identStart = identifierStart;
	    identContinue = identifierContinue;
	    return this;
	  };

	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          expensiveChecks: false,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        },
	        $parseOptionsExpensive = {
	          csp: noUnsafeEval,
	          expensiveChecks: true,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        };
	    var runningChecksEnabled = false;

	    $parse.$$runningExpensiveChecks = function() {
	      return runningChecksEnabled;
	    };

	    return $parse;

	    function $parse(exp, interceptorFn, expensiveChecks) {
	      var parsedExpression, oneTime, cacheKey;

	      expensiveChecks = expensiveChecks || runningChecksEnabled;

	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;

	          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
	          parsedExpression = cache[cacheKey];

	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
	            var lexer = new Lexer(parseOptions);
	            var parser = new Parser(lexer, $filter, parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            if (expensiveChecks) {
	              parsedExpression = expensiveChecksInterceptor(parsedExpression);
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);

	        case 'function':
	          return addInterceptor(exp, interceptorFn);

	        default:
	          return addInterceptor(noop, interceptorFn);
	      }
	    }

	    function expensiveChecksInterceptor(fn) {
	      if (!fn) return fn;
	      expensiveCheckFn.$$watchDelegate = fn.$$watchDelegate;
	      expensiveCheckFn.assign = expensiveChecksInterceptor(fn.assign);
	      expensiveCheckFn.constant = fn.constant;
	      expensiveCheckFn.literal = fn.literal;
	      for (var i = 0; fn.inputs && i < fn.inputs.length; ++i) {
	        fn.inputs[i] = expensiveChecksInterceptor(fn.inputs[i]);
	      }
	      expensiveCheckFn.inputs = fn.inputs;

	      return expensiveCheckFn;

	      function expensiveCheckFn(scope, locals, assign, inputs) {
	        var expensiveCheckOldValue = runningChecksEnabled;
	        runningChecksEnabled = true;
	        try {
	          return fn(scope, locals, assign, inputs);
	        } finally {
	          runningChecksEnabled = expensiveCheckOldValue;
	        }
	      }
	    }

	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }

	      if (typeof newValue === 'object') {

	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);

	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }

	        // fall-through to the primitive equality check
	      }

	      //Primitive or NaN
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }

	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;

	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }

	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }

	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;

	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }

	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }

	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }

	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }, objectEquality);
	    }

	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.call(this, value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);

	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }

	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantWatch(scope) {
	        unwatch();
	        return parsedExpression(scope);
	      }, listener, objectEquality);
	    }

	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;
	      var useInputs = false;

	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;

	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };

	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        useInputs = !parsedExpression.inputs;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }

	      return fn;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	function $QProvider() {

	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler);
	  }];
	}

	function $$QProvider() {
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler);
	  }];
	}

	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler) {
	  var $qMinErr = minErr('$q', TypeError);

	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  var defer = function() {
	    var d = new Deferred();
	    //Necessary to support unbound execution :/
	    d.resolve = simpleBind(d, d.resolve);
	    d.reject = simpleBind(d, d.reject);
	    d.notify = simpleBind(d, d.notify);
	    return d;
	  };

	  function Promise() {
	    this.$$state = { status: 0 };
	  }

	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Deferred();

	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

	      return result.promise;
	    },

	    "catch": function(callback) {
	      return this.then(null, callback);
	    },

	    "finally": function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, true, callback);
	      }, function(error) {
	        return handleCallback(error, false, callback);
	      }, progressBack);
	    }
	  });

	  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
	  function simpleBind(context, fn) {
	    return function(value) {
	      fn.call(context, value);
	    };
	  }

	  function processQueue(state) {
	    var fn, deferred, pending;

	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    for (var i = 0, ii = pending.length; i < ii; ++i) {
	      deferred = pending[i][0];
	      fn = pending[i][state.status];
	      try {
	        if (isFunction(fn)) {
	          deferred.resolve(fn(state.value));
	        } else if (state.status === 1) {
	          deferred.resolve(state.value);
	        } else {
	          deferred.reject(state.value);
	        }
	      } catch (e) {
	        deferred.reject(e);
	        exceptionHandler(e);
	      }
	    }
	  }

	  function scheduleProcessQueue(state) {
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    nextTick(function() { processQueue(state); });
	  }

	  function Deferred() {
	    this.promise = new Promise();
	  }

	  extend(Deferred.prototype, {
	    resolve: function(val) {
	      if (this.promise.$$state.status) return;
	      if (val === this.promise) {
	        this.$$reject($qMinErr(
	          'qcycle',
	          "Expected promise to be resolved with value other than itself '{0}'",
	          val));
	      } else {
	        this.$$resolve(val);
	      }

	    },

	    $$resolve: function(val) {
	      var then;
	      var that = this;
	      var done = false;
	      try {
	        if ((isObject(val) || isFunction(val))) then = val && val.then;
	        if (isFunction(then)) {
	          this.promise.$$state.status = -1;
	          then.call(val, resolvePromise, rejectPromise, simpleBind(this, this.notify));
	        } else {
	          this.promise.$$state.value = val;
	          this.promise.$$state.status = 1;
	          scheduleProcessQueue(this.promise.$$state);
	        }
	      } catch (e) {
	        rejectPromise(e);
	        exceptionHandler(e);
	      }

	      function resolvePromise(val) {
	        if (done) return;
	        done = true;
	        that.$$resolve(val);
	      }
	      function rejectPromise(val) {
	        if (done) return;
	        done = true;
	        that.$$reject(val);
	      }
	    },

	    reject: function(reason) {
	      if (this.promise.$$state.status) return;
	      this.$$reject(reason);
	    },

	    $$reject: function(reason) {
	      this.promise.$$state.value = reason;
	      this.promise.$$state.status = 2;
	      scheduleProcessQueue(this.promise.$$state);
	    },

	    notify: function(progress) {
	      var callbacks = this.promise.$$state.pending;

	      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
	        nextTick(function() {
	          var callback, result;
	          for (var i = 0, ii = callbacks.length; i < ii; i++) {
	            result = callbacks[i][0];
	            callback = callbacks[i][3];
	            try {
	              result.notify(isFunction(callback) ? callback(progress) : progress);
	            } catch (e) {
	              exceptionHandler(e);
	            }
	          }
	        });
	      }
	    }
	  });

	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  var reject = function(reason) {
	    var result = new Deferred();
	    result.reject(reason);
	    return result.promise;
	  };

	  var makePromise = function makePromise(value, resolved) {
	    var result = new Deferred();
	    if (resolved) {
	      result.resolve(value);
	    } else {
	      result.reject(value);
	    }
	    return result.promise;
	  };

	  var handleCallback = function handleCallback(value, isResolved, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return makePromise(e, false);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return makePromise(value, isResolved);
	      }, function(error) {
	        return makePromise(error, false);
	      });
	    } else {
	      return makePromise(value, isResolved);
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */


	  var when = function(value, callback, errback, progressBack) {
	    var result = new Deferred();
	    result.resolve(value);
	    return result.promise.then(callback, errback, progressBack);
	  };

	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;

	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */

	  function all(promises) {
	    var deferred = new Deferred(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};

	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        if (results.hasOwnProperty(key)) return;
	        results[key] = value;
	        if (!(--counter)) deferred.resolve(results);
	      }, function(reason) {
	        if (results.hasOwnProperty(key)) return;
	        deferred.reject(reason);
	      });
	    });

	    if (counter === 0) {
	      deferred.resolve(results);
	    }

	    return deferred.promise;
	  }

	  var $Q = function Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
	    }

	    var deferred = new Deferred();

	    function resolveFn(value) {
	      deferred.resolve(value);
	    }

	    function rejectFn(reason) {
	      deferred.reject(reason);
	    }

	    resolver(resolveFn, rejectFn);

	    return deferred.promise;
	  };

	  // Let's make the instanceof operator work for promises, so that
	  // `new $q(fn) instanceof $q` would evaluate to true.
	  $Q.prototype = Promise.prototype;

	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;

	  return $Q;
	}

	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;

	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;

	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };

	    raf.supported = rafSupported;

	    return raf;
	  }];
	}

	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */


	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */

	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */


	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;

	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };

	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }

	  this.$get = ['$exceptionHandler', '$parse', '$browser',
	      function($exceptionHandler, $parse, $browser) {

	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }

	    function cleanUpScope($scope) {

	      if (msie === 9) {
	        // There is a memory leak in IE9 if all child scopes are not disconnected
	        // completely when a scope is destroyed. So this code will recurse up through
	        // all this scopes children
	        //
	        // See issue https://github.com/angular/angular.js/issues/10706
	        $scope.$$childHead && cleanUpScope($scope.$$childHead);
	        $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
	      }

	      // The code below works around IE9 and V8's memory leaks
	      //
	      // See:
	      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

	      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
	          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
	    }

	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }

	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */

	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */

	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */

	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;

	        parent = parent || this;

	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }

	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

	        return child;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);



	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);

	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);

	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);

	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);

	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };

	        lastDirtyWatch = null;

	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }

	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);

	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;

	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }

	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }

	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });

	        function watchGroupAction() {
	          changeReactionScheduled = false;

	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }

	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;

	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();

	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);

	          $scope.names.pop();
	          $scope.$digest();

	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;

	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;

	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;

	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;

	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }

	            newLength = newValue.length;

	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];

	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];

	                if (key in oldValue) {
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }

	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }

	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }

	        return this.$watch(changeDetector, $watchCollectionAction);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last, fn, get,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, asyncTask;

	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();

	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }

	        lastDirtyWatch = null;

	        do { // "while dirty" loop
	          dirty = false;
	          current = target;

	          // It's safe for asyncQueuePosition to be a local variable here because this loop can't
	          // be reentered recursively. Calling $digest from a function passed to $applyAsync would
	          // lead to a '$digest already in progress' error.
	          for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
	            try {
	              asyncTask = asyncQueue[asyncQueuePosition];
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }
	          asyncQueue.length = 0;

	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    get = watch.get;
	                    if ((value = get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (typeof value === 'number' && typeof last === 'number'
	                               && isNaN(value) && isNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      fn = watch.fn;
	                      fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }

	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));

	          // `break traverseScopesLoop;` takes us to here

	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }

	        } while (dirty || asyncQueue.length);

	        clearPhase();

	        // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
	        while (postDigestQueuePosition < postDigestQueue.length) {
	          try {
	            postDigestQueue[postDigestQueuePosition++]();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	        postDigestQueue.length = postDigestQueuePosition = 0;
	      },


	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;

	        this.$broadcast('$destroy');
	        this.$$destroyed = true;

	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }

	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }

	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};

	        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	        this.$$nextSibling = null;
	        cleanUpScope(this);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;

	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }

	        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
	      },

	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            throw e;
	          }
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        expr && applyAsyncQueue.push($applyAsyncExpression);
	        expr = $parse(expr);
	        scheduleApplyAsync();

	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);

	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));

	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;

	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {

	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);

	        event.currentScope = null;

	        return event;
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };

	        if (!target.$$listenerCount[name]) return event;

	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;

	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }

	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }

	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }

	        event.currentScope = null;
	        return event;
	      }
	    };

	    var $rootScope = new Scope();

	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

	    var postDigestQueuePosition = 0;

	    return $rootScope;


	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }

	      $rootScope.$$phase = phase;
	    }

	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }

	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }

	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;

	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }

	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}

	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }

	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */


	// the implementation is in angular.bootstrap

	/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };


	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };

	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $sceMinErr = minErr('$sce');

	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};

	// Helper functions follow.

	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace('\\*\\*', '.*').
	                  replace('\\*', '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}


	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}


	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */

	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */

	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;

	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */

	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };

	  this.$get = ['$injector', function($injector) {

	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };

	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }


	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }

	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }

	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }

	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};

	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }

	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}


	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */

	/* jshint maxlen: false*/

	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	/* jshint maxlen: 100 */

	function $SceProvider() {
	  var enabled = true;

	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };


	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */

	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }

	    var sce = shallowCopy(SCE_CONTEXTS);

	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;

	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }

	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };

	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;

	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[camelCase("parse_as_" + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[camelCase("get_trusted_" + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[camelCase("trust_as_" + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });

	    return sce;
	  }];
	}

	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        // Chrome Packaged Apps are not allowed to access `history.pushState`. They can be detected by
	        // the presence of `chrome.app.runtime` (see https://developer.chrome.com/apps/api_index)
	        isChromePackagedApp = $window.chrome && $window.chrome.app && $window.chrome.app.runtime,
	        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        vendorPrefix,
	        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false,
	        match;

	    if (bodyStyle) {
	      for (var prop in bodyStyle) {
	        if (match = vendorRegex.exec(prop)) {
	          vendorPrefix = match[0];
	          vendorPrefix = vendorPrefix[0].toUpperCase() + vendorPrefix.substr(1);
	          break;
	        }
	      }

	      if (!vendorPrefix) {
	        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
	      }

	      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
	      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

	      if (android && (!transitions ||  !animations)) {
	        transitions = isString(bodyStyle.webkitTransition);
	        animations = isString(bodyStyle.webkitAnimation);
	      }
	    }


	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904

	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      // jshint -W018
	      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
	      // jshint +W018
	      hasEvent: function(event) {
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie <= 11) return false;

	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }

	        return eventSupport[event];
	      },
	      csp: csp(),
	      vendorPrefix: vendorPrefix,
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}

	var $templateRequestMinErr = minErr('$compile');

	/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
	function $TemplateRequestProvider() {

	  var httpOptions;

	  /**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
	  this.httpOptions = function(val) {
	    if (val) {
	      httpOptions = val;
	      return this;
	    }
	    return httpOptions;
	  };

	  /**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
	  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {

	    function handleRequestFn(tpl, ignoreRequestError) {
	      handleRequestFn.totalPendingRequests++;

	      // We consider the template cache holds only trusted templates, so
	      // there's no need to go through whitelisting again for keys that already
	      // are included in there. This also makes Angular accept any script
	      // directive, no matter its name. However, we still need to unwrap trusted
	      // types.
	      if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
	        tpl = $sce.getTrustedResourceUrl(tpl);
	      }

	      var transformResponse = $http.defaults && $http.defaults.transformResponse;

	      if (isArray(transformResponse)) {
	        transformResponse = transformResponse.filter(function(transformer) {
	          return transformer !== defaultHttpResponseTransform;
	        });
	      } else if (transformResponse === defaultHttpResponseTransform) {
	        transformResponse = null;
	      }

	      return $http.get(tpl, extend({
	          cache: $templateCache,
	          transformResponse: transformResponse
	        }, httpOptions))
	        ['finally'](function() {
	          handleRequestFn.totalPendingRequests--;
	        })
	        .then(function(response) {
	          $templateCache.put(tpl, response.data);
	          return response.data;
	        }, handleError);

	      function handleError(resp) {
	        if (!ignoreRequestError) {
	          throw $templateRequestMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
	            tpl, resp.status, resp.statusText);
	        }
	        return $q.reject(resp);
	      }
	    }

	    handleRequestFn.totalPendingRequests = 0;

	    return handleRequestFn;
	  }];
	}

	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {

	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};

	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) != -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };

	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };

	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };

	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };

	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };

	    return testability;
	  }];
	}

	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

	    var deferreds = {};


	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }

	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;

	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        }
	        finally {
	          delete deferreds[promise.$$timeoutId];
	        }

	        if (!skipApply) $rootScope.$apply();
	      }, delay);

	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };

	    return timeout;
	  }];
	}

	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = window.document.createElement("a");
	var originUrl = urlResolve(window.location.href);


	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;

	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }

	  urlParsingNode.setAttribute('href', href);

	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}

	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}

	/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}

	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';

	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }

	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';

	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};

	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}

	$$CookieReader.$inject = ['$document'];

	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}

	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */

	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */

	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	function $FilterProvider($provide) {
	  var suffix = 'Filter';

	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;

	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];

	  ////////////////////////////////////////

	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */

	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}

	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	function filterFilter() {
	  return function(array, expression, comparator) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }

	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;

	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        //jshint -W086
	      case 'object':
	        //jshint +W086
	        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }

	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}

	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
	  var predicateFn;

	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }

	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }

	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression.$, comparator, false);
	    }
	    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
	  };

	  return predicateFn;
	}

	function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);

	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
	    });
	  }

	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }

	          var matchAnyProperty = key === '$';
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	      break;
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}

	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}

	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';

	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }

	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }

	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}

	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {

	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}

	/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
	function parse(numStr) {
	  var exponent = 0, digits, numberOfIntegerDigits;
	  var i, j, zeros;

	  // Decimal point?
	  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
	    numStr = numStr.replace(DECIMAL_SEP, '');
	  }

	  // Exponential form?
	  if ((i = numStr.search(/e/i)) > 0) {
	    // Work out the exponent.
	    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
	    numberOfIntegerDigits += +numStr.slice(i + 1);
	    numStr = numStr.substring(0, i);
	  } else if (numberOfIntegerDigits < 0) {
	    // There was no decimal point or exponent so it is an integer.
	    numberOfIntegerDigits = numStr.length;
	  }

	  // Count the number of leading zeros.
	  for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++) {/* jshint noempty: false */}

	  if (i == (zeros = numStr.length)) {
	    // The digits are all zero.
	    digits = [0];
	    numberOfIntegerDigits = 1;
	  } else {
	    // Count the number of trailing zeros
	    zeros--;
	    while (numStr.charAt(zeros) == ZERO_CHAR) zeros--;

	    // Trailing zeros are insignificant so ignore them
	    numberOfIntegerDigits -= i;
	    digits = [];
	    // Convert string to array of digits without leading/trailing zeros.
	    for (j = 0; i <= zeros; i++, j++) {
	      digits[j] = +numStr.charAt(i);
	    }
	  }

	  // If the number overflows the maximum allowed digits then use an exponent.
	  if (numberOfIntegerDigits > MAX_DIGITS) {
	    digits = digits.splice(0, MAX_DIGITS - 1);
	    exponent = numberOfIntegerDigits - 1;
	    numberOfIntegerDigits = 1;
	  }

	  return { d: digits, e: exponent, i: numberOfIntegerDigits };
	}

	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
	    var digits = parsedNumber.d;
	    var fractionLen = digits.length - parsedNumber.i;

	    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;

	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.i;
	    var digit = digits[roundAt];

	    if (roundAt > 0) {
	      // Drop fractional digits beyond `roundAt`
	      digits.splice(Math.max(parsedNumber.i, roundAt));

	      // Set non-fractional digits beyond `roundAt` to 0
	      for (var j = roundAt; j < digits.length; j++) {
	        digits[j] = 0;
	      }
	    } else {
	      // We rounded to zero so reset the parsedNumber
	      fractionLen = Math.max(0, fractionLen);
	      parsedNumber.i = 1;
	      digits.length = Math.max(1, roundAt = fractionSize + 1);
	      digits[0] = 0;
	      for (var i = 1; i < roundAt; i++) digits[i] = 0;
	    }

	    if (digit >= 5) {
	      if (roundAt - 1 < 0) {
	        for (var k = 0; k > roundAt; k--) {
	          digits.unshift(0);
	          parsedNumber.i++;
	        }
	        digits.unshift(1);
	        parsedNumber.i++;
	      } else {
	        digits[roundAt - 1]++;
	      }
	    }

	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);


	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function(carry, d, i, digits) {
	      d = d + carry;
	      digits[i] = d % 10;
	      return Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	      digits.unshift(carry);
	      parsedNumber.i++;
	    }
	}

	/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {

	  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';

	  var isInfinity = !isFinite(number);
	  var isZero = false;
	  var numStr = Math.abs(number) + '',
	      formattedText = '',
	      parsedNumber;

	  if (isInfinity) {
	    formattedText = '\u221e';
	  } else {
	    parsedNumber = parse(numStr);

	    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);

	    var digits = parsedNumber.d;
	    var integerLen = parsedNumber.i;
	    var exponent = parsedNumber.e;
	    var decimals = [];
	    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);

	    // pad zeros for small numbers
	    while (integerLen < 0) {
	      digits.unshift(0);
	      integerLen++;
	    }

	    // extract decimals digits
	    if (integerLen > 0) {
	      decimals = digits.splice(integerLen, digits.length);
	    } else {
	      decimals = digits;
	      digits = [0];
	    }

	    // format the integer digits with grouping separators
	    var groups = [];
	    if (digits.length >= pattern.lgSize) {
	      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
	    }
	    while (digits.length > pattern.gSize) {
	      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
	    }
	    if (digits.length) {
	      groups.unshift(digits.join(''));
	    }
	    formattedText = groups.join(groupSep);

	    // append the decimal digits
	    if (decimals.length) {
	      formattedText += decimalSep + decimals.join('');
	    }

	    if (exponent) {
	      formattedText += 'e+' + exponent;
	    }
	  }
	  if (number < 0 && !isZero) {
	    return pattern.negPre + formattedText + pattern.negSuf;
	  } else {
	    return pattern.posPre + formattedText + pattern.posSuf;
	  }
	}

	function padNumber(num, digits, trim, negWrap) {
	  var neg = '';
	  if (num < 0 || (negWrap && num <= 0)) {
	    if (negWrap) {
	      num = -num + 1;
	    } else {
	      num = -num;
	      neg = '-';
	    }
	  }
	  num = '' + num;
	  while (num.length < digits) num = ZERO_CHAR + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}


	function dateGetter(name, size, offset, trim, negWrap) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset == -12) value = 12;
	    return padNumber(value, size, trim, negWrap);
	  };
	}

	function dateStrGetter(name, shortForm, standAlone) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
	    var get = uppercase(propPrefix + name);

	    return formats[get][value];
	  };
	}

	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? "+" : "";

	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);

	  return paddedZone;
	}

	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}

	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}

	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);

	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

	      return padNumber(result, size);
	   };
	}

	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}

	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}

	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}

	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4, 0, false, true),
	    yy: dateGetter('FullYear', 2, 0, true, true),
	     y: dateGetter('FullYear', 1, 0, false, true),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	  LLLL: dateStrGetter('Month', false, true),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};

	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^\-?\d+$/;

	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {


	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if (match = string.match(R_ISO8601_STR)) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;

	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }


	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;

	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }

	    if (isNumber(date)) {
	      date = new Date(date);
	    }

	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }

	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }

	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value === "''" ? "'" : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
	    });

	    return text;
	  };
	}


	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}


	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);


	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);

	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements are
	 * taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
	 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
	 * it is converted to a string.
	 *
	 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
	 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
	 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
	 *     less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNaN(limit)) return input;

	    if (isNumber(input)) input = input.toString();
	    if (!isArrayLike(input)) return input;

	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;

	    if (limit >= 0) {
	      return sliceFn(input, begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return sliceFn(input, limit, input.length);
	      } else {
	        return sliceFn(input, Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}

	function sliceFn(input, begin, end) {
	  if (isString(input)) return input.slice(begin, end);

	  return slice.call(input, begin, end);
	}

	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
	 * function based on the values computed using the `expression` predicate.
	 *
	 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
	 * `[{id: 'bar'}, {id: 'foo'}]`.
	 *
	 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
	 * String, etc).
	 *
	 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
	 * for the preceeding one. The `expression` is evaluated against each item and the output is used
	 * for comparing with other items.
	 *
	 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
	 * ascending order.
	 *
	 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
	 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
	 * strings alphabetically).
	 *
	 * ### Under the hood
	 *
	 * Ordering the specified `collection` happens in two phases:
	 *
	 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
	 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
	 *    through a predicate that extracts the value of the `label` property, would be transformed to:
	 *    ```
	 *    {
	 *      value: 'foo',
	 *      type: 'string',
	 *      index: ...
	 *    }
	 *    ```
	 * 2. The comparator function is used to sort the items, based on the derived values, types and
	 *    indices.
	 *
	 * If you use a custom comparator, it will be called with pairs of objects of the form
	 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
	 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
	 * second, or `1` otherwise.
	 *
	 * In order to ensure that the sorting will be deterministic across platforms, if none of the
	 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
	 * dummy predicate that returns the item's index as `value`.
	 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
	 *
	 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
	 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
	 * it to the comparator. The following rules govern the conversion:
	 *
	 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
	 *    used instead.<br />
	 *    (If the object has a `valueOf()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
	 *    returns a primitive, its return value will be used instead.<br />
	 *    (If the object has a `toString()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 3. No conversion; the object itself is used.
	 *
	 * ### The default comparator
	 *
	 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
	 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
	 * using their index in the original collection, and sorts values of different types by type.
	 *
	 * More specifically, it follows these steps to determine the relative order of items:
	 *
	 * 1. If the compared values are of different types, compare the types themselves alphabetically.
	 * 2. If both values are of type `string`, compare them alphabetically in a case- and
	 *    locale-insensitive way.
	 * 3. If both values are objects, compare their indices instead.
	 * 4. Otherwise, return:
	 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
	 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
	 *    -  `1`, otherwise.
	 *
	 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
	 *           saved as numbers and not strings.
	 *
	 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
	 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
	 *    predicates) to be used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `Function`: A getter function. This function will be called with each item as argument and
	 *      the return value will be used for sorting.
	 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
	 *      result will be used for sorting. For example, use `'label'` to sort by a property called
	 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
	 *      property.<br />
	 *      (The result of a constant expression is interpreted as a property name to be used for
	 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
	 *      property called `special name`.)<br />
	 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
	 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
	 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
	 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
	 *      relative order of two items, the next predicate is used as a tie-breaker.
	 *
	 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse - If `true`, reverse the sorting order.
	 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
	 *    value pairs. If omitted, the built-in comparator will be used.
	 *
	 * @returns {Array} - The sorted array.
	 *
	 *
	 * @example
	 * ### Ordering a table with `ngRepeat`
	 *
	 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
	 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
	 * it defaults to the built-in comparator.
	 *
	   <example name="orderBy-static" module="orderByExample1">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friends">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample1', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var names = element.all(by.repeater('friends').column('friend.name'));

	       it('should sort friends by age in reverse order', function() {
	         expect(names.get(0).getText()).toBe('Adam');
	         expect(names.get(1).getText()).toBe('Julie');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('John');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Changing parameters dynamically
	 *
	 * All parameters can be changed dynamically. The next example shows how you can make the columns of
	 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
	 *
	   <example name="orderBy-dynamic" module="orderByExample2">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample2', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];

	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = friends;

	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }

	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));

	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');

	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });

	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });

	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using `orderBy` inside a controller
	 *
	 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
	 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
	 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
	 *
	   <example name="orderBy-call-manually" module="orderByExample3">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="sortBy(null)">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample3', [])
	         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];

	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);

	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
	                 ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }

	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));

	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');

	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });

	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');

	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });

	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');

	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using a custom comparator
	 *
	 * If you have very specific requirements about the way items are sorted, you can pass your own
	 * comparator function. For example, you might need to compare some strings in a locale-sensitive
	 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
	 * argument - passing `false` retains the default sorting order, i.e. ascending.)
	 *
	   <example name="orderBy-custom-comparator" module="orderByExample4">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <div class="friends-container custom-comparator">
	           <h3>Locale-sensitive Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	         <div class="friends-container default-comparator">
	           <h3>Default Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample4', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   favoriteLetter: 'Ä'},
	             {name: 'Mary',   favoriteLetter: 'Ü'},
	             {name: 'Mike',   favoriteLetter: 'Ö'},
	             {name: 'Adam',   favoriteLetter: 'H'},
	             {name: 'Julie',  favoriteLetter: 'Z'}
	           ];

	           $scope.localeSensitiveComparator = function(v1, v2) {
	             // If we don't get strings, just compare by index
	             if (v1.type !== 'string' || v2.type !== 'string') {
	               return (v1.index < v2.index) ? -1 : 1;
	             }

	             // Compare strings alphabetically, taking locale into account
	             return v1.value.localeCompare(v2.value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends-container {
	         display: inline-block;
	         margin: 0 30px;
	       }

	       .friends {
	         border-collapse: collapse;
	       }

	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var container = element(by.css('.custom-comparator'));
	       var names = container.all(by.repeater('friends').column('friend.name'));

	       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
	         expect(names.get(0).getText()).toBe('John');
	         expect(names.get(1).getText()).toBe('Adam');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 *
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder, compareFn) {

	    if (array == null) return array;
	    if (!isArrayLike(array)) {
	      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
	    }

	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

	    var predicates = processPredicates(sortPredicate);

	    var descending = reverseOrder ? -1 : 1;

	    // Define the `compare()` function. Use a default comparator if none is specified.
	    var compare = isFunction(compareFn) ? compareFn : defaultCompare;

	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });

	    return array;

	    function getComparisonObject(value, index) {
	      // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
	      // This will be used to keep the sort stable when none of the input predicates can
	      // distinguish between two elements.
	      return {
	        value: value,
	        tieBreaker: {value: index, type: 'number', index: index},
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }

	    function doComparison(v1, v2) {
	      for (var i = 0, ii = predicates.length; i < ii; i++) {
	        var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
	        if (result) {
	          return result * predicates[i].descending * descending;
	        }
	      }

	      return compare(v1.tieBreaker, v2.tieBreaker) * descending;
	    }
	  };

	  function processPredicates(sortPredicates) {
	    return sortPredicates.map(function(predicate) {
	      var descending = 1, get = identity;

	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
	          descending = predicate.charAt(0) == '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return {get: get, descending: descending};
	    });
	  }

	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }

	  function objectValue(value) {
	    // If `valueOf` is a valid function use that
	    if (isFunction(value.valueOf)) {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }

	    return value;
	  }

	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'object') {
	      value = objectValue(value);
	    }
	    return {value: value, type: type, index: index};
	  }

	  function defaultCompare(v1, v2) {
	    var result = 0;
	    var type1 = v1.type;
	    var type2 = v2.type;

	    if (type1 === type2) {
	      var value1 = v1.value;
	      var value2 = v2.value;

	      if (type1 === 'string') {
	        // Compare strings case-insensitively
	        value1 = value1.toLowerCase();
	        value2 = value2.toLowerCase();
	      } else if (type1 === 'object') {
	        // For basic objects, use the position of the object
	        // in the collection instead of the value
	        if (isObject(value1)) value1 = v1.index;
	        if (isObject(value2)) value2 = v2.index;
	      }

	      if (value1 !== value2) {
	        result = value1 < value2 ? -1 : 1;
	      }
	    } else {
	      result = type1 < type2 ? -1 : 1;
	    }

	    return result;
	  }
	}

	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}

	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;

	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readOnly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readOnly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */

	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */

	var ngAttributeAliasDirectives = {};

	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName == "multiple") return;

	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }

	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;

	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }

	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});

	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set("ngPattern", new RegExp(match[1], match[2]));
	            return;
	          }
	        }

	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});

	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;

	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }

	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }

	          attr.$set(name, value);

	          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // we use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});

	/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	SUBMITTED_CLASS = 'ng-submitted';

	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}

	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController(element, attrs, $scope, $animate, $interpolate) {
	  var form = this,
	      controls = [];

	  // init state
	  form.$error = {};
	  form.$$success = {};
	  form.$pending = undefined;
	  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
	  form.$dirty = false;
	  form.$pristine = true;
	  form.$valid = true;
	  form.$invalid = false;
	  form.$submitted = false;
	  form.$$parentForm = nullFormCtrl;

	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  form.$rollbackViewValue = function() {
	    forEach(controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  form.$commitViewValue = function() {
	    forEach(controls, function(control) {
	      control.$commitViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  form.$addControl = function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    controls.push(control);

	    if (control.$name) {
	      form[control.$name] = control;
	    }

	    control.$$parentForm = form;
	  };

	  // Private API: rename a form control
	  form.$$renameControl = function(control, newName) {
	    var oldName = control.$name;

	    if (form[oldName] === control) {
	      delete form[oldName];
	    }
	    form[newName] = control;
	    control.$name = newName;
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  form.$removeControl = function(control) {
	    if (control.$name && form[control.$name] === control) {
	      delete form[control.$name];
	    }
	    forEach(form.$pending, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$error, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$$success, function(value, name) {
	      form.$setValidity(name, null, control);
	    });

	    arrayRemove(controls, control);
	    control.$$parentForm = nullFormCtrl;
	  };


	  /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: element,
	    set: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        object[property] = [controller];
	      } else {
	        var index = list.indexOf(controller);
	        if (index === -1) {
	          list.push(controller);
	        }
	      }
	    },
	    unset: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        return;
	      }
	      arrayRemove(list, controller);
	      if (list.length === 0) {
	        delete object[property];
	      }
	    },
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  form.$setDirty = function() {
	    $animate.removeClass(element, PRISTINE_CLASS);
	    $animate.addClass(element, DIRTY_CLASS);
	    form.$dirty = true;
	    form.$pristine = false;
	    form.$$parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  form.$setPristine = function() {
	    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    form.$dirty = false;
	    form.$pristine = true;
	    form.$submitted = false;
	    forEach(controls, function(control) {
	      control.$setPristine();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  form.$setUntouched = function() {
	    forEach(controls, function(control) {
	      control.$setUntouched();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  form.$setSubmitted = function() {
	    $animate.addClass(element, SUBMITTED_CLASS);
	    form.$submitted = true;
	    form.$$parentForm.$setSubmitted();
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */

	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];

	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });

	                event.preventDefault();
	              };

	              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }

	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);

	            var setter = nameAttr ? getSetter(controller.$name) : noop;

	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };

	    return formDirective;

	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};

	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);

	/* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  ngModelMinErr: false,
	*/

	// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
	// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        555555555555555555555555    666     77777777     8888888     999
	var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
	/* jshint maxlen:220 */
	var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
	/* jshint maxlen:200 */
	var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

	var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
	var PARTIAL_VALIDATION_TYPES = createMap();
	forEach('date,datetime-local,month,time,week'.split(','), function(type) {
	  PARTIAL_VALIDATION_TYPES[type] = true;
	});

	var inputType = {

	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <code>text = {{example.text}}</code><br/>
	           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
	           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
	           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
	           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,

	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));

	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),

	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),

	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),

	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),

	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));

	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,


	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,


	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,


	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));

	            expect(color.getText()).toContain('blue');

	            element.all(by.model('color.name')).get(0).click();

	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,


	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));

	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');

	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();

	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,

	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};

	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}

	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}

	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);

	  // In composition mode, users are still inputing intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;

	    element.on('compositionstart', function() {
	      composing = true;
	    });

	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }

	  var timeout;

	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;

	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }

	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };

	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };

	    element.on('keydown', function(event) {
	      var key = event.keyCode;

	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

	      deferListener(event, this, this.value);
	    });

	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }

	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);

	  // Some native input types (date-family) have the ability to change validity without
	  // firing any input/change events.
	  // For these event types, when native validators are present and the browser supports the type,
	  // check for validity changes on various DOM events.
	  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
	    element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
	      if (!timeout) {
	        var validity = this[VALIDITY_STATE_PROPERTY];
	        var origBadInput = validity.badInput;
	        var origTypeMismatch = validity.typeMismatch;
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
	            listener(ev);
	          }
	        });
	      }
	    });
	  }

	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}

	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }

	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;

	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }

	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }

	  return NaN;
	}

	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;

	    if (isDate(iso)) {
	      return iso;
	    }

	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);

	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }

	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }

	    return NaN;
	  };
	}

	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
	    var previousDate;

	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });

	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });

	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }

	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}

	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      return validity.badInput || validity.typeMismatch ? undefined : value;
	    });
	  }
	}

	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });

	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });

	  if (isDefined(attr.min) || attr.ngMin) {
	    var minVal;
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };

	    attr.$observe('min', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }

	  if (isDefined(attr.max) || attr.ngMax) {
	    var maxVal;
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };

	    attr.$observe('max', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}

	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}

	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}

	function radioInputType(scope, element, attr, ctrl) {
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }

	  var listener = function(ev) {
	    if (element[0].checked) {
	      ctrl.$setViewValue(attr.value, ev && ev.type);
	    }
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    var value = attr.value;
	    element[0].checked = (value == ctrl.$viewValue);
	  };

	  attr.$observe('value', ctrl.$render);
	}

	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}

	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };

	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };

	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });

	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}


	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */


	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];



	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          attr.$set('value', scope.$eval(attr.ngValue));
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            attr.$set('value', value);
	          });
	        };
	      }
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
	        // Unwrap the value to compare the actual inner safe value, not the wrapper object.
	        return $sce.valueOf(val);
	      });
	      $compile.$$addBindingClass(tElement);

	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);

	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
	          var value = ngBindHtmlGetter(scope);
	          element.html($sce.getTrustedHtml(value) || '');
	        });
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});

	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;

	        scope.$watch(attr[name], ngClassWatchAction, true);

	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });


	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            // jshint bitwise: false
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              mod === selector ?
	                addClasses(classes) :
	                removeClasses(classes);
	            }
	          });
	        }

	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }

	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }

	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }

	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }

	        function ngClassWatchAction(newVal) {
	          // jshint bitwise: false
	          if (selector === true || (scope.$index & 1) === selector) {
	          // jshint bitwise: true
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          if (isArray(newVal)) {
	            oldVal = newVal.map(function(v) { return shallowCopy(v); });
	          } else {
	            oldVal = shallowCopy(newVal);
	          }
	        }
	      }
	    };

	    function arrayDifference(tokens1, tokens2) {
	      var values = [];

	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token == tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }

	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}

	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);

	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);

	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);

	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 *
	 * Angular has some features that can break certain
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement these rules then you must tell Angular not to use these features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following rules affect Angular:
	 *
	 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
	 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
	 * increase in the speed of evaluating Angular expressions.
	 *
	 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
	 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
	 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
	 * `angular-csp.css` in your HTML manually.
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
	 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
	 * however, triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
	 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */

	// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
	// bootstrap the system (before $parse is instantiated), for this reason we just have
	// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc

	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};

	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);

	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).then(function() {
	                previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;

	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;

	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).then(function() {
	              previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };

	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function() {
	            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	              $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;

	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (scope.$$destroyed) return;

	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;

	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).then(afterAnimation);
	              });

	              currentScope = newScope;
	              currentElement = clone;

	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (scope.$$destroyed) return;

	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];

	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (toString.call($element[0]).match(/SVG/)) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }

	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];

	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      // We want to control whitespace trimming so we use this convoluted approach
	      // to access the ngList attribute, which doesn't pre-trim the attribute
	      var ngList = element.attr(attr.$attr.ngList) || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;

	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;

	        var list = [];

	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }

	        return list;
	      };

	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }

	        return undefined;
	      });

	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};

	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/

	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    PENDING_CLASS = 'ng-pending',
	    EMPTY_CLASS = 'ng-empty',
	    NOT_EMPTY_CLASS = 'ng-not-empty';

	var ngModelMinErr = minErr('ngModel');

	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
	    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;

	  var parsedNgModel = $parse($attr.ngModel),
	      parsedNgModelAssign = parsedNgModel.assign,
	      ngModelGet = parsedNgModel,
	      ngModelSet = parsedNgModelAssign,
	      pendingDebounce = null,
	      parserValid,
	      ctrl = this;

	  this.$$setOptions = function(options) {
	    ctrl.$options = options;
	    if (options && options.getterSetter) {
	      var invokeModelGetter = $parse($attr.ngModel + '()'),
	          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

	      ngModelGet = function($scope) {
	        var modelValue = parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      ngModelSet = function($scope, newValue) {
	        if (isFunction(parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: newValue});
	        } else {
	          parsedNgModelAssign($scope, newValue);
	        }
	      };
	    } else if (!parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
	          $attr.ngModel, startingTag($element));
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  this.$render = noop;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  this.$isEmpty = function(value) {
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  };

	  this.$$updateEmptyClasses = function(value) {
	    if (ctrl.$isEmpty(value)) {
	      $animate.removeClass($element, NOT_EMPTY_CLASS);
	      $animate.addClass($element, EMPTY_CLASS);
	    } else {
	      $animate.removeClass($element, EMPTY_CLASS);
	      $animate.addClass($element, NOT_EMPTY_CLASS);
	    }
	  };


	  var currentValidationRunId = 0;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: $element,
	    set: function(object, property) {
	      object[property] = true;
	    },
	    unset: function(object, property) {
	      delete object[property];
	    },
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  this.$setPristine = function() {
	    ctrl.$dirty = false;
	    ctrl.$pristine = true;
	    $animate.removeClass($element, DIRTY_CLASS);
	    $animate.addClass($element, PRISTINE_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  this.$setDirty = function() {
	    ctrl.$dirty = true;
	    ctrl.$pristine = false;
	    $animate.removeClass($element, PRISTINE_CLASS);
	    $animate.addClass($element, DIRTY_CLASS);
	    ctrl.$$parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  this.$setUntouched = function() {
	    ctrl.$touched = false;
	    ctrl.$untouched = true;
	    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  this.$setTouched = function() {
	    ctrl.$touched = true;
	    ctrl.$untouched = false;
	    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as blur, you can have a situation where there is a period when
	   * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode == 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *        empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *        <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                ng-keydown="setEmpty($event, 'value1')">
	   *         value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *        <p id="inputDescription2">With $rollbackViewValue():</p>
	   *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                ng-keydown="setEmpty($event, 'value2', true)">
	   *         value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }

	        </file>
	   * </example>
	   */
	  this.$rollbackViewValue = function() {
	    $timeout.cancel(pendingDebounce);
	    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
	    ctrl.$render();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  this.$validate = function() {
	    // ignore $validate before model is initialized
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      return;
	    }

	    var viewValue = ctrl.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = ctrl.$$rawModelValue;

	    var prevValid = ctrl.$valid;
	    var prevModelValue = ctrl.$modelValue;

	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

	    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;

	        if (ctrl.$modelValue !== prevModelValue) {
	          ctrl.$$writeModelToScope();
	        }
	      }
	    });

	  };

	  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
	    currentValidationRunId++;
	    var localValidationRunId = currentValidationRunId;

	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();

	    function processParseErrors() {
	      var errorKey = ctrl.$$parserName || 'parse';
	      if (isUndefined(parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!parserValid) {
	          forEach(ctrl.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(ctrl.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, parserValid);
	        return parserValid;
	      }
	      return true;
	    }

	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(ctrl.$validators, function(validator, name) {
	        var result = validator(modelValue, viewValue);
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(ctrl.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }

	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(ctrl.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr('nopromise',
	            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function() {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        $q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }

	    function setValidity(name, isValid) {
	      if (localValidationRunId === currentValidationRunId) {
	        ctrl.$setValidity(name, isValid);
	      }
	    }

	    function validationDone(allValid) {
	      if (localValidationRunId === currentValidationRunId) {

	        doneCallback(allValid);
	      }
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  this.$commitViewValue = function() {
	    var viewValue = ctrl.$viewValue;

	    $timeout.cancel(pendingDebounce);

	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
	      return;
	    }
	    ctrl.$$updateEmptyClasses(viewValue);
	    ctrl.$$lastCommittedViewValue = viewValue;

	    // change to dirty
	    if (ctrl.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  };

	  this.$$parseAndValidate = function() {
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    parserValid = isUndefined(modelValue) ? undefined : true;

	    if (parserValid) {
	      for (var i = 0; i < ctrl.$parsers.length; i++) {
	        modelValue = ctrl.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      // ctrl.$modelValue has not been touched yet...
	      ctrl.$modelValue = ngModelGet($scope);
	    }
	    var prevModelValue = ctrl.$modelValue;
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	    ctrl.$$rawModelValue = modelValue;

	    if (allowInvalid) {
	      ctrl.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }

	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });

	    function writeToModelIfNeeded() {
	      if (ctrl.$modelValue !== prevModelValue) {
	        ctrl.$$writeModelToScope();
	      }
	    }
	  };

	  this.$$writeModelToScope = function() {
	    ngModelSet($scope, ctrl.$modelValue);
	    forEach(ctrl.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        $exceptionHandler(e);
	      }
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  this.$setViewValue = function(value, trigger) {
	    ctrl.$viewValue = value;
	    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
	      ctrl.$$debounceViewValueCommit(trigger);
	    }
	  };

	  this.$$debounceViewValueCommit = function(trigger) {
	    var debounceDelay = 0,
	        options = ctrl.$options,
	        debounce;

	    if (options && isDefined(options.debounce)) {
	      debounce = options.debounce;
	      if (isNumber(debounce)) {
	        debounceDelay = debounce;
	      } else if (isNumber(debounce[trigger])) {
	        debounceDelay = debounce[trigger];
	      } else if (isNumber(debounce['default'])) {
	        debounceDelay = debounce['default'];
	      }
	    }

	    $timeout.cancel(pendingDebounce);
	    if (debounceDelay) {
	      pendingDebounce = $timeout(function() {
	        ctrl.$commitViewValue();
	      }, debounceDelay);
	    } else if ($rootScope.$$phase) {
	      ctrl.$commitViewValue();
	    } else {
	      $scope.$apply(function() {
	        ctrl.$commitViewValue();
	      });
	    }
	  };

	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  $scope.$watch(function ngModelWatch() {
	    var modelValue = ngModelGet($scope);

	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      parserValid = undefined;

	      var formatters = ctrl.$formatters,
	          idx = formatters.length;

	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$$updateEmptyClasses(viewValue);
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();

	        ctrl.$$runValidators(modelValue, viewValue, noop);
	      }
	    }

	    return modelValue;
	  });
	}];


	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm;

	          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);

	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });

	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
	            element.on(modelCtrl.$options.updateOn, function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }

	          element.on('blur', function() {
	            if (modelCtrl.$touched) return;

	            if ($rootScope.$$phase) {
	              scope.$evalAsync(modelCtrl.$setTouched);
	            } else {
	              scope.$apply(modelCtrl.$setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];

	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example

	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.

	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	        <pre>user.data = <span ng-bind="user.data"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'John', data: '' };

	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));

	      it('should allow custom events', function() {
	        input.sendKeys(' Doe');
	        input.click();
	        expect(model.getText()).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John Doe');
	      });

	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' Doe');
	        expect(input.getAttribute('value')).toEqual('John Doe');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John');
	      });
	    </file>
	  </example>

	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'Igor' };
	        }]);
	    </file>
	  </example>

	  This one shows how to bind to getter/setters:

	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    controller: ['$scope', '$attrs', function($scope, $attrs) {
	      var that = this;
	      this.$options = copy($scope.$eval($attrs.ngModelOptions));
	      // Allow adding/overriding bound events
	      if (isDefined(this.$options.updateOn)) {
	        this.$options.updateOnDefault = false;
	        // extract "default" pseudo-event from list of events that can trigger a model update
	        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
	          that.$options.updateOnDefault = true;
	          return ' ';
	        }));
	      } else {
	        this.$options.updateOnDefault = true;
	      }
	    }]
	  };
	};



	// helper methods
	function addSetValidityMethod(context) {
	  var ctrl = context.ctrl,
	      $element = context.$element,
	      classCache = {},
	      set = context.set,
	      unset = context.unset,
	      $animate = context.$animate;

	  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

	  ctrl.$setValidity = setValidity;

	  function setValidity(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet('$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup('$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(ctrl.$error, validationErrorKey, controller);
	      unset(ctrl.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(ctrl.$error, validationErrorKey, controller);
	        set(ctrl.$$success, validationErrorKey, controller);
	      } else {
	        set(ctrl.$error, validationErrorKey, controller);
	        unset(ctrl.$$success, validationErrorKey, controller);
	      }
	    }
	    if (ctrl.$pending) {
	      cachedToggleClass(PENDING_CLASS, true);
	      ctrl.$valid = ctrl.$invalid = undefined;
	      toggleValidationCss('', null);
	    } else {
	      cachedToggleClass(PENDING_CLASS, false);
	      ctrl.$valid = isObjectEmpty(ctrl.$error);
	      ctrl.$invalid = !ctrl.$valid;
	      toggleValidationCss('', ctrl.$valid);
	    }

	    // re-read the state as the set/unset methods could have
	    // combined state in ctrl.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (ctrl.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (ctrl.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }

	    toggleValidationCss(validationErrorKey, combinedState);
	    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
	  }

	  function createAndSet(name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }

	  function unsetAndCleanup(name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }

	  function cachedToggleClass(className, switchValue) {
	    if (switchValue && !classCache[className]) {
	      $animate.addClass($element, className);
	      classCache[className] = true;
	    } else if (!switchValue && classCache[className]) {
	      $animate.removeClass($element, className);
	      classCache[className] = false;
	    }
	  }

	  function toggleValidationCss(validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

	    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}

	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

	/* global jqLiteRemove */

	var ngOptionsMinErr = minErr('ngOptions');

	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */

	// jshint maxlen: false
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	// jshint maxlen: 100


	var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {

	  function parseOptionsExpression(optionsExp, selectElement, scope) {

	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        "Expected expression in form of " +
	        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
	        " but got '{0}'. Element: {1}",
	        optionsExp, startingTag(selectElement));
	    }

	    // Extract the parts from the ngOptions expression

	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];

	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);

	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };

	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);

	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };


	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }

	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;

	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }

	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];

	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];

	          var locals = getLocals(value, key);
	          var selectValue = getTrackByValueFn(value, locals);
	          watchedArray.push(selectValue);

	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }

	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),

	      getOptions: function() {

	        var optionItems = [];
	        var selectValueMap = {};

	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;

	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }

	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }


	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = window.document.createElement('option'),
	      optGroupTemplate = window.document.createElement('optgroup');

	    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {

	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	      var multiple = attr.multiple;

	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      var emptyOption;
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          emptyOption = children.eq(i);
	          break;
	        }
	      }

	      var providedEmptyOption = !!emptyOption;

	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');

	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
	      // This stores the newly created options before they are appended to the select.
	      // Since the contents are removed from the fragment when it is appended,
	      // we only need to create it once.
	      var listFragment = $document[0].createDocumentFragment();

	      var renderEmptyOption = function() {
	        if (!providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	        selectElement.val('');
	        emptyOption.prop('selected', true); // needed for IE
	        emptyOption.attr('selected', true);
	      };

	      var removeEmptyOption = function() {
	        if (!providedEmptyOption) {
	          emptyOption.remove();
	        }
	      };


	      var renderUnknownOption = function() {
	        selectElement.prepend(unknownOption);
	        selectElement.val('?');
	        unknownOption.prop('selected', true); // needed for IE
	        unknownOption.attr('selected', true);
	      };

	      var removeUnknownOption = function() {
	        unknownOption.remove();
	      };

	      // Update the controller methods for multiple selectable options
	      if (!multiple) {

	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var option = options.getOptionFromViewValue(value);

	          if (option) {
	            // Don't update the option when it is already selected.
	            // For example, the browser will select the first option by default. In that case,
	            // most properties are set automatically - except the `selected` attribute, which we
	            // set always

	            if (selectElement[0].value !== option.selectValue) {
	              removeUnknownOption();
	              removeEmptyOption();

	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	            }

	            option.element.setAttribute('selected', 'selected');
	          } else {
	            if (value === null || providedEmptyOption) {
	              removeUnknownOption();
	              renderEmptyOption();
	            } else {
	              removeEmptyOption();
	              renderUnknownOption();
	            }
	          }
	        };

	        selectCtrl.readValue = function readNgOptionsValue() {

	          var selectedOption = options.selectValueMap[selectElement.val()];

	          if (selectedOption && !selectedOption.disabled) {
	            removeEmptyOption();
	            removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };

	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }

	      } else {

	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };


	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });

	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option) option.element.selected = true;
	            });
	          }
	        };


	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];

	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });

	          return selections;
	        };

	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {

	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });

	        }
	      }


	      if (providedEmptyOption) {

	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        emptyOption.remove();

	        // compile the element since there might be bindings in it
	        $compile(emptyOption)(scope);

	        // remove the class, which is added automatically because we recompile the element and it
	        // becomes the compilation root
	        emptyOption.removeClass('ng-scope');
	      } else {
	        emptyOption = jqLite(optionTemplate.cloneNode(false));
	      }

	      selectElement.empty();

	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();

	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

	      // ------------------------------------------------------------------ //

	      function addOptionElement(option, parent) {
	        var optionElement = optionTemplate.cloneNode(false);
	        parent.appendChild(optionElement);
	        updateOptionElement(option, optionElement);
	      }


	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        if (option.value !== element.value) element.value = option.selectValue;
	      }

	      function updateOptions() {
	        var previousValue = options && selectCtrl.readValue();

	        // We must remove all current options, but cannot simply set innerHTML = null
	        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
	        // must preserve.
	        // Instead, iterate over the current option elements and remove them or their optgroup
	        // parents
	        if (options) {

	          for (var i = options.items.length - 1; i >= 0; i--) {
	            var option = options.items[i];
	            if (option.group) {
	              jqLiteRemove(option.element.parentNode);
	            } else {
	              jqLiteRemove(option.element);
	            }
	          }
	        }

	        options = ngOptions.getOptions();

	        var groupElementMap = {};

	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }

	        options.items.forEach(function addOption(option) {
	          var groupElement;

	          if (isDefined(option.group)) {

	            // This option is to live in a group
	            // See if we have already created this group
	            groupElement = groupElementMap[option.group];

	            if (!groupElement) {

	              groupElement = optGroupTemplate.cloneNode(false);
	              listFragment.appendChild(groupElement);

	              // Update the label on the group element
	              groupElement.label = option.group;

	              // Store it for use later
	              groupElementMap[option.group] = groupElement;
	            }

	            addOptionElement(option, groupElement);

	          } else {

	            // This option is not in a group
	            addOptionElement(option, listFragment);
	          }
	        });

	        selectElement[0].appendChild(listFragment);

	        ngModelCtrl.$render();

	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          var isNotPrimitive = ngOptions.trackBy || multiple;
	          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }

	      }
	  }

	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', 'ngModel'],
	    link: {
	      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
	        // Deactivate the SelectController.register method to prevent
	        // option directives from accidentally registering themselves
	        // (and unwanted $destroy handlers etc.)
	        ctrls[0].registerOption = noop;
	      },
	      post: ngOptionsPostLink
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;

	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;

	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

	      });

	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNaN(count);

	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }

	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to explicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });

	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw an error if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, ngRepeat will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have an identifier property, you should track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *     {{model.name}}
	 * </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');

	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // jshint bitwise: false
	    scope.$odd = !(scope.$even = (index&1) === 0);
	    // jshint bitwise: true
	  };

	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };

	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };


	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);

	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

	      if (!match) {
	        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	            expression);
	      }

	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];

	      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

	      if (!match) {
	        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];

	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
	          aliasAs);
	      }

	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};

	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }

	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }

	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();

	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;

	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }

	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }

	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);

	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }

	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }

	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];

	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element

	              nextNode = previousNode;

	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);

	              if (getBlockStart(block) != nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, previousNode);
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;

	                $animate.enter(clone, null, previousNode);
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];

	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});

	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    require: 'ngSwitch',

	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function ngSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];

	      var spliceFactory = function(array, index) {
	          return function() { array.splice(index, 1); };
	      };

	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
	          $animate.cancel(previousLeaveAnimations[i]);
	        }
	        previousLeaveAnimations.length = 0;

	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
	          promise.then(spliceFactory(previousLeaveAnimations, i));
	        }

	        selectedElements.length = 0;
	        selectedScopes.length = 0;

	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
	              var block = { clone: caseElement };

	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];

	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
	    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
	  }
	});

	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});

	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty, the existing content is left intact. This lets you provide fallback content in the case
	 * that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}">{{text}}</pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function(){
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = "https://google.com";
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */
	var ngTranscludeMinErr = minErr('ngTransclude');
	var ngTranscludeDirective = ngDirective({
	  restrict: 'EAC',
	  link: function($scope, $element, $attrs, controller, $transclude) {

	    if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
	      // If the attribute is of the form: `ng-transclude="ng-transclude"`
	      // then treat it like the default
	      $attrs.ngTransclude = '';
	    }

	    function ngTranscludeCloneAttachFn(clone) {
	      if (clone.length) {
	        $element.empty();
	        $element.append(clone);
	      }
	    }

	    if (!$transclude) {
	      throw ngTranscludeMinErr('orphan',
	       'Illegal use of ngTransclude directive in the template! ' +
	       'No parent directive that requires a transclusion found. ' +
	       'Element: {0}',
	       startingTag($element));
	    }

	    // If there is no slot name defined or the slot name is not optional
	    // then transclude the slot
	    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
	    $transclude(ngTranscludeCloneAttachFn, null, slotName);
	  }
	});

	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type == 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;

	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];

	var noopNgModelController = { $setViewValue: noop, $render: noop };

	function chromeHack(optionElement) {
	  // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
	  // Adding an <option selected="selected"> element to a <select required="required"> should
	  // automatically select the new element
	  if (optionElement[0].hasAttribute('selected')) {
	    optionElement[0].selected = true;
	  }
	}

	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', function($element, $scope) {

	  var self = this,
	      optionsMap = new HashMap();

	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;

	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(window.document.createElement('option'));
	  self.renderUnknownOption = function(val) {
	    var unknownVal = '? ' + hashKey(val) + ' ?';
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    $element.val(unknownVal);
	  };

	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });

	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };


	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    self.removeUnknownOption();
	    return $element.val();
	  };


	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	      $element.val(value);
	      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        $element.val('');
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };


	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    // Skip comment nodes, as they only pollute the `optionsMap`
	    if (element[0].nodeType === NODE_TYPE_COMMENT) return;

	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	    self.ngModelCtrl.$render();
	    chromeHack(element);
	  };

	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };

	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };


	  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {

	    if (interpolateValueFn) {
	      // The value attribute is interpolated
	      var oldVal;
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	        if (isDefined(oldVal)) {
	          self.removeOption(oldVal);
	        }
	        oldVal = newVal;
	        self.addOption(newVal, optionElement);
	      });
	    } else if (interpolateTextFn) {
	      // The text content is interpolated
	      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
	        optionAttrs.$set('value', newVal);
	        if (oldVal !== newVal) {
	          self.removeOption(oldVal);
	        }
	        self.addOption(newVal, optionElement);
	      });
	    } else {
	      // The value attribute is static
	      self.addOption(optionAttrs.value, optionElement);
	    }

	    optionElement.on('$destroy', function() {
	      self.removeOption(optionAttrs.value);
	      self.ngModelCtrl.$render();
	    });
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
	 *
	 * <div class="alert alert-warning">
	 * Note that the value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explicitly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
	 * a new scope for each repeated instance.
	 * </div>
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1',
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="ngrepeat-select" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       repeatSelect: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {

	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    priority: 1,
	    link: {
	      pre: selectPreLink,
	      post: selectPostLink
	    }
	  };

	  function selectPreLink(scope, element, attr, ctrls) {

	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      selectCtrl.ngModelCtrl = ngModelCtrl;

	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });

	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {

	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected) {
	              array.push(option.value);
	            }
	          });
	          return array;
	        };

	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value));
	          });
	        };

	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });

	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };

	      }
	    }

	    function selectPostLink(scope, element, attrs, ctrls) {
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`.
	      // This must be done in the postLink fn to prevent $render to be called before
	      // all nodes have been linked correctly.
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };
	    }
	};


	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {
	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {
	      if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        var interpolateValueFn = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        var interpolateTextFn = $interpolate(element.text(), true);
	        if (!interpolateTextFn) {
	          attr.$set('value', element.text());
	        }
	      }

	      return function(scope, element, attr) {
	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup

	        if (selectCtrl) {
	          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
	        }
	      };
	    }
	  };
	}];

	var styleDirective = valueFn({
	  restrict: 'E',
	  terminal: false
	});

	/**
	 * @ngdoc directive
	 * @name ngRequired
	 * @restrict A
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');

	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */
	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element

	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };

	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');

	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }

	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }

	        regexp = regex || undefined;
	        ctrl.$validate();
	      });

	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');

	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));

	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');

	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */
	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};

	if (window.angular.bootstrap) {
	  //AngularJS is already loaded, so we can return here...
	  if (window.console) {
	    console.log('WARNING: Tried to load angular more than once.');
	  }
	  return;
	}

	//try to bind to jquery now so that one can write jqLite(document).ready()
	//but we will rebind on bootstrap again.
	bindJQuery();

	publishExternalAPI(angular);

	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}

	function getVF(n, opt_precision) {
	  var v = opt_precision;

	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }

	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}

	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "STANDALONEMONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "localeID": "en_US",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);

	  jqLite(window.document).ready(function() {
	    angularInit(window.document, bootstrap);
	  });

	})(window);

	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	module.exports = 'ngCookies';


/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.7
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular) {'use strict';

	/**
	 * @ngdoc module
	 * @name ngCookies
	 * @description
	 *
	 * # ngCookies
	 *
	 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
	 *
	 *
	 * <div doc-module-components="ngCookies"></div>
	 *
	 * See {@link ngCookies.$cookies `$cookies`} for usage.
	 */


	angular.module('ngCookies', ['ng']).
	  /**
	   * @ngdoc provider
	   * @name $cookiesProvider
	   * @description
	   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.
	   * */
	   provider('$cookies', [function $CookiesProvider() {
	    /**
	     * @ngdoc property
	     * @name $cookiesProvider#defaults
	     * @description
	     *
	     * Object containing default options to pass when setting cookies.
	     *
	     * The object may have following properties:
	     *
	     * - **path** - `{string}` - The cookie will be available only for this path and its
	     *   sub-paths. By default, this is the URL that appears in your `<base>` tag.
	     * - **domain** - `{string}` - The cookie will be available only for this domain and
	     *   its sub-domains. For security reasons the user agent will not accept the cookie
	     *   if the current domain is not a sub-domain of this domain or equal to it.
	     * - **expires** - `{string|Date}` - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
	     *   or a Date object indicating the exact date/time this cookie will expire.
	     * - **secure** - `{boolean}` - If `true`, then the cookie will only be available through a
	     *   secured connection.
	     *
	     * Note: By default, the address that appears in your `<base>` tag will be used as the path.
	     * This is important so that cookies will be visible for all routes when html5mode is enabled.
	     *
	     **/
	    var defaults = this.defaults = {};

	    function calcOptions(options) {
	      return options ? angular.extend({}, defaults, options) : defaults;
	    }

	    /**
	     * @ngdoc service
	     * @name $cookies
	     *
	     * @description
	     * Provides read/write access to browser's cookies.
	     *
	     * <div class="alert alert-info">
	     * Up until Angular 1.3, `$cookies` exposed properties that represented the
	     * current browser cookie values. In version 1.4, this behavior has changed, and
	     * `$cookies` now provides a standard api of getters, setters etc.
	     * </div>
	     *
	     * Requires the {@link ngCookies `ngCookies`} module to be installed.
	     *
	     * @example
	     *
	     * ```js
	     * angular.module('cookiesExample', ['ngCookies'])
	     *   .controller('ExampleController', ['$cookies', function($cookies) {
	     *     // Retrieving a cookie
	     *     var favoriteCookie = $cookies.get('myFavorite');
	     *     // Setting a cookie
	     *     $cookies.put('myFavorite', 'oatmeal');
	     *   }]);
	     * ```
	     */
	    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {
	      return {
	        /**
	         * @ngdoc method
	         * @name $cookies#get
	         *
	         * @description
	         * Returns the value of given cookie key
	         *
	         * @param {string} key Id to use for lookup.
	         * @returns {string} Raw cookie value.
	         */
	        get: function(key) {
	          return $$cookieReader()[key];
	        },

	        /**
	         * @ngdoc method
	         * @name $cookies#getObject
	         *
	         * @description
	         * Returns the deserialized value of given cookie key
	         *
	         * @param {string} key Id to use for lookup.
	         * @returns {Object} Deserialized cookie value.
	         */
	        getObject: function(key) {
	          var value = this.get(key);
	          return value ? angular.fromJson(value) : value;
	        },

	        /**
	         * @ngdoc method
	         * @name $cookies#getAll
	         *
	         * @description
	         * Returns a key value object with all the cookies
	         *
	         * @returns {Object} All cookies
	         */
	        getAll: function() {
	          return $$cookieReader();
	        },

	        /**
	         * @ngdoc method
	         * @name $cookies#put
	         *
	         * @description
	         * Sets a value for given cookie key
	         *
	         * @param {string} key Id for the `value`.
	         * @param {string} value Raw value to be stored.
	         * @param {Object=} options Options object.
	         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
	         */
	        put: function(key, value, options) {
	          $$cookieWriter(key, value, calcOptions(options));
	        },

	        /**
	         * @ngdoc method
	         * @name $cookies#putObject
	         *
	         * @description
	         * Serializes and sets a value for given cookie key
	         *
	         * @param {string} key Id for the `value`.
	         * @param {Object} value Value to be stored.
	         * @param {Object=} options Options object.
	         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
	         */
	        putObject: function(key, value, options) {
	          this.put(key, angular.toJson(value), options);
	        },

	        /**
	         * @ngdoc method
	         * @name $cookies#remove
	         *
	         * @description
	         * Remove given cookie
	         *
	         * @param {string} key Id of the key-value pair to delete.
	         * @param {Object=} options Options object.
	         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
	         */
	        remove: function(key, options) {
	          $$cookieWriter(key, undefined, calcOptions(options));
	        }
	      };
	    }];
	  }]);

	angular.module('ngCookies').
	/**
	 * @ngdoc service
	 * @name $cookieStore
	 * @deprecated
	 * @requires $cookies
	 *
	 * @description
	 * Provides a key-value (string-object) storage, that is backed by session cookies.
	 * Objects put or retrieved from this storage are automatically serialized or
	 * deserialized by angular's toJson/fromJson.
	 *
	 * Requires the {@link ngCookies `ngCookies`} module to be installed.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The $cookieStore service is **deprecated**.
	 * Please use the {@link ngCookies.$cookies `$cookies`} service instead.
	 * </div>
	 *
	 * @example
	 *
	 * ```js
	 * angular.module('cookieStoreExample', ['ngCookies'])
	 *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {
	 *     // Put cookie
	 *     $cookieStore.put('myFavorite','oatmeal');
	 *     // Get cookie
	 *     var favoriteCookie = $cookieStore.get('myFavorite');
	 *     // Removing a cookie
	 *     $cookieStore.remove('myFavorite');
	 *   }]);
	 * ```
	 */
	 factory('$cookieStore', ['$cookies', function($cookies) {

	    return {
	      /**
	       * @ngdoc method
	       * @name $cookieStore#get
	       *
	       * @description
	       * Returns the value of given cookie key
	       *
	       * @param {string} key Id to use for lookup.
	       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.
	       */
	      get: function(key) {
	        return $cookies.getObject(key);
	      },

	      /**
	       * @ngdoc method
	       * @name $cookieStore#put
	       *
	       * @description
	       * Sets a value for given cookie key
	       *
	       * @param {string} key Id for the `value`.
	       * @param {Object} value Value to be stored.
	       */
	      put: function(key, value) {
	        $cookies.putObject(key, value);
	      },

	      /**
	       * @ngdoc method
	       * @name $cookieStore#remove
	       *
	       * @description
	       * Remove given cookie
	       *
	       * @param {string} key Id of the key-value pair to delete.
	       */
	      remove: function(key) {
	        $cookies.remove(key);
	      }
	    };

	  }]);

	/**
	 * @name $$cookieWriter
	 * @requires $document
	 *
	 * @description
	 * This is a private service for writing cookies
	 *
	 * @param {string} name Cookie name
	 * @param {string=} value Cookie value (if undefined, cookie will be deleted)
	 * @param {Object=} options Object with options that need to be stored for the cookie.
	 */
	function $$CookieWriter($document, $log, $browser) {
	  var cookiePath = $browser.baseHref();
	  var rawDocument = $document[0];

	  function buildCookieString(name, value, options) {
	    var path, expires;
	    options = options || {};
	    expires = options.expires;
	    path = angular.isDefined(options.path) ? options.path : cookiePath;
	    if (angular.isUndefined(value)) {
	      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
	      value = '';
	    }
	    if (angular.isString(expires)) {
	      expires = new Date(expires);
	    }

	    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	    str += path ? ';path=' + path : '';
	    str += options.domain ? ';domain=' + options.domain : '';
	    str += expires ? ';expires=' + expires.toUTCString() : '';
	    str += options.secure ? ';secure' : '';

	    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
	    // - 300 cookies
	    // - 20 cookies per unique domain
	    // - 4096 bytes per cookie
	    var cookieLength = str.length + 1;
	    if (cookieLength > 4096) {
	      $log.warn("Cookie '" + name +
	        "' possibly not set or overflowed because it was too large (" +
	        cookieLength + " > 4096 bytes)!");
	    }

	    return str;
	  }

	  return function(name, value, options) {
	    rawDocument.cookie = buildCookieString(name, value, options);
	  };
	}

	$$CookieWriter.$inject = ['$document', '$log', '$browser'];

	angular.module('ngCookies').provider('$$cookieWriter', function $$CookieWriterProvider() {
	  this.$get = $$CookieWriter;
	});


	})(window, window.angular);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(6);
	module.exports = 'ngResource';


/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.7
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular) {'use strict';

	var $resourceMinErr = angular.$$minErr('$resource');

	// Helper functions and regex to lookup a dotted path on an object
	// stopping at undefined/null.  The path must be composed of ASCII
	// identifiers (just like $parse)
	var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;

	function isValidDottedPath(path) {
	  return (path != null && path !== '' && path !== 'hasOwnProperty' &&
	      MEMBER_NAME_REGEX.test('.' + path));
	}

	function lookupDottedPath(obj, path) {
	  if (!isValidDottedPath(path)) {
	    throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
	  }
	  var keys = path.split('.');
	  for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
	    var key = keys[i];
	    obj = (obj !== null) ? obj[key] : undefined;
	  }
	  return obj;
	}

	/**
	 * Create a shallow copy of an object and clear other fields from the destination
	 */
	function shallowClearAndCopy(src, dst) {
	  dst = dst || {};

	  angular.forEach(dst, function(value, key) {
	    delete dst[key];
	  });

	  for (var key in src) {
	    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	      dst[key] = src[key];
	    }
	  }

	  return dst;
	}

	/**
	 * @ngdoc module
	 * @name ngResource
	 * @description
	 *
	 * # ngResource
	 *
	 * The `ngResource` module provides interaction support with RESTful services
	 * via the $resource service.
	 *
	 *
	 * <div doc-module-components="ngResource"></div>
	 *
	 * See {@link ngResource.$resourceProvider} and {@link ngResource.$resource} for usage.
	 */

	/**
	 * @ngdoc provider
	 * @name $resourceProvider
	 *
	 * @description
	 *
	 * Use `$resourceProvider` to change the default behavior of the {@link ngResource.$resource}
	 * service.
	 *
	 * ## Dependencies
	 * Requires the {@link ngResource } module to be installed.
	 *
	 */

	/**
	 * @ngdoc service
	 * @name $resource
	 * @requires $http
	 * @requires ng.$log
	 * @requires $q
	 * @requires ng.$timeout
	 *
	 * @description
	 * A factory which creates a resource object that lets you interact with
	 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
	 *
	 * The returned resource object has action methods which provide high-level behaviors without
	 * the need to interact with the low level {@link ng.$http $http} service.
	 *
	 * Requires the {@link ngResource `ngResource`} module to be installed.
	 *
	 * By default, trailing slashes will be stripped from the calculated URLs,
	 * which can pose problems with server backends that do not expect that
	 * behavior.  This can be disabled by configuring the `$resourceProvider` like
	 * this:
	 *
	 * ```js
	     app.config(['$resourceProvider', function($resourceProvider) {
	       // Don't strip trailing slashes from calculated URLs
	       $resourceProvider.defaults.stripTrailingSlashes = false;
	     }]);
	 * ```
	 *
	 * @param {string} url A parameterized URL template with parameters prefixed by `:` as in
	 *   `/user/:username`. If you are using a URL with a port number (e.g.
	 *   `http://example.com:8080/api`), it will be respected.
	 *
	 *   If you are using a url with a suffix, just add the suffix, like this:
	 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
	 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
	 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
	 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
	 *   can escape it with `/\.`.
	 *
	 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
	 *   `actions` methods. If a parameter value is a function, it will be executed every time
	 *   when a param value needs to be obtained for a request (unless the param was overridden).
	 *
	 *   Each key value in the parameter object is first bound to url template if present and then any
	 *   excess keys are appended to the url search query after the `?`.
	 *
	 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
	 *   URL `/path/greet?salutation=Hello`.
	 *
	 *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
	 *   from the corresponding property on the `data` object (provided when calling an action method).
	 *   For example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of
	 *   `someParam` will be `data.someProp`.
	 *
	 * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend
	 *   the default set of resource actions. The declaration should be created in the format of {@link
	 *   ng.$http#usage $http.config}:
	 *
	 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
	 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
	 *        ...}
	 *
	 *   Where:
	 *
	 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
	 *     your resource object.
	 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
	 *     `DELETE`, `JSONP`, etc).
	 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
	 *     the parameter value is a function, it will be executed every time when a param value needs to
	 *     be obtained for a request (unless the param was overridden).
	 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
	 *     like for the resource-level urls.
	 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
	 *     see `returns` section.
	 *   - **`transformRequest`** –
	 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	 *     transform function or an array of such functions. The transform function takes the http
	 *     request body and headers and returns its transformed (typically serialized) version.
	 *     By default, transformRequest will contain one function that checks if the request data is
	 *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
	 *     `transformRequest` to an empty array: `transformRequest: []`
	 *   - **`transformResponse`** –
	 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	 *     transform function or an array of such functions. The transform function takes the http
	 *     response body and headers and returns its transformed (typically deserialized) version.
	 *     By default, transformResponse will contain one function that checks if the response looks
	 *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,
	 *     set `transformResponse` to an empty array: `transformResponse: []`
	 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
	 *     GET request, otherwise if a cache instance built with
	 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
	 *     caching.
	 *   - **`timeout`** – `{number}` – timeout in milliseconds.<br />
	 *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are
	 *     **not** supported in $resource, because the same value would be used for multiple requests.
	 *     If you are looking for a way to cancel requests, you should use the `cancellable` option.
	 *   - **`cancellable`** – `{boolean}` – if set to true, the request made by a "non-instance" call
	 *     will be cancelled (if not already completed) by calling `$cancelRequest()` on the call's
	 *     return value. Calling `$cancelRequest()` for a non-cancellable or an already
	 *     completed/cancelled request will have no effect.<br />
	 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
	 *     XHR object. See
	 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
	 *     for more information.
	 *   - **`responseType`** - `{string}` - see
	 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
	 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
	 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
	 *     with `http response` object. See {@link ng.$http $http interceptors}.
	 *
	 * @param {Object} options Hash with custom settings that should extend the
	 *   default `$resourceProvider` behavior.  The supported options are:
	 *
	 *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing
	 *   slashes from any calculated URL will be stripped. (Defaults to true.)
	 *   - **`cancellable`** – {boolean} – If true, the request made by a "non-instance" call will be
	 *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return value.
	 *   This can be overwritten per action. (Defaults to false.)
	 *
	 * @returns {Object} A resource "class" object with methods for the default set of resource actions
	 *   optionally extended with custom `actions`. The default set contains these actions:
	 *   ```js
	 *   { 'get':    {method:'GET'},
	 *     'save':   {method:'POST'},
	 *     'query':  {method:'GET', isArray:true},
	 *     'remove': {method:'DELETE'},
	 *     'delete': {method:'DELETE'} };
	 *   ```
	 *
	 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
	 *   destination and parameters. When the data is returned from the server then the object is an
	 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
	 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
	 *   read, update, delete) on server-side data like this:
	 *   ```js
	 *   var User = $resource('/user/:userId', {userId:'@id'});
	 *   var user = User.get({userId:123}, function() {
	 *     user.abc = true;
	 *     user.$save();
	 *   });
	 *   ```
	 *
	 *   It is important to realize that invoking a $resource object method immediately returns an
	 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
	 *   server the existing reference is populated with the actual data. This is a useful trick since
	 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
	 *   object results in no rendering, once the data arrives from the server then the object is
	 *   populated with the data and the view automatically re-renders itself showing the new data. This
	 *   means that in most cases one never has to write a callback function for the action methods.
	 *
	 *   The action methods on the class object or instance object can be invoked with the following
	 *   parameters:
	 *
	 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
	 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
	 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
	 *
	 *
	 *   Success callback is called with (value, responseHeaders) arguments, where the value is
	 *   the populated resource instance or collection object. The error callback is called
	 *   with (httpResponse) argument.
	 *
	 *   Class actions return empty instance (with additional properties below).
	 *   Instance actions return promise of the action.
	 *
	 *   The Resource instances and collections have these additional properties:
	 *
	 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
	 *     instance or collection.
	 *
	 *     On success, the promise is resolved with the same resource instance or collection object,
	 *     updated with data from server. This makes it easy to use in
	 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
	 *     rendering until the resource(s) are loaded.
	 *
	 *     On failure, the promise is rejected with the {@link ng.$http http response} object, without
	 *     the `resource` property.
	 *
	 *     If an interceptor object was provided, the promise will instead be resolved with the value
	 *     returned by the interceptor.
	 *
	 *   - `$resolved`: `true` after first server interaction is completed (either with success or
	 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
	 *      data-binding.
	 *
	 *   The Resource instances and collections have these additional methods:
	 *
	 *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or
	 *      collection, calling this method will abort the request.
	 *
	 *   The Resource instances have these additional methods:
	 *
	 *   - `toJSON`: It returns a simple object without any of the extra properties added as part of
	 *     the Resource API. This object can be serialized through {@link angular.toJson} safely
	 *     without attaching Angular-specific fields. Notice that `JSON.stringify` (and
	 *     `angular.toJson`) automatically use this method when serializing a Resource instance
	 *     (see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior)).
	 *
	 * @example
	 *
	 * # Credit card resource
	 *
	 * ```js
	     // Define CreditCard class
	     var CreditCard = $resource('/user/:userId/card/:cardId',
	      {userId:123, cardId:'@id'}, {
	       charge: {method:'POST', params:{charge:true}}
	      });

	     // We can retrieve a collection from the server
	     var cards = CreditCard.query(function() {
	       // GET: /user/123/card
	       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

	       var card = cards[0];
	       // each item is an instance of CreditCard
	       expect(card instanceof CreditCard).toEqual(true);
	       card.name = "J. Smith";
	       // non GET methods are mapped onto the instances
	       card.$save();
	       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
	       // server returns: {id:456, number:'1234', name: 'J. Smith'};

	       // our custom method is mapped as well.
	       card.$charge({amount:9.99});
	       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
	     });

	     // we can create an instance as well
	     var newCard = new CreditCard({number:'0123'});
	     newCard.name = "Mike Smith";
	     newCard.$save();
	     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
	     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
	     expect(newCard.id).toEqual(789);
	 * ```
	 *
	 * The object returned from this function execution is a resource "class" which has "static" method
	 * for each action in the definition.
	 *
	 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
	 * `headers`.
	 *
	 * @example
	 *
	 * # User resource
	 *
	 * When the data is returned from the server then the object is an instance of the resource type and
	 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
	 * operations (create, read, update, delete) on server-side data.

	   ```js
	     var User = $resource('/user/:userId', {userId:'@id'});
	     User.get({userId:123}, function(user) {
	       user.abc = true;
	       user.$save();
	     });
	   ```
	 *
	 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
	 * in the response that came from the server as well as $http header getter function, so one
	 * could rewrite the above example and get access to http headers as:
	 *
	   ```js
	     var User = $resource('/user/:userId', {userId:'@id'});
	     User.get({userId:123}, function(user, getResponseHeaders){
	       user.abc = true;
	       user.$save(function(user, putResponseHeaders) {
	         //user => saved user object
	         //putResponseHeaders => $http header getter
	       });
	     });
	   ```
	 *
	 * You can also access the raw `$http` promise via the `$promise` property on the object returned
	 *
	   ```
	     var User = $resource('/user/:userId', {userId:'@id'});
	     User.get({userId:123})
	         .$promise.then(function(user) {
	           $scope.user = user;
	         });
	   ```
	 *
	 * @example
	 *
	 * # Creating a custom 'PUT' request
	 *
	 * In this example we create a custom method on our resource to make a PUT request
	 * ```js
	 *    var app = angular.module('app', ['ngResource', 'ngRoute']);
	 *
	 *    // Some APIs expect a PUT request in the format URL/object/ID
	 *    // Here we are creating an 'update' method
	 *    app.factory('Notes', ['$resource', function($resource) {
	 *    return $resource('/notes/:id', null,
	 *        {
	 *            'update': { method:'PUT' }
	 *        });
	 *    }]);
	 *
	 *    // In our controller we get the ID from the URL using ngRoute and $routeParams
	 *    // We pass in $routeParams and our Notes factory along with $scope
	 *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
	                                      function($scope, $routeParams, Notes) {
	 *    // First get a note object from the factory
	 *    var note = Notes.get({ id:$routeParams.id });
	 *    $id = note.id;
	 *
	 *    // Now call update passing in the ID first then the object you are updating
	 *    Notes.update({ id:$id }, note);
	 *
	 *    // This will PUT /notes/ID with the note object in the request payload
	 *    }]);
	 * ```
	 *
	 * @example
	 *
	 * # Cancelling requests
	 *
	 * If an action's configuration specifies that it is cancellable, you can cancel the request related
	 * to an instance or collection (as long as it is a result of a "non-instance" call):
	 *
	   ```js
	     // ...defining the `Hotel` resource...
	     var Hotel = $resource('/api/hotel/:id', {id: '@id'}, {
	       // Let's make the `query()` method cancellable
	       query: {method: 'get', isArray: true, cancellable: true}
	     });

	     // ...somewhere in the PlanVacationController...
	     ...
	     this.onDestinationChanged = function onDestinationChanged(destination) {
	       // We don't care about any pending request for hotels
	       // in a different destination any more
	       this.availableHotels.$cancelRequest();

	       // Let's query for hotels in '<destination>'
	       // (calls: /api/hotel?location=<destination>)
	       this.availableHotels = Hotel.query({location: destination});
	     };
	   ```
	 *
	 */
	angular.module('ngResource', ['ng']).
	  provider('$resource', function() {
	    var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\/\/[^\/]*/;
	    var provider = this;

	    /**
	     * @ngdoc property
	     * @name $resourceProvider#defaults
	     * @description
	     * Object containing default options used when creating `$resource` instances.
	     *
	     * The default values satisfy a wide range of usecases, but you may choose to overwrite any of
	     * them to further customize your instances. The available properties are:
	     *
	     * - **stripTrailingSlashes** – `{boolean}` – If true, then the trailing slashes from any
	     *   calculated URL will be stripped.<br />
	     *   (Defaults to true.)
	     * - **cancellable** – `{boolean}` – If true, the request made by a "non-instance" call will be
	     *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return
	     *   value. For more details, see {@link ngResource.$resource}. This can be overwritten per
	     *   resource class or action.<br />
	     *   (Defaults to false.)
	     * - **actions** - `{Object.<Object>}` - A hash with default actions declarations. Actions are
	     *   high-level methods corresponding to RESTful actions/methods on resources. An action may
	     *   specify what HTTP method to use, what URL to hit, if the return value will be a single
	     *   object or a collection (array) of objects etc. For more details, see
	     *   {@link ngResource.$resource}. The actions can also be enhanced or overwritten per resource
	     *   class.<br />
	     *   The default actions are:
	     *   ```js
	     *   {
	     *     get: {method: 'GET'},
	     *     save: {method: 'POST'},
	     *     query: {method: 'GET', isArray: true},
	     *     remove: {method: 'DELETE'},
	     *     delete: {method: 'DELETE'}
	     *   }
	     *   ```
	     *
	     * #### Example
	     *
	     * For example, you can specify a new `update` action that uses the `PUT` HTTP verb:
	     *
	     * ```js
	     *   angular.
	     *     module('myApp').
	     *     config(['resourceProvider', function ($resourceProvider) {
	     *       $resourceProvider.defaults.actions.update = {
	     *         method: 'PUT'
	     *       };
	     *     });
	     * ```
	     *
	     * Or you can even overwrite the whole `actions` list and specify your own:
	     *
	     * ```js
	     *   angular.
	     *     module('myApp').
	     *     config(['resourceProvider', function ($resourceProvider) {
	     *       $resourceProvider.defaults.actions = {
	     *         create: {method: 'POST'}
	     *         get:    {method: 'GET'},
	     *         getAll: {method: 'GET', isArray:true},
	     *         update: {method: 'PUT'},
	     *         delete: {method: 'DELETE'}
	     *       };
	     *     });
	     * ```
	     *
	     */
	    this.defaults = {
	      // Strip slashes by default
	      stripTrailingSlashes: true,

	      // Make non-instance requests cancellable (via `$cancelRequest()`)
	      cancellable: false,

	      // Default actions configuration
	      actions: {
	        'get': {method: 'GET'},
	        'save': {method: 'POST'},
	        'query': {method: 'GET', isArray: true},
	        'remove': {method: 'DELETE'},
	        'delete': {method: 'DELETE'}
	      }
	    };

	    this.$get = ['$http', '$log', '$q', '$timeout', function($http, $log, $q, $timeout) {

	      var noop = angular.noop,
	        forEach = angular.forEach,
	        extend = angular.extend,
	        copy = angular.copy,
	        isFunction = angular.isFunction;

	      /**
	       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set
	       * (pchar) allowed in path segments:
	       *    segment       = *pchar
	       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	       *    pct-encoded   = "%" HEXDIG HEXDIG
	       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	       *                     / "*" / "+" / "," / ";" / "="
	       */
	      function encodeUriSegment(val) {
	        return encodeUriQuery(val, true).
	          replace(/%26/gi, '&').
	          replace(/%3D/gi, '=').
	          replace(/%2B/gi, '+');
	      }


	      /**
	       * This method is intended for encoding *key* or *value* parts of query component. We need a
	       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
	       * have to be encoded per http://tools.ietf.org/html/rfc3986:
	       *    query       = *( pchar / "/" / "?" )
	       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	       *    pct-encoded   = "%" HEXDIG HEXDIG
	       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	       *                     / "*" / "+" / "," / ";" / "="
	       */
	      function encodeUriQuery(val, pctEncodeSpaces) {
	        return encodeURIComponent(val).
	          replace(/%40/gi, '@').
	          replace(/%3A/gi, ':').
	          replace(/%24/g, '$').
	          replace(/%2C/gi, ',').
	          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	      }

	      function Route(template, defaults) {
	        this.template = template;
	        this.defaults = extend({}, provider.defaults, defaults);
	        this.urlParams = {};
	      }

	      Route.prototype = {
	        setUrlParams: function(config, params, actionUrl) {
	          var self = this,
	            url = actionUrl || self.template,
	            val,
	            encodedVal,
	            protocolAndDomain = '';

	          var urlParams = self.urlParams = {};
	          forEach(url.split(/\W/), function(param) {
	            if (param === 'hasOwnProperty') {
	              throw $resourceMinErr('badname', "hasOwnProperty is not a valid parameter name.");
	            }
	            if (!(new RegExp("^\\d+$").test(param)) && param &&
	              (new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url))) {
	              urlParams[param] = {
	                isQueryParamValue: (new RegExp("\\?.*=:" + param + "(?:\\W|$)")).test(url)
	              };
	            }
	          });
	          url = url.replace(/\\:/g, ':');
	          url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {
	            protocolAndDomain = match;
	            return '';
	          });

	          params = params || {};
	          forEach(self.urlParams, function(paramInfo, urlParam) {
	            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
	            if (angular.isDefined(val) && val !== null) {
	              if (paramInfo.isQueryParamValue) {
	                encodedVal = encodeUriQuery(val, true);
	              } else {
	                encodedVal = encodeUriSegment(val);
	              }
	              url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
	                return encodedVal + p1;
	              });
	            } else {
	              url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function(match,
	                  leadingSlashes, tail) {
	                if (tail.charAt(0) == '/') {
	                  return tail;
	                } else {
	                  return leadingSlashes + tail;
	                }
	              });
	            }
	          });

	          // strip trailing slashes and set the url (unless this behavior is specifically disabled)
	          if (self.defaults.stripTrailingSlashes) {
	            url = url.replace(/\/+$/, '') || '/';
	          }

	          // then replace collapse `/.` if found in the last URL path segment before the query
	          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
	          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
	          // replace escaped `/\.` with `/.`
	          config.url = protocolAndDomain + url.replace(/\/\\\./, '/.');


	          // set params - delegate param encoding to $http
	          forEach(params, function(value, key) {
	            if (!self.urlParams[key]) {
	              config.params = config.params || {};
	              config.params[key] = value;
	            }
	          });
	        }
	      };


	      function resourceFactory(url, paramDefaults, actions, options) {
	        var route = new Route(url, options);

	        actions = extend({}, provider.defaults.actions, actions);

	        function extractParams(data, actionParams) {
	          var ids = {};
	          actionParams = extend({}, paramDefaults, actionParams);
	          forEach(actionParams, function(value, key) {
	            if (isFunction(value)) { value = value(); }
	            ids[key] = value && value.charAt && value.charAt(0) == '@' ?
	              lookupDottedPath(data, value.substr(1)) : value;
	          });
	          return ids;
	        }

	        function defaultResponseInterceptor(response) {
	          return response.resource;
	        }

	        function Resource(value) {
	          shallowClearAndCopy(value || {}, this);
	        }

	        Resource.prototype.toJSON = function() {
	          var data = extend({}, this);
	          delete data.$promise;
	          delete data.$resolved;
	          return data;
	        };

	        forEach(actions, function(action, name) {
	          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
	          var numericTimeout = action.timeout;
	          var cancellable = angular.isDefined(action.cancellable) ? action.cancellable :
	              (options && angular.isDefined(options.cancellable)) ? options.cancellable :
	              provider.defaults.cancellable;

	          if (numericTimeout && !angular.isNumber(numericTimeout)) {
	            $log.debug('ngResource:\n' +
	                       '  Only numeric values are allowed as `timeout`.\n' +
	                       '  Promises are not supported in $resource, because the same value would ' +
	                       'be used for multiple requests. If you are looking for a way to cancel ' +
	                       'requests, you should use the `cancellable` option.');
	            delete action.timeout;
	            numericTimeout = null;
	          }

	          Resource[name] = function(a1, a2, a3, a4) {
	            var params = {}, data, success, error;

	            /* jshint -W086 */ /* (purposefully fall through case statements) */
	            switch (arguments.length) {
	              case 4:
	                error = a4;
	                success = a3;
	              //fallthrough
	              case 3:
	              case 2:
	                if (isFunction(a2)) {
	                  if (isFunction(a1)) {
	                    success = a1;
	                    error = a2;
	                    break;
	                  }

	                  success = a2;
	                  error = a3;
	                  //fallthrough
	                } else {
	                  params = a1;
	                  data = a2;
	                  success = a3;
	                  break;
	                }
	              case 1:
	                if (isFunction(a1)) success = a1;
	                else if (hasBody) data = a1;
	                else params = a1;
	                break;
	              case 0: break;
	              default:
	                throw $resourceMinErr('badargs',
	                  "Expected up to 4 arguments [params, data, success, error], got {0} arguments",
	                  arguments.length);
	            }
	            /* jshint +W086 */ /* (purposefully fall through case statements) */

	            var isInstanceCall = this instanceof Resource;
	            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));
	            var httpConfig = {};
	            var responseInterceptor = action.interceptor && action.interceptor.response ||
	              defaultResponseInterceptor;
	            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||
	              undefined;
	            var timeoutDeferred;
	            var numericTimeoutPromise;

	            forEach(action, function(value, key) {
	              switch (key) {
	                default:
	                  httpConfig[key] = copy(value);
	                  break;
	                case 'params':
	                case 'isArray':
	                case 'interceptor':
	                case 'cancellable':
	                  break;
	              }
	            });

	            if (!isInstanceCall && cancellable) {
	              timeoutDeferred = $q.defer();
	              httpConfig.timeout = timeoutDeferred.promise;

	              if (numericTimeout) {
	                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);
	              }
	            }

	            if (hasBody) httpConfig.data = data;
	            route.setUrlParams(httpConfig,
	              extend({}, extractParams(data, action.params || {}), params),
	              action.url);

	            var promise = $http(httpConfig).then(function(response) {
	              var data = response.data;

	              if (data) {
	                // Need to convert action.isArray to boolean in case it is undefined
	                // jshint -W018
	                if (angular.isArray(data) !== (!!action.isArray)) {
	                  throw $resourceMinErr('badcfg',
	                      'Error in resource configuration for action `{0}`. Expected response to ' +
	                      'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object',
	                    angular.isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);
	                }
	                // jshint +W018
	                if (action.isArray) {
	                  value.length = 0;
	                  forEach(data, function(item) {
	                    if (typeof item === "object") {
	                      value.push(new Resource(item));
	                    } else {
	                      // Valid JSON values may be string literals, and these should not be converted
	                      // into objects. These items will not have access to the Resource prototype
	                      // methods, but unfortunately there
	                      value.push(item);
	                    }
	                  });
	                } else {
	                  var promise = value.$promise;     // Save the promise
	                  shallowClearAndCopy(data, value);
	                  value.$promise = promise;         // Restore the promise
	                }
	              }
	              response.resource = value;

	              return response;
	            }, function(response) {
	              (error || noop)(response);
	              return $q.reject(response);
	            });

	            promise['finally'](function() {
	              value.$resolved = true;
	              if (!isInstanceCall && cancellable) {
	                value.$cancelRequest = angular.noop;
	                $timeout.cancel(numericTimeoutPromise);
	                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;
	              }
	            });

	            promise = promise.then(
	              function(response) {
	                var value = responseInterceptor(response);
	                (success || noop)(value, response.headers);
	                return value;
	              },
	              responseErrorInterceptor);

	            if (!isInstanceCall) {
	              // we are creating instance / collection
	              // - set the initial promise
	              // - return the instance / collection
	              value.$promise = promise;
	              value.$resolved = false;
	              if (cancellable) value.$cancelRequest = timeoutDeferred.resolve;

	              return value;
	            }

	            // instance call
	            return promise;
	          };


	          Resource.prototype['$' + name] = function(params, success, error) {
	            if (isFunction(params)) {
	              error = success; success = params; params = {};
	            }
	            var result = Resource[name].call(this, params, this, success, error);
	            return result.$promise || result;
	          };
	        });

	        Resource.bind = function(additionalParamDefaults) {
	          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
	        };

	        return Resource;
	      }

	      return resourceFactory;
	    }];
	  });


	})(window, window.angular);


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(8);
	module.exports = 'ngAnimate';


/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.7
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular) {'use strict';

	/* jshint ignore:start */
	var noop        = angular.noop;
	var copy        = angular.copy;
	var extend      = angular.extend;
	var jqLite      = angular.element;
	var forEach     = angular.forEach;
	var isArray     = angular.isArray;
	var isString    = angular.isString;
	var isObject    = angular.isObject;
	var isUndefined = angular.isUndefined;
	var isDefined   = angular.isDefined;
	var isFunction  = angular.isFunction;
	var isElement   = angular.isElement;

	var ELEMENT_NODE = 1;
	var COMMENT_NODE = 8;

	var ADD_CLASS_SUFFIX = '-add';
	var REMOVE_CLASS_SUFFIX = '-remove';
	var EVENT_CLASS_PREFIX = 'ng-';
	var ACTIVE_CLASS_SUFFIX = '-active';
	var PREPARE_CLASS_SUFFIX = '-prepare';

	var NG_ANIMATE_CLASSNAME = 'ng-animate';
	var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

	// Detect proper transitionend/animationend event names.
	var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

	// If unprefixed events are not supported but webkit-prefixed are, use the latter.
	// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
	// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
	// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
	// Register both events in case `window.onanimationend` is not supported because of that,
	// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
	// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
	// therefore there is no reason to test anymore for other vendor prefixes:
	// http://caniuse.com/#search=transition
	if (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {
	  CSS_PREFIX = '-webkit-';
	  TRANSITION_PROP = 'WebkitTransition';
	  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
	} else {
	  TRANSITION_PROP = 'transition';
	  TRANSITIONEND_EVENT = 'transitionend';
	}

	if (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {
	  CSS_PREFIX = '-webkit-';
	  ANIMATION_PROP = 'WebkitAnimation';
	  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
	} else {
	  ANIMATION_PROP = 'animation';
	  ANIMATIONEND_EVENT = 'animationend';
	}

	var DURATION_KEY = 'Duration';
	var PROPERTY_KEY = 'Property';
	var DELAY_KEY = 'Delay';
	var TIMING_KEY = 'TimingFunction';
	var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
	var ANIMATION_PLAYSTATE_KEY = 'PlayState';
	var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

	var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
	var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
	var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
	var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

	var isPromiseLike = function(p) {
	  return p && p.then ? true : false;
	};

	var ngMinErr = angular.$$minErr('ng');
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function packageStyles(options) {
	  var styles = {};
	  if (options && (options.to || options.from)) {
	    styles.to = options.to;
	    styles.from = options.from;
	  }
	  return styles;
	}

	function pendClasses(classes, fix, isPrefix) {
	  var className = '';
	  classes = isArray(classes)
	      ? classes
	      : classes && isString(classes) && classes.length
	          ? classes.split(/\s+/)
	          : [];
	  forEach(classes, function(klass, i) {
	    if (klass && klass.length > 0) {
	      className += (i > 0) ? ' ' : '';
	      className += isPrefix ? fix + klass
	                            : klass + fix;
	    }
	  });
	  return className;
	}

	function removeFromArray(arr, val) {
	  var index = arr.indexOf(val);
	  if (val >= 0) {
	    arr.splice(index, 1);
	  }
	}

	function stripCommentsFromElement(element) {
	  if (element instanceof jqLite) {
	    switch (element.length) {
	      case 0:
	        return element;
	        break;

	      case 1:
	        // there is no point of stripping anything if the element
	        // is the only element within the jqLite wrapper.
	        // (it's important that we retain the element instance.)
	        if (element[0].nodeType === ELEMENT_NODE) {
	          return element;
	        }
	        break;

	      default:
	        return jqLite(extractElementNode(element));
	        break;
	    }
	  }

	  if (element.nodeType === ELEMENT_NODE) {
	    return jqLite(element);
	  }
	}

	function extractElementNode(element) {
	  if (!element[0]) return element;
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType == ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function $$addClass($$jqLite, element, className) {
	  forEach(element, function(elm) {
	    $$jqLite.addClass(elm, className);
	  });
	}

	function $$removeClass($$jqLite, element, className) {
	  forEach(element, function(elm) {
	    $$jqLite.removeClass(elm, className);
	  });
	}

	function applyAnimationClassesFactory($$jqLite) {
	  return function(element, options) {
	    if (options.addClass) {
	      $$addClass($$jqLite, element, options.addClass);
	      options.addClass = null;
	    }
	    if (options.removeClass) {
	      $$removeClass($$jqLite, element, options.removeClass);
	      options.removeClass = null;
	    }
	  }
	}

	function prepareAnimationOptions(options) {
	  options = options || {};
	  if (!options.$$prepared) {
	    var domOperation = options.domOperation || noop;
	    options.domOperation = function() {
	      options.$$domOperationFired = true;
	      domOperation();
	      domOperation = noop;
	    };
	    options.$$prepared = true;
	  }
	  return options;
	}

	function applyAnimationStyles(element, options) {
	  applyAnimationFromStyles(element, options);
	  applyAnimationToStyles(element, options);
	}

	function applyAnimationFromStyles(element, options) {
	  if (options.from) {
	    element.css(options.from);
	    options.from = null;
	  }
	}

	function applyAnimationToStyles(element, options) {
	  if (options.to) {
	    element.css(options.to);
	    options.to = null;
	  }
	}

	function mergeAnimationDetails(element, oldAnimation, newAnimation) {
	  var target = oldAnimation.options || {};
	  var newOptions = newAnimation.options || {};

	  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
	  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
	  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

	  if (newOptions.preparationClasses) {
	    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
	    delete newOptions.preparationClasses;
	  }

	  // noop is basically when there is no callback; otherwise something has been set
	  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

	  extend(target, newOptions);

	  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
	  if (realDomOperation) {
	    target.domOperation = realDomOperation;
	  }

	  if (classes.addClass) {
	    target.addClass = classes.addClass;
	  } else {
	    target.addClass = null;
	  }

	  if (classes.removeClass) {
	    target.removeClass = classes.removeClass;
	  } else {
	    target.removeClass = null;
	  }

	  oldAnimation.addClass = target.addClass;
	  oldAnimation.removeClass = target.removeClass;

	  return target;
	}

	function resolveElementClasses(existing, toAdd, toRemove) {
	  var ADD_CLASS = 1;
	  var REMOVE_CLASS = -1;

	  var flags = {};
	  existing = splitClassesToLookup(existing);

	  toAdd = splitClassesToLookup(toAdd);
	  forEach(toAdd, function(value, key) {
	    flags[key] = ADD_CLASS;
	  });

	  toRemove = splitClassesToLookup(toRemove);
	  forEach(toRemove, function(value, key) {
	    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
	  });

	  var classes = {
	    addClass: '',
	    removeClass: ''
	  };

	  forEach(flags, function(val, klass) {
	    var prop, allow;
	    if (val === ADD_CLASS) {
	      prop = 'addClass';
	      allow = !existing[klass];
	    } else if (val === REMOVE_CLASS) {
	      prop = 'removeClass';
	      allow = existing[klass];
	    }
	    if (allow) {
	      if (classes[prop].length) {
	        classes[prop] += ' ';
	      }
	      classes[prop] += klass;
	    }
	  });

	  function splitClassesToLookup(classes) {
	    if (isString(classes)) {
	      classes = classes.split(' ');
	    }

	    var obj = {};
	    forEach(classes, function(klass) {
	      // sometimes the split leaves empty string values
	      // incase extra spaces were applied to the options
	      if (klass.length) {
	        obj[klass] = true;
	      }
	    });
	    return obj;
	  }

	  return classes;
	}

	function getDomNode(element) {
	  return (element instanceof angular.element) ? element[0] : element;
	}

	function applyGeneratedPreparationClasses(element, event, options) {
	  var classes = '';
	  if (event) {
	    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
	  }
	  if (options.addClass) {
	    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
	  }
	  if (options.removeClass) {
	    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
	  }
	  if (classes.length) {
	    options.preparationClasses = classes;
	    element.addClass(classes);
	  }
	}

	function clearGeneratedClasses(element, options) {
	  if (options.preparationClasses) {
	    element.removeClass(options.preparationClasses);
	    options.preparationClasses = null;
	  }
	  if (options.activeClasses) {
	    element.removeClass(options.activeClasses);
	    options.activeClasses = null;
	  }
	}

	function blockTransitions(node, duration) {
	  // we use a negative delay value since it performs blocking
	  // yet it doesn't kill any existing transitions running on the
	  // same element which makes this safe for class-based animations
	  var value = duration ? '-' + duration + 's' : '';
	  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
	  return [TRANSITION_DELAY_PROP, value];
	}

	function blockKeyframeAnimations(node, applyBlock) {
	  var value = applyBlock ? 'paused' : '';
	  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
	  applyInlineStyle(node, [key, value]);
	  return [key, value];
	}

	function applyInlineStyle(node, styleTuple) {
	  var prop = styleTuple[0];
	  var value = styleTuple[1];
	  node.style[prop] = value;
	}

	function concatWithSpace(a,b) {
	  if (!a) return b;
	  if (!b) return a;
	  return a + ' ' + b;
	}

	var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
	  var queue, cancelFn;

	  function scheduler(tasks) {
	    // we make a copy since RAFScheduler mutates the state
	    // of the passed in array variable and this would be difficult
	    // to track down on the outside code
	    queue = queue.concat(tasks);
	    nextTick();
	  }

	  queue = scheduler.queue = [];

	  /* waitUntilQuiet does two things:
	   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through
	   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
	   *
	   * The motivation here is that animation code can request more time from the scheduler
	   * before the next wave runs. This allows for certain DOM properties such as classes to
	   * be resolved in time for the next animation to run.
	   */
	  scheduler.waitUntilQuiet = function(fn) {
	    if (cancelFn) cancelFn();

	    cancelFn = $$rAF(function() {
	      cancelFn = null;
	      fn();
	      nextTick();
	    });
	  };

	  return scheduler;

	  function nextTick() {
	    if (!queue.length) return;

	    var items = queue.shift();
	    for (var i = 0; i < items.length; i++) {
	      items[i]();
	    }

	    if (!cancelFn) {
	      $$rAF(function() {
	        if (!cancelFn) nextTick();
	      });
	    }
	  }
	}];

	/**
	 * @ngdoc directive
	 * @name ngAnimateChildren
	 * @restrict AE
	 * @element ANY
	 *
	 * @description
	 *
	 * ngAnimateChildren allows you to specify that children of this element should animate even if any
	 * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`
	 * (structural) animation, child elements that also have an active structural animation are not animated.
	 *
	 * Note that even if `ngAnimteChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).
	 *
	 *
	 * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,
	 *     then child animations are allowed. If the value is `false`, child animations are not allowed.
	 *
	 * @example
	 * <example module="ngAnimateChildren" name="ngAnimateChildren" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	       <div ng-controller="mainController as main">
	         <label>Show container? <input type="checkbox" ng-model="main.enterElement" /></label>
	         <label>Animate children? <input type="checkbox" ng-model="main.animateChildren" /></label>
	         <hr>
	         <div ng-animate-children="{{main.animateChildren}}">
	           <div ng-if="main.enterElement" class="container">
	             List of items:
	             <div ng-repeat="item in [0, 1, 2, 3]" class="item">Item {{item}}</div>
	           </div>
	         </div>
	       </div>
	     </file>
	     <file name="animations.css">

	      .container.ng-enter,
	      .container.ng-leave {
	        transition: all ease 1.5s;
	      }

	      .container.ng-enter,
	      .container.ng-leave-active {
	        opacity: 0;
	      }

	      .container.ng-leave,
	      .container.ng-enter-active {
	        opacity: 1;
	      }

	      .item {
	        background: firebrick;
	        color: #FFF;
	        margin-bottom: 10px;
	      }

	      .item.ng-enter,
	      .item.ng-leave {
	        transition: transform 1.5s ease;
	      }

	      .item.ng-enter {
	        transform: translateX(50px);
	      }

	      .item.ng-enter-active {
	        transform: translateX(0);
	      }
	    </file>
	    <file name="script.js">
	      angular.module('ngAnimateChildren', ['ngAnimate'])
	        .controller('mainController', function() {
	          this.animateChildren = false;
	          this.enterElement = false;
	        });
	    </file>
	  </example>
	 */
	var $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {
	  return {
	    link: function(scope, element, attrs) {
	      var val = attrs.ngAnimateChildren;
	      if (angular.isString(val) && val.length === 0) { //empty attribute
	        element.data(NG_ANIMATE_CHILDREN_DATA, true);
	      } else {
	        // Interpolate and set the value, so that it is available to
	        // animations that run right after compilation
	        setData($interpolate(val)(scope));
	        attrs.$observe('ngAnimateChildren', setData);
	      }

	      function setData(value) {
	        value = value === 'on' || value === 'true';
	        element.data(NG_ANIMATE_CHILDREN_DATA, value);
	      }
	    }
	  };
	}];

	var ANIMATE_TIMER_KEY = '$$animateCss';

	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
	 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
	 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
	 * directives to create more complex animations that can be purely driven using CSS code.
	 *
	 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
	 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
	 *
	 * ## Usage
	 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
	 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
	 * any automatic control over cancelling animations and/or preventing animations from being run on
	 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
	 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
	 * the CSS animation.
	 *
	 * The example below shows how we can create a folding animation on an element using `ng-if`:
	 *
	 * ```html
	 * <!-- notice the `fold-animation` CSS class -->
	 * <div ng-if="onOff" class="fold-animation">
	 *   This element will go BOOM
	 * </div>
	 * <button ng-click="onOff=true">Fold In</button>
	 * ```
	 *
	 * Now we create the **JavaScript animation** that will trigger the CSS transition:
	 *
	 * ```js
	 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var height = element[0].offsetHeight;
	 *       return $animateCss(element, {
	 *         from: { height:'0px' },
	 *         to: { height:height + 'px' },
	 *         duration: 1 // one second
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * ## More Advanced Uses
	 *
	 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
	 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
	 *
	 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
	 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
	 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
	 * to provide a working animation that will run in CSS.
	 *
	 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
	 *
	 * ```js
	 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var height = element[0].offsetHeight;
	 *       return $animateCss(element, {
	 *         addClass: 'red large-text pulse-twice',
	 *         easing: 'ease-out',
	 *         from: { height:'0px' },
	 *         to: { height:height + 'px' },
	 *         duration: 1 // one second
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
	 *
	 * ```css
	 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
	 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
	 * .red { background:red; }
	 * .large-text { font-size:20px; }
	 *
	 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
	 * .pulse-twice {
	 *   animation: 0.5s pulse linear 2;
	 *   -webkit-animation: 0.5s pulse linear 2;
	 * }
	 *
	 * @keyframes pulse {
	 *   from { transform: scale(0.5); }
	 *   to { transform: scale(1.5); }
	 * }
	 *
	 * @-webkit-keyframes pulse {
	 *   from { -webkit-transform: scale(0.5); }
	 *   to { -webkit-transform: scale(1.5); }
	 * }
	 * ```
	 *
	 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
	 *
	 * ## How the Options are handled
	 *
	 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
	 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
	 * styles using the `from` and `to` properties.
	 *
	 * ```js
	 * var animator = $animateCss(element, {
	 *   from: { background:'red' },
	 *   to: { background:'blue' }
	 * });
	 * animator.start();
	 * ```
	 *
	 * ```css
	 * .rotating-animation {
	 *   animation:0.5s rotate linear;
	 *   -webkit-animation:0.5s rotate linear;
	 * }
	 *
	 * @keyframes rotate {
	 *   from { transform: rotate(0deg); }
	 *   to { transform: rotate(360deg); }
	 * }
	 *
	 * @-webkit-keyframes rotate {
	 *   from { -webkit-transform: rotate(0deg); }
	 *   to { -webkit-transform: rotate(360deg); }
	 * }
	 * ```
	 *
	 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
	 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
	 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
	 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
	 * and spread across the transition and keyframe animation.
	 *
	 * ## What is returned
	 *
	 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
	 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
	 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
	 *
	 * ```js
	 * var animator = $animateCss(element, { ... });
	 * ```
	 *
	 * Now what do the contents of our `animator` variable look like:
	 *
	 * ```js
	 * {
	 *   // starts the animation
	 *   start: Function,
	 *
	 *   // ends (aborts) the animation
	 *   end: Function
	 * }
	 * ```
	 *
	 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
	 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been
	 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
	 * and that changing them will not reconfigure the parameters of the animation.
	 *
	 * ### runner.done() vs runner.then()
	 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
	 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
	 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
	 * unless you really need a digest to kick off afterwards.
	 *
	 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
	 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
	 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
	 *
	 * @param {DOMElement} element the element that will be animated
	 * @param {object} options the animation-related options that will be applied during the animation
	 *
	 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
	 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
	 * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
	 * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
	 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
	 * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
	 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
	 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
	 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
	 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
	 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
	 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
	 * is provided then the animation will be skipped entirely.
	 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
	 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
	 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
	 * CSS delay value.
	 * * `stagger` - A numeric time value representing the delay between successively animated elements
	 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
	 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
	 *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
	 * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)
	 * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
	 *    the animation is closed. This is useful for when the styles are used purely for the sake of
	 *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).
	 *    By default this value is set to `false`.
	 *
	 * @return {object} an object with start and end methods and details about the animation.
	 *
	 * * `start` - The method to start the animation. This will return a `Promise` when called.
	 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
	 */
	var ONE_SECOND = 1000;
	var BASE_TEN = 10;

	var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
	var CLOSING_TIME_BUFFER = 1.5;

	var DETECT_CSS_PROPERTIES = {
	  transitionDuration:      TRANSITION_DURATION_PROP,
	  transitionDelay:         TRANSITION_DELAY_PROP,
	  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
	  animationDuration:       ANIMATION_DURATION_PROP,
	  animationDelay:          ANIMATION_DELAY_PROP,
	  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
	};

	var DETECT_STAGGER_CSS_PROPERTIES = {
	  transitionDuration:      TRANSITION_DURATION_PROP,
	  transitionDelay:         TRANSITION_DELAY_PROP,
	  animationDuration:       ANIMATION_DURATION_PROP,
	  animationDelay:          ANIMATION_DELAY_PROP
	};

	function getCssKeyframeDurationStyle(duration) {
	  return [ANIMATION_DURATION_PROP, duration + 's'];
	}

	function getCssDelayStyle(delay, isKeyframeAnimation) {
	  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
	  return [prop, delay + 's'];
	}

	function computeCssStyles($window, element, properties) {
	  var styles = Object.create(null);
	  var detectedStyles = $window.getComputedStyle(element) || {};
	  forEach(properties, function(formalStyleName, actualStyleName) {
	    var val = detectedStyles[formalStyleName];
	    if (val) {
	      var c = val.charAt(0);

	      // only numerical-based values have a negative sign or digit as the first value
	      if (c === '-' || c === '+' || c >= 0) {
	        val = parseMaxTime(val);
	      }

	      // by setting this to null in the event that the delay is not set or is set directly as 0
	      // then we can still allow for negative values to be used later on and not mistake this
	      // value for being greater than any other negative value.
	      if (val === 0) {
	        val = null;
	      }
	      styles[actualStyleName] = val;
	    }
	  });

	  return styles;
	}

	function parseMaxTime(str) {
	  var maxValue = 0;
	  var values = str.split(/\s*,\s*/);
	  forEach(values, function(value) {
	    // it's always safe to consider only second values and omit `ms` values since
	    // getComputedStyle will always handle the conversion for us
	    if (value.charAt(value.length - 1) == 's') {
	      value = value.substring(0, value.length - 1);
	    }
	    value = parseFloat(value) || 0;
	    maxValue = maxValue ? Math.max(value, maxValue) : value;
	  });
	  return maxValue;
	}

	function truthyTimingValue(val) {
	  return val === 0 || val != null;
	}

	function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
	  var style = TRANSITION_PROP;
	  var value = duration + 's';
	  if (applyOnlyDuration) {
	    style += DURATION_KEY;
	  } else {
	    value += ' linear all';
	  }
	  return [style, value];
	}

	function createLocalCacheLookup() {
	  var cache = Object.create(null);
	  return {
	    flush: function() {
	      cache = Object.create(null);
	    },

	    count: function(key) {
	      var entry = cache[key];
	      return entry ? entry.total : 0;
	    },

	    get: function(key) {
	      var entry = cache[key];
	      return entry && entry.value;
	    },

	    put: function(key, value) {
	      if (!cache[key]) {
	        cache[key] = { total: 1, value: value };
	      } else {
	        cache[key].total++;
	      }
	    }
	  };
	}

	// we do not reassign an already present style value since
	// if we detect the style property value again we may be
	// detecting styles that were added via the `from` styles.
	// We make use of `isDefined` here since an empty string
	// or null value (which is what getPropertyValue will return
	// for a non-existing style) will still be marked as a valid
	// value for the style (a falsy value implies that the style
	// is to be removed at the end of the animation). If we had a simple
	// "OR" statement then it would not be enough to catch that.
	function registerRestorableStyles(backup, node, properties) {
	  forEach(properties, function(prop) {
	    backup[prop] = isDefined(backup[prop])
	        ? backup[prop]
	        : node.style.getPropertyValue(prop);
	  });
	}

	var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
	  var gcsLookup = createLocalCacheLookup();
	  var gcsStaggerLookup = createLocalCacheLookup();

	  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
	               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',
	       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
	                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    var parentCounter = 0;
	    function gcsHashFn(node, extraClasses) {
	      var KEY = "$$ngAnimateParentKey";
	      var parentNode = node.parentNode;
	      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
	      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
	    }

	    function computeCachedCssStyles(node, className, cacheKey, properties) {
	      var timings = gcsLookup.get(cacheKey);

	      if (!timings) {
	        timings = computeCssStyles($window, node, properties);
	        if (timings.animationIterationCount === 'infinite') {
	          timings.animationIterationCount = 1;
	        }
	      }

	      // we keep putting this in multiple times even though the value and the cacheKey are the same
	      // because we're keeping an internal tally of how many duplicate animations are detected.
	      gcsLookup.put(cacheKey, timings);
	      return timings;
	    }

	    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
	      var stagger;

	      // if we have one or more existing matches of matching elements
	      // containing the same parent + CSS styles (which is how cacheKey works)
	      // then staggering is possible
	      if (gcsLookup.count(cacheKey) > 0) {
	        stagger = gcsStaggerLookup.get(cacheKey);

	        if (!stagger) {
	          var staggerClassName = pendClasses(className, '-stagger');

	          $$jqLite.addClass(node, staggerClassName);

	          stagger = computeCssStyles($window, node, properties);

	          // force the conversion of a null value to zero incase not set
	          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
	          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

	          $$jqLite.removeClass(node, staggerClassName);

	          gcsStaggerLookup.put(cacheKey, stagger);
	        }
	      }

	      return stagger || {};
	    }

	    var cancelLastRAFRequest;
	    var rafWaitQueue = [];
	    function waitUntilQuiet(callback) {
	      rafWaitQueue.push(callback);
	      $$rAFScheduler.waitUntilQuiet(function() {
	        gcsLookup.flush();
	        gcsStaggerLookup.flush();

	        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
	        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
	        var pageWidth = $$forceReflow();

	        // we use a for loop to ensure that if the queue is changed
	        // during this looping then it will consider new requests
	        for (var i = 0; i < rafWaitQueue.length; i++) {
	          rafWaitQueue[i](pageWidth);
	        }
	        rafWaitQueue.length = 0;
	      });
	    }

	    function computeTimings(node, className, cacheKey) {
	      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
	      var aD = timings.animationDelay;
	      var tD = timings.transitionDelay;
	      timings.maxDelay = aD && tD
	          ? Math.max(aD, tD)
	          : (aD || tD);
	      timings.maxDuration = Math.max(
	          timings.animationDuration * timings.animationIterationCount,
	          timings.transitionDuration);

	      return timings;
	    }

	    return function init(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = prepareAnimationOptions(copy(options));
	      }

	      var restoreStyles = {};
	      var node = getDomNode(element);
	      if (!node
	          || !node.parentNode
	          || !$$animateQueue.enabled()) {
	        return closeAndReturnNoopAnimator();
	      }

	      var temporaryStyles = [];
	      var classes = element.attr('class');
	      var styles = packageStyles(options);
	      var animationClosed;
	      var animationPaused;
	      var animationCompleted;
	      var runner;
	      var runnerHost;
	      var maxDelay;
	      var maxDelayTime;
	      var maxDuration;
	      var maxDurationTime;
	      var startTime;
	      var events = [];

	      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
	        return closeAndReturnNoopAnimator();
	      }

	      var method = options.event && isArray(options.event)
	            ? options.event.join(' ')
	            : options.event;

	      var isStructural = method && options.structural;
	      var structuralClassName = '';
	      var addRemoveClassName = '';

	      if (isStructural) {
	        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
	      } else if (method) {
	        structuralClassName = method;
	      }

	      if (options.addClass) {
	        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
	      }

	      if (options.removeClass) {
	        if (addRemoveClassName.length) {
	          addRemoveClassName += ' ';
	        }
	        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
	      }

	      // there may be a situation where a structural animation is combined together
	      // with CSS classes that need to resolve before the animation is computed.
	      // However this means that there is no explicit CSS code to block the animation
	      // from happening (by setting 0s none in the class name). If this is the case
	      // we need to apply the classes before the first rAF so we know to continue if
	      // there actually is a detected transition or keyframe animation
	      if (options.applyClassesEarly && addRemoveClassName.length) {
	        applyAnimationClasses(element, options);
	      }

	      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
	      var fullClassName = classes + ' ' + preparationClasses;
	      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
	      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
	      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

	      // there is no way we can trigger an animation if no styles and
	      // no classes are being applied which would then trigger a transition,
	      // unless there a is raw keyframe value that is applied to the element.
	      if (!containsKeyframeAnimation
	           && !hasToStyles
	           && !preparationClasses) {
	        return closeAndReturnNoopAnimator();
	      }

	      var cacheKey, stagger;
	      if (options.stagger > 0) {
	        var staggerVal = parseFloat(options.stagger);
	        stagger = {
	          transitionDelay: staggerVal,
	          animationDelay: staggerVal,
	          transitionDuration: 0,
	          animationDuration: 0
	        };
	      } else {
	        cacheKey = gcsHashFn(node, fullClassName);
	        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
	      }

	      if (!options.$$skipPreparationClasses) {
	        $$jqLite.addClass(element, preparationClasses);
	      }

	      var applyOnlyDuration;

	      if (options.transitionStyle) {
	        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
	        applyInlineStyle(node, transitionStyle);
	        temporaryStyles.push(transitionStyle);
	      }

	      if (options.duration >= 0) {
	        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
	        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

	        // we set the duration so that it will be picked up by getComputedStyle later
	        applyInlineStyle(node, durationStyle);
	        temporaryStyles.push(durationStyle);
	      }

	      if (options.keyframeStyle) {
	        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
	        applyInlineStyle(node, keyframeStyle);
	        temporaryStyles.push(keyframeStyle);
	      }

	      var itemIndex = stagger
	          ? options.staggerIndex >= 0
	              ? options.staggerIndex
	              : gcsLookup.count(cacheKey)
	          : 0;

	      var isFirst = itemIndex === 0;

	      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
	      // without causing any combination of transitions to kick in. By adding a negative delay value
	      // it forces the setup class' transition to end immediately. We later then remove the negative
	      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
	      // that if there is no transition defined then nothing will happen and this will also allow
	      // other transitions to be stacked on top of each other without any chopping them out.
	      if (isFirst && !options.skipBlocking) {
	        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
	      }

	      var timings = computeTimings(node, fullClassName, cacheKey);
	      var relativeDelay = timings.maxDelay;
	      maxDelay = Math.max(relativeDelay, 0);
	      maxDuration = timings.maxDuration;

	      var flags = {};
	      flags.hasTransitions          = timings.transitionDuration > 0;
	      flags.hasAnimations           = timings.animationDuration > 0;
	      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';
	      flags.applyTransitionDuration = hasToStyles && (
	                                        (flags.hasTransitions && !flags.hasTransitionAll)
	                                         || (flags.hasAnimations && !flags.hasTransitions));
	      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
	      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
	      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
	      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

	      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
	        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

	        if (flags.applyTransitionDuration) {
	          flags.hasTransitions = true;
	          timings.transitionDuration = maxDuration;
	          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
	          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
	        }

	        if (flags.applyAnimationDuration) {
	          flags.hasAnimations = true;
	          timings.animationDuration = maxDuration;
	          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
	        }
	      }

	      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
	        return closeAndReturnNoopAnimator();
	      }

	      if (options.delay != null) {
	        var delayStyle;
	        if (typeof options.delay !== "boolean") {
	          delayStyle = parseFloat(options.delay);
	          // number in options.delay means we have to recalculate the delay for the closing timeout
	          maxDelay = Math.max(delayStyle, 0);
	        }

	        if (flags.applyTransitionDelay) {
	          temporaryStyles.push(getCssDelayStyle(delayStyle));
	        }

	        if (flags.applyAnimationDelay) {
	          temporaryStyles.push(getCssDelayStyle(delayStyle, true));
	        }
	      }

	      // we need to recalculate the delay value since we used a pre-emptive negative
	      // delay value and the delay value is required for the final event checking. This
	      // property will ensure that this will happen after the RAF phase has passed.
	      if (options.duration == null && timings.transitionDuration > 0) {
	        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
	      }

	      maxDelayTime = maxDelay * ONE_SECOND;
	      maxDurationTime = maxDuration * ONE_SECOND;
	      if (!options.skipBlocking) {
	        flags.blockTransition = timings.transitionDuration > 0;
	        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
	                                       stagger.animationDelay > 0 &&
	                                       stagger.animationDuration === 0;
	      }

	      if (options.from) {
	        if (options.cleanupStyles) {
	          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
	        }
	        applyAnimationFromStyles(element, options);
	      }

	      if (flags.blockTransition || flags.blockKeyframeAnimation) {
	        applyBlocking(maxDuration);
	      } else if (!options.skipBlocking) {
	        blockTransitions(node, false);
	      }

	      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
	      return {
	        $$willAnimate: true,
	        end: endFn,
	        start: function() {
	          if (animationClosed) return;

	          runnerHost = {
	            end: endFn,
	            cancel: cancelFn,
	            resume: null, //this will be set during the start() phase
	            pause: null
	          };

	          runner = new $$AnimateRunner(runnerHost);

	          waitUntilQuiet(start);

	          // we don't have access to pause/resume the animation
	          // since it hasn't run yet. AnimateRunner will therefore
	          // set noop functions for resume and pause and they will
	          // later be overridden once the animation is triggered
	          return runner;
	        }
	      };

	      function endFn() {
	        close();
	      }

	      function cancelFn() {
	        close(true);
	      }

	      function close(rejected) { // jshint ignore:line
	        // if the promise has been called already then we shouldn't close
	        // the animation again
	        if (animationClosed || (animationCompleted && animationPaused)) return;
	        animationClosed = true;
	        animationPaused = false;

	        if (!options.$$skipPreparationClasses) {
	          $$jqLite.removeClass(element, preparationClasses);
	        }
	        $$jqLite.removeClass(element, activeClasses);

	        blockKeyframeAnimations(node, false);
	        blockTransitions(node, false);

	        forEach(temporaryStyles, function(entry) {
	          // There is only one way to remove inline style properties entirely from elements.
	          // By using `removeProperty` this works, but we need to convert camel-cased CSS
	          // styles down to hyphenated values.
	          node.style[entry[0]] = '';
	        });

	        applyAnimationClasses(element, options);
	        applyAnimationStyles(element, options);

	        if (Object.keys(restoreStyles).length) {
	          forEach(restoreStyles, function(value, prop) {
	            value ? node.style.setProperty(prop, value)
	                  : node.style.removeProperty(prop);
	          });
	        }

	        // the reason why we have this option is to allow a synchronous closing callback
	        // that is fired as SOON as the animation ends (when the CSS is removed) or if
	        // the animation never takes off at all. A good example is a leave animation since
	        // the element must be removed just after the animation is over or else the element
	        // will appear on screen for one animation frame causing an overbearing flicker.
	        if (options.onDone) {
	          options.onDone();
	        }

	        if (events && events.length) {
	          // Remove the transitionend / animationend listener(s)
	          element.off(events.join(' '), onAnimationProgress);
	        }

	        //Cancel the fallback closing timeout and remove the timer data
	        var animationTimerData = element.data(ANIMATE_TIMER_KEY);
	        if (animationTimerData) {
	          $timeout.cancel(animationTimerData[0].timer);
	          element.removeData(ANIMATE_TIMER_KEY);
	        }

	        // if the preparation function fails then the promise is not setup
	        if (runner) {
	          runner.complete(!rejected);
	        }
	      }

	      function applyBlocking(duration) {
	        if (flags.blockTransition) {
	          blockTransitions(node, duration);
	        }

	        if (flags.blockKeyframeAnimation) {
	          blockKeyframeAnimations(node, !!duration);
	        }
	      }

	      function closeAndReturnNoopAnimator() {
	        runner = new $$AnimateRunner({
	          end: endFn,
	          cancel: cancelFn
	        });

	        // should flush the cache animation
	        waitUntilQuiet(noop);
	        close();

	        return {
	          $$willAnimate: false,
	          start: function() {
	            return runner;
	          },
	          end: endFn
	        };
	      }

	      function onAnimationProgress(event) {
	        event.stopPropagation();
	        var ev = event.originalEvent || event;

	        // we now always use `Date.now()` due to the recent changes with
	        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
	        var timeStamp = ev.$manualTimeStamp || Date.now();

	        /* Firefox (or possibly just Gecko) likes to not round values up
	         * when a ms measurement is used for the animation */
	        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

	        /* $manualTimeStamp is a mocked timeStamp value which is set
	         * within browserTrigger(). This is only here so that tests can
	         * mock animations properly. Real events fallback to event.timeStamp,
	         * or, if they don't, then a timeStamp is automatically created for them.
	         * We're checking to see if the timeStamp surpasses the expected delay,
	         * but we're using elapsedTime instead of the timeStamp on the 2nd
	         * pre-condition since animationPauseds sometimes close off early */
	        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
	          // we set this flag to ensure that if the transition is paused then, when resumed,
	          // the animation will automatically close itself since transitions cannot be paused.
	          animationCompleted = true;
	          close();
	        }
	      }

	      function start() {
	        if (animationClosed) return;
	        if (!node.parentNode) {
	          close();
	          return;
	        }

	        // even though we only pause keyframe animations here the pause flag
	        // will still happen when transitions are used. Only the transition will
	        // not be paused since that is not possible. If the animation ends when
	        // paused then it will not complete until unpaused or cancelled.
	        var playPause = function(playAnimation) {
	          if (!animationCompleted) {
	            animationPaused = !playAnimation;
	            if (timings.animationDuration) {
	              var value = blockKeyframeAnimations(node, animationPaused);
	              animationPaused
	                  ? temporaryStyles.push(value)
	                  : removeFromArray(temporaryStyles, value);
	            }
	          } else if (animationPaused && playAnimation) {
	            animationPaused = false;
	            close();
	          }
	        };

	        // checking the stagger duration prevents an accidentally cascade of the CSS delay style
	        // being inherited from the parent. If the transition duration is zero then we can safely
	        // rely that the delay value is an intentional stagger delay style.
	        var maxStagger = itemIndex > 0
	                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
	                            (timings.animationDuration && stagger.animationDuration === 0))
	                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
	        if (maxStagger) {
	          $timeout(triggerAnimationStart,
	                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
	                   false);
	        } else {
	          triggerAnimationStart();
	        }

	        // this will decorate the existing promise runner with pause/resume methods
	        runnerHost.resume = function() {
	          playPause(true);
	        };

	        runnerHost.pause = function() {
	          playPause(false);
	        };

	        function triggerAnimationStart() {
	          // just incase a stagger animation kicks in when the animation
	          // itself was cancelled entirely
	          if (animationClosed) return;

	          applyBlocking(false);

	          forEach(temporaryStyles, function(entry) {
	            var key = entry[0];
	            var value = entry[1];
	            node.style[key] = value;
	          });

	          applyAnimationClasses(element, options);
	          $$jqLite.addClass(element, activeClasses);

	          if (flags.recalculateTimingStyles) {
	            fullClassName = node.className + ' ' + preparationClasses;
	            cacheKey = gcsHashFn(node, fullClassName);

	            timings = computeTimings(node, fullClassName, cacheKey);
	            relativeDelay = timings.maxDelay;
	            maxDelay = Math.max(relativeDelay, 0);
	            maxDuration = timings.maxDuration;

	            if (maxDuration === 0) {
	              close();
	              return;
	            }

	            flags.hasTransitions = timings.transitionDuration > 0;
	            flags.hasAnimations = timings.animationDuration > 0;
	          }

	          if (flags.applyAnimationDelay) {
	            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
	                  ? parseFloat(options.delay)
	                  : relativeDelay;

	            maxDelay = Math.max(relativeDelay, 0);
	            timings.animationDelay = relativeDelay;
	            delayStyle = getCssDelayStyle(relativeDelay, true);
	            temporaryStyles.push(delayStyle);
	            node.style[delayStyle[0]] = delayStyle[1];
	          }

	          maxDelayTime = maxDelay * ONE_SECOND;
	          maxDurationTime = maxDuration * ONE_SECOND;

	          if (options.easing) {
	            var easeProp, easeVal = options.easing;
	            if (flags.hasTransitions) {
	              easeProp = TRANSITION_PROP + TIMING_KEY;
	              temporaryStyles.push([easeProp, easeVal]);
	              node.style[easeProp] = easeVal;
	            }
	            if (flags.hasAnimations) {
	              easeProp = ANIMATION_PROP + TIMING_KEY;
	              temporaryStyles.push([easeProp, easeVal]);
	              node.style[easeProp] = easeVal;
	            }
	          }

	          if (timings.transitionDuration) {
	            events.push(TRANSITIONEND_EVENT);
	          }

	          if (timings.animationDuration) {
	            events.push(ANIMATIONEND_EVENT);
	          }

	          startTime = Date.now();
	          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
	          var endTime = startTime + timerTime;

	          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
	          var setupFallbackTimer = true;
	          if (animationsData.length) {
	            var currentTimerData = animationsData[0];
	            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
	            if (setupFallbackTimer) {
	              $timeout.cancel(currentTimerData.timer);
	            } else {
	              animationsData.push(close);
	            }
	          }

	          if (setupFallbackTimer) {
	            var timer = $timeout(onAnimationExpired, timerTime, false);
	            animationsData[0] = {
	              timer: timer,
	              expectedEndTime: endTime
	            };
	            animationsData.push(close);
	            element.data(ANIMATE_TIMER_KEY, animationsData);
	          }

	          if (events.length) {
	            element.on(events.join(' '), onAnimationProgress);
	          }

	          if (options.to) {
	            if (options.cleanupStyles) {
	              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
	            }
	            applyAnimationToStyles(element, options);
	          }
	        }

	        function onAnimationExpired() {
	          var animationsData = element.data(ANIMATE_TIMER_KEY);

	          // this will be false in the event that the element was
	          // removed from the DOM (via a leave animation or something
	          // similar)
	          if (animationsData) {
	            for (var i = 1; i < animationsData.length; i++) {
	              animationsData[i]();
	            }
	            element.removeData(ANIMATE_TIMER_KEY);
	          }
	        }
	      }
	    };
	  }];
	}];

	var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
	  $$animationProvider.drivers.push('$$animateCssDriver');

	  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
	  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

	  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
	  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

	  function isDocumentFragment(node) {
	    return node.parentNode && node.parentNode.nodeType === 11;
	  }

	  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
	       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {

	    // only browsers that support these properties can render animations
	    if (!$sniffer.animations && !$sniffer.transitions) return noop;

	    var bodyNode = $document[0].body;
	    var rootNode = getDomNode($rootElement);

	    var rootBodyElement = jqLite(
	      // this is to avoid using something that exists outside of the body
	      // we also special case the doc fragment case because our unit test code
	      // appends the $rootElement to the body after the app has been bootstrapped
	      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
	    );

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    return function initDriverFn(animationDetails) {
	      return animationDetails.from && animationDetails.to
	          ? prepareFromToAnchorAnimation(animationDetails.from,
	                                         animationDetails.to,
	                                         animationDetails.classes,
	                                         animationDetails.anchors)
	          : prepareRegularAnimation(animationDetails);
	    };

	    function filterCssClasses(classes) {
	      //remove all the `ng-` stuff
	      return classes.replace(/\bng-\S+\b/g, '');
	    }

	    function getUniqueValues(a, b) {
	      if (isString(a)) a = a.split(' ');
	      if (isString(b)) b = b.split(' ');
	      return a.filter(function(val) {
	        return b.indexOf(val) === -1;
	      }).join(' ');
	    }

	    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
	      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
	      var startingClasses = filterCssClasses(getClassVal(clone));

	      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
	      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

	      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

	      rootBodyElement.append(clone);

	      var animatorIn, animatorOut = prepareOutAnimation();

	      // the user may not end up using the `out` animation and
	      // only making use of the `in` animation or vice-versa.
	      // In either case we should allow this and not assume the
	      // animation is over unless both animations are not used.
	      if (!animatorOut) {
	        animatorIn = prepareInAnimation();
	        if (!animatorIn) {
	          return end();
	        }
	      }

	      var startingAnimator = animatorOut || animatorIn;

	      return {
	        start: function() {
	          var runner;

	          var currentAnimation = startingAnimator.start();
	          currentAnimation.done(function() {
	            currentAnimation = null;
	            if (!animatorIn) {
	              animatorIn = prepareInAnimation();
	              if (animatorIn) {
	                currentAnimation = animatorIn.start();
	                currentAnimation.done(function() {
	                  currentAnimation = null;
	                  end();
	                  runner.complete();
	                });
	                return currentAnimation;
	              }
	            }
	            // in the event that there is no `in` animation
	            end();
	            runner.complete();
	          });

	          runner = new $$AnimateRunner({
	            end: endFn,
	            cancel: endFn
	          });

	          return runner;

	          function endFn() {
	            if (currentAnimation) {
	              currentAnimation.end();
	            }
	          }
	        }
	      };

	      function calculateAnchorStyles(anchor) {
	        var styles = {};

	        var coords = getDomNode(anchor).getBoundingClientRect();

	        // we iterate directly since safari messes up and doesn't return
	        // all the keys for the coords object when iterated
	        forEach(['width','height','top','left'], function(key) {
	          var value = coords[key];
	          switch (key) {
	            case 'top':
	              value += bodyNode.scrollTop;
	              break;
	            case 'left':
	              value += bodyNode.scrollLeft;
	              break;
	          }
	          styles[key] = Math.floor(value) + 'px';
	        });
	        return styles;
	      }

	      function prepareOutAnimation() {
	        var animator = $animateCss(clone, {
	          addClass: NG_OUT_ANCHOR_CLASS_NAME,
	          delay: true,
	          from: calculateAnchorStyles(outAnchor)
	        });

	        // read the comment within `prepareRegularAnimation` to understand
	        // why this check is necessary
	        return animator.$$willAnimate ? animator : null;
	      }

	      function getClassVal(element) {
	        return element.attr('class') || '';
	      }

	      function prepareInAnimation() {
	        var endingClasses = filterCssClasses(getClassVal(inAnchor));
	        var toAdd = getUniqueValues(endingClasses, startingClasses);
	        var toRemove = getUniqueValues(startingClasses, endingClasses);

	        var animator = $animateCss(clone, {
	          to: calculateAnchorStyles(inAnchor),
	          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
	          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
	          delay: true
	        });

	        // read the comment within `prepareRegularAnimation` to understand
	        // why this check is necessary
	        return animator.$$willAnimate ? animator : null;
	      }

	      function end() {
	        clone.remove();
	        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
	        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
	      }
	    }

	    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
	      var fromAnimation = prepareRegularAnimation(from, noop);
	      var toAnimation = prepareRegularAnimation(to, noop);

	      var anchorAnimations = [];
	      forEach(anchors, function(anchor) {
	        var outElement = anchor['out'];
	        var inElement = anchor['in'];
	        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
	        if (animator) {
	          anchorAnimations.push(animator);
	        }
	      });

	      // no point in doing anything when there are no elements to animate
	      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

	      return {
	        start: function() {
	          var animationRunners = [];

	          if (fromAnimation) {
	            animationRunners.push(fromAnimation.start());
	          }

	          if (toAnimation) {
	            animationRunners.push(toAnimation.start());
	          }

	          forEach(anchorAnimations, function(animation) {
	            animationRunners.push(animation.start());
	          });

	          var runner = new $$AnimateRunner({
	            end: endFn,
	            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
	          });

	          $$AnimateRunner.all(animationRunners, function(status) {
	            runner.complete(status);
	          });

	          return runner;

	          function endFn() {
	            forEach(animationRunners, function(runner) {
	              runner.end();
	            });
	          }
	        }
	      };
	    }

	    function prepareRegularAnimation(animationDetails) {
	      var element = animationDetails.element;
	      var options = animationDetails.options || {};

	      if (animationDetails.structural) {
	        options.event = animationDetails.event;
	        options.structural = true;
	        options.applyClassesEarly = true;

	        // we special case the leave animation since we want to ensure that
	        // the element is removed as soon as the animation is over. Otherwise
	        // a flicker might appear or the element may not be removed at all
	        if (animationDetails.event === 'leave') {
	          options.onDone = options.domOperation;
	        }
	      }

	      // We assign the preparationClasses as the actual animation event since
	      // the internals of $animateCss will just suffix the event token values
	      // with `-active` to trigger the animation.
	      if (options.preparationClasses) {
	        options.event = concatWithSpace(options.event, options.preparationClasses);
	      }

	      var animator = $animateCss(element, options);

	      // the driver lookup code inside of $$animation attempts to spawn a
	      // driver one by one until a driver returns a.$$willAnimate animator object.
	      // $animateCss will always return an object, however, it will pass in
	      // a flag as a hint as to whether an animation was detected or not
	      return animator.$$willAnimate ? animator : null;
	    }
	  }];
	}];

	// TODO(matsko): use caching here to speed things up for detection
	// TODO(matsko): add documentation
	//  by the time...

	var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
	  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
	       function($injector,   $$AnimateRunner,   $$jqLite) {

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
	         // $animateJs(element, 'enter');
	    return function(element, event, classes, options) {
	      var animationClosed = false;

	      // the `classes` argument is optional and if it is not used
	      // then the classes will be resolved from the element's className
	      // property as well as options.addClass/options.removeClass.
	      if (arguments.length === 3 && isObject(classes)) {
	        options = classes;
	        classes = null;
	      }

	      options = prepareAnimationOptions(options);
	      if (!classes) {
	        classes = element.attr('class') || '';
	        if (options.addClass) {
	          classes += ' ' + options.addClass;
	        }
	        if (options.removeClass) {
	          classes += ' ' + options.removeClass;
	        }
	      }

	      var classesToAdd = options.addClass;
	      var classesToRemove = options.removeClass;

	      // the lookupAnimations function returns a series of animation objects that are
	      // matched up with one or more of the CSS classes. These animation objects are
	      // defined via the module.animation factory function. If nothing is detected then
	      // we don't return anything which then makes $animation query the next driver.
	      var animations = lookupAnimations(classes);
	      var before, after;
	      if (animations.length) {
	        var afterFn, beforeFn;
	        if (event == 'leave') {
	          beforeFn = 'leave';
	          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
	        } else {
	          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
	          afterFn = event;
	        }

	        if (event !== 'enter' && event !== 'move') {
	          before = packageAnimations(element, event, options, animations, beforeFn);
	        }
	        after  = packageAnimations(element, event, options, animations, afterFn);
	      }

	      // no matching animations
	      if (!before && !after) return;

	      function applyOptions() {
	        options.domOperation();
	        applyAnimationClasses(element, options);
	      }

	      function close() {
	        animationClosed = true;
	        applyOptions();
	        applyAnimationStyles(element, options);
	      }

	      var runner;

	      return {
	        $$willAnimate: true,
	        end: function() {
	          if (runner) {
	            runner.end();
	          } else {
	            close();
	            runner = new $$AnimateRunner();
	            runner.complete(true);
	          }
	          return runner;
	        },
	        start: function() {
	          if (runner) {
	            return runner;
	          }

	          runner = new $$AnimateRunner();
	          var closeActiveAnimations;
	          var chain = [];

	          if (before) {
	            chain.push(function(fn) {
	              closeActiveAnimations = before(fn);
	            });
	          }

	          if (chain.length) {
	            chain.push(function(fn) {
	              applyOptions();
	              fn(true);
	            });
	          } else {
	            applyOptions();
	          }

	          if (after) {
	            chain.push(function(fn) {
	              closeActiveAnimations = after(fn);
	            });
	          }

	          runner.setHost({
	            end: function() {
	              endAnimations();
	            },
	            cancel: function() {
	              endAnimations(true);
	            }
	          });

	          $$AnimateRunner.chain(chain, onComplete);
	          return runner;

	          function onComplete(success) {
	            close(success);
	            runner.complete(success);
	          }

	          function endAnimations(cancelled) {
	            if (!animationClosed) {
	              (closeActiveAnimations || noop)(cancelled);
	              onComplete(cancelled);
	            }
	          }
	        }
	      };

	      function executeAnimationFn(fn, element, event, options, onDone) {
	        var args;
	        switch (event) {
	          case 'animate':
	            args = [element, options.from, options.to, onDone];
	            break;

	          case 'setClass':
	            args = [element, classesToAdd, classesToRemove, onDone];
	            break;

	          case 'addClass':
	            args = [element, classesToAdd, onDone];
	            break;

	          case 'removeClass':
	            args = [element, classesToRemove, onDone];
	            break;

	          default:
	            args = [element, onDone];
	            break;
	        }

	        args.push(options);

	        var value = fn.apply(fn, args);
	        if (value) {
	          if (isFunction(value.start)) {
	            value = value.start();
	          }

	          if (value instanceof $$AnimateRunner) {
	            value.done(onDone);
	          } else if (isFunction(value)) {
	            // optional onEnd / onCancel callback
	            return value;
	          }
	        }

	        return noop;
	      }

	      function groupEventedAnimations(element, event, options, animations, fnName) {
	        var operations = [];
	        forEach(animations, function(ani) {
	          var animation = ani[fnName];
	          if (!animation) return;

	          // note that all of these animations will run in parallel
	          operations.push(function() {
	            var runner;
	            var endProgressCb;

	            var resolved = false;
	            var onAnimationComplete = function(rejected) {
	              if (!resolved) {
	                resolved = true;
	                (endProgressCb || noop)(rejected);
	                runner.complete(!rejected);
	              }
	            };

	            runner = new $$AnimateRunner({
	              end: function() {
	                onAnimationComplete();
	              },
	              cancel: function() {
	                onAnimationComplete(true);
	              }
	            });

	            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
	              var cancelled = result === false;
	              onAnimationComplete(cancelled);
	            });

	            return runner;
	          });
	        });

	        return operations;
	      }

	      function packageAnimations(element, event, options, animations, fnName) {
	        var operations = groupEventedAnimations(element, event, options, animations, fnName);
	        if (operations.length === 0) {
	          var a,b;
	          if (fnName === 'beforeSetClass') {
	            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
	            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
	          } else if (fnName === 'setClass') {
	            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
	            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
	          }

	          if (a) {
	            operations = operations.concat(a);
	          }
	          if (b) {
	            operations = operations.concat(b);
	          }
	        }

	        if (operations.length === 0) return;

	        // TODO(matsko): add documentation
	        return function startAnimation(callback) {
	          var runners = [];
	          if (operations.length) {
	            forEach(operations, function(animateFn) {
	              runners.push(animateFn());
	            });
	          }

	          runners.length ? $$AnimateRunner.all(runners, callback) : callback();

	          return function endFn(reject) {
	            forEach(runners, function(runner) {
	              reject ? runner.cancel() : runner.end();
	            });
	          };
	        };
	      }
	    };

	    function lookupAnimations(classes) {
	      classes = isArray(classes) ? classes : classes.split(' ');
	      var matches = [], flagMap = {};
	      for (var i=0; i < classes.length; i++) {
	        var klass = classes[i],
	            animationFactory = $animateProvider.$$registeredAnimations[klass];
	        if (animationFactory && !flagMap[klass]) {
	          matches.push($injector.get(animationFactory));
	          flagMap[klass] = true;
	        }
	      }
	      return matches;
	    }
	  }];
	}];

	var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
	  $$animationProvider.drivers.push('$$animateJsDriver');
	  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
	    return function initDriverFn(animationDetails) {
	      if (animationDetails.from && animationDetails.to) {
	        var fromAnimation = prepareAnimation(animationDetails.from);
	        var toAnimation = prepareAnimation(animationDetails.to);
	        if (!fromAnimation && !toAnimation) return;

	        return {
	          start: function() {
	            var animationRunners = [];

	            if (fromAnimation) {
	              animationRunners.push(fromAnimation.start());
	            }

	            if (toAnimation) {
	              animationRunners.push(toAnimation.start());
	            }

	            $$AnimateRunner.all(animationRunners, done);

	            var runner = new $$AnimateRunner({
	              end: endFnFactory(),
	              cancel: endFnFactory()
	            });

	            return runner;

	            function endFnFactory() {
	              return function() {
	                forEach(animationRunners, function(runner) {
	                  // at this point we cannot cancel animations for groups just yet. 1.5+
	                  runner.end();
	                });
	              };
	            }

	            function done(status) {
	              runner.complete(status);
	            }
	          }
	        };
	      } else {
	        return prepareAnimation(animationDetails);
	      }
	    };

	    function prepareAnimation(animationDetails) {
	      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
	      var element = animationDetails.element;
	      var event = animationDetails.event;
	      var options = animationDetails.options;
	      var classes = animationDetails.classes;
	      return $$animateJs(element, event, classes, options);
	    }
	  }];
	}];

	var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
	var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
	var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
	  var PRE_DIGEST_STATE = 1;
	  var RUNNING_STATE = 2;
	  var ONE_SPACE = ' ';

	  var rules = this.rules = {
	    skip: [],
	    cancel: [],
	    join: []
	  };

	  function makeTruthyCssClassMap(classString) {
	    if (!classString) {
	      return null;
	    }

	    var keys = classString.split(ONE_SPACE);
	    var map = Object.create(null);

	    forEach(keys, function(key) {
	      map[key] = true;
	    });
	    return map;
	  }

	  function hasMatchingClasses(newClassString, currentClassString) {
	    if (newClassString && currentClassString) {
	      var currentClassMap = makeTruthyCssClassMap(currentClassString);
	      return newClassString.split(ONE_SPACE).some(function(className) {
	        return currentClassMap[className];
	      });
	    }
	  }

	  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
	    return rules[ruleType].some(function(fn) {
	      return fn(element, currentAnimation, previousAnimation);
	    });
	  }

	  function hasAnimationClasses(animation, and) {
	    var a = (animation.addClass || '').length > 0;
	    var b = (animation.removeClass || '').length > 0;
	    return and ? a && b : a || b;
	  }

	  rules.join.push(function(element, newAnimation, currentAnimation) {
	    // if the new animation is class-based then we can just tack that on
	    return !newAnimation.structural && hasAnimationClasses(newAnimation);
	  });

	  rules.skip.push(function(element, newAnimation, currentAnimation) {
	    // there is no need to animate anything if no classes are being added and
	    // there is no structural animation that will be triggered
	    return !newAnimation.structural && !hasAnimationClasses(newAnimation);
	  });

	  rules.skip.push(function(element, newAnimation, currentAnimation) {
	    // why should we trigger a new structural animation if the element will
	    // be removed from the DOM anyway?
	    return currentAnimation.event == 'leave' && newAnimation.structural;
	  });

	  rules.skip.push(function(element, newAnimation, currentAnimation) {
	    // if there is an ongoing current animation then don't even bother running the class-based animation
	    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
	  });

	  rules.cancel.push(function(element, newAnimation, currentAnimation) {
	    // there can never be two structural animations running at the same time
	    return currentAnimation.structural && newAnimation.structural;
	  });

	  rules.cancel.push(function(element, newAnimation, currentAnimation) {
	    // if the previous animation is already running, but the new animation will
	    // be triggered, but the new animation is structural
	    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
	  });

	  rules.cancel.push(function(element, newAnimation, currentAnimation) {
	    // cancel the animation if classes added / removed in both animation cancel each other out,
	    // but only if the current animation isn't structural

	    if (currentAnimation.structural) return false;

	    var nA = newAnimation.addClass;
	    var nR = newAnimation.removeClass;
	    var cA = currentAnimation.addClass;
	    var cR = currentAnimation.removeClass;

	    // early detection to save the global CPU shortage :)
	    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {
	      return false;
	    }

	    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
	  });

	  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
	               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
	       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
	                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {

	    var activeAnimationsLookup = new $$HashMap();
	    var disabledElementsLookup = new $$HashMap();
	    var animationsEnabled = null;

	    function postDigestTaskFactory() {
	      var postDigestCalled = false;
	      return function(fn) {
	        // we only issue a call to postDigest before
	        // it has first passed. This prevents any callbacks
	        // from not firing once the animation has completed
	        // since it will be out of the digest cycle.
	        if (postDigestCalled) {
	          fn();
	        } else {
	          $rootScope.$$postDigest(function() {
	            postDigestCalled = true;
	            fn();
	          });
	        }
	      };
	    }

	    // Wait until all directive and route-related templates are downloaded and
	    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
	    // all of the remote templates being currently downloaded. If there are no
	    // templates currently downloading then the watcher will still fire anyway.
	    var deregisterWatch = $rootScope.$watch(
	      function() { return $templateRequest.totalPendingRequests === 0; },
	      function(isEmpty) {
	        if (!isEmpty) return;
	        deregisterWatch();

	        // Now that all templates have been downloaded, $animate will wait until
	        // the post digest queue is empty before enabling animations. By having two
	        // calls to $postDigest calls we can ensure that the flag is enabled at the
	        // very end of the post digest queue. Since all of the animations in $animate
	        // use $postDigest, it's important that the code below executes at the end.
	        // This basically means that the page is fully downloaded and compiled before
	        // any animations are triggered.
	        $rootScope.$$postDigest(function() {
	          $rootScope.$$postDigest(function() {
	            // we check for null directly in the event that the application already called
	            // .enabled() with whatever arguments that it provided it with
	            if (animationsEnabled === null) {
	              animationsEnabled = true;
	            }
	          });
	        });
	      }
	    );

	    var callbackRegistry = {};

	    // remember that the classNameFilter is set during the provider/config
	    // stage therefore we can optimize here and setup a helper function
	    var classNameFilter = $animateProvider.classNameFilter();
	    var isAnimatableClassName = !classNameFilter
	              ? function() { return true; }
	              : function(className) {
	                return classNameFilter.test(className);
	              };

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    function normalizeAnimationDetails(element, animation) {
	      return mergeAnimationDetails(element, animation, {});
	    }

	    // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	    var contains = window.Node.prototype.contains || function(arg) {
	      // jshint bitwise: false
	      return this === arg || !!(this.compareDocumentPosition(arg) & 16);
	      // jshint bitwise: true
	    };

	    function findCallbacks(parent, element, event) {
	      var targetNode = getDomNode(element);
	      var targetParentNode = getDomNode(parent);

	      var matches = [];
	      var entries = callbackRegistry[event];
	      if (entries) {
	        forEach(entries, function(entry) {
	          if (contains.call(entry.node, targetNode)) {
	            matches.push(entry.callback);
	          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
	            matches.push(entry.callback);
	          }
	        });
	      }

	      return matches;
	    }

	    function filterFromRegistry(list, matchContainer, matchCallback) {
	      var containerNode = extractElementNode(matchContainer);
	      return list.filter(function(entry) {
	        var isMatch = entry.node === containerNode &&
	                        (!matchCallback || entry.callback === matchCallback);
	        return !isMatch;
	      });
	    }

	    function cleanupEventListeners(phase, element) {
	      if (phase === 'close' && !element[0].parentNode) {
	        // If the element is not attached to a parentNode, it has been removed by
	        // the domOperation, and we can safely remove the event callbacks
	        $animate.off(element);
	      }
	    }

	    var $animate = {
	      on: function(event, container, callback) {
	        var node = extractElementNode(container);
	        callbackRegistry[event] = callbackRegistry[event] || [];
	        callbackRegistry[event].push({
	          node: node,
	          callback: callback
	        });

	        // Remove the callback when the element is removed from the DOM
	        jqLite(container).on('$destroy', function() {
	          var animationDetails = activeAnimationsLookup.get(node);

	          if (!animationDetails) {
	            // If there's an animation ongoing, the callback calling code will remove
	            // the event listeners. If we'd remove here, the callbacks would be removed
	            // before the animation ends
	            $animate.off(event, container, callback);
	          }
	        });
	      },

	      off: function(event, container, callback) {
	        if (arguments.length === 1 && !angular.isString(arguments[0])) {
	          container = arguments[0];
	          for (var eventType in callbackRegistry) {
	            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
	          }

	          return;
	        }

	        var entries = callbackRegistry[event];
	        if (!entries) return;

	        callbackRegistry[event] = arguments.length === 1
	            ? null
	            : filterFromRegistry(entries, container, callback);
	      },

	      pin: function(element, parentElement) {
	        assertArg(isElement(element), 'element', 'not an element');
	        assertArg(isElement(parentElement), 'parentElement', 'not an element');
	        element.data(NG_ANIMATE_PIN_DATA, parentElement);
	      },

	      push: function(element, event, options, domOperation) {
	        options = options || {};
	        options.domOperation = domOperation;
	        return queueAnimation(element, event, options);
	      },

	      // this method has four signatures:
	      //  () - global getter
	      //  (bool) - global setter
	      //  (element) - element getter
	      //  (element, bool) - element setter<F37>
	      enabled: function(element, bool) {
	        var argCount = arguments.length;

	        if (argCount === 0) {
	          // () - Global getter
	          bool = !!animationsEnabled;
	        } else {
	          var hasElement = isElement(element);

	          if (!hasElement) {
	            // (bool) - Global setter
	            bool = animationsEnabled = !!element;
	          } else {
	            var node = getDomNode(element);
	            var recordExists = disabledElementsLookup.get(node);

	            if (argCount === 1) {
	              // (element) - Element getter
	              bool = !recordExists;
	            } else {
	              // (element, bool) - Element setter
	              disabledElementsLookup.put(node, !bool);
	            }
	          }
	        }

	        return bool;
	      }
	    };

	    return $animate;

	    function queueAnimation(element, event, initialOptions) {
	      // we always make a copy of the options since
	      // there should never be any side effects on
	      // the input data when running `$animateCss`.
	      var options = copy(initialOptions);

	      var node, parent;
	      element = stripCommentsFromElement(element);
	      if (element) {
	        node = getDomNode(element);
	        parent = element.parent();
	      }

	      options = prepareAnimationOptions(options);

	      // we create a fake runner with a working promise.
	      // These methods will become available after the digest has passed
	      var runner = new $$AnimateRunner();

	      // this is used to trigger callbacks in postDigest mode
	      var runInNextPostDigestOrNow = postDigestTaskFactory();

	      if (isArray(options.addClass)) {
	        options.addClass = options.addClass.join(' ');
	      }

	      if (options.addClass && !isString(options.addClass)) {
	        options.addClass = null;
	      }

	      if (isArray(options.removeClass)) {
	        options.removeClass = options.removeClass.join(' ');
	      }

	      if (options.removeClass && !isString(options.removeClass)) {
	        options.removeClass = null;
	      }

	      if (options.from && !isObject(options.from)) {
	        options.from = null;
	      }

	      if (options.to && !isObject(options.to)) {
	        options.to = null;
	      }

	      // there are situations where a directive issues an animation for
	      // a jqLite wrapper that contains only comment nodes... If this
	      // happens then there is no way we can perform an animation
	      if (!node) {
	        close();
	        return runner;
	      }

	      var className = [node.className, options.addClass, options.removeClass].join(' ');
	      if (!isAnimatableClassName(className)) {
	        close();
	        return runner;
	      }

	      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

	      var documentHidden = $document[0].hidden;

	      // this is a hard disable of all animations for the application or on
	      // the element itself, therefore  there is no need to continue further
	      // past this point if not enabled
	      // Animations are also disabled if the document is currently hidden (page is not visible
	      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
	      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);
	      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
	      var hasExistingAnimation = !!existingAnimation.state;

	      // there is no point in traversing the same collection of parent ancestors if a followup
	      // animation will be run on the same element that already did all that checking work
	      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
	        skipAnimations = !areAnimationsAllowed(element, parent, event);
	      }

	      if (skipAnimations) {
	        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)
	        if (documentHidden) notifyProgress(runner, event, 'start');
	        close();
	        if (documentHidden) notifyProgress(runner, event, 'close');
	        return runner;
	      }

	      if (isStructural) {
	        closeChildAnimations(element);
	      }

	      var newAnimation = {
	        structural: isStructural,
	        element: element,
	        event: event,
	        addClass: options.addClass,
	        removeClass: options.removeClass,
	        close: close,
	        options: options,
	        runner: runner
	      };

	      if (hasExistingAnimation) {
	        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
	        if (skipAnimationFlag) {
	          if (existingAnimation.state === RUNNING_STATE) {
	            close();
	            return runner;
	          } else {
	            mergeAnimationDetails(element, existingAnimation, newAnimation);
	            return existingAnimation.runner;
	          }
	        }
	        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
	        if (cancelAnimationFlag) {
	          if (existingAnimation.state === RUNNING_STATE) {
	            // this will end the animation right away and it is safe
	            // to do so since the animation is already running and the
	            // runner callback code will run in async
	            existingAnimation.runner.end();
	          } else if (existingAnimation.structural) {
	            // this means that the animation is queued into a digest, but
	            // hasn't started yet. Therefore it is safe to run the close
	            // method which will call the runner methods in async.
	            existingAnimation.close();
	          } else {
	            // this will merge the new animation options into existing animation options
	            mergeAnimationDetails(element, existingAnimation, newAnimation);

	            return existingAnimation.runner;
	          }
	        } else {
	          // a joined animation means that this animation will take over the existing one
	          // so an example would involve a leave animation taking over an enter. Then when
	          // the postDigest kicks in the enter will be ignored.
	          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
	          if (joinAnimationFlag) {
	            if (existingAnimation.state === RUNNING_STATE) {
	              normalizeAnimationDetails(element, newAnimation);
	            } else {
	              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

	              event = newAnimation.event = existingAnimation.event;
	              options = mergeAnimationDetails(element, existingAnimation, newAnimation);

	              //we return the same runner since only the option values of this animation will
	              //be fed into the `existingAnimation`.
	              return existingAnimation.runner;
	            }
	          }
	        }
	      } else {
	        // normalization in this case means that it removes redundant CSS classes that
	        // already exist (addClass) or do not exist (removeClass) on the element
	        normalizeAnimationDetails(element, newAnimation);
	      }

	      // when the options are merged and cleaned up we may end up not having to do
	      // an animation at all, therefore we should check this before issuing a post
	      // digest callback. Structural animations will always run no matter what.
	      var isValidAnimation = newAnimation.structural;
	      if (!isValidAnimation) {
	        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
	        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
	                            || hasAnimationClasses(newAnimation);
	      }

	      if (!isValidAnimation) {
	        close();
	        clearElementAnimationState(element);
	        return runner;
	      }

	      // the counter keeps track of cancelled animations
	      var counter = (existingAnimation.counter || 0) + 1;
	      newAnimation.counter = counter;

	      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

	      $rootScope.$$postDigest(function() {
	        var animationDetails = activeAnimationsLookup.get(node);
	        var animationCancelled = !animationDetails;
	        animationDetails = animationDetails || {};

	        // if addClass/removeClass is called before something like enter then the
	        // registered parent element may not be present. The code below will ensure
	        // that a final value for parent element is obtained
	        var parentElement = element.parent() || [];

	        // animate/structural/class-based animations all have requirements. Otherwise there
	        // is no point in performing an animation. The parent node must also be set.
	        var isValidAnimation = parentElement.length > 0
	                                && (animationDetails.event === 'animate'
	                                    || animationDetails.structural
	                                    || hasAnimationClasses(animationDetails));

	        // this means that the previous animation was cancelled
	        // even if the follow-up animation is the same event
	        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
	          // if another animation did not take over then we need
	          // to make sure that the domOperation and options are
	          // handled accordingly
	          if (animationCancelled) {
	            applyAnimationClasses(element, options);
	            applyAnimationStyles(element, options);
	          }

	          // if the event changed from something like enter to leave then we do
	          // it, otherwise if it's the same then the end result will be the same too
	          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
	            options.domOperation();
	            runner.end();
	          }

	          // in the event that the element animation was not cancelled or a follow-up animation
	          // isn't allowed to animate from here then we need to clear the state of the element
	          // so that any future animations won't read the expired animation data.
	          if (!isValidAnimation) {
	            clearElementAnimationState(element);
	          }

	          return;
	        }

	        // this combined multiple class to addClass / removeClass into a setClass event
	        // so long as a structural event did not take over the animation
	        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)
	            ? 'setClass'
	            : animationDetails.event;

	        markElementAnimationState(element, RUNNING_STATE);
	        var realRunner = $$animation(element, event, animationDetails.options);

	        // this will update the runner's flow-control events based on
	        // the `realRunner` object.
	        runner.setHost(realRunner);
	        notifyProgress(runner, event, 'start', {});

	        realRunner.done(function(status) {
	          close(!status);
	          var animationDetails = activeAnimationsLookup.get(node);
	          if (animationDetails && animationDetails.counter === counter) {
	            clearElementAnimationState(getDomNode(element));
	          }
	          notifyProgress(runner, event, 'close', {});
	        });
	      });

	      return runner;

	      function notifyProgress(runner, event, phase, data) {
	        runInNextPostDigestOrNow(function() {
	          var callbacks = findCallbacks(parent, element, event);
	          if (callbacks.length) {
	            // do not optimize this call here to RAF because
	            // we don't know how heavy the callback code here will
	            // be and if this code is buffered then this can
	            // lead to a performance regression.
	            $$rAF(function() {
	              forEach(callbacks, function(callback) {
	                callback(element, phase, data);
	              });
	              cleanupEventListeners(phase, element);
	            });
	          } else {
	            cleanupEventListeners(phase, element);
	          }
	        });
	        runner.progress(event, phase, data);
	      }

	      function close(reject) { // jshint ignore:line
	        clearGeneratedClasses(element, options);
	        applyAnimationClasses(element, options);
	        applyAnimationStyles(element, options);
	        options.domOperation();
	        runner.complete(!reject);
	      }
	    }

	    function closeChildAnimations(element) {
	      var node = getDomNode(element);
	      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
	      forEach(children, function(child) {
	        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
	        var animationDetails = activeAnimationsLookup.get(child);
	        if (animationDetails) {
	          switch (state) {
	            case RUNNING_STATE:
	              animationDetails.runner.end();
	              /* falls through */
	            case PRE_DIGEST_STATE:
	              activeAnimationsLookup.remove(child);
	              break;
	          }
	        }
	      });
	    }

	    function clearElementAnimationState(element) {
	      var node = getDomNode(element);
	      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
	      activeAnimationsLookup.remove(node);
	    }

	    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
	      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
	    }

	    /**
	     * This fn returns false if any of the following is true:
	     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
	     * b) a parent element has an ongoing structural animation, and animateChildren is false
	     * c) the element is not a child of the body
	     * d) the element is not a child of the $rootElement
	     */
	    function areAnimationsAllowed(element, parentElement, event) {
	      var bodyElement = jqLite($document[0].body);
	      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
	      var rootElementDetected = isMatchingElement(element, $rootElement);
	      var parentAnimationDetected = false;
	      var animateChildren;
	      var elementDisabled = disabledElementsLookup.get(getDomNode(element));

	      var parentHost = jqLite.data(element[0], NG_ANIMATE_PIN_DATA);
	      if (parentHost) {
	        parentElement = parentHost;
	      }

	      parentElement = getDomNode(parentElement);

	      while (parentElement) {
	        if (!rootElementDetected) {
	          // angular doesn't want to attempt to animate elements outside of the application
	          // therefore we need to ensure that the rootElement is an ancestor of the current element
	          rootElementDetected = isMatchingElement(parentElement, $rootElement);
	        }

	        if (parentElement.nodeType !== ELEMENT_NODE) {
	          // no point in inspecting the #document element
	          break;
	        }

	        var details = activeAnimationsLookup.get(parentElement) || {};
	        // either an enter, leave or move animation will commence
	        // therefore we can't allow any animations to take place
	        // but if a parent animation is class-based then that's ok
	        if (!parentAnimationDetected) {
	          var parentElementDisabled = disabledElementsLookup.get(parentElement);

	          if (parentElementDisabled === true && elementDisabled !== false) {
	            // disable animations if the user hasn't explicitly enabled animations on the
	            // current element
	            elementDisabled = true;
	            // element is disabled via parent element, no need to check anything else
	            break;
	          } else if (parentElementDisabled === false) {
	            elementDisabled = false;
	          }
	          parentAnimationDetected = details.structural;
	        }

	        if (isUndefined(animateChildren) || animateChildren === true) {
	          var value = jqLite.data(parentElement, NG_ANIMATE_CHILDREN_DATA);
	          if (isDefined(value)) {
	            animateChildren = value;
	          }
	        }

	        // there is no need to continue traversing at this point
	        if (parentAnimationDetected && animateChildren === false) break;

	        if (!bodyElementDetected) {
	          // we also need to ensure that the element is or will be a part of the body element
	          // otherwise it is pointless to even issue an animation to be rendered
	          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
	        }

	        if (bodyElementDetected && rootElementDetected) {
	          // If both body and root have been found, any other checks are pointless,
	          // as no animation data should live outside the application
	          break;
	        }

	        if (!rootElementDetected) {
	          // If no rootElement is detected, check if the parentElement is pinned to another element
	          parentHost = jqLite.data(parentElement, NG_ANIMATE_PIN_DATA);
	          if (parentHost) {
	            // The pin target element becomes the next parent element
	            parentElement = getDomNode(parentHost);
	            continue;
	          }
	        }

	        parentElement = parentElement.parentNode;
	      }

	      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
	      return allowAnimation && rootElementDetected && bodyElementDetected;
	    }

	    function markElementAnimationState(element, state, details) {
	      details = details || {};
	      details.state = state;

	      var node = getDomNode(element);
	      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

	      var oldValue = activeAnimationsLookup.get(node);
	      var newValue = oldValue
	          ? extend(oldValue, details)
	          : details;
	      activeAnimationsLookup.put(node, newValue);
	    }
	  }];
	}];

	var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
	  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

	  var drivers = this.drivers = [];

	  var RUNNER_STORAGE_KEY = '$$animationRunner';

	  function setRunner(element, runner) {
	    element.data(RUNNER_STORAGE_KEY, runner);
	  }

	  function removeRunner(element) {
	    element.removeData(RUNNER_STORAGE_KEY);
	  }

	  function getRunner(element) {
	    return element.data(RUNNER_STORAGE_KEY);
	  }

	  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
	       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {

	    var animationQueue = [];
	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    function sortAnimations(animations) {
	      var tree = { children: [] };
	      var i, lookup = new $$HashMap();

	      // this is done first beforehand so that the hashmap
	      // is filled with a list of the elements that will be animated
	      for (i = 0; i < animations.length; i++) {
	        var animation = animations[i];
	        lookup.put(animation.domNode, animations[i] = {
	          domNode: animation.domNode,
	          fn: animation.fn,
	          children: []
	        });
	      }

	      for (i = 0; i < animations.length; i++) {
	        processNode(animations[i]);
	      }

	      return flatten(tree);

	      function processNode(entry) {
	        if (entry.processed) return entry;
	        entry.processed = true;

	        var elementNode = entry.domNode;
	        var parentNode = elementNode.parentNode;
	        lookup.put(elementNode, entry);

	        var parentEntry;
	        while (parentNode) {
	          parentEntry = lookup.get(parentNode);
	          if (parentEntry) {
	            if (!parentEntry.processed) {
	              parentEntry = processNode(parentEntry);
	            }
	            break;
	          }
	          parentNode = parentNode.parentNode;
	        }

	        (parentEntry || tree).children.push(entry);
	        return entry;
	      }

	      function flatten(tree) {
	        var result = [];
	        var queue = [];
	        var i;

	        for (i = 0; i < tree.children.length; i++) {
	          queue.push(tree.children[i]);
	        }

	        var remainingLevelEntries = queue.length;
	        var nextLevelEntries = 0;
	        var row = [];

	        for (i = 0; i < queue.length; i++) {
	          var entry = queue[i];
	          if (remainingLevelEntries <= 0) {
	            remainingLevelEntries = nextLevelEntries;
	            nextLevelEntries = 0;
	            result.push(row);
	            row = [];
	          }
	          row.push(entry.fn);
	          entry.children.forEach(function(childEntry) {
	            nextLevelEntries++;
	            queue.push(childEntry);
	          });
	          remainingLevelEntries--;
	        }

	        if (row.length) {
	          result.push(row);
	        }

	        return result;
	      }
	    }

	    // TODO(matsko): document the signature in a better way
	    return function(element, event, options) {
	      options = prepareAnimationOptions(options);
	      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

	      // there is no animation at the current moment, however
	      // these runner methods will get later updated with the
	      // methods leading into the driver's end/cancel methods
	      // for now they just stop the animation from starting
	      var runner = new $$AnimateRunner({
	        end: function() { close(); },
	        cancel: function() { close(true); }
	      });

	      if (!drivers.length) {
	        close();
	        return runner;
	      }

	      setRunner(element, runner);

	      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
	      var tempClasses = options.tempClasses;
	      if (tempClasses) {
	        classes += ' ' + tempClasses;
	        options.tempClasses = null;
	      }

	      var prepareClassName;
	      if (isStructural) {
	        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;
	        $$jqLite.addClass(element, prepareClassName);
	      }

	      animationQueue.push({
	        // this data is used by the postDigest code and passed into
	        // the driver step function
	        element: element,
	        classes: classes,
	        event: event,
	        structural: isStructural,
	        options: options,
	        beforeStart: beforeStart,
	        close: close
	      });

	      element.on('$destroy', handleDestroyedElement);

	      // we only want there to be one function called within the post digest
	      // block. This way we can group animations for all the animations that
	      // were apart of the same postDigest flush call.
	      if (animationQueue.length > 1) return runner;

	      $rootScope.$$postDigest(function() {
	        var animations = [];
	        forEach(animationQueue, function(entry) {
	          // the element was destroyed early on which removed the runner
	          // form its storage. This means we can't animate this element
	          // at all and it already has been closed due to destruction.
	          if (getRunner(entry.element)) {
	            animations.push(entry);
	          } else {
	            entry.close();
	          }
	        });

	        // now any future animations will be in another postDigest
	        animationQueue.length = 0;

	        var groupedAnimations = groupAnimations(animations);
	        var toBeSortedAnimations = [];

	        forEach(groupedAnimations, function(animationEntry) {
	          toBeSortedAnimations.push({
	            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
	            fn: function triggerAnimationStart() {
	              // it's important that we apply the `ng-animate` CSS class and the
	              // temporary classes before we do any driver invoking since these
	              // CSS classes may be required for proper CSS detection.
	              animationEntry.beforeStart();

	              var startAnimationFn, closeFn = animationEntry.close;

	              // in the event that the element was removed before the digest runs or
	              // during the RAF sequencing then we should not trigger the animation.
	              var targetElement = animationEntry.anchors
	                  ? (animationEntry.from.element || animationEntry.to.element)
	                  : animationEntry.element;

	              if (getRunner(targetElement)) {
	                var operation = invokeFirstDriver(animationEntry);
	                if (operation) {
	                  startAnimationFn = operation.start;
	                }
	              }

	              if (!startAnimationFn) {
	                closeFn();
	              } else {
	                var animationRunner = startAnimationFn();
	                animationRunner.done(function(status) {
	                  closeFn(!status);
	                });
	                updateAnimationRunners(animationEntry, animationRunner);
	              }
	            }
	          });
	        });

	        // we need to sort each of the animations in order of parent to child
	        // relationships. This ensures that the child classes are applied at the
	        // right time.
	        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
	      });

	      return runner;

	      // TODO(matsko): change to reference nodes
	      function getAnchorNodes(node) {
	        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
	        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
	              ? [node]
	              : node.querySelectorAll(SELECTOR);
	        var anchors = [];
	        forEach(items, function(node) {
	          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
	          if (attr && attr.length) {
	            anchors.push(node);
	          }
	        });
	        return anchors;
	      }

	      function groupAnimations(animations) {
	        var preparedAnimations = [];
	        var refLookup = {};
	        forEach(animations, function(animation, index) {
	          var element = animation.element;
	          var node = getDomNode(element);
	          var event = animation.event;
	          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
	          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

	          if (anchorNodes.length) {
	            var direction = enterOrMove ? 'to' : 'from';

	            forEach(anchorNodes, function(anchor) {
	              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
	              refLookup[key] = refLookup[key] || {};
	              refLookup[key][direction] = {
	                animationID: index,
	                element: jqLite(anchor)
	              };
	            });
	          } else {
	            preparedAnimations.push(animation);
	          }
	        });

	        var usedIndicesLookup = {};
	        var anchorGroups = {};
	        forEach(refLookup, function(operations, key) {
	          var from = operations.from;
	          var to = operations.to;

	          if (!from || !to) {
	            // only one of these is set therefore we can't have an
	            // anchor animation since all three pieces are required
	            var index = from ? from.animationID : to.animationID;
	            var indexKey = index.toString();
	            if (!usedIndicesLookup[indexKey]) {
	              usedIndicesLookup[indexKey] = true;
	              preparedAnimations.push(animations[index]);
	            }
	            return;
	          }

	          var fromAnimation = animations[from.animationID];
	          var toAnimation = animations[to.animationID];
	          var lookupKey = from.animationID.toString();
	          if (!anchorGroups[lookupKey]) {
	            var group = anchorGroups[lookupKey] = {
	              structural: true,
	              beforeStart: function() {
	                fromAnimation.beforeStart();
	                toAnimation.beforeStart();
	              },
	              close: function() {
	                fromAnimation.close();
	                toAnimation.close();
	              },
	              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
	              from: fromAnimation,
	              to: toAnimation,
	              anchors: [] // TODO(matsko): change to reference nodes
	            };

	            // the anchor animations require that the from and to elements both have at least
	            // one shared CSS class which effectively marries the two elements together to use
	            // the same animation driver and to properly sequence the anchor animation.
	            if (group.classes.length) {
	              preparedAnimations.push(group);
	            } else {
	              preparedAnimations.push(fromAnimation);
	              preparedAnimations.push(toAnimation);
	            }
	          }

	          anchorGroups[lookupKey].anchors.push({
	            'out': from.element, 'in': to.element
	          });
	        });

	        return preparedAnimations;
	      }

	      function cssClassesIntersection(a,b) {
	        a = a.split(' ');
	        b = b.split(' ');
	        var matches = [];

	        for (var i = 0; i < a.length; i++) {
	          var aa = a[i];
	          if (aa.substring(0,3) === 'ng-') continue;

	          for (var j = 0; j < b.length; j++) {
	            if (aa === b[j]) {
	              matches.push(aa);
	              break;
	            }
	          }
	        }

	        return matches.join(' ');
	      }

	      function invokeFirstDriver(animationDetails) {
	        // we loop in reverse order since the more general drivers (like CSS and JS)
	        // may attempt more elements, but custom drivers are more particular
	        for (var i = drivers.length - 1; i >= 0; i--) {
	          var driverName = drivers[i];
	          var factory = $injector.get(driverName);
	          var driver = factory(animationDetails);
	          if (driver) {
	            return driver;
	          }
	        }
	      }

	      function beforeStart() {
	        element.addClass(NG_ANIMATE_CLASSNAME);
	        if (tempClasses) {
	          $$jqLite.addClass(element, tempClasses);
	        }
	        if (prepareClassName) {
	          $$jqLite.removeClass(element, prepareClassName);
	          prepareClassName = null;
	        }
	      }

	      function updateAnimationRunners(animation, newRunner) {
	        if (animation.from && animation.to) {
	          update(animation.from.element);
	          update(animation.to.element);
	        } else {
	          update(animation.element);
	        }

	        function update(element) {
	          var runner = getRunner(element);
	          if (runner) runner.setHost(newRunner);
	        }
	      }

	      function handleDestroyedElement() {
	        var runner = getRunner(element);
	        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
	          runner.end();
	        }
	      }

	      function close(rejected) { // jshint ignore:line
	        element.off('$destroy', handleDestroyedElement);
	        removeRunner(element);

	        applyAnimationClasses(element, options);
	        applyAnimationStyles(element, options);
	        options.domOperation();

	        if (tempClasses) {
	          $$jqLite.removeClass(element, tempClasses);
	        }

	        element.removeClass(NG_ANIMATE_CLASSNAME);
	        runner.complete(!rejected);
	      }
	    };
	  }];
	}];

	/**
	 * @ngdoc directive
	 * @name ngAnimateSwap
	 * @restrict A
	 * @scope
	 *
	 * @description
	 *
	 * ngAnimateSwap is a animation-oriented directive that allows for the container to
	 * be removed and entered in whenever the associated expression changes. A
	 * common usecase for this directive is a rotating banner or slider component which
	 * contains one image being present at a time. When the active image changes
	 * then the old image will perform a `leave` animation and the new element
	 * will be inserted via an `enter` animation.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|--------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |
	 * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |
	 *
	 * @example
	 * <example name="ngAnimateSwap-directive" module="ngAnimateSwapExample"
	 *          deps="angular-animate.js"
	 *          animations="true" fixBase="true">
	 *   <file name="index.html">
	 *     <div class="container" ng-controller="AppCtrl">
	 *       <div ng-animate-swap="number" class="cell swap-animation" ng-class="colorClass(number)">
	 *         {{ number }}
	 *       </div>
	 *     </div>
	 *   </file>
	 *   <file name="script.js">
	 *     angular.module('ngAnimateSwapExample', ['ngAnimate'])
	 *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {
	 *         $scope.number = 0;
	 *         $interval(function() {
	 *           $scope.number++;
	 *         }, 1000);
	 *
	 *         var colors = ['red','blue','green','yellow','orange'];
	 *         $scope.colorClass = function(number) {
	 *           return colors[number % colors.length];
	 *         };
	 *       }]);
	 *   </file>
	 *  <file name="animations.css">
	 *  .container {
	 *    height:250px;
	 *    width:250px;
	 *    position:relative;
	 *    overflow:hidden;
	 *    border:2px solid black;
	 *  }
	 *  .container .cell {
	 *    font-size:150px;
	 *    text-align:center;
	 *    line-height:250px;
	 *    position:absolute;
	 *    top:0;
	 *    left:0;
	 *    right:0;
	 *    border-bottom:2px solid black;
	 *  }
	 *  .swap-animation.ng-enter, .swap-animation.ng-leave {
	 *    transition:0.5s linear all;
	 *  }
	 *  .swap-animation.ng-enter {
	 *    top:-250px;
	 *  }
	 *  .swap-animation.ng-enter-active {
	 *    top:0px;
	 *  }
	 *  .swap-animation.ng-leave {
	 *    top:0px;
	 *  }
	 *  .swap-animation.ng-leave-active {
	 *    top:250px;
	 *  }
	 *  .red { background:red; }
	 *  .green { background:green; }
	 *  .blue { background:blue; }
	 *  .yellow { background:yellow; }
	 *  .orange { background:orange; }
	 *  </file>
	 * </example>
	 */
	var ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {
	  return {
	    restrict: 'A',
	    transclude: 'element',
	    terminal: true,
	    priority: 600, // we use 600 here to ensure that the directive is caught before others
	    link: function(scope, $element, attrs, ctrl, $transclude) {
	      var previousElement, previousScope;
	      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {
	        if (previousElement) {
	          $animate.leave(previousElement);
	        }
	        if (previousScope) {
	          previousScope.$destroy();
	          previousScope = null;
	        }
	        if (value || value === 0) {
	          previousScope = scope.$new();
	          $transclude(previousScope, function(element) {
	            previousElement = element;
	            $animate.enter(element, null, $element);
	          });
	        }
	      });
	    }
	  };
	}];

	/* global angularAnimateModule: true,

	   ngAnimateSwapDirective,
	   $$AnimateAsyncRunFactory,
	   $$rAFSchedulerFactory,
	   $$AnimateChildrenDirective,
	   $$AnimateQueueProvider,
	   $$AnimationProvider,
	   $AnimateCssProvider,
	   $$AnimateCssDriverProvider,
	   $$AnimateJsProvider,
	   $$AnimateJsDriverProvider,
	*/

	/**
	 * @ngdoc module
	 * @name ngAnimate
	 * @description
	 *
	 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
	 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
	 *
	 * <div doc-module-components="ngAnimate"></div>
	 *
	 * # Usage
	 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
	 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
	 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
	 * the HTML element that the animation will be triggered on.
	 *
	 * ## Directive Support
	 * The following directives are "animation aware":
	 *
	 * | Directive                                                                                                | Supported Animations                                                     |
	 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
	 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
	 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
	 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
	 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
	 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
	 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
	 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
	 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
	 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
	 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
	 *
	 * (More information can be found by visiting each the documentation associated with each directive.)
	 *
	 * ## CSS-based Animations
	 *
	 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
	 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
	 *
	 * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
	 *
	 * ```html
	 * <div ng-if="bool" class="fade">
	 *    Fade me in out
	 * </div>
	 * <button ng-click="bool=true">Fade In!</button>
	 * <button ng-click="bool=false">Fade Out!</button>
	 * ```
	 *
	 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
	 *
	 * ```css
	 * /&#42; The starting CSS styles for the enter animation &#42;/
	 * .fade.ng-enter {
	 *   transition:0.5s linear all;
	 *   opacity:0;
	 * }
	 *
	 * /&#42; The finishing CSS styles for the enter animation &#42;/
	 * .fade.ng-enter.ng-enter-active {
	 *   opacity:1;
	 * }
	 * ```
	 *
	 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
	 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
	 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
	 *
	 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
	 *
	 * ```css
	 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
	 * .fade.ng-leave {
	 *   transition:0.5s linear all;
	 *   opacity:1;
	 * }
	 * .fade.ng-leave.ng-leave-active {
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
	 *
	 * ```css
	 * /&#42; there is no need to define anything inside of the destination
	 * CSS class since the keyframe will take charge of the animation &#42;/
	 * .fade.ng-leave {
	 *   animation: my_fade_animation 0.5s linear;
	 *   -webkit-animation: my_fade_animation 0.5s linear;
	 * }
	 *
	 * @keyframes my_fade_animation {
	 *   from { opacity:1; }
	 *   to { opacity:0; }
	 * }
	 *
	 * @-webkit-keyframes my_fade_animation {
	 *   from { opacity:1; }
	 *   to { opacity:0; }
	 * }
	 * ```
	 *
	 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
	 *
	 * ### CSS Class-based Animations
	 *
	 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
	 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
	 * and removed.
	 *
	 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
	 *
	 * ```html
	 * <div ng-show="bool" class="fade">
	 *   Show and hide me
	 * </div>
	 * <button ng-click="bool=!bool">Toggle</button>
	 *
	 * <style>
	 * .fade.ng-hide {
	 *   transition:0.5s linear all;
	 *   opacity:0;
	 * }
	 * </style>
	 * ```
	 *
	 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
	 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
	 *
	 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
	 * with CSS styles.
	 *
	 * ```html
	 * <div ng-class="{on:onOff}" class="highlight">
	 *   Highlight this box
	 * </div>
	 * <button ng-click="onOff=!onOff">Toggle</button>
	 *
	 * <style>
	 * .highlight {
	 *   transition:0.5s linear all;
	 * }
	 * .highlight.on-add {
	 *   background:white;
	 * }
	 * .highlight.on {
	 *   background:yellow;
	 * }
	 * .highlight.on-remove {
	 *   background:black;
	 * }
	 * </style>
	 * ```
	 *
	 * We can also make use of CSS keyframes by placing them within the CSS classes.
	 *
	 *
	 * ### CSS Staggering Animations
	 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
	 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
	 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
	 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
	 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
	 *
	 * ```css
	 * .my-animation.ng-enter {
	 *   /&#42; standard transition code &#42;/
	 *   transition: 1s linear all;
	 *   opacity:0;
	 * }
	 * .my-animation.ng-enter-stagger {
	 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
	 *   transition-delay: 0.1s;
	 *
	 *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
	 *     to not accidentally inherit a delay property from another CSS class &#42;/
	 *   transition-duration: 0s;
	 * }
	 * .my-animation.ng-enter.ng-enter-active {
	 *   /&#42; standard transition styles &#42;/
	 *   opacity:1;
	 * }
	 * ```
	 *
	 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
	 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
	 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
	 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
	 *
	 * The following code will issue the **ng-leave-stagger** event on the element provided:
	 *
	 * ```js
	 * var kids = parent.children();
	 *
	 * $animate.leave(kids[0]); //stagger index=0
	 * $animate.leave(kids[1]); //stagger index=1
	 * $animate.leave(kids[2]); //stagger index=2
	 * $animate.leave(kids[3]); //stagger index=3
	 * $animate.leave(kids[4]); //stagger index=4
	 *
	 * window.requestAnimationFrame(function() {
	 *   //stagger has reset itself
	 *   $animate.leave(kids[5]); //stagger index=0
	 *   $animate.leave(kids[6]); //stagger index=1
	 *
	 *   $scope.$digest();
	 * });
	 * ```
	 *
	 * Stagger animations are currently only supported within CSS-defined animations.
	 *
	 * ### The `ng-animate` CSS class
	 *
	 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
	 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
	 *
	 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
	 *
	 * ```css
	 * .zipper.ng-animate {
	 *   transition:0.5s linear all;
	 * }
	 * .zipper.ng-enter {
	 *   opacity:0;
	 * }
	 * .zipper.ng-enter.ng-enter-active {
	 *   opacity:1;
	 * }
	 * .zipper.ng-leave {
	 *   opacity:1;
	 * }
	 * .zipper.ng-leave.ng-leave-active {
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
	 * the CSS class once an animation has completed.)
	 *
	 *
	 * ### The `ng-[event]-prepare` class
	 *
	 * This is a special class that can be used to prevent unwanted flickering / flash of content before
	 * the actual animation starts. The class is added as soon as an animation is initialized, but removed
	 * before the actual animation starts (after waiting for a $digest).
	 * It is also only added for *structural* animations (`enter`, `move`, and `leave`).
	 *
	 * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`
	 * into elements that have class-based animations such as `ngClass`.
	 *
	 * ```html
	 * <div ng-class="{red: myProp}">
	 *   <div ng-class="{blue: myProp}">
	 *     <div class="message" ng-if="myProp"></div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.
	 * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:
	 *
	 * ```css
	 * .message.ng-enter-prepare {
	 *   opacity: 0;
	 * }
	 *
	 * ```
	 *
	 * ## JavaScript-based Animations
	 *
	 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
	 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
	 * `module.animation()` module function we can register the animation.
	 *
	 * Let's see an example of a enter/leave animation using `ngRepeat`:
	 *
	 * ```html
	 * <div ng-repeat="item in items" class="slide">
	 *   {{ item }}
	 * </div>
	 * ```
	 *
	 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
	 *
	 * ```js
	 * myModule.animation('.slide', [function() {
	 *   return {
	 *     // make note that other events (like addClass/removeClass)
	 *     // have different function input parameters
	 *     enter: function(element, doneFn) {
	 *       jQuery(element).fadeIn(1000, doneFn);
	 *
	 *       // remember to call doneFn so that angular
	 *       // knows that the animation has concluded
	 *     },
	 *
	 *     move: function(element, doneFn) {
	 *       jQuery(element).fadeIn(1000, doneFn);
	 *     },
	 *
	 *     leave: function(element, doneFn) {
	 *       jQuery(element).fadeOut(1000, doneFn);
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
	 * greensock.js and velocity.js.
	 *
	 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
	 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
	 *
	 * ```html
	 * <div ng-class="color" class="colorful">
	 *   this box is moody
	 * </div>
	 * <button ng-click="color='red'">Change to red</button>
	 * <button ng-click="color='blue'">Change to blue</button>
	 * <button ng-click="color='green'">Change to green</button>
	 * ```
	 *
	 * ```js
	 * myModule.animation('.colorful', [function() {
	 *   return {
	 *     addClass: function(element, className, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     },
	 *     removeClass: function(element, className, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     },
	 *     setClass: function(element, addedClass, removedClass, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * ## CSS + JS Animations Together
	 *
	 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
	 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
	 * charge of the animation**:
	 *
	 * ```html
	 * <div ng-if="bool" class="slide">
	 *   Slide in and out
	 * </div>
	 * ```
	 *
	 * ```js
	 * myModule.animation('.slide', [function() {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       jQuery(element).slideIn(1000, doneFn);
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * ```css
	 * .slide.ng-enter {
	 *   transition:0.5s linear all;
	 *   transform:translateY(-100px);
	 * }
	 * .slide.ng-enter.ng-enter-active {
	 *   transform:translateY(0);
	 * }
	 * ```
	 *
	 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
	 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
	 * our own JS-based animation code:
	 *
	 * ```js
	 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element) {
	*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
	 *       return $animateCss(element, {
	 *         event: 'enter',
	 *         structural: true
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
	 *
	 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
	 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
	 * data into `$animateCss` directly:
	 *
	 * ```js
	 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element) {
	 *       return $animateCss(element, {
	 *         event: 'enter',
	 *         structural: true,
	 *         addClass: 'maroon-setting',
	 *         from: { height:0 },
	 *         to: { height: 200 }
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * Now we can fill in the rest via our transition CSS code:
	 *
	 * ```css
	 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
	 * .slide.ng-enter { transition:0.5s linear all; }
	 *
	 * /&#42; this extra CSS class will be absorbed into the transition
	 * since the $animateCss code is adding the class &#42;/
	 * .maroon-setting { background:red; }
	 * ```
	 *
	 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
	 *
	 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
	 *
	 * ## Animation Anchoring (via `ng-animate-ref`)
	 *
	 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
	 * structural areas of an application (like views) by pairing up elements using an attribute
	 * called `ng-animate-ref`.
	 *
	 * Let's say for example we have two views that are managed by `ng-view` and we want to show
	 * that there is a relationship between two components situated in within these views. By using the
	 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
	 * can then attach an animation, which is triggered when the view changes.
	 *
	 * Say for example we have the following template code:
	 *
	 * ```html
	 * <!-- index.html -->
	 * <div ng-view class="view-animation">
	 * </div>
	 *
	 * <!-- home.html -->
	 * <a href="#/banner-page">
	 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
	 * </a>
	 *
	 * <!-- banner-page.html -->
	 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
	 * ```
	 *
	 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
	 * HTML contents to see if there is a match reference between any components in the view
	 * that is leaving and the view that is entering. It will scan both the view which is being
	 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
	 * contain a matching ref value.
	 *
	 * The two images match since they share the same ref value. ngAnimate will now create a
	 * transport element (which is a clone of the first image element) and it will then attempt
	 * to animate to the position of the second image element in the next view. For the animation to
	 * work a special CSS class called `ng-anchor` will be added to the transported element.
	 *
	 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
	 * ngAnimate will handle the entire transition for us as well as the addition and removal of
	 * any changes of CSS classes between the elements:
	 *
	 * ```css
	 * .banner.ng-anchor {
	 *   /&#42; this animation will last for 1 second since there are
	 *          two phases to the animation (an `in` and an `out` phase) &#42;/
	 *   transition:0.5s linear all;
	 * }
	 * ```
	 *
	 * We also **must** include animations for the views that are being entered and removed
	 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
	 *
	 * ```css
	 * .view-animation.ng-enter, .view-animation.ng-leave {
	 *   transition:0.5s linear all;
	 *   position:fixed;
	 *   left:0;
	 *   top:0;
	 *   width:100%;
	 * }
	 * .view-animation.ng-enter {
	 *   transform:translateX(100%);
	 * }
	 * .view-animation.ng-leave,
	 * .view-animation.ng-enter.ng-enter-active {
	 *   transform:translateX(0%);
	 * }
	 * .view-animation.ng-leave.ng-leave-active {
	 *   transform:translateX(-100%);
	 * }
	 * ```
	 *
	 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
	 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
	 * from its origin. Once that animation is over then the `in` stage occurs which animates the
	 * element to its destination. The reason why there are two animations is to give enough time
	 * for the enter animation on the new element to be ready.
	 *
	 * The example above sets up a transition for both the in and out phases, but we can also target the out or
	 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
	 *
	 * ```css
	 * .banner.ng-anchor-out {
	 *   transition: 0.5s linear all;
	 *
	 *   /&#42; the scale will be applied during the out animation,
	 *          but will be animated away when the in animation runs &#42;/
	 *   transform: scale(1.2);
	 * }
	 *
	 * .banner.ng-anchor-in {
	 *   transition: 1s linear all;
	 * }
	 * ```
	 *
	 *
	 *
	 *
	 * ### Anchoring Demo
	 *
	  <example module="anchoringExample"
	           name="anchoringExample"
	           id="anchoringExample"
	           deps="angular-animate.js;angular-route.js"
	           animations="true">
	    <file name="index.html">
	      <a href="#/">Home</a>
	      <hr />
	      <div class="view-container">
	        <div ng-view class="view"></div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
	        .config(['$routeProvider', function($routeProvider) {
	          $routeProvider.when('/', {
	            templateUrl: 'home.html',
	            controller: 'HomeController as home'
	          });
	          $routeProvider.when('/profile/:id', {
	            templateUrl: 'profile.html',
	            controller: 'ProfileController as profile'
	          });
	        }])
	        .run(['$rootScope', function($rootScope) {
	          $rootScope.records = [
	            { id:1, title: "Miss Beulah Roob" },
	            { id:2, title: "Trent Morissette" },
	            { id:3, title: "Miss Ava Pouros" },
	            { id:4, title: "Rod Pouros" },
	            { id:5, title: "Abdul Rice" },
	            { id:6, title: "Laurie Rutherford Sr." },
	            { id:7, title: "Nakia McLaughlin" },
	            { id:8, title: "Jordon Blanda DVM" },
	            { id:9, title: "Rhoda Hand" },
	            { id:10, title: "Alexandrea Sauer" }
	          ];
	        }])
	        .controller('HomeController', [function() {
	          //empty
	        }])
	        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
	          var index = parseInt($routeParams.id, 10);
	          var record = $rootScope.records[index - 1];

	          this.title = record.title;
	          this.id = record.id;
	        }]);
	    </file>
	    <file name="home.html">
	      <h2>Welcome to the home page</h1>
	      <p>Please click on an element</p>
	      <a class="record"
	         ng-href="#/profile/{{ record.id }}"
	         ng-animate-ref="{{ record.id }}"
	         ng-repeat="record in records">
	        {{ record.title }}
	      </a>
	    </file>
	    <file name="profile.html">
	      <div class="profile record" ng-animate-ref="{{ profile.id }}">
	        {{ profile.title }}
	      </div>
	    </file>
	    <file name="animations.css">
	      .record {
	        display:block;
	        font-size:20px;
	      }
	      .profile {
	        background:black;
	        color:white;
	        font-size:100px;
	      }
	      .view-container {
	        position:relative;
	      }
	      .view-container > .view.ng-animate {
	        position:absolute;
	        top:0;
	        left:0;
	        width:100%;
	        min-height:500px;
	      }
	      .view.ng-enter, .view.ng-leave,
	      .record.ng-anchor {
	        transition:0.5s linear all;
	      }
	      .view.ng-enter {
	        transform:translateX(100%);
	      }
	      .view.ng-enter.ng-enter-active, .view.ng-leave {
	        transform:translateX(0%);
	      }
	      .view.ng-leave.ng-leave-active {
	        transform:translateX(-100%);
	      }
	      .record.ng-anchor-out {
	        background:red;
	      }
	    </file>
	  </example>
	 *
	 * ### How is the element transported?
	 *
	 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
	 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
	 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
	 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
	 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
	 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
	 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
	 * will become visible since the shim class will be removed.
	 *
	 * ### How is the morphing handled?
	 *
	 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
	 * what CSS classes differ between the starting element and the destination element. These different CSS classes
	 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
	 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
	 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
	 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
	 * the cloned element is placed inside of root element which is likely close to the body element).
	 *
	 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
	 *
	 *
	 * ## Using $animate in your directive code
	 *
	 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
	 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
	 * imagine we have a greeting box that shows and hides itself when the data changes
	 *
	 * ```html
	 * <greeting-box active="onOrOff">Hi there</greeting-box>
	 * ```
	 *
	 * ```js
	 * ngModule.directive('greetingBox', ['$animate', function($animate) {
	 *   return function(scope, element, attrs) {
	 *     attrs.$observe('active', function(value) {
	 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
	 *     });
	 *   });
	 * }]);
	 * ```
	 *
	 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
	 * in our HTML code then we can trigger a CSS or JS animation to happen.
	 *
	 * ```css
	 * /&#42; normally we would create a CSS class to reference on the element &#42;/
	 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
	 * ```
	 *
	 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
	 * possible be sure to visit the {@link ng.$animate $animate service API page}.
	 *
	 *
	 * ## Callbacks and Promises
	 *
	 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
	 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
	 * ended by chaining onto the returned promise that animation method returns.
	 *
	 * ```js
	 * // somewhere within the depths of the directive
	 * $animate.enter(element, parent).then(function() {
	 *   //the animation has completed
	 * });
	 * ```
	 *
	 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
	 * anymore.)
	 *
	 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
	 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
	 * routing controller to hook into that:
	 *
	 * ```js
	 * ngModule.controller('HomePageController', ['$animate', function($animate) {
	 *   $animate.on('enter', ngViewElement, function(element) {
	 *     // the animation for this route has completed
	 *   }]);
	 * }])
	 * ```
	 *
	 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
	 */

	/**
	 * @ngdoc service
	 * @name $animate
	 * @kind object
	 *
	 * @description
	 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
	 *
	 * Click here {@link ng.$animate to learn more about animations with `$animate`}.
	 */
	angular.module('ngAnimate', [])
	  .directive('ngAnimateSwap', ngAnimateSwapDirective)

	  .directive('ngAnimateChildren', $$AnimateChildrenDirective)
	  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

	  .provider('$$animateQueue', $$AnimateQueueProvider)
	  .provider('$$animation', $$AnimationProvider)

	  .provider('$animateCss', $AnimateCssProvider)
	  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

	  .provider('$$animateJs', $$AnimateJsProvider)
	  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


	})(window, window.angular);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(10);
	module.exports = 'environment';

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * angular-environment Plugin
	 *
	 * An useful plugin that allows you to set up different information
	 * such as api endpoints, urls, variables, etc, based on the context of scripts execution:
	 * development, stage, production or any other custom environment you want to create.
	 *
	 * For more information, issues, etc, check out:
	 * http://github.com/juanpablob/angular-environment
	 */

	angular.module('environment', []).
		provider('envService', function() {

			this.environment = 'development'; // default
			this.data = {}; // user defined environments data

			/**
			 * config() allow pass as object the
			 * desired environments with their domains
			 * and variables
			 *
			 * @param {Object} config
			 * @return {Void}
			 */
			this.config = function(config) {
				this.data = config;
			};

			/**
			 * set() set the desired environment
			 * based on the passed string
			 *
			 * @param {String} environment
			 * @return {Void}
			 */
			this.set = function(environment) {
				this.environment = environment;
			};

			/**
			 * get() returns the current environment
			 *
			 * @return {Void}
			 */
			this.get = function() {
				return this.environment;
			};

			/**
			 * read() returns the desired variable based
			 * on passed argument
			 *
			 * @param {String} variable
			 * @return {Void}
			 */
			this.read = function(variable) {
				if (variable !== 'all') {
					return this.data.vars[this.get()][variable];
				}

				return this.data.vars[this.get()];
			};

			/**
			 * is() checks if the passed environment
			 * matches with the current environment
			 *
			 * @param {String} environment
			 * @return {Boolean}
			 */
			this.is = function(environment) {
				return (environment === this.environment);
			};

			/**
			 * check() looks for a match between
			 * the actual domain (where the script is running)
			 * and any of the domains under env constant in
			 * order to set the running environment
			 *
			 * @return {Void}
			 */
			this.check = function() {
				var	location = window.location.href,
						self = this;

				angular.forEach(this.data.domains, function(v, k) {
					angular.forEach(v, function(v) {
						if (location.match(new RegExp("^http(s)?:\/\/" + v))) {
							self.environment = k;
						}
					});
				});
			};

			this.$get = function() {
				return this;
			};
		});


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(angular, factory) {
	    'use strict';

	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(angular) {
	            return factory(angular);
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        return factory(angular);
	    }
	}(window.angular || null, function(angular) {
	    'use strict';

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    /**
	     * @ngdoc module
	     * @name ngTable
	     * @description ngTable: Table + Angular JS
	     */
	    angular.module('ngTable', []);
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function () {
	    /**
	     * @ngdoc object
	     * @name ngTableDefaultParams
	     * @module ngTable
	     * @description Default Parameters for ngTable
	     */
	    angular.module('ngTable')
	        .value('ngTableDefaults', {
	            params: {},
	            settings: {}
	        });
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .factory('ngTableEventsChannel', ngTableEventsChannel);

	    ngTableEventsChannel.$inject = ['$rootScope'];

	    /**
	     * @ngdoc service
	     * @name ngTableEventsChannel
	     * @description strongly typed pub/sub for `NgTableParams`
	     *
	     * Supported events:
	     *
	     * * afterCreated - raised when a new instance of `NgTableParams` has finished being constructed
	     * * afterReloadData - raised when the `reload` event has finished loading new data
	     * * datasetChanged - raised when `settings` receives a new data array
	     * * pagesChanged - raised when a new pages array has been generated
	     */
	    function ngTableEventsChannel($rootScope){

	        var events = {};
	        events = addChangeEvent('afterCreated', events);
	        events = addChangeEvent('afterReloadData', events);
	        events = addChangeEvent('datasetChanged', events);
	        events = addChangeEvent('pagesChanged', events);
	        return events;

	        //////////

	        function addChangeEvent(eventName, target){
	            var fnName = eventName.charAt(0).toUpperCase() + eventName.substring(1);
	            var event = {};
	            event['on' + fnName] = createEventSubscriptionFn(eventName);
	            event['publish' + fnName] = createPublishEventFn(eventName);
	            return angular.extend(target, event);
	        }

	        function createEventSubscriptionFn(eventName){

	            return function subscription(handler/*[, eventSelector or $scope][, eventSelector]*/){
	                var eventSelector = angular.identity;
	                var scope = $rootScope;

	                if (arguments.length === 2){
	                    if (angular.isFunction(arguments[1].$new)) {
	                        scope = arguments[1];
	                    } else {
	                        eventSelector = arguments[1]
	                    }
	                } else if (arguments.length > 2){
	                    scope = arguments[1];
	                    eventSelector = arguments[2];
	                }

	                // shorthand for subscriber to only receive events from a specific publisher instance
	                if (angular.isObject(eventSelector)) {
	                    var requiredPublisher = eventSelector;
	                    eventSelector = function(publisher){
	                        return publisher === requiredPublisher;
	                    }
	                }

	                return scope.$on('ngTable:' + eventName, function(event, params/*, ...args*/){
	                    // don't send events published by the internal NgTableParams created by ngTableController
	                    if (params.isNullInstance) return;

	                    var eventArgs = rest(arguments, 2);
	                    var fnArgs = [params].concat(eventArgs);
	                    if (eventSelector.apply(this, fnArgs)){
	                        handler.apply(this, fnArgs);
	                    }
	                });
	            }
	        }

	        function createPublishEventFn(eventName){
	            return function publish(/*args*/){
	                var fnArgs = ['ngTable:' + eventName].concat(Array.prototype.slice.call(arguments));
	                $rootScope.$broadcast.apply($rootScope, fnArgs);
	            }
	        }

	        function rest(array, n) {
	            return Array.prototype.slice.call(array, n == null ? 1 : n);
	        }
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .provider('ngTableFilterConfig', ngTableFilterConfigProvider);

	    ngTableFilterConfigProvider.$inject = [];

	    function ngTableFilterConfigProvider(){
	        var config;
	        var defaultConfig = {
	            defaultBaseUrl: 'ng-table/filters/',
	            defaultExt: '.html',
	            aliasUrls: {}
	        };

	        this.$get = ngTableFilterConfig;
	        this.resetConfigs = resetConfigs;
	        this.setConfig = setConfig;

	        init();

	        /////////

	        function init(){
	            resetConfigs();
	        }

	        function resetConfigs(){
	            config = defaultConfig;
	        }

	        function setConfig(customConfig){
	            var mergeConfig = angular.extend({}, config, customConfig);
	            mergeConfig.aliasUrls = angular.extend({}, config.aliasUrls, customConfig.aliasUrls);
	            config = mergeConfig;
	        }

	        /////////

	        ngTableFilterConfig.$inject = [];

	        function ngTableFilterConfig(){

	            var publicConfig;

	            var service = {
	                config: publicConfig,
	                getTemplateUrl: getTemplateUrl,
	                getUrlForAlias: getUrlForAlias
	            };
	            Object.defineProperty(service, "config", {
	                get: function(){
	                    return publicConfig = publicConfig || angular.copy(config);
	                },
	                enumerable: true
	            });

	            return service;

	            /////////

	            function getTemplateUrl(filterDef, filterKey){
	                if (angular.isObject(filterDef)){
	                    filterDef = filterDef.id;
	                }
	                if (filterDef.indexOf('/') !== -1){
	                    return filterDef;
	                }

	                return service.getUrlForAlias(filterDef, filterKey);
	            }

	            function getUrlForAlias(aliasName/*, filterKey*/){
	                return config.aliasUrls[aliasName] || config.defaultBaseUrl + aliasName + config.defaultExt;
	            }
	        }
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';


	    angular.module('ngTable')
	        .provider('ngTableDefaultGetData', ngTableDefaultGetDataProvider);

	    ngTableDefaultGetDataProvider.$inject = [];

	    /**
	     * @ngdoc provider
	     * @name ngTableDefaultGetDataProvider
	     * @description Allows for the configuration of the ngTableDefaultGetData service.
	     *
	     * Set filterFilterName to the name of a angular filter that knows how to apply the values returned by
	     * `NgTableParams.filter()` to restrict an array of data.
	     *
	     * Set sortingFilterName to the name of a angular filter that knows how to apply the values returned by
	     * `NgTableParams.orderBy()` to sort an array of data.
	     *
	     * Out of the box the `ngTableDefaultGetData` service will be configured to use the angular `filter` and `orderBy`
	     * filters respectively
	     */
	    function ngTableDefaultGetDataProvider(){
	        var provider = this;
	        provider.$get = ngTableDefaultGetData;
	        provider.filterFilterName = 'filter';
	        provider.sortingFilterName = 'orderBy';

	        ///////////

	        ngTableDefaultGetData.$inject = ['$filter'];

	        /**
	         * @ngdoc service
	         * @name ngTableDefaultGetData
	         * @description A default implementation of the getData function that will apply the `filter`, `orderBy` and
	         * paging values from the `NgTableParams` instance supplied to the data array supplied.
	         *
	         * The outcome will be to return the resulting array and to assign the total item count after filtering
	         * to the `total` of the `NgTableParams` instance supplied
	         */
	        function ngTableDefaultGetData($filter) {

	            var defaultDataOptions = {applyFilter: true, applySort: true, applyPaging: true};

	            getData.applyPaging = applyPaging;
	            getData.getFilterFn = getFilterFn;
	            getData.getOrderByFn = getOrderByFn;

	            return getData;

	            function getFilterFn(params) {
	                var filterOptions = params.settings().filterOptions;
	                if (angular.isFunction(filterOptions.filterFn)){
	                    return filterOptions.filterFn;
	                } else {
	                    return $filter(filterOptions.filterFilterName || provider.filterFilterName);
	                }
	            }

	            function getOrderByFn (/*params*/){
	                return $filter(provider.sortingFilterName);
	            }

	            function applyFilter(data, params) {
	                if (!params.hasFilter()) {
	                    return data;
	                }

	                var filter = params.filter(true);
	                var filterKeys = Object.keys(filter);
	                var parsedFilter = filterKeys.reduce(function(result, key){
	                    result = setPath(result, filter[key], key);
	                    return result;
	                }, {});
	                var filterFn = getFilterFn(params);
	                return filterFn.call(params, data, parsedFilter, params.settings().filterOptions.filterComparator);
	            }

	            function applyPaging(data, params) {
	                var pagedData = data.slice((params.page() - 1) * params.count(), params.page() * params.count());
	                params.total(data.length); // set total for recalc pagination
	                return pagedData;
	            }

	            function applySort(data, params) {
	                var orderBy = params.orderBy();
	                var orderByFn = getOrderByFn(params);
	                return orderBy.length ? orderByFn(data, orderBy) : data;
	            }

	            function getData(data, params) {
	                if (data == null){
	                    return [];
	                }

	                var options = angular.extend({}, defaultDataOptions, params.settings().dataOptions);

	                var fData = options.applyFilter ? applyFilter(data, params) : data;
	                var orderedData = options.applySort ? applySort(fData, params) : fData;
	                return options.applyPaging ? applyPaging(orderedData, params) : orderedData;
	            }

	            // Sets the value at any depth in a nested object based on the path
	            // note: adapted from: underscore-contrib#setPath
	            function setPath(obj, value, path) {
	                var keys     = path.split('.');
	                var ret      = obj;
	                var lastKey  = keys[keys.length -1];
	                var target   = ret;

	                var parentPathKeys = keys.slice(0, keys.length -1);
	                parentPathKeys.forEach(function(key) {
	                    if (!target.hasOwnProperty(key)) {
	                        target[key] = {};
	                    }
	                    target = target[key];
	                });

	                target[lastKey] = value;
	                return ret;
	            }
	        }
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function () {
	    /**
	     * @ngdoc service
	     * @name ngTableColumn
	     * @module ngTable
	     * @description
	     * Service to construct a $column definition used by {@link ngTable ngTable} directive
	     */
	    angular.module('ngTable').factory('ngTableColumn', [function () {

	        return {
	            buildColumn: buildColumn
	        };

	        //////////////

	        /**
	         * @ngdoc method
	         * @name ngTableColumn#buildColumn
	         * @description Creates a $column for use within a header template
	         *
	         * @param {Object} column an existing $column or simple column data object
	         * @param {Scope} defaultScope the $scope to supply to the $column getter methods when not supplied by caller
	         * @param {Array} columns a reference to the columns array to make available on the context supplied to the
	         * $column getter methods
	         * @returns {Object} a $column object
	         */
	        function buildColumn(column, defaultScope, columns){
	            // note: we're not modifying the original column object. This helps to avoid unintended side affects
	            var extendedCol = Object.create(column);
	            var defaults = createDefaults();
	            for (var prop in defaults) {
	                if (extendedCol[prop] === undefined) {
	                    extendedCol[prop] = defaults[prop];
	                }
	                if(!angular.isFunction(extendedCol[prop])){
	                    // wrap raw field values with "getter" functions
	                    // - this is to ensure consistency with how ngTable.compile builds columns
	                    // - note that the original column object is being "proxied"; this is important
	                    //   as it ensure that any changes to the original object will be returned by the "getter"
	                    (function(prop1){
	                        var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/) {
	                            if (arguments.length === 1 && !isScopeLike(arguments[0])) {
	                                getterSetter.assign(null, arguments[0]);
	                            } else {
	                                return column[prop1];
	                            }
	                        };
	                        getterSetter.assign = function($scope, value){
	                            column[prop1] = value;
	                        };
	                        extendedCol[prop1] = getterSetter;
	                    })(prop);
	                }
	                (function(prop1){
	                    // satisfy the arguments expected by the function returned by parsedAttribute in the ngTable directive
	                    var getterFn = extendedCol[prop1];
	                    extendedCol[prop1] = function () {
	                        if (arguments.length === 1 && !isScopeLike(arguments[0])){
	                            getterFn.assign(null, arguments[0]);
	                        } else {
	                            var scope = arguments[0] || defaultScope;
	                            var context = Object.create(scope);
	                            angular.extend(context, {
	                                $column: extendedCol,
	                                $columns: columns
	                            });
	                            return getterFn.call(column, context);
	                        }
	                    };
	                    if (getterFn.assign){
	                        extendedCol[prop1].assign = getterFn.assign;
	                    }
	                })(prop);
	            }
	            return extendedCol;
	        }

	        function createDefaults(){
	            return {
	                'class': createGetterSetter(''),
	                filter: createGetterSetter(false),
	                groupable: createGetterSetter(false),
	                filterData: angular.noop,
	                headerTemplateURL: createGetterSetter(false),
	                headerTitle: createGetterSetter(''),
	                sortable: createGetterSetter(false),
	                show: createGetterSetter(true),
	                title: createGetterSetter(''),
	                titleAlt: createGetterSetter('')
	            };
	        }

	        function createGetterSetter(initialValue){
	            var value = initialValue;
	            var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/){
	                if (arguments.length === 1 && !isScopeLike(arguments[0])) {
	                    getterSetter.assign(null, arguments[0]);
	                } else {
	                    return value;
	                }
	            };
	            getterSetter.assign = function($scope, newValue){
	                value = newValue;
	            };
	            return getterSetter;
	        }

	        function isScopeLike(object){
	            return object != null && angular.isFunction(object.$new);
	        }
	    }]);
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    /**
	     * @ngdoc service
	     * @name NgTableParams
	     * @module ngTable
	     * @description Parameters manager for ngTable
	     */

	    angular.module('ngTable').factory('NgTableParams', ['$q', '$log', '$filter', 'ngTableDefaults', 'ngTableDefaultGetData', 'ngTableEventsChannel', function($q, $log, $filter, ngTableDefaults, ngTableDefaultGetData, ngTableEventsChannel) {
	        var isNumber = function(n) {
	            return !isNaN(parseFloat(n)) && isFinite(n);
	        };
	        var NgTableParams = function(baseParameters, baseSettings) {

	            // the ngTableController "needs" to create a dummy/null instance and it's important to know whether an instance
	            // is one of these
	            if (typeof baseParameters === "boolean"){
	                this.isNullInstance = true;
	            }

	            var self = this,
	                prevParamsMemento,
	                errParamsMemento,
	                isCommittedDataset = false,
	                initialEvents = [],
	                log = function() {
	                    if (settings.debugMode && $log.debug) {
	                        $log.debug.apply($log, arguments);
	                    }
	                },
	                defaultFilterOptions = {
	                    filterComparator: undefined, // look for a substring match in case insensitive way
	                    filterDelay: 500,
	                    filterDelayThreshold: 10000, // size of dataset array that will trigger the filterDelay being applied
	                    filterFilterName: undefined, // when defined overrides ngTableDefaultGetDataProvider.filterFilterName
	                    filterFn: undefined, // when defined overrides the filter function that ngTableDefaultGetData uses
	                    filterLayout: 'stack' // alternative: 'horizontal'
	                },
	                defaultGroupOptions = {
	                    defaultSort: 'asc', // set to 'asc' or 'desc' to apply sorting to groups
	                    isExpanded: true
	                },
	                defaultSettingsFns = getDefaultSettingFns();

	            this.data = [];

	            /**
	             * @ngdoc method
	             * @name NgTableParams#parameters
	             * @description Set new parameters or get current parameters
	             *
	             * @param {string} newParameters      New parameters
	             * @param {string} parseParamsFromUrl Flag if parse parameters like in url
	             * @returns {Object} Current parameters or `this`
	             */
	            this.parameters = function(newParameters, parseParamsFromUrl) {
	                parseParamsFromUrl = parseParamsFromUrl || false;
	                if (angular.isDefined(newParameters)) {
	                    for (var key in newParameters) {
	                        var value = newParameters[key];
	                        if (parseParamsFromUrl && key.indexOf('[') >= 0) {
	                            var keys = key.split(/\[(.*)\]/).reverse()
	                            var lastKey = '';
	                            for (var i = 0, len = keys.length; i < len; i++) {
	                                var name = keys[i];
	                                if (name !== '') {
	                                    var v = value;
	                                    value = {};
	                                    value[lastKey = name] = (isNumber(v) ? parseFloat(v) : v);
	                                }
	                            }
	                            if (lastKey === 'sorting') {
	                                params[lastKey] = {};
	                            }
	                            params[lastKey] = angular.extend(params[lastKey] || {}, value[lastKey]);
	                        } else {
	                            if (key === 'group'){
	                                params[key] = parseGroup(newParameters[key]);
	                            } else {
	                                params[key] = (isNumber(newParameters[key]) ? parseFloat(newParameters[key]) : newParameters[key]);
	                            }
	                        }
	                    }
	                    log('ngTable: set parameters', params);
	                    return this;
	                }
	                return params;
	            };

	            function parseGroup(group){
	                var defaultSort = settings.groupOptions && settings.groupOptions.defaultSort;
	                if (angular.isFunction(group)) {
	                    if (group.sortDirection == null){
	                        group.sortDirection = defaultSort;
	                    }
	                    return group;
	                } else if (angular.isString(group)) {
	                    var grp = {};
	                    grp[group] = defaultSort;
	                    return grp;
	                } else if (angular.isObject(group)) {
	                    for (var key in group) {
	                        if (group[key] == null){
	                            group[key] = defaultSort;
	                        }
	                    }
	                    return group;
	                } else {
	                    return group;
	                }
	            }

	            /**
	             * @ngdoc method
	             * @name NgTableParams#settings
	             * @description Set new settings for table
	             *
	             * @param {string} newSettings New settings or undefined
	             * @returns {Object} Current settings or `this`
	             */
	            this.settings = function(newSettings) {
	                if (angular.isDefined(newSettings)) {

	                    // todo: don't modify newSettings object: this introduces unexpected side effects;
	                    // instead take a copy of newSettings

	                    if (newSettings.filterOptions){
	                        newSettings.filterOptions = angular.extend({}, settings.filterOptions, newSettings.filterOptions);
	                    }
	                    if (newSettings.groupOptions){
	                        newSettings.groupOptions = angular.extend({}, settings.groupOptions, newSettings.groupOptions);
	                    }

	                    if (angular.isArray(newSettings.dataset)) {
	                        //auto-set the total from passed in dataset
	                        newSettings.total = newSettings.dataset.length;
	                    }

	                    var originalDataset = settings.dataset;
	                    settings = angular.extend(settings, newSettings);

	                    if (angular.isArray(newSettings.dataset)) {
	                        optimizeFilterDelay();
	                    }

	                    // note: using != as want null and undefined to be treated the same
	                    var hasDatasetChanged = newSettings.hasOwnProperty('dataset') && (newSettings.dataset != originalDataset);
	                    if (hasDatasetChanged) {
	                        if (isCommittedDataset){
	                            this.page(1); // reset page as a new dataset has been supplied
	                        }
	                        isCommittedDataset = false;

	                        var fireEvent = function () {
	                            ngTableEventsChannel.publishDatasetChanged(self, newSettings.dataset, originalDataset);
	                        };

	                        if (initialEvents){
	                            initialEvents.push(fireEvent);
	                        } else {
	                            fireEvent();
	                        }
	                    }
	                    log('ngTable: set settings', settings);
	                    return this;
	                }
	                return settings;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#page
	             * @description If parameter page not set return current page else set current page
	             *
	             * @param {string} page Page number
	             * @returns {Object|Number} Current page or `this`
	             */
	            this.page = function(page) {
	                return angular.isDefined(page) ? this.parameters({
	                    'page': page
	                }) : params.page;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#total
	             * @description If parameter total not set return current quantity else set quantity
	             *
	             * @param {string} total Total quantity of items
	             * @returns {Object|Number} Current page or `this`
	             */
	            this.total = function(total) {
	                return angular.isDefined(total) ? this.settings({
	                    'total': total
	                }) : settings.total;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#count
	             * @description If parameter count not set return current count per page else set count per page
	             *
	             * @param {string} count Count per number
	             * @returns {Object|Number} Count per page or `this`
	             */
	            this.count = function(count) {
	                // reset to first page because can be blank page
	                return angular.isDefined(count) ? this.parameters({
	                    'count': count,
	                    'page': 1
	                }) : params.count;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#filter
	             * @description If 'filter' parameter not set return current filter else set current filter
	             *
	             * Note: when assigning a new filter, {@link NgTableParams#page page} will be set to 1
	             *
	             * @param {Object|Boolean} filter 'object': new filter to assign or
	             * 'true': to return the current filter minus any insignificant values (null,  undefined and empty string); or
	             * 'falsey': to return the current filter "as is"
	             * @returns {Object} Current filter or `this`
	             */
	            this.filter = function(filter) {
	                if (angular.isDefined(filter) && angular.isObject(filter)) {
	                    return this.parameters({
	                        'filter': filter,
	                        'page': 1
	                    });
	                } else if (filter === true){
	                    var keys = Object.keys(params.filter);
	                    var significantFilter = {};
	                    for (var i=0; i < keys.length; i++){
	                        var filterValue = params.filter[keys[i]];
	                        if (filterValue != null && filterValue !== '') {
	                            significantFilter[keys[i]] = filterValue;
	                        }
	                    }
	                    return significantFilter;
	                } else {
	                    return params.filter;
	                }
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#group
	             * @description If 'group' parameter is not set, return current grouping. Otherwise set current group.
	             *
	             * @param {string|Function|Object} group New group field
	             * @param {string} sortDirection Optional direction that the list of groups should be sorted
	             * @returns {Object} Current grouping or `this`
	             */
	            this.group = function(group, sortDirection) {
	                if (!angular.isDefined(group)){
	                    return params.group;
	                }

	                var newParameters = {
	                    page: 1
	                };
	                if (angular.isFunction(group) && angular.isDefined(sortDirection)){
	                    group.sortDirection = sortDirection;
	                    newParameters.group = group;
	                } else if (angular.isDefined(group) && angular.isDefined(sortDirection)) {
	                    var groupArray = {};
	                    groupArray[group] = sortDirection;
	                    newParameters.group = groupArray;
	                } else {
	                    newParameters.group = group;
	                }
	                this.parameters(newParameters);
	                return this;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#sorting
	             * @description If 'sorting' parameter is not set, return current sorting. Otherwise set current sorting.
	             *
	             * @param {string} sorting New sorting
	             * @returns {Object} Current sorting or `this`
	             */
	            this.sorting = function(sorting) {
	                if (arguments.length == 2) {
	                    var sortArray = {};
	                    sortArray[sorting] = arguments[1];
	                    this.parameters({
	                        'sorting': sortArray
	                    });
	                    return this;
	                }
	                return angular.isDefined(sorting) ? this.parameters({
	                    'sorting': sorting
	                }) : params.sorting;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#isSortBy
	             * @description Checks sort field
	             *
	             * @param {string} field     Field name
	             * @param {string} direction Optional direction of sorting ('asc' or 'desc')
	             * @returns {Array} Return true if field sorted by direction
	             */
	            this.isSortBy = function(field, direction) {
	                if(direction !== undefined) {
	                    return angular.isDefined(params.sorting[field]) && params.sorting[field] == direction;
	                } else {
	                    return angular.isDefined(params.sorting[field]);
	                }
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#orderBy
	             * @description Return object of sorting parameters for angular filter
	             *
	             * @returns {Array} Array like: [ '-name', '+age' ]
	             */
	            this.orderBy = function() {
	                return convertSortToOrderBy(params.sorting);
	            };

	            function convertSortToOrderBy(sorting){
	                var result = [];
	                for (var column in sorting) {
	                    result.push((sorting[column] === "asc" ? "+" : "-") + column);
	                }
	                return result;
	            }

	            /**
	             * @ngdoc method
	             * @name NgTableParams#generatePagesArray
	             * @description Generate array of pages
	             *
	             * When no arguments supplied, the current parameter state of this `NgTableParams` instance will be used
	             *
	             * @param {boolean} currentPage which page must be active
	             * @param {boolean} totalItems  Total quantity of items
	             * @param {boolean} pageSize    Quantity of items on page
	             * @param {number} maxBlocks    Quantity of blocks for pagination
	             * @returns {Array} Array of pages
	             */
	            this.generatePagesArray = function(currentPage, totalItems, pageSize, maxBlocks) {
	                if (!arguments.length){
	                    currentPage = this.page();
	                    totalItems = this.total();
	                    pageSize = this.count();
	                }

	                var maxPage, maxPivotPages, minPage, numPages, pages;
	                maxBlocks = maxBlocks && maxBlocks < 6 ? 6 : maxBlocks;

	                pages = [];
	                numPages = Math.ceil(totalItems / pageSize);
	                if (numPages > 1) {
	                    pages.push({
	                        type: 'prev',
	                        number: Math.max(1, currentPage - 1),
	                        active: currentPage > 1
	                    });
	                    pages.push({
	                        type: 'first',
	                        number: 1,
	                        active: currentPage > 1,
	                        current: currentPage === 1
	                    });
	                    maxPivotPages = Math.round((settings.paginationMaxBlocks - settings.paginationMinBlocks) / 2);
	                    minPage = Math.max(2, currentPage - maxPivotPages);
	                    maxPage = Math.min(numPages - 1, currentPage + maxPivotPages * 2 - (currentPage - minPage));
	                    minPage = Math.max(2, minPage - (maxPivotPages * 2 - (maxPage - minPage)));
	                    var i = minPage;
	                    while (i <= maxPage) {
	                        if ((i === minPage && i !== 2) || (i === maxPage && i !== numPages - 1)) {
	                            pages.push({
	                                type: 'more',
	                                active: false
	                            });
	                        } else {
	                            pages.push({
	                                type: 'page',
	                                number: i,
	                                active: currentPage !== i,
	                                current: currentPage === i
	                            });
	                        }
	                        i++;
	                    }
	                    pages.push({
	                        type: 'last',
	                        number: numPages,
	                        active: currentPage !== numPages,
	                        current: currentPage === numPages
	                    });
	                    pages.push({
	                        type: 'next',
	                        number: Math.min(numPages, currentPage + 1),
	                        active: currentPage < numPages
	                    });
	                }
	                return pages;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#isDataReloadRequired
	             * @description Return true when a change to this `NgTableParams` instance should require the reload method
	             * to be run so as to ensure the data presented to the user reflects the `NgTableParams`
	             *
	             * Note that this method will return false when the reload method has run but fails. In this case
	             * `hasErrorState` will return true.
	             */
	            this.isDataReloadRequired = function(){
	                // note: using != as want to treat null and undefined the same
	                return !isCommittedDataset || !angular.equals(createComparableParams(), prevParamsMemento)
	                    || hasGlobalSearchFieldChanges();
	            };

	            function createComparableParams(){
	                var result = {params: params};
	                if (angular.isFunction(params.group)){
	                    result.groupSortDirection = params.group.sortDirection;
	                }
	                return result
	            }
	            /**
	             * @ngdoc method
	             * @name NgTableParams#hasFilter
	             * @description Determines if NgTableParams#filter has significant filter value(s)
	             * (any value except null, undefined, or empty string)
	             * @returns {Boolean} true when NgTableParams#filter has at least one significant field value
	             */
	            this.hasFilter = function(){
	                return Object.keys(this.filter(true)).length > 0;
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#hasGroup
	             * @description Determines if at least one group has been set
	             * @returns {Boolean}
	             */
	            this.hasGroup = function(group, sortDirection){
	                if (group == null) {
	                    return angular.isFunction(params.group) || Object.keys(params.group).length > 0
	                }

	                if (angular.isFunction(group)) {
	                    if (sortDirection == null) {
	                        return params.group === group;
	                    } else {
	                        return params.group === group && group.sortDirection === sortDirection;
	                    }
	                } else {
	                    if (sortDirection == null) {
	                        return Object.keys(params.group).indexOf(group) !== -1;
	                    } else {
	                        return params.group[group] === sortDirection;
	                    }
	                }
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#hasFilterChanges
	             * @description Return true when a change to `NgTableParams.filters`require the reload method
	             * to be run so as to ensure the data presented to the user reflects these filters
	             */
	            this.hasFilterChanges = function(){
	                var previousFilter = (prevParamsMemento && prevParamsMemento.params.filter);
	                return !angular.equals((params.filter), previousFilter) || hasGlobalSearchFieldChanges();
	            };

	            function hasGlobalSearchFieldChanges(){
	                var currentVal = (params.filter && params.filter.$);
	                var previousVal =
	                    (prevParamsMemento && prevParamsMemento.params.filter && prevParamsMemento.params.filter.$);
	                return !angular.equals(currentVal, previousVal);
	            }

	            /**
	             * @ngdoc method
	             * @name NgTableParams#url
	             * @description Return groups for table grouping
	             *
	             * @param {boolean} asString flag indicates return array of string or object
	             * @returns {Array} If asString = true will be return array of url string parameters else key-value object
	             */
	            this.url = function(asString) {
	                asString = asString || false;
	                var pairs = (asString ? [] : {});
	                for (var key in params) {
	                    if (params.hasOwnProperty(key)) {
	                        var item = params[key],
	                            name = encodeURIComponent(key);
	                        if (typeof item === "object") {
	                            for (var subkey in item) {
	                                if (isSignificantValue(item[subkey], key)) {
	                                    var pname = name + "[" + encodeURIComponent(subkey) + "]";
	                                    collectValue(item[subkey], pname);
	                                }
	                            }
	                        } else if (!angular.isFunction(item) && isSignificantValue(item, key)) {
	                            collectValue(item, name);
	                        }
	                    }
	                }
	                return pairs;

	                function collectValue(value, key){
	                    if (asString) {
	                        pairs.push(key + "=" + encodeURIComponent(value));
	                    } else {
	                        pairs[key] = encodeURIComponent(value);
	                    }
	                }

	                function isSignificantValue(value, key){
	                    return key === "group" ? true : angular.isDefined(value) && value !== "";
	                }
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#reload
	             * @description Reload table data
	             */
	            this.reload = function() {
	                var self = this,
	                    pData = null;

	                settings.$loading = true;

	                prevParamsMemento = angular.copy(createComparableParams());
	                isCommittedDataset = true;

	                if (self.hasGroup()) {
	                    pData = runInterceptorPipeline($q.when(settings.getGroups(self)));
	                } else {
	                    pData = runInterceptorPipeline($q.when(settings.getData(self)));
	                }

	                log('ngTable: reload data');

	                var oldData = self.data;
	                return pData.then(function(data) {
	                    settings.$loading = false;
	                    errParamsMemento = null;

	                    self.data = data;
	                    // note: I think it makes sense to publish this event even when data === oldData
	                    // subscribers can always set a filter to only receive the event when data !== oldData
	                    ngTableEventsChannel.publishAfterReloadData(self, data, oldData);
	                    self.reloadPages();

	                    return data;
	                }).catch(function(reason){
	                    errParamsMemento = prevParamsMemento;
	                    // "rethrow"
	                    return $q.reject(reason);
	                });
	            };

	            /**
	             * @ngdoc method
	             * @name NgTableParams#hasErrorState
	             * @description Return true when an attempt to `reload` the current `parameter` values have resulted in
	             * a failure
	             *
	             * This method will continue to return true until the reload is successfully called or when the
	             * `parameter` values have changed
	             */
	            this.hasErrorState = function(){
	                return !!(errParamsMemento && angular.equals(errParamsMemento, createComparableParams()));
	            };

	            function optimizeFilterDelay(){
	                // don't debounce by default filter input when working with small synchronous datasets
	                if (settings.filterOptions.filterDelay === defaultFilterOptions.filterDelay &&
	                    settings.total <= settings.filterOptions.filterDelayThreshold &&
	                    settings.getData === defaultSettingsFns.getData){
	                    settings.filterOptions.filterDelay = 0;
	                }
	            }

	            this.reloadPages = (function() {
	                var currentPages;
	                return function(){
	                    var oldPages = currentPages;
	                    var newPages = self.generatePagesArray(self.page(), self.total(), self.count());
	                    if (!angular.equals(oldPages, newPages)){
	                        currentPages = newPages;
	                        ngTableEventsChannel.publishPagesChanged(this, newPages, oldPages);
	                    }
	                }
	            })();

	            function runInterceptorPipeline(fetchedData){
	                var interceptors = settings.interceptors || [];

	                return interceptors.reduce(function(result, interceptor){
	                    var thenFn = (interceptor.response && interceptor.response.bind(interceptor)) || $q.when;
	                    var rejectFn = (interceptor.responseError && interceptor.responseError.bind(interceptor)) || $q.reject;
	                    return result.then(function(data){
	                        return thenFn(data, self);
	                    }, function(reason){
	                        return rejectFn(reason, self);
	                    });
	                }, fetchedData);
	            }

	            function getDefaultSettingFns(){

	                return {
	                    getData: getData,
	                    getGroups: getGroups
	                };

	                /**
	                 * @ngdoc method
	                 * @name settings#getData
	                 * @description Returns the data to display in the table
	                 *
	                 * Called by `NgTableParams` whenever it considers new data is to be loaded
	                 *
	                 * @param {Object} params the `NgTableParams` requesting data
	                 */
	                function getData(params) {
	                    return ngTableDefaultGetData(params.settings().dataset, params);
	                }

	                /**
	                 * @ngdoc method
	                 * @name settings#getGroups
	                 * @description Return groups of data to display in the table
	                 *
	                 * Called by `NgTableParams` whenever it considers new data is to be loaded
	                 * and when a `group` value has been assigned
	                 *
	                 * @param {Object} params the `NgTableParams` requesting data
	                 */
	                function getGroups(params) {

	                    var group = params.group();
	                    var groupFn;
	                    var sortDirection = undefined;
	                    if (angular.isFunction(group)) {
	                        groupFn = group;
	                        sortDirection = group.sortDirection;
	                    } else {
	                        // currently support for only one group implemented
	                        var groupField = Object.keys(group)[0];
	                        sortDirection = group[groupField];
	                        groupFn = function(item){
	                            return getPath(item, groupField);
	                        };
	                    }

	                    var settings = params.settings();
	                    var originalDataOptions = settings.dataOptions;
	                    settings.dataOptions = { applyPaging: false };
	                    var gotData = $q.when(settings.getData(params));
	                    return gotData.then(function(data) {
	                        var groups = {};
	                        angular.forEach(data, function(item) {
	                            var groupName = groupFn(item);
	                            groups[groupName] = groups[groupName] || {
	                                    data: [],
	                                    $hideRows: !settings.groupOptions.isExpanded,
	                                    value: groupName
	                                };
	                            groups[groupName].data.push(item);
	                        });
	                        var result = [];
	                        for (var i in groups) {
	                            result.push(groups[i]);
	                        }
	                        if (sortDirection) {
	                            var orderByFn = ngTableDefaultGetData.getOrderByFn();
	                            var orderBy = convertSortToOrderBy({
	                                value: sortDirection
	                            });
	                            result = orderByFn(result, orderBy);
	                        }

	                        return ngTableDefaultGetData.applyPaging(result, params);
	                    }).finally(function(){
	                        // restore the real options
	                        settings.dataOptions = originalDataOptions;
	                    });
	                }

	                function getPath (obj, ks) {
	                    // origianl source https://github.com/documentcloud/underscore-contrib

	                    if (typeof ks == "string") ks = ks.split(".");

	                    // If we have reached an undefined property
	                    // then stop executing and return undefined
	                    if (obj === undefined) return void 0;

	                    // If the path array has no more elements, we've reached
	                    // the intended property and return its value
	                    if (ks.length === 0) return obj;

	                    // If we still have elements in the path array and the current
	                    // value is null, stop executing and return undefined
	                    if (obj === null) return void 0;

	                    return getPath(obj[ks[0]], ks.slice(1));
	                }
	            }

	            var params = {
	                page: 1,
	                count: 10,
	                filter: {},
	                sorting: {},
	                group: {}
	            };
	            angular.extend(params, ngTableDefaults.params);

	            /**
	             * @ngdoc object
	             * @name settings
	             * @module ngTable
	             * @description configuration settings for `NgTableParams`
	             */
	            var settings = {
	                $loading: false,
	                dataset: null, //allows data to be set when table is initialized
	                total: 0,
	                defaultSort: 'desc',
	                filterOptions: angular.copy(defaultFilterOptions),
	                groupOptions: angular.copy(defaultGroupOptions),
	                counts: [10, 25, 50, 100],
	                interceptors: [],
	                paginationMaxBlocks: 11,
	                paginationMinBlocks: 5,
	                sortingIndicator: 'span'
	            };

	            this.settings(defaultSettingsFns);
	            this.settings(ngTableDefaults.settings);
	            this.settings(baseSettings);
	            this.parameters(baseParameters, true);

	            ngTableEventsChannel.publishAfterCreated(this);
	            // run events during construction after the initial create event. That way a consumer
	            // can subscribe to all events for a table without "dropping" an event
	            angular.forEach(initialEvents, function(event){
	                event();
	            });
	            initialEvents = null;

	            return this;
	        };
	        return NgTableParams;
	    }]);
	})();



	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    /**
	     * @ngdoc object
	     * @name ngTableController
	     *
	     * @description
	     * Each {@link ngTable ngTable} directive creates an instance of `ngTableController`
	     */
	    angular.module('ngTable').controller('ngTableController', ['$scope', 'NgTableParams', '$timeout', '$parse', '$compile', '$attrs', '$element',
	        'ngTableColumn', 'ngTableEventsChannel',
	        function($scope, NgTableParams, $timeout, $parse, $compile, $attrs, $element, ngTableColumn, ngTableEventsChannel) {
	            var isFirstTimeLoad = true;
	            $scope.$filterRow = {};
	            $scope.$loading = false;

	            // until such times as the directive uses an isolated scope, we need to ensure that the check for
	            // the params field only consults the "own properties" of the $scope. This is to avoid seeing the params
	            // field on a $scope higher up in the prototype chain
	            if (!$scope.hasOwnProperty("params")) {
	                $scope.params = new NgTableParams(true);
	            }
	            $scope.params.settings().$scope = $scope;

	            var delayFilter = (function() {
	                var timer = 0;
	                return function(callback, ms) {
	                    $timeout.cancel(timer);
	                    timer = $timeout(callback, ms);
	                };
	            })();

	            function onDataReloadStatusChange (newStatus/*, oldStatus*/) {
	                if (!newStatus || $scope.params.hasErrorState()) {
	                    return;
	                }

	                $scope.params.settings().$scope = $scope;

	                var currentParams = $scope.params;
	                var filterOptions = currentParams.settings().filterOptions;

	                if (currentParams.hasFilterChanges()) {
	                    var applyFilter = function () {
	                        currentParams.page(1);
	                        currentParams.reload();
	                    };
	                    if (filterOptions.filterDelay) {
	                        delayFilter(applyFilter, filterOptions.filterDelay);
	                    } else {
	                        applyFilter();
	                    }
	                } else {
	                    currentParams.reload();
	                }
	            }

	            // watch for when a new NgTableParams is bound to the scope
	            // CRITICAL: the watch must be for reference and NOT value equality; this is because NgTableParams maintains
	            // the current data page as a field. Checking this for value equality would be terrible for performance
	            // and potentially cause an error if the items in that array has circular references
	            $scope.$watch('params', function(newParams, oldParams){
	                if (newParams === oldParams || !newParams) {
	                    return;
	                }

	                newParams.reload();
	            }, false);

	            $scope.$watch('params.isDataReloadRequired()', onDataReloadStatusChange);

	            this.compileDirectiveTemplates = function () {
	                if (!$element.hasClass('ng-table')) {
	                    $scope.templates = {
	                        header: ($attrs.templateHeader ? $attrs.templateHeader : 'ng-table/header.html'),
	                        pagination: ($attrs.templatePagination ? $attrs.templatePagination : 'ng-table/pager.html')
	                    };
	                    $element.addClass('ng-table');
	                    var headerTemplate = null;

	                    // $element.find('> thead').length === 0 doesn't work on jqlite
	                    var theadFound = false;
	                    angular.forEach($element.children(), function(e) {
	                        if (e.tagName === 'THEAD') {
	                            theadFound = true;
	                        }
	                    });
	                    if (!theadFound) {
	                        headerTemplate = angular.element(document.createElement('thead')).attr('ng-include', 'templates.header');
	                        $element.prepend(headerTemplate);
	                    }
	                    var paginationTemplate = angular.element(document.createElement('div')).attr({
	                        'ng-table-pagination': 'params',
	                        'template-url': 'templates.pagination'
	                    });
	                    $element.after(paginationTemplate);
	                    if (headerTemplate) {
	                        $compile(headerTemplate)($scope);
	                    }
	                    $compile(paginationTemplate)($scope);
	                }
	            };

	            this.loadFilterData = function ($columns) {
	                angular.forEach($columns, function ($column) {
	                    var result;
	                    result = $column.filterData($scope);
	                    if (!result) {
	                        delete $column.filterData;
	                        return;
	                    }

	                    // if we're working with a deferred object or a promise, let's wait for the promise
	                    /* WARNING: support for returning a $defer is depreciated */
	                    if ((angular.isObject(result) && (angular.isObject(result.promise) || angular.isFunction(result.then)))) {
	                        var pData = angular.isFunction(result.then) ? result : result.promise;
	                        delete $column.filterData;
	                        return pData.then(function(data) {
	                            // our deferred can eventually return arrays, functions and objects
	                            if (!angular.isArray(data) && !angular.isFunction(data) && !angular.isObject(data)) {
	                                // if none of the above was found - we just want an empty array
	                                data = [];
	                            }
	                            $column.data = data;
	                        });
	                    }
	                    // otherwise, we just return what the user gave us. It could be a function, array, object, whatever
	                    else {
	                        return $column.data = result;
	                    }
	                });
	            };

	            this.buildColumns = function (columns) {
	                var result = [];
	                (columns || []).forEach(function(col){
	                    result.push(ngTableColumn.buildColumn(col, $scope, result));
	                });
	                return result
	            };

	            this.parseNgTableDynamicExpr = function (attr) {
	                if (!attr || attr.indexOf(" with ") > -1) {
	                    var parts = attr.split(/\s+with\s+/);
	                    return {
	                        tableParams: parts[0],
	                        columns: parts[1]
	                    };
	                } else {
	                    throw new Error('Parse error (expected example: ng-table-dynamic=\'tableParams with cols\')');
	                }
	            };

	            this.setupBindingsToInternalScope = function(tableParamsExpr){

	                // note: this we're setting up watches to simulate angular's isolated scope bindings

	                // note: is REALLY important to watch for a change to the ngTableParams *reference* rather than
	                // $watch for value equivalence. This is because ngTableParams references the current page of data as
	                // a field and it's important not to watch this
	                var tableParamsGetter = $parse(tableParamsExpr);
	                $scope.$watch(tableParamsGetter, (function (params) {
	                    if (angular.isUndefined(params)) {
	                        return;
	                    }
	                    $scope.paramsModel = tableParamsGetter;
	                    $scope.params = params;
	                }), false);

	                setupFilterRowBindingsToInternalScope();
	                setupGroupRowBindingsToInternalScope();
	            };

	            function setupFilterRowBindingsToInternalScope(){
	                if ($attrs.showFilter) {
	                    $scope.$parent.$watch($attrs.showFilter, function(value) {
	                        $scope.show_filter = value;
	                    });
	                } else {
	                    $scope.$watch(hasVisibleFilterColumn, function(value){
	                        $scope.show_filter = value;
	                    })
	                }

	                if ($attrs.disableFilter) {
	                    $scope.$parent.$watch($attrs.disableFilter, function(value) {
	                        $scope.$filterRow.disabled = value;
	                    });
	                }
	            }

	            function setupGroupRowBindingsToInternalScope(){
	                $scope.$groupRow = {};
	                if ($attrs.showGroup) {
	                    var showGroupGetter = $parse($attrs.showGroup);
	                    $scope.$parent.$watch(showGroupGetter, function(value) {
	                        $scope.$groupRow.show = value;
	                    });
	                    if (showGroupGetter.assign){
	                        // setup two-way databinding thus allowing ngTableGrowRow to assign to the showGroup expression
	                        $scope.$watch('$groupRow.show', function(value) {
	                            showGroupGetter.assign($scope.$parent, value);
	                        });
	                    }
	                } else{
	                    $scope.$watch('params.hasGroup()', function(newValue) {
	                        $scope.$groupRow.show = newValue;
	                    });
	                }
	            }

	            function getVisibleColumns(){
	                return ($scope.$columns || []).filter(function(c){
	                    return c.show($scope);
	                });
	            }

	            function hasVisibleFilterColumn(){
	                if (!$scope.$columns) return false;

	                return some($scope.$columns, function($column){
	                    return $column.show($scope) && $column.filter($scope);
	                });
	            }

	            function some(array, predicate){
	                var found = false;
	                for (var i = 0; i < array.length; i++) {
	                    var obj = array[i];
	                    if (predicate(obj)){
	                        found = true;
	                        break;
	                    }
	                }
	                return found;
	            }

	            function commonInit(){
	                ngTableEventsChannel.onAfterReloadData(bindDataToScope, $scope, isMyPublisher);
	                ngTableEventsChannel.onPagesChanged(bindPagesToScope, $scope, isMyPublisher);

	                function bindDataToScope(params, newDatapage){
	                    var visibleColumns = getVisibleColumns();
	                    if (params.hasGroup()) {
	                        $scope.$groups = newDatapage || [];
	                        $scope.$groups.visibleColumnCount = visibleColumns.length;
	                    } else {
	                        $scope.$data = newDatapage || [];
	                        $scope.$data.visibleColumnCount = visibleColumns.length;
	                    }
	                }

	                function bindPagesToScope(params, newPages){
	                    $scope.pages = newPages
	                }

	                function isMyPublisher(publisher){
	                    return $scope.params === publisher;
	                }
	            }

	            commonInit();
	        }]);
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    /**
	     * @ngdoc directive
	     * @name ngTable
	     * @module ngTable
	     * @restrict A
	     *
	     * @description
	     * Directive that instantiates {@link ngTableController ngTableController}.
	     */
	    angular.module('ngTable').directive('ngTable', ['$q', '$parse',
	        function($q, $parse) {
	            'use strict';

	            return {
	                restrict: 'A',
	                priority: 1001,
	                scope: true,
	                controller: 'ngTableController',
	                compile: function(element) {
	                    var columns = [],
	                        i = 0,
	                        dataRow,
	                        groupRow,
	                        rows = [];

	                    angular.forEach(element.find('tr'), function(tr) {
	                        rows.push(angular.element(tr))
	                    });
	                    dataRow = rows.filter(function(tr){
	                        return !tr.hasClass('ng-table-group');
	                    })[0];
	                    groupRow = rows.filter(function(tr){
	                        return tr.hasClass('ng-table-group');
	                    })[0];

	                    if (!dataRow) {
	                        return;
	                    }
	                    angular.forEach(dataRow.find('td'), function(item) {
	                        var el = angular.element(item);
	                        if (el.attr('ignore-cell') && 'true' === el.attr('ignore-cell')) {
	                            return;
	                        }

	                        var getAttrValue = function(attr){
	                            return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);
	                        };
	                        var setAttrValue = function(attr, value){
	                            if (el.attr('x-data-' + attr)){
	                                el.attr('x-data-' + attr, value)
	                            } else if (el.attr('data' + attr)){
	                                el.attr('data' + attr, value)
	                            } else {
	                                el.attr(attr, value)
	                            }
	                        };

	                        var parsedAttribute = function(attr) {
	                            var expr = getAttrValue(attr);
	                            if (!expr){
	                                return undefined;
	                            }

	                            var localValue;
	                            var getter = function (context) {
	                                if (localValue !== undefined){
	                                    return localValue;
	                                }
	                                return $parse(expr)(context);
	                            };
	                            getter.assign = function($scope, value){
	                                var parsedExpr = $parse(expr);
	                                if (parsedExpr.assign) {
	                                    // we should be writing back to the parent scope as this is where the expression
	                                    // came from
	                                    parsedExpr.assign($scope.$parent, value);
	                                } else {
	                                    localValue = value;
	                                }
	                            };
	                            return getter;
	                        };
	                        var titleExpr = getAttrValue('title-alt') || getAttrValue('title');
	                        if (titleExpr){
	                            el.attr('data-title-text', '{{' + titleExpr + '}}'); // this used in responsive table
	                        }
	                        // NOTE TO MAINTAINERS: if you add extra fields to a $column be sure to extend ngTableColumn with
	                        // a corresponding "safe" default
	                        columns.push({
	                            id: i++,
	                            title: parsedAttribute('title'),
	                            titleAlt: parsedAttribute('title-alt'),
	                            headerTitle: parsedAttribute('header-title'),
	                            sortable: parsedAttribute('sortable'),
	                            'class': parsedAttribute('header-class'),
	                            filter: parsedAttribute('filter'),
	                            groupable: parsedAttribute('groupable'),
	                            headerTemplateURL: parsedAttribute('header'),
	                            filterData: parsedAttribute('filter-data'),
	                            show: el.attr("ng-if") ? parsedAttribute('ng-if') : undefined
	                        });

	                        if (groupRow || el.attr("ng-if")){
	                            // change ng-if to bind to our column definition which we know will be writable
	                            // because this will potentially increase the $watch count, only do so if we already have an
	                            // ng-if or when we definitely need to change visibility of the columns.
	                            // currently only ngTableGroupRow directive needs to change visibility
	                            setAttrValue('ng-if', '$columns[' + (columns.length - 1) + '].show(this)');
	                        }
	                    });
	                    return function(scope, element, attrs, controller) {
	                        scope.$columns = columns = controller.buildColumns(columns);

	                        controller.setupBindingsToInternalScope(attrs.ngTable);
	                        controller.loadFilterData(columns);
	                        controller.compileDirectiveTemplates();
	                    };
	                }
	            }
	        }
	    ]);
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){

	    /**
	     * @ngdoc directive
	     * @name ngTableDynamic
	     * @module ngTable
	     * @restrict A
	     *
	     * @description
	     * A dynamic version of the {@link ngTable ngTable} directive that accepts a dynamic list of columns
	     * definitions to render
	     */
	    angular.module('ngTable').directive('ngTableDynamic', [function (){

	        return {
	            restrict: 'A',
	            priority: 1001,
	            scope: true,
	            controller: 'ngTableController',
	            compile: function(tElement) {
	                var row;

	                // IE 8 fix :not(.ng-table-group) selector
	                angular.forEach(tElement.find('tr'), function(tr) {
	                    tr = angular.element(tr);
	                    if (!tr.hasClass('ng-table-group') && !row) {
	                        row = tr;
	                    }
	                });
	                if (!row) {
	                    return;
	                }

	                angular.forEach(row.find('td'), function(item) {
	                    var el = angular.element(item);
	                    var getAttrValue = function(attr){
	                        return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);
	                    };

	                    // this used in responsive table
	                    var titleExpr = getAttrValue('title');
	                    if (!titleExpr){
	                        el.attr('data-title-text', '{{$columns[$index].titleAlt(this) || $columns[$index].title(this)}}');
	                    }
	                    var showExpr = el.attr('ng-if');
	                    if (!showExpr){
	                        el.attr('ng-if', '$columns[$index].show(this)');
	                    }
	                });
	                return function (scope, element, attrs, controller) {
	                    var expr = controller.parseNgTableDynamicExpr(attrs.ngTableDynamic);

	                    controller.setupBindingsToInternalScope(expr.tableParams);
	                    controller.compileDirectiveTemplates();

	                    scope.$watchCollection(expr.columns, function (newCols/*, oldCols*/) {
	                        scope.$columns = controller.buildColumns(newCols);
	                        controller.loadFilterData(scope.$columns);
	                    });
	                };
	            }
	        };
	    }]);
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .directive('ngTableColumnsBinding', ngTableColumnsBinding);

	    ngTableColumnsBinding.$inject = ["$parse"];

	    /**
	     * @ngdoc directive
	     * @name ngTableColumnsBinding
	     * @description One-way data binds the $columns array generated by ngTable/ngTableDynamic to the specified
	     * expression.
	     *
	     * This allows the $columns array to be accessed outside of the html table markup
	     */
	    function ngTableColumnsBinding($parse){
	        var directive = {
	            restrict: 'A',
	            require: 'ngTable',
	            link: linkFn
	        };
	        return directive;

	        function linkFn($scope, $element, $attrs){
	            var setter = $parse($attrs.ngTableColumnsBinding).assign;
	            if (setter){
	                $scope.$watch('$columns', function(newColumns){
	                    var shallowClone = (newColumns || []).slice(0);
	                    setter($scope, shallowClone);
	                });
	            }
	        }
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    /**
	     * @ngdoc directive
	     * @name ngTablePagination
	     * @module ngTable
	     * @restrict A
	     */
	    angular.module('ngTable').directive('ngTablePagination', ['$compile', 'ngTableEventsChannel',
	        function($compile, ngTableEventsChannel) {
	            'use strict';

	            return {
	                restrict: 'A',
	                scope: {
	                    'params': '=ngTablePagination',
	                    'templateUrl': '='
	                },
	                replace: false,
	                link: function(scope, element/*, attrs*/) {

	                    ngTableEventsChannel.onAfterReloadData(function(pubParams) {
	                        scope.pages = pubParams.generatePagesArray();
	                    }, scope, function(pubParams){
	                        return pubParams === scope.params;
	                    });

	                    scope.$watch('templateUrl', function(templateUrl) {
	                        if (angular.isUndefined(templateUrl)) {
	                            return;
	                        }
	                        var template = angular.element(document.createElement('div'));
	                        template.attr({
	                            'ng-include': 'templateUrl'
	                        });
	                        element.append(template);
	                        $compile(template)(scope);
	                    });
	                }
	            };
	        }
	    ]);

	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .controller('ngTableFilterRowController', ngTableFilterRowController);

	    ngTableFilterRowController.$inject = ['$scope', 'ngTableFilterConfig'];

	    function ngTableFilterRowController($scope, ngTableFilterConfig){

	        $scope.config = ngTableFilterConfig;

	        $scope.getFilterCellCss = function (filter, layout){
	            if (layout !== 'horizontal') {
	                return 's12';
	            }

	            var size = Object.keys(filter).length;
	            var width = parseInt(12 / size, 10);
	            return 's' + width;
	        };

	        $scope.getFilterPlaceholderValue = function(filterValue/*, filterName*/){
	            if (angular.isObject(filterValue)) {
	                return filterValue.placeholder;
	            } else {
	                return '';
	            }
	        };
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .directive('ngTableFilterRow', ngTableFilterRow);

	    ngTableFilterRow.$inject = [];

	    function ngTableFilterRow(){
	        var directive = {
	            restrict: 'E',
	            replace: true,
	            templateUrl: 'ng-table/filterRow.html',
	            scope: true,
	            controller: 'ngTableFilterRowController'
	        };
	        return directive;
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .controller('ngTableGroupRowController', ngTableGroupRowController);

	    ngTableGroupRowController.$inject = ['$scope'];

	    function ngTableGroupRowController($scope){

	        var groupFns = [];

	        init();

	        function init(){
	            $scope.getGroupables = getGroupables;
	            $scope.getGroupTitle = getGroupTitle;
	            $scope.getVisibleColumns = getVisibleColumns;
	            $scope.groupBy = groupBy;
	            $scope.isSelectedGroup = isSelectedGroup;
	            $scope.toggleDetail = toggleDetail;

	            $scope.$watch('params.group()', setGroup, true);
	        }

	        function changeSortDirection(){
	            var newDirection;
	            if ($scope.params.hasGroup($scope.$selGroup, 'asc')) {
	                newDirection = 'desc';
	            } else if ($scope.params.hasGroup($scope.$selGroup, 'desc')){
	                newDirection = '';
	            } else {
	                newDirection = 'asc';
	            }
	            $scope.params.group($scope.$selGroup, newDirection);
	        }

	        function findGroupColumn(groupKey) {
	            return $scope.$columns.filter(function ($column) {
	                return $column.groupable($scope) === groupKey;
	            })[0];
	        }

	        function getGroupTitle(group){
	            return angular.isFunction(group) ? group.title : group.title($scope);
	        }

	        function getGroupables(){
	            var groupableCols = $scope.$columns.filter(function ($column) {
	                return $column.groupable($scope);
	            });
	            return groupFns.concat(groupableCols);
	        }

	        function getVisibleColumns(){
	            return $scope.$columns.filter(function($column){
	                return $column.show($scope);
	            })
	        }

	        function groupBy(group){
	            if (isSelectedGroup(group)){
	                changeSortDirection();
	            } else {
	                if (group.groupable){
	                    $scope.params.group(group.groupable($scope));
	                } else{
	                    $scope.params.group(group);
	                }
	            }
	        }

	        function isSelectedGroup(group){
	            if (group.groupable){
	                return group.groupable($scope) === $scope.$selGroup;
	            } else {
	                return group === $scope.$selGroup;
	            }
	        }

	        function setGroup(group){
	            var existingGroupCol = findGroupColumn($scope.$selGroup);
	            if (existingGroupCol && existingGroupCol.show.assign){
	                existingGroupCol.show.assign($scope, true);
	            }
	            if (angular.isFunction(group)) {
	                groupFns = [group];
	                $scope.$selGroup = group;
	                $scope.$selGroupTitle = group.title;
	            } else {
	                // note: currently only one group is implemented
	                var groupKey = Object.keys(group || {})[0];
	                var groupedColumn = findGroupColumn(groupKey);
	                if (groupedColumn) {
	                    $scope.$selGroupTitle = groupedColumn.title($scope);
	                    $scope.$selGroup = groupKey;
	                    if (groupedColumn.show.assign) {
	                        groupedColumn.show.assign($scope, false);
	                    }
	                }
	            }
	        }

	        function toggleDetail(){
	            $scope.params.settings().groupOptions.isExpanded = !$scope.params.settings().groupOptions.isExpanded;
	            return $scope.params.reload();
	        }
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .directive('ngTableGroupRow', ngTableGroupRow);

	    ngTableGroupRow.$inject = [];

	    function ngTableGroupRow(){
	        var directive = {
	            restrict: 'E',
	            replace: true,
	            templateUrl: 'ng-table/groupRow.html',
	            scope: true,
	            controller: 'ngTableGroupRowController',
	            controllerAs: 'dctrl'
	        };
	        return directive;
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .controller('ngTableSorterRowController', ngTableSorterRowController);

	    ngTableSorterRowController.$inject = ['$scope'];

	    function ngTableSorterRowController($scope){

	        $scope.sortBy = sortBy;

	        ///////////

	        function sortBy($column, event) {
	            var parsedSortable = $column.sortable && $column.sortable();
	            if (!parsedSortable) {
	                return;
	            }
	            var defaultSort = $scope.params.settings().defaultSort;
	            var inverseSort = (defaultSort === 'asc' ? 'desc' : 'asc');
	            var sorting = $scope.params.sorting() && $scope.params.sorting()[parsedSortable] && ($scope.params.sorting()[parsedSortable] === defaultSort);
	            var sortingParams = (event.ctrlKey || event.metaKey) ? $scope.params.sorting() : {};
	            sortingParams[parsedSortable] = (sorting ? inverseSort : defaultSort);
	            $scope.params.parameters({
	                sorting: sortingParams
	            });
	        }
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    angular.module('ngTable')
	        .directive('ngTableSorterRow', ngTableSorterRow);

	    ngTableSorterRow.$inject = [];

	    function ngTableSorterRow(){
	        var directive = {
	            restrict: 'E',
	            replace: true,
	            templateUrl: 'ng-table/sorterRow.html',
	            scope: true,
	            controller: 'ngTableSorterRowController'
	        };
	        return directive;
	    }
	})();

	/**
	 * ngTable: Table + Angular JS
	 *
	 * @author Vitalii Savchuk <esvit666@gmail.com>
	 * @url https://github.com/esvit/ng-table/
	 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
	 */

	(function(){
	    'use strict';

	    /**
	     * @ngdoc directive
	     * @name ngTableSelectFilterDs
	     * @module ngTable
	     * @restrict A
	     *
	     * @description
	     * Takes the array returned by $column.filterData and makes it available as `$selectData` on the `$scope`.
	     *
	     * The resulting `$selectData` array will contain an extra item that is suitable to represent the user
	     * "deselecting" an item from a `<select>` tag
	     *
	     * This directive is is focused on providing a datasource to an `ngOptions` directive
	     */
	    angular.module('ngTable')
	        .directive('ngTableSelectFilterDs', ngTableSelectFilterDs);

	    ngTableSelectFilterDs.$inject = [];

	    function ngTableSelectFilterDs(){
	        // note: not using isolated or child scope "by design"
	        // this is to allow this directive to be combined with other directives that do

	        var directive = {
	            restrict: 'A',
	            controller: ngTableSelectFilterDsController
	        };
	        return directive;
	    }

	    ngTableSelectFilterDsController.$inject = ['$scope', '$parse', '$attrs', '$q'];
	    function ngTableSelectFilterDsController($scope, $parse, $attrs, $q){

	        var $column = {};
	        init();

	        function init(){
	            $column = $parse($attrs.ngTableSelectFilterDs)($scope);
	            $scope.$watch(function(){
	                return $column.data;
	            }, bindDataSource);
	        }

	        function bindDataSource(){
	            getSelectListData($column).then(function(data){
	                if (data && !hasEmptyOption(data)){
	                    data.unshift({ id: '', title: ''});
	                }
	                data = data || [];
	                $scope.$selectData = data;
	            });
	        }

	        function hasEmptyOption(data) {
	            var isMatch;
	            for (var i = 0; i < data.length; i++) {
	                var item = data[i];
	                if (item && item.id === '') {
	                    isMatch = true;
	                    break;
	                }
	            }
	            return isMatch;
	        }

	        function getSelectListData($column) {
	            var data = angular.isFunction($column.data) ? $column.data() : $column.data;
	            return $q.when(data);
	        }
	    }
	})();

	angular.module('ngTable').run(['$templateCache', function ($templateCache) {
		$templateCache.put('ng-table/filterRow.html', '<tr ng-show="show_filter" class="ng-table-filters"> <th data-title-text="{{$column.titleAlt(this) || $column.title(this)}}" ng-repeat="$column in $columns" ng-if="$column.show(this)" class="filter {{$column.class(this)}}" ng-class="params.settings().filterOptions.filterLayout===\'horizontal\' ? \'filter-horizontal\' : \'\'"> <div ng-repeat="(name, filter) in $column.filter(this)" ng-include="config.getTemplateUrl(filter)" class="filter-cell" ng-class="[getFilterCellCss($column.filter(this), params.settings().filterOptions.filterLayout), $last ? \'last\' : \'\']"> </div> </th> </tr> ');
		$templateCache.put('ng-table/filters/number.html', '<input type="number" name="{{name}}" ng-disabled="$filterRow.disabled" ng-model="params.filter()[name]" class="input-filter form-control" placeholder="{{getFilterPlaceholderValue(filter, name)}}"/> ');
		$templateCache.put('ng-table/filters/select-multiple.html', '<select ng-options="data.id as data.title for data in $column.data" ng-disabled="$filterRow.disabled" multiple ng-multiple="true" ng-model="params.filter()[name]" class="filter filter-select-multiple form-control" name="{{name}}"> </select> ');
		$templateCache.put('ng-table/filters/select.html', '<select ng-options="data.id as data.title for data in $selectData" ng-table-select-filter-ds="$column" ng-disabled="$filterRow.disabled" ng-model="params.filter()[name]" class="filter filter-select form-control" name="{{name}}"> <option style="display:none" value=""></option> </select> ');
		$templateCache.put('ng-table/filters/text.html', '<input type="text" name="{{name}}" ng-disabled="$filterRow.disabled" ng-model="params.filter()[name]" class="input-filter form-control" placeholder="{{getFilterPlaceholderValue(filter, name)}}"/> ');
		$templateCache.put('ng-table/groupRow.html', '<tr ng-if="params.hasGroup()" ng-show="$groupRow.show" class="ng-table-group-header"> <th colspan="{{getVisibleColumns().length}}" class="sortable" ng-class="{ \'sort-asc\': params.hasGroup($selGroup, \'asc\'), \'sort-desc\':params.hasGroup($selGroup, \'desc\') }"> <a href="" ng-click="isSelectorOpen=!isSelectorOpen" class="ng-table-group-selector"> <strong class="sort-indicator">{{$selGroupTitle}}</strong> <button class="btn btn-default btn-xs ng-table-group-close" ng-click="$groupRow.show=false; $event.preventDefault(); $event.stopPropagation();"> <span class="glyphicon glyphicon-remove"></span> </button> <button class="btn btn-default btn-xs ng-table-group-toggle" ng-click="toggleDetail(); $event.preventDefault(); $event.stopPropagation();"> <span class="glyphicon" ng-class="{ \'glyphicon-resize-small\': params.settings().groupOptions.isExpanded, \'glyphicon-resize-full\': !params.settings().groupOptions.isExpanded }"></span> </button> </a> <div class="list-group" ng-if="isSelectorOpen"> <a href="" class="list-group-item" ng-repeat="group in getGroupables()" ng-click="groupBy(group)"> <strong>{{ getGroupTitle(group)}}</strong> <strong ng-class="isSelectedGroup(group) && \'sort-indicator\'"></strong> </a> </div> </th> </tr> ');
		$templateCache.put('ng-table/header.html', '<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row> ');
		$templateCache.put('ng-table/pager.html', '<div class="ng-cloak ng-table-pager" ng-if="params.data.length"> <div ng-if="params.settings().counts.length" class="ng-table-counts btn-group pull-right"> <button ng-repeat="count in params.settings().counts" type="button" ng-class="{\'active\':params.count()==count}" ng-click="params.count(count)" class="btn btn-default"> <span ng-bind="count"></span> </button> </div> <ul ng-if="pages.length" class="pagination ng-table-pagination"> <li ng-class="{\'disabled\': !page.active && !page.current, \'active\': page.current}" ng-repeat="page in pages" ng-switch="page.type"> <a ng-switch-when="prev" ng-click="params.page(page.number)" href="">&laquo;</a> <a ng-switch-when="first" ng-click="params.page(page.number)" href=""><span ng-bind="page.number"></span></a> <a ng-switch-when="page" ng-click="params.page(page.number)" href=""><span ng-bind="page.number"></span></a> <a ng-switch-when="more" ng-click="params.page(page.number)" href="">&#8230;</a> <a ng-switch-when="last" ng-click="params.page(page.number)" href=""><span ng-bind="page.number"></span></a> <a ng-switch-when="next" ng-click="params.page(page.number)" href="">&raquo;</a> </li> </ul> </div> ');
		$templateCache.put('ng-table/sorterRow.html', '<tr class="ng-table-sort-header"> <th title="{{$column.headerTitle(this)}}" ng-repeat="$column in $columns" ng-class="{ \'sortable\': $column.sortable(this), \'sort-asc\': params.sorting()[$column.sortable(this)]==\'asc\', \'sort-desc\': params.sorting()[$column.sortable(this)]==\'desc\' }" ng-click="sortBy($column, $event)" ng-if="$column.show(this)" ng-init="template=$column.headerTemplateURL(this)" class="header {{$column.class(this)}}"> <div ng-if="!template" class="ng-table-header" ng-class="{\'sort-indicator\': params.settings().sortingIndicator==\'div\'}"> <span ng-bind="$column.title(this)" ng-class="{\'sort-indicator\': params.settings().sortingIndicator==\'span\'}"></span> </div> <div ng-if="template" ng-include="template"></div> </th> </tr> ');
	}]);
	    return angular.module('ngTable');
	}));


/***/ },
/* 12 */
/***/ function(module, exports) {

	/*!
	 * ui-grid - v3.2.2 - 2016-06-29
	 * Copyright (c) 2016 ; License: MIT 
	 */

	(function () {
	  'use strict';
	  angular.module('ui.grid.i18n', []);
	  angular.module('ui.grid', ['ui.grid.i18n']);
	})();
	(function () {
	  'use strict';
	  angular.module('ui.grid').constant('uiGridConstants', {
	    LOG_DEBUG_MESSAGES: true,
	    LOG_WARN_MESSAGES: true,
	    LOG_ERROR_MESSAGES: true,
	    CUSTOM_FILTERS: /CUSTOM_FILTERS/g,
	    COL_FIELD: /COL_FIELD/g,
	    MODEL_COL_FIELD: /MODEL_COL_FIELD/g,
	    TOOLTIP: /title=\"TOOLTIP\"/g,
	    DISPLAY_CELL_TEMPLATE: /DISPLAY_CELL_TEMPLATE/g,
	    TEMPLATE_REGEXP: /<.+>/,
	    FUNC_REGEXP: /(\([^)]*\))?$/,
	    DOT_REGEXP: /\./g,
	    APOS_REGEXP: /'/g,
	    BRACKET_REGEXP: /^(.*)((?:\s*\[\s*\d+\s*\]\s*)|(?:\s*\[\s*"(?:[^"\\]|\\.)*"\s*\]\s*)|(?:\s*\[\s*'(?:[^'\\]|\\.)*'\s*\]\s*))(.*)$/,
	    COL_CLASS_PREFIX: 'ui-grid-col',
	    events: {
	      GRID_SCROLL: 'uiGridScroll',
	      COLUMN_MENU_SHOWN: 'uiGridColMenuShown',
	      ITEM_DRAGGING: 'uiGridItemDragStart', // For any item being dragged
	      COLUMN_HEADER_CLICK: 'uiGridColumnHeaderClick'
	    },
	    // copied from http://www.lsauer.com/2011/08/javascript-keymap-keycodes-in-json.html
	    keymap: {
	      TAB: 9,
	      STRG: 17,
	      CAPSLOCK: 20,
	      CTRL: 17,
	      CTRLRIGHT: 18,
	      CTRLR: 18,
	      SHIFT: 16,
	      RETURN: 13,
	      ENTER: 13,
	      BACKSPACE: 8,
	      BCKSP: 8,
	      ALT: 18,
	      ALTR: 17,
	      ALTRIGHT: 17,
	      SPACE: 32,
	      WIN: 91,
	      MAC: 91,
	      FN: null,
	      PG_UP: 33,
	      PG_DOWN: 34,
	      UP: 38,
	      DOWN: 40,
	      LEFT: 37,
	      RIGHT: 39,
	      ESC: 27,
	      DEL: 46,
	      F1: 112,
	      F2: 113,
	      F3: 114,
	      F4: 115,
	      F5: 116,
	      F6: 117,
	      F7: 118,
	      F8: 119,
	      F9: 120,
	      F10: 121,
	      F11: 122,
	      F12: 123
	    },
	    ASC: 'asc',
	    DESC: 'desc',
	    filter: {
	      STARTS_WITH: 2,
	      ENDS_WITH: 4,
	      EXACT: 8,
	      CONTAINS: 16,
	      GREATER_THAN: 32,
	      GREATER_THAN_OR_EQUAL: 64,
	      LESS_THAN: 128,
	      LESS_THAN_OR_EQUAL: 256,
	      NOT_EQUAL: 512,
	      SELECT: 'select',
	      INPUT: 'input'
	    },

	    aggregationTypes: {
	      sum: 2,
	      count: 4,
	      avg: 8,
	      min: 16,
	      max: 32
	    },

	    // TODO(c0bra): Create full list of these somehow. NOTE: do any allow a space before or after them?
	    CURRENCY_SYMBOLS: ['ƒ', '$', '£', '$', '¤', '¥', '៛', '₩', '₱', '฿', '₫'],

	    scrollDirection: {
	      UP: 'up',
	      DOWN: 'down',
	      LEFT: 'left',
	      RIGHT: 'right',
	      NONE: 'none'

	    },

	    dataChange: {
	      ALL: 'all',
	      EDIT: 'edit',
	      ROW: 'row',
	      COLUMN: 'column',
	      OPTIONS: 'options'
	    },
	    scrollbars: {
	      NEVER: 0,
	      ALWAYS: 1
	      //WHEN_NEEDED: 2
	    }
	  });

	})();
	angular.module('ui.grid').directive('uiGridCell', ['$compile', '$parse', 'gridUtil', 'uiGridConstants', function ($compile, $parse, gridUtil, uiGridConstants) {
	  var uiGridCell = {
	    priority: 0,
	    scope: false,
	    require: '?^uiGrid',
	    compile: function() {
	      return {
	        pre: function($scope, $elm, $attrs, uiGridCtrl) {
	          function compileTemplate() {
	            var compiledElementFn = $scope.col.compiledElementFn;

	            compiledElementFn($scope, function(clonedElement, scope) {
	              $elm.append(clonedElement);
	            });
	          }

	          // If the grid controller is present, use it to get the compiled cell template function
	          if (uiGridCtrl && $scope.col.compiledElementFn) {
	             compileTemplate();
	          }
	          // No controller, compile the element manually (for unit tests)
	          else {
	            if ( uiGridCtrl && !$scope.col.compiledElementFn ){
	              // gridUtil.logError('Render has been called before precompile.  Please log a ui-grid issue');  

	              $scope.col.getCompiledElementFn()
	                .then(function (compiledElementFn) {
	                  compiledElementFn($scope, function(clonedElement, scope) {
	                    $elm.append(clonedElement);
	                  });
	                });
	            }
	            else {
	              var html = $scope.col.cellTemplate
	                .replace(uiGridConstants.MODEL_COL_FIELD, 'row.entity.' + gridUtil.preEval($scope.col.field))
	                .replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

	              var cellElement = $compile(html)($scope);
	              $elm.append(cellElement);
	            }
	          }
	        },
	        post: function($scope, $elm, $attrs, uiGridCtrl) {
	          var initColClass = $scope.col.getColClass(false);
	          $elm.addClass(initColClass);

	          var classAdded;
	          var updateClass = function( grid ){
	            var contents = $elm;
	            if ( classAdded ){
	              contents.removeClass( classAdded );
	              classAdded = null;
	            }

	            if (angular.isFunction($scope.col.cellClass)) {
	              classAdded = $scope.col.cellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
	            }
	            else {
	              classAdded = $scope.col.cellClass;
	            }
	            contents.addClass(classAdded);
	          };

	          if ($scope.col.cellClass) {
	            updateClass();
	          }
	          
	          // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
	          var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateClass, [uiGridConstants.dataChange.COLUMN, uiGridConstants.dataChange.EDIT]);
	          
	          // watch the col and row to see if they change - which would indicate that we've scrolled or sorted or otherwise
	          // changed the row/col that this cell relates to, and we need to re-evaluate cell classes and maybe other things
	          var cellChangeFunction = function( n, o ){
	            if ( n !== o ) {
	              if ( classAdded || $scope.col.cellClass ){
	                updateClass();
	              }

	              // See if the column's internal class has changed
	              var newColClass = $scope.col.getColClass(false);
	              if (newColClass !== initColClass) {
	                $elm.removeClass(initColClass);
	                $elm.addClass(newColClass);
	                initColClass = newColClass;
	              }
	            }
	          };

	          // TODO(c0bra): Turn this into a deep array watch
	/*        shouldn't be needed any more given track by col.name
	          var colWatchDereg = $scope.$watch( 'col', cellChangeFunction );
	*/
	          var rowWatchDereg = $scope.$watch( 'row', cellChangeFunction );
	          
	          
	          var deregisterFunction = function() {
	            dataChangeDereg();
	//            colWatchDereg();
	            rowWatchDereg(); 
	          };
	          
	          $scope.$on( '$destroy', deregisterFunction );
	          $elm.on( '$destroy', deregisterFunction );
	        }
	      };
	    }
	  };

	  return uiGridCell;
	}]);


	(function(){

	angular.module('ui.grid')
	.service('uiGridColumnMenuService', [ 'i18nService', 'uiGridConstants', 'gridUtil',
	function ( i18nService, uiGridConstants, gridUtil ) {
	/**
	 *  @ngdoc service
	 *  @name ui.grid.service:uiGridColumnMenuService
	 *
	 *  @description Services for working with column menus, factored out
	 *  to make the code easier to understand
	 */

	  var service = {
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name initialize
	     * @description  Sets defaults, puts a reference to the $scope on
	     * the uiGridController
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {controller} uiGridCtrl the uiGridController for the grid
	     * we're on
	     *
	     */
	    initialize: function( $scope, uiGridCtrl ){
	      $scope.grid = uiGridCtrl.grid;

	      // Store a reference to this link/controller in the main uiGrid controller
	      // to allow showMenu later
	      uiGridCtrl.columnMenuScope = $scope;

	      // Save whether we're shown or not so the columns can check
	      $scope.menuShown = false;
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name setColMenuItemWatch
	     * @description  Setup a watch on $scope.col.menuItems, and update
	     * menuItems based on this.  $scope.col needs to be set by the column
	     * before calling the menu.
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {controller} uiGridCtrl the uiGridController for the grid
	     * we're on
	     *
	     */
	    setColMenuItemWatch: function ( $scope ){
	      var deregFunction = $scope.$watch('col.menuItems', function (n) {
	        if (typeof(n) !== 'undefined' && n && angular.isArray(n)) {
	          n.forEach(function (item) {
	            if (typeof(item.context) === 'undefined' || !item.context) {
	              item.context = {};
	            }
	            item.context.col = $scope.col;
	          });

	          $scope.menuItems = $scope.defaultMenuItems.concat(n);
	        }
	        else {
	          $scope.menuItems = $scope.defaultMenuItems;
	        }
	      });

	      $scope.$on( '$destroy', deregFunction );
	    },


	    /**
	     * @ngdoc boolean
	     * @name enableSorting
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) True by default. When enabled, this setting adds sort
	     * widgets to the column header, allowing sorting of the data in the individual column.
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name sortable
	     * @description  determines whether this column is sortable
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    sortable: function( $scope ) {
	      if ( $scope.grid.options.enableSorting && typeof($scope.col) !== 'undefined' && $scope.col && $scope.col.enableSorting) {
	        return true;
	      }
	      else {
	        return false;
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name isActiveSort
	     * @description  determines whether the requested sort direction is current active, to
	     * allow highlighting in the menu
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {string} direction the direction that we'd have selected for us to be active
	     *
	     */
	    isActiveSort: function( $scope, direction ){
	      return (typeof($scope.col) !== 'undefined' && typeof($scope.col.sort) !== 'undefined' &&
	              typeof($scope.col.sort.direction) !== 'undefined' && $scope.col.sort.direction === direction);

	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name suppressRemoveSort
	     * @description  determines whether we should suppress the removeSort option
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    suppressRemoveSort: function( $scope ) {
	      if ($scope.col && $scope.col.suppressRemoveSort) {
	        return true;
	      }
	      else {
	        return false;
	      }
	    },


	    /**
	     * @ngdoc boolean
	     * @name enableHiding
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) True by default. When set to false, this setting prevents a user from hiding the column
	     * using the column menu or the grid menu.
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name hideable
	     * @description  determines whether a column can be hidden, by checking the enableHiding columnDef option
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    hideable: function( $scope ) {
	      if (typeof($scope.col) !== 'undefined' && $scope.col && $scope.col.colDef && $scope.col.colDef.enableHiding === false ) {
	        return false;
	      }
	      else {
	        return true;
	      }
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name getDefaultMenuItems
	     * @description  returns the default menu items for a column menu
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     *
	     */
	    getDefaultMenuItems: function( $scope ){
	      return [
	        {
	          title: i18nService.getSafeText('sort.ascending'),
	          icon: 'ui-grid-icon-sort-alt-up',
	          action: function($event) {
	            $event.stopPropagation();
	            $scope.sortColumn($event, uiGridConstants.ASC);
	          },
	          shown: function () {
	            return service.sortable( $scope );
	          },
	          active: function() {
	            return service.isActiveSort( $scope, uiGridConstants.ASC);
	          }
	        },
	        {
	          title: i18nService.getSafeText('sort.descending'),
	          icon: 'ui-grid-icon-sort-alt-down',
	          action: function($event) {
	            $event.stopPropagation();
	            $scope.sortColumn($event, uiGridConstants.DESC);
	          },
	          shown: function() {
	            return service.sortable( $scope );
	          },
	          active: function() {
	            return service.isActiveSort( $scope, uiGridConstants.DESC);
	          }
	        },
	        {
	          title: i18nService.getSafeText('sort.remove'),
	          icon: 'ui-grid-icon-cancel',
	          action: function ($event) {
	            $event.stopPropagation();
	            $scope.unsortColumn();
	          },
	          shown: function() {
	            return service.sortable( $scope ) &&
	                   typeof($scope.col) !== 'undefined' && (typeof($scope.col.sort) !== 'undefined' &&
	                   typeof($scope.col.sort.direction) !== 'undefined') && $scope.col.sort.direction !== null &&
	                  !service.suppressRemoveSort( $scope );
	          }
	        },
	        {
	          title: i18nService.getSafeText('column.hide'),
	          icon: 'ui-grid-icon-cancel',
	          shown: function() {
	            return service.hideable( $scope );
	          },
	          action: function ($event) {
	            $event.stopPropagation();
	            $scope.hideColumn();
	          }
	        }
	      ];
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name getColumnElementPosition
	     * @description  gets the position information needed to place the column
	     * menu below the column header
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {GridCol} column the column we want to position below
	     * @param {element} $columnElement the column element we want to position below
	     * @returns {hash} containing left, top, offset, height, width
	     *
	     */
	    getColumnElementPosition: function( $scope, column, $columnElement ){
	      var positionData = {};
	      positionData.left = $columnElement[0].offsetLeft;
	      positionData.top = $columnElement[0].offsetTop;
	      positionData.parentLeft = $columnElement[0].offsetParent.offsetLeft;

	      // Get the grid scrollLeft
	      positionData.offset = 0;
	      if (column.grid.options.offsetLeft) {
	        positionData.offset = column.grid.options.offsetLeft;
	      }

	      positionData.height = gridUtil.elementHeight($columnElement, true);
	      positionData.width = gridUtil.elementWidth($columnElement, true);

	      return positionData;
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:uiGridColumnMenuService
	     * @name repositionMenu
	     * @description  Reposition the menu below the new column.  If the menu has no child nodes
	     * (i.e. it's not currently visible) then we guess it's width at 100, we'll be called again
	     * later to fix it
	     * @param {$scope} $scope the $scope from the uiGridColumnMenu
	     * @param {GridCol} column the column we want to position below
	     * @param {hash} positionData a hash containing left, top, offset, height, width
	     * @param {element} $elm the column menu element that we want to reposition
	     * @param {element} $columnElement the column element that we want to reposition underneath
	     *
	     */
	    repositionMenu: function( $scope, column, positionData, $elm, $columnElement ) {
	      var menu = $elm[0].querySelectorAll('.ui-grid-menu');

	      // It's possible that the render container of the column we're attaching to is
	      // offset from the grid (i.e. pinned containers), we need to get the difference in the offsetLeft
	      // between the render container and the grid
	      var renderContainerElm = gridUtil.closestElm($columnElement, '.ui-grid-render-container');
	      var renderContainerOffset = renderContainerElm.getBoundingClientRect().left - $scope.grid.element[0].getBoundingClientRect().left;

	      var containerScrollLeft = renderContainerElm.querySelectorAll('.ui-grid-viewport')[0].scrollLeft;

	      // default value the last width for _this_ column, otherwise last width for _any_ column, otherwise default to 170
	      var myWidth = column.lastMenuWidth ? column.lastMenuWidth : ( $scope.lastMenuWidth ? $scope.lastMenuWidth : 170);
	      var paddingRight = column.lastMenuPaddingRight ? column.lastMenuPaddingRight : ( $scope.lastMenuPaddingRight ? $scope.lastMenuPaddingRight : 10);

	      if ( menu.length !== 0 ){
	        var mid = menu[0].querySelectorAll('.ui-grid-menu-mid');
	        if ( mid.length !== 0 && !angular.element(mid).hasClass('ng-hide') ) {
	          myWidth = gridUtil.elementWidth(menu, true);
	          $scope.lastMenuWidth = myWidth;
	          column.lastMenuWidth = myWidth;

	          // TODO(c0bra): use padding-left/padding-right based on document direction (ltr/rtl), place menu on proper side
	          // Get the column menu right padding
	          paddingRight = parseInt(gridUtil.getStyles(angular.element(menu)[0])['paddingRight'], 10);
	          $scope.lastMenuPaddingRight = paddingRight;
	          column.lastMenuPaddingRight = paddingRight;
	        }
	      }

	      var left = positionData.left + renderContainerOffset - containerScrollLeft + positionData.parentLeft + positionData.width - myWidth + paddingRight;
	      if (left < positionData.offset){
	        left = positionData.offset;
	      }

	      $elm.css('left', left + 'px');
	      $elm.css('top', (positionData.top + positionData.height) + 'px');
	    }

	  };

	  return service;
	}])


	.directive('uiGridColumnMenu', ['$timeout', 'gridUtil', 'uiGridConstants', 'uiGridColumnMenuService', '$document',
	function ($timeout, gridUtil, uiGridConstants, uiGridColumnMenuService, $document) {
	/**
	 * @ngdoc directive
	 * @name ui.grid.directive:uiGridColumnMenu
	 * @description  Provides the column menu framework, leverages uiGridMenu underneath
	 *
	 */

	  var uiGridColumnMenu = {
	    priority: 0,
	    scope: true,
	    require: '^uiGrid',
	    templateUrl: 'ui-grid/uiGridColumnMenu',
	    replace: true,
	    link: function ($scope, $elm, $attrs, uiGridCtrl) {
	      uiGridColumnMenuService.initialize( $scope, uiGridCtrl );

	      $scope.defaultMenuItems = uiGridColumnMenuService.getDefaultMenuItems( $scope );

	      // Set the menu items for use with the column menu. The user can later add additional items via the watch
	      $scope.menuItems = $scope.defaultMenuItems;
	      uiGridColumnMenuService.setColMenuItemWatch( $scope );


	      /**
	       * @ngdoc method
	       * @methodOf ui.grid.directive:uiGridColumnMenu
	       * @name showMenu
	       * @description Shows the column menu.  If the menu is already displayed it
	       * calls the menu to ask it to hide (it will animate), then it repositions the menu
	       * to the right place whilst hidden (it will make an assumption on menu width),
	       * then it asks the menu to show (it will animate), then it repositions the menu again
	       * once we can calculate it's size.
	       * @param {GridCol} column the column we want to position below
	       * @param {element} $columnElement the column element we want to position below
	       */
	      $scope.showMenu = function(column, $columnElement, event) {
	        // Swap to this column
	        $scope.col = column;

	        // Get the position information for the column element
	        var colElementPosition = uiGridColumnMenuService.getColumnElementPosition( $scope, column, $columnElement );

	        if ($scope.menuShown) {
	          // we want to hide, then reposition, then show, but we want to wait for animations
	          // we set a variable, and then rely on the menu-hidden event to call the reposition and show
	          $scope.colElement = $columnElement;
	          $scope.colElementPosition = colElementPosition;
	          $scope.hideThenShow = true;

	          $scope.$broadcast('hide-menu', { originalEvent: event });
	        } else {
	          $scope.menuShown = true;
	          uiGridColumnMenuService.repositionMenu( $scope, column, colElementPosition, $elm, $columnElement );

	          $scope.colElement = $columnElement;
	          $scope.colElementPosition = colElementPosition;
	          $scope.$broadcast('show-menu', { originalEvent: event });

	        }
	      };


	      /**
	       * @ngdoc method
	       * @methodOf ui.grid.directive:uiGridColumnMenu
	       * @name hideMenu
	       * @description Hides the column menu.
	       * @param {boolean} broadcastTrigger true if we were triggered by a broadcast
	       * from the menu itself - in which case don't broadcast again as we'll get
	       * an infinite loop
	       */
	      $scope.hideMenu = function( broadcastTrigger ) {
	        $scope.menuShown = false;
	        if ( !broadcastTrigger ){
	          $scope.$broadcast('hide-menu');
	        }
	      };


	      $scope.$on('menu-hidden', function() {
	        if ( $scope.hideThenShow ){
	          delete $scope.hideThenShow;

	          uiGridColumnMenuService.repositionMenu( $scope, $scope.col, $scope.colElementPosition, $elm, $scope.colElement );
	          $scope.$broadcast('show-menu');

	          $scope.menuShown = true;
	        } else {
	          $scope.hideMenu( true );

	          if ($scope.col) {
	            //Focus on the menu button
	            gridUtil.focus.bySelector($document, '.ui-grid-header-cell.' + $scope.col.getColClass()+ ' .ui-grid-column-menu-button', $scope.col.grid, false);
	          }
	        }
	      });

	      $scope.$on('menu-shown', function() {
	        $timeout( function() {
	          uiGridColumnMenuService.repositionMenu( $scope, $scope.col, $scope.colElementPosition, $elm, $scope.colElement );
	          //Focus on the first item
	          gridUtil.focus.bySelector($document, '.ui-grid-menu-items .ui-grid-menu-item', true);
	          delete $scope.colElementPosition;
	          delete $scope.columnElement;
	        }, 200);
	      });


	      /* Column methods */
	      $scope.sortColumn = function (event, dir) {
	        event.stopPropagation();

	        $scope.grid.sortColumn($scope.col, dir, true)
	          .then(function () {
	            $scope.grid.refresh();
	            $scope.hideMenu();
	          });
	      };

	      $scope.unsortColumn = function () {
	        $scope.col.unsort();

	        $scope.grid.refresh();
	        $scope.hideMenu();
	      };

	      //Since we are hiding this column the default hide action will fail so we need to focus somewhere else.
	      var setFocusOnHideColumn = function(){
	        $timeout(function(){
	          // Get the UID of the first
	          var focusToGridMenu = function(){
	            return gridUtil.focus.byId('grid-menu', $scope.grid);
	          };

	          var thisIndex;
	          $scope.grid.columns.some(function(element, index){
	            if (angular.equals(element, $scope.col)) {
	              thisIndex = index;
	              return true;
	            }
	          });

	          var previousVisibleCol;
	          // Try and find the next lower or nearest column to focus on
	          $scope.grid.columns.some(function(element, index){
	            if (!element.visible){
	              return false;
	            } // This columns index is below the current column index
	            else if ( index < thisIndex){
	              previousVisibleCol = element;
	            } // This elements index is above this column index and we haven't found one that is lower
	            else if ( index > thisIndex && !previousVisibleCol) {
	              // This is the next best thing
	              previousVisibleCol = element;
	              // We've found one so use it.
	              return true;
	            } // We've reached an element with an index above this column and the previousVisibleCol variable has been set
	            else if (index > thisIndex && previousVisibleCol) {
	              // We are done.
	              return true;
	            }
	          });
	          // If found then focus on it
	          if (previousVisibleCol){
	            var colClass = previousVisibleCol.getColClass();
	            gridUtil.focus.bySelector($document, '.ui-grid-header-cell.' + colClass+ ' .ui-grid-header-cell-primary-focus', true).then(angular.noop, function(reason){
	              if (reason !== 'canceled'){ // If this is canceled then don't perform the action
	                //The fallback action is to focus on the grid menu
	                return focusToGridMenu();
	              }
	            });
	          } else {
	            // Fallback action to focus on the grid menu
	            focusToGridMenu();
	          }
	        });
	      };

	      $scope.hideColumn = function () {
	        $scope.col.colDef.visible = false;
	        $scope.col.visible = false;

	        $scope.grid.queueGridRefresh();
	        $scope.hideMenu();
	        $scope.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	        $scope.grid.api.core.raise.columnVisibilityChanged( $scope.col );

	        // We are hiding so the default action of focusing on the button that opened this menu will fail.
	        setFocusOnHideColumn();
	      };
	    },



	    controller: ['$scope', function ($scope) {
	      var self = this;

	      $scope.$watch('menuItems', function (n) {
	        self.menuItems = n;
	      });
	    }]
	  };

	  return uiGridColumnMenu;

	}]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridFilter', ['$compile', '$templateCache', 'i18nService', 'gridUtil', function ($compile, $templateCache, i18nService, gridUtil) {

	    return {
	      compile: function() {
	        return {
	          pre: function ($scope, $elm, $attrs, controllers) {
	            $scope.col.updateFilters = function( filterable ){
	              $elm.children().remove();
	              if ( filterable ){
	                var template = $scope.col.filterHeaderTemplate;

	                $elm.append($compile(template)($scope));
	              }
	            };

	            $scope.$on( '$destroy', function() {
	              delete $scope.col.updateFilters;
	            });
	          },
	          post: function ($scope, $elm, $attrs, controllers){
	            $scope.aria = i18nService.getSafeText('headerCell.aria');
	            $scope.removeFilter = function(colFilter, index){
	              colFilter.term = null;
	              //Set the focus to the filter input after the action disables the button
	              gridUtil.focus.bySelector($elm, '.ui-grid-filter-input-' + index);
	            };
	          }
	        };
	      }
	    };
	  }]);
	})();

	(function () {
	  'use strict';

	  angular.module('ui.grid').directive('uiGridFooterCell', ['$timeout', 'gridUtil', 'uiGridConstants', '$compile',
	  function ($timeout, gridUtil, uiGridConstants, $compile) {
	    var uiGridFooterCell = {
	      priority: 0,
	      scope: {
	        col: '=',
	        row: '=',
	        renderIndex: '='
	      },
	      replace: true,
	      require: '^uiGrid',
	      compile: function compile(tElement, tAttrs, transclude) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var cellFooter = $compile($scope.col.footerCellTemplate)($scope);
	            $elm.append(cellFooter);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            //$elm.addClass($scope.col.getColClass(false));
	            $scope.grid = uiGridCtrl.grid;

	            var initColClass = $scope.col.getColClass(false);
	            $elm.addClass(initColClass);

	            // apply any footerCellClass
	            var classAdded;
	            var updateClass = function( grid ){
	              var contents = $elm;
	              if ( classAdded ){
	                contents.removeClass( classAdded );
	                classAdded = null;
	              }
	  
	              if (angular.isFunction($scope.col.footerCellClass)) {
	                classAdded = $scope.col.footerCellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
	              }
	              else {
	                classAdded = $scope.col.footerCellClass;
	              }
	              contents.addClass(classAdded);
	            };
	  
	            if ($scope.col.footerCellClass) {
	              updateClass();
	            }

	            $scope.col.updateAggregationValue();

	            // Watch for column changes so we can alter the col cell class properly
	/* shouldn't be needed any more, given track by col.name
	            $scope.$watch('col', function (n, o) {
	              if (n !== o) {
	                // See if the column's internal class has changed
	                var newColClass = $scope.col.getColClass(false);
	                if (newColClass !== initColClass) {
	                  $elm.removeClass(initColClass);
	                  $elm.addClass(newColClass);
	                  initColClass = newColClass;
	                }
	              }
	            });
	*/


	            // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
	            var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateClass, [uiGridConstants.dataChange.COLUMN]);
	            // listen for visible rows change and update aggregation values
	            $scope.grid.api.core.on.rowsRendered( $scope, $scope.col.updateAggregationValue );
	            $scope.grid.api.core.on.rowsRendered( $scope, updateClass );
	            $scope.$on( '$destroy', dataChangeDereg );
	          }
	        };
	      }
	    };

	    return uiGridFooterCell;
	  }]);

	})();

	(function () {
	  'use strict';

	  angular.module('ui.grid').directive('uiGridFooter', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', function ($templateCache, $compile, uiGridConstants, gridUtil, $timeout) {

	    return {
	      restrict: 'EA',
	      replace: true,
	      // priority: 1000,
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      scope: true,
	      compile: function ($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            $scope.grid = uiGridCtrl.grid;
	            $scope.colContainer = containerCtrl.colContainer;

	            containerCtrl.footer = $elm;

	            var footerTemplate = $scope.grid.options.footerTemplate;
	            gridUtil.getTemplate(footerTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);

	                var newElm = $compile(template)($scope);
	                $elm.append(newElm);

	                if (containerCtrl) {
	                  // Inject a reference to the footer viewport (if it exists) into the grid controller for use in the horizontal scroll handler below
	                  var footerViewport = $elm[0].getElementsByClassName('ui-grid-footer-viewport')[0];

	                  if (footerViewport) {
	                    containerCtrl.footerViewport = footerViewport;
	                  }
	                }
	              });
	          },

	          post: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            // gridUtil.logDebug('ui-grid-footer link');

	            var grid = uiGridCtrl.grid;

	            // Don't animate footer cells
	            gridUtil.disableAnimations($elm);

	            containerCtrl.footer = $elm;

	            var footerViewport = $elm[0].getElementsByClassName('ui-grid-footer-viewport')[0];
	            if (footerViewport) {
	              containerCtrl.footerViewport = footerViewport;
	            }
	          }
	        };
	      }
	    };
	  }]);

	})();
	(function () {
	  'use strict';

	  angular.module('ui.grid').directive('uiGridGridFooter', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', function ($templateCache, $compile, uiGridConstants, gridUtil, $timeout) {

	    return {
	      restrict: 'EA',
	      replace: true,
	      // priority: 1000,
	      require: '^uiGrid',
	      scope: true,
	      compile: function ($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {

	            $scope.grid = uiGridCtrl.grid;



	            var footerTemplate = $scope.grid.options.gridFooterTemplate;
	            gridUtil.getTemplate(footerTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);

	                var newElm = $compile(template)($scope);
	                $elm.append(newElm);
	              });
	          },

	          post: function ($scope, $elm, $attrs, controllers) {

	          }
	        };
	      }
	    };
	  }]);

	})();
	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridGroupPanel', ["$compile", "uiGridConstants", "gridUtil", function($compile, uiGridConstants, gridUtil) {
	    var defaultTemplate = 'ui-grid/ui-grid-group-panel';

	    return {
	      restrict: 'EA',
	      replace: true,
	      require: '?^uiGrid',
	      scope: false,
	      compile: function($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var groupPanelTemplate = $scope.grid.options.groupPanelTemplate  || defaultTemplate;

	             gridUtil.getTemplate(groupPanelTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);
	                
	                var newElm = $compile(template)($scope);
	                $elm.append(newElm);
	              });
	          },

	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            $elm.bind('$destroy', function() {
	              // scrollUnbinder();
	            });
	          }
	        };
	      }
	    };
	  }]);

	})();
	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridHeaderCell', ['$compile', '$timeout', '$window', '$document', 'gridUtil', 'uiGridConstants', 'ScrollEvent', 'i18nService',
	  function ($compile, $timeout, $window, $document, gridUtil, uiGridConstants, ScrollEvent, i18nService) {
	    // Do stuff after mouse has been down this many ms on the header cell
	    var mousedownTimeout = 500;
	    var changeModeTimeout = 500;    // length of time between a touch event and a mouse event being recognised again, and vice versa

	    var uiGridHeaderCell = {
	      priority: 0,
	      scope: {
	        col: '=',
	        row: '=',
	        renderIndex: '='
	      },
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      replace: true,
	      compile: function() {
	        return {
	          pre: function ($scope, $elm, $attrs) {
	            var cellHeader = $compile($scope.col.headerCellTemplate)($scope);
	            $elm.append(cellHeader);
	          },

	          post: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var renderContainerCtrl = controllers[1];

	            $scope.i18n = {
	              headerCell: i18nService.getSafeText('headerCell'),
	              sort: i18nService.getSafeText('sort')
	            };
	            $scope.isSortPriorityVisible = function() {
	              //show sort priority if column is sorted and there is at least one other sorted column
	              return angular.isNumber($scope.col.sort.priority) && $scope.grid.columns.some(function(element, index){
	                  return angular.isNumber(element.sort.priority) && element !== $scope.col;
	                });
	            };
	            $scope.getSortDirectionAriaLabel = function(){
	              var col = $scope.col;
	              //Trying to recreate this sort of thing but it was getting messy having it in the template.
	              //Sort direction {{col.sort.direction == asc ? 'ascending' : ( col.sort.direction == desc ? 'descending':'none')}}. {{col.sort.priority ? {{columnPriorityText}} {{col.sort.priority}} : ''}
	              var sortDirectionText = col.sort.direction === uiGridConstants.ASC ? $scope.i18n.sort.ascending : ( col.sort.direction === uiGridConstants.DESC ? $scope.i18n.sort.descending : $scope.i18n.sort.none);
	              var label = sortDirectionText;

	              if ($scope.isSortPriorityVisible()) {
	                label = label + '. ' + $scope.i18n.headerCell.priority + ' ' + col.sort.priority;
	              }
	              return label;
	            };

	            $scope.grid = uiGridCtrl.grid;

	            $scope.renderContainer = uiGridCtrl.grid.renderContainers[renderContainerCtrl.containerId];

	            var initColClass = $scope.col.getColClass(false);
	            $elm.addClass(initColClass);

	            // Hide the menu by default
	            $scope.menuShown = false;

	            // Put asc and desc sort directions in scope
	            $scope.asc = uiGridConstants.ASC;
	            $scope.desc = uiGridConstants.DESC;

	            // Store a reference to menu element
	            var $colMenu = angular.element( $elm[0].querySelectorAll('.ui-grid-header-cell-menu') );

	            var $contentsElm = angular.element( $elm[0].querySelectorAll('.ui-grid-cell-contents') );


	            // apply any headerCellClass
	            var classAdded;
	            var previousMouseX;

	            // filter watchers
	            var filterDeregisters = [];


	            /*
	             * Our basic approach here for event handlers is that we listen for a down event (mousedown or touchstart).
	             * Once we have a down event, we need to work out whether we have a click, a drag, or a
	             * hold.  A click would sort the grid (if sortable).  A drag would be used by moveable, so
	             * we ignore it.  A hold would open the menu.
	             *
	             * So, on down event, we put in place handlers for move and up events, and a timer.  If the
	             * timer expires before we see a move or up, then we have a long press and hence a column menu open.
	             * If the up happens before the timer, then we have a click, and we sort if the column is sortable.
	             * If a move happens before the timer, then we are doing column move, so we do nothing, the moveable feature
	             * will handle it.
	             *
	             * To deal with touch enabled devices that also have mice, we only create our handlers when
	             * we get the down event, and we create the corresponding handlers - if we're touchstart then
	             * we get touchmove and touchend, if we're mousedown then we get mousemove and mouseup.
	             *
	             * We also suppress the click action whilst this is happening - otherwise after the mouseup there
	             * will be a click event and that can cause the column menu to close
	             *
	             */

	            $scope.downFn = function( event ){
	              event.stopPropagation();

	              if (typeof(event.originalEvent) !== 'undefined' && event.originalEvent !== undefined) {
	                event = event.originalEvent;
	              }

	              // Don't show the menu if it's not the left button
	              if (event.button && event.button !== 0) {
	                return;
	              }
	              previousMouseX = event.pageX;

	              $scope.mousedownStartTime = (new Date()).getTime();
	              $scope.mousedownTimeout = $timeout(function() { }, mousedownTimeout);

	              $scope.mousedownTimeout.then(function () {
	                if ( $scope.colMenu ) {
	                  uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm, event);
	                }
	              });

	              uiGridCtrl.fireEvent(uiGridConstants.events.COLUMN_HEADER_CLICK, {event: event, columnName: $scope.col.colDef.name});

	              $scope.offAllEvents();
	              if ( event.type === 'touchstart'){
	                $document.on('touchend', $scope.upFn);
	                $document.on('touchmove', $scope.moveFn);
	              } else if ( event.type === 'mousedown' ){
	                $document.on('mouseup', $scope.upFn);
	                $document.on('mousemove', $scope.moveFn);
	              }
	            };

	            $scope.upFn = function( event ){
	              event.stopPropagation();
	              $timeout.cancel($scope.mousedownTimeout);
	              $scope.offAllEvents();
	              $scope.onDownEvents(event.type);

	              var mousedownEndTime = (new Date()).getTime();
	              var mousedownTime = mousedownEndTime - $scope.mousedownStartTime;

	              if (mousedownTime > mousedownTimeout) {
	                // long click, handled above with mousedown
	              }
	              else {
	                // short click
	                if ( $scope.sortable ){
	                  $scope.handleClick(event);
	                }
	              }
	            };

	            $scope.moveFn = function( event ){
	              // Chrome is known to fire some bogus move events.
	              var changeValue = event.pageX - previousMouseX;
	              if ( changeValue === 0 ){ return; }

	              // we're a move, so do nothing and leave for column move (if enabled) to take over
	              $timeout.cancel($scope.mousedownTimeout);
	              $scope.offAllEvents();
	              $scope.onDownEvents(event.type);
	            };

	            $scope.clickFn = function ( event ){
	              event.stopPropagation();
	              $contentsElm.off('click', $scope.clickFn);
	            };


	            $scope.offAllEvents = function(){
	              $contentsElm.off('touchstart', $scope.downFn);
	              $contentsElm.off('mousedown', $scope.downFn);

	              $document.off('touchend', $scope.upFn);
	              $document.off('mouseup', $scope.upFn);

	              $document.off('touchmove', $scope.moveFn);
	              $document.off('mousemove', $scope.moveFn);

	              $contentsElm.off('click', $scope.clickFn);
	            };

	            $scope.onDownEvents = function( type ){
	              // If there is a previous event, then wait a while before
	              // activating the other mode - i.e. if the last event was a touch event then
	              // don't enable mouse events for a wee while (500ms or so)
	              // Avoids problems with devices that emulate mouse events when you have touch events

	              switch (type){
	                case 'touchmove':
	                case 'touchend':
	                  $contentsElm.on('click', $scope.clickFn);
	                  $contentsElm.on('touchstart', $scope.downFn);
	                  $timeout(function(){
	                    $contentsElm.on('mousedown', $scope.downFn);
	                  }, changeModeTimeout);
	                  break;
	                case 'mousemove':
	                case 'mouseup':
	                  $contentsElm.on('click', $scope.clickFn);
	                  $contentsElm.on('mousedown', $scope.downFn);
	                  $timeout(function(){
	                    $contentsElm.on('touchstart', $scope.downFn);
	                  }, changeModeTimeout);
	                  break;
	                default:
	                  $contentsElm.on('click', $scope.clickFn);
	                  $contentsElm.on('touchstart', $scope.downFn);
	                  $contentsElm.on('mousedown', $scope.downFn);
	              }
	            };


	            var updateHeaderOptions = function( grid ){
	              var contents = $elm;
	              if ( classAdded ){
	                contents.removeClass( classAdded );
	                classAdded = null;
	              }

	              if (angular.isFunction($scope.col.headerCellClass)) {
	                classAdded = $scope.col.headerCellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
	              }
	              else {
	                classAdded = $scope.col.headerCellClass;
	              }
	              contents.addClass(classAdded);

	              $timeout(function (){
	                var rightMostContainer = $scope.grid.renderContainers['right'] ? $scope.grid.renderContainers['right'] : $scope.grid.renderContainers['body'];
	                $scope.isLastCol = ( $scope.col === rightMostContainer.visibleColumnCache[ rightMostContainer.visibleColumnCache.length - 1 ] );
	              });

	              // Figure out whether this column is sortable or not
	              if (uiGridCtrl.grid.options.enableSorting && $scope.col.enableSorting) {
	                $scope.sortable = true;
	              }
	              else {
	                $scope.sortable = false;
	              }

	              // Figure out whether this column is filterable or not
	              var oldFilterable = $scope.filterable;
	              if (uiGridCtrl.grid.options.enableFiltering && $scope.col.enableFiltering) {
	                $scope.filterable = true;
	              }
	              else {
	                $scope.filterable = false;
	              }

	              if ( oldFilterable !== $scope.filterable){
	                if ( typeof($scope.col.updateFilters) !== 'undefined' ){
	                  $scope.col.updateFilters($scope.filterable);
	                }

	                // if column is filterable add a filter watcher
	                if ($scope.filterable) {
	                  $scope.col.filters.forEach( function(filter, i) {
	                    filterDeregisters.push($scope.$watch('col.filters[' + i + '].term', function(n, o) {
	                      if (n !== o) {
	                        uiGridCtrl.grid.api.core.raise.filterChanged();
	                        uiGridCtrl.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	                        uiGridCtrl.grid.queueGridRefresh();
	                      }
	                    }));
	                  });
	                  $scope.$on('$destroy', function() {
	                    filterDeregisters.forEach( function(filterDeregister) {
	                      filterDeregister();
	                    });
	                  });
	                } else {
	                  filterDeregisters.forEach( function(filterDeregister) {
	                    filterDeregister();
	                  });
	                }

	              }

	              // figure out whether we support column menus
	              if ($scope.col.grid.options && $scope.col.grid.options.enableColumnMenus !== false &&
	                      $scope.col.colDef && $scope.col.colDef.enableColumnMenu !== false){
	                $scope.colMenu = true;
	              } else {
	                $scope.colMenu = false;
	              }

	              /**
	              * @ngdoc property
	              * @name enableColumnMenu
	              * @propertyOf ui.grid.class:GridOptions.columnDef
	              * @description if column menus are enabled, controls the column menus for this specific
	              * column (i.e. if gridOptions.enableColumnMenus, then you can control column menus
	              * using this option. If gridOptions.enableColumnMenus === false then you get no column
	              * menus irrespective of the value of this option ).  Defaults to true.
	              *
	              */
	              /**
	              * @ngdoc property
	              * @name enableColumnMenus
	              * @propertyOf ui.grid.class:GridOptions.columnDef
	              * @description Override for column menus everywhere - if set to false then you get no
	              * column menus.  Defaults to true.
	              *
	              */

	              $scope.offAllEvents();

	              if ($scope.sortable || $scope.colMenu) {
	                $scope.onDownEvents();

	                $scope.$on('$destroy', function () {
	                  $scope.offAllEvents();
	                });
	              }
	            };

	/*
	            $scope.$watch('col', function (n, o) {
	              if (n !== o) {
	                // See if the column's internal class has changed
	                var newColClass = $scope.col.getColClass(false);
	                if (newColClass !== initColClass) {
	                  $elm.removeClass(initColClass);
	                  $elm.addClass(newColClass);
	                  initColClass = newColClass;
	                }
	              }
	            });
	*/
	            updateHeaderOptions();

	            // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
	            var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateHeaderOptions, [uiGridConstants.dataChange.COLUMN]);

	            $scope.$on( '$destroy', dataChangeDereg );

	            $scope.handleClick = function(event) {
	              // If the shift key is being held down, add this column to the sort
	              var add = false;
	              if (event.shiftKey) {
	                add = true;
	              }

	              // Sort this column then rebuild the grid's rows
	              uiGridCtrl.grid.sortColumn($scope.col, add)
	                .then(function () {
	                  if (uiGridCtrl.columnMenuScope) { uiGridCtrl.columnMenuScope.hideMenu(); }
	                  uiGridCtrl.grid.refresh();
	                });
	            };


	            $scope.toggleMenu = function(event) {
	              event.stopPropagation();

	              // If the menu is already showing...
	              if (uiGridCtrl.columnMenuScope.menuShown) {
	                // ... and we're the column the menu is on...
	                if (uiGridCtrl.columnMenuScope.col === $scope.col) {
	                  // ... hide it
	                  uiGridCtrl.columnMenuScope.hideMenu();
	                }
	                // ... and we're NOT the column the menu is on
	                else {
	                  // ... move the menu to our column
	                  uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm);
	                }
	              }
	              // If the menu is NOT showing
	              else {
	                // ... show it on our column
	                uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm);
	              }
	            };
	          }
	        };
	      }
	    };

	    return uiGridHeaderCell;
	  }]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridHeader', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', 'ScrollEvent',
	    function($templateCache, $compile, uiGridConstants, gridUtil, $timeout, ScrollEvent) {
	    var defaultTemplate = 'ui-grid/ui-grid-header';
	    var emptyTemplate = 'ui-grid/ui-grid-no-header';

	    return {
	      restrict: 'EA',
	      // templateUrl: 'ui-grid/ui-grid-header',
	      replace: true,
	      // priority: 1000,
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      scope: true,
	      compile: function($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            $scope.grid = uiGridCtrl.grid;
	            $scope.colContainer = containerCtrl.colContainer;

	            updateHeaderReferences();
	            
	            var headerTemplate;
	            if (!$scope.grid.options.showHeader) {
	              headerTemplate = emptyTemplate;
	            }
	            else {
	              headerTemplate = ($scope.grid.options.headerTemplate) ? $scope.grid.options.headerTemplate : defaultTemplate;            
	            }

	            gridUtil.getTemplate(headerTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);
	                
	                var newElm = $compile(template)($scope);
	                $elm.replaceWith(newElm);

	                // And update $elm to be the new element
	                $elm = newElm;

	                updateHeaderReferences();

	                if (containerCtrl) {
	                  // Inject a reference to the header viewport (if it exists) into the grid controller for use in the horizontal scroll handler below
	                  var headerViewport = $elm[0].getElementsByClassName('ui-grid-header-viewport')[0];


	                  if (headerViewport) {
	                    containerCtrl.headerViewport = headerViewport;
	                    angular.element(headerViewport).on('scroll', scrollHandler);
	                    $scope.$on('$destroy', function () {
	                      angular.element(headerViewport).off('scroll', scrollHandler);
	                    });
	                  }
	                }

	                $scope.grid.queueRefresh();
	              });

	            function updateHeaderReferences() {
	              containerCtrl.header = containerCtrl.colContainer.header = $elm;

	              var headerCanvases = $elm[0].getElementsByClassName('ui-grid-header-canvas');

	              if (headerCanvases.length > 0) {
	                containerCtrl.headerCanvas = containerCtrl.colContainer.headerCanvas = headerCanvases[0];
	              }
	              else {
	                containerCtrl.headerCanvas = null;
	              }
	            }

	            function scrollHandler(evt) {
	              if (uiGridCtrl.grid.isScrollingHorizontally) {
	                return;
	              }
	              var newScrollLeft = gridUtil.normalizeScrollLeft(containerCtrl.headerViewport, uiGridCtrl.grid);
	              var horizScrollPercentage = containerCtrl.colContainer.scrollHorizontal(newScrollLeft);

	              var scrollEvent = new ScrollEvent(uiGridCtrl.grid, null, containerCtrl.colContainer, ScrollEvent.Sources.ViewPortScroll);
	              scrollEvent.newScrollLeft = newScrollLeft;
	              if ( horizScrollPercentage > -1 ){
	                scrollEvent.x = { percentage: horizScrollPercentage };
	              }

	              uiGridCtrl.grid.scrollContainers(null, scrollEvent);
	            }
	          },

	          post: function ($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            // gridUtil.logDebug('ui-grid-header link');

	            var grid = uiGridCtrl.grid;

	            // Don't animate header cells
	            gridUtil.disableAnimations($elm);

	            function updateColumnWidths() {
	              // this styleBuilder always runs after the renderContainer, so we can rely on the column widths
	              // already being populated correctly

	              var columnCache = containerCtrl.colContainer.visibleColumnCache;
	              
	              // Build the CSS
	              // uiGridCtrl.grid.columns.forEach(function (column) {
	              var ret = '';
	              var canvasWidth = 0;
	              columnCache.forEach(function (column) {
	                ret = ret + column.getColClassDefinition();
	                canvasWidth += column.drawnWidth;
	              });

	              containerCtrl.colContainer.canvasWidth = canvasWidth;
	              
	              // Return the styles back to buildStyles which pops them into the `customStyles` scope variable
	              return ret;
	            }
	            
	            containerCtrl.header = $elm;
	            
	            var headerViewport = $elm[0].getElementsByClassName('ui-grid-header-viewport')[0];
	            if (headerViewport) {
	              containerCtrl.headerViewport = headerViewport;
	            }

	            //todo: remove this if by injecting gridCtrl into unit tests
	            if (uiGridCtrl) {
	              uiGridCtrl.grid.registerStyleComputation({
	                priority: 15,
	                func: updateColumnWidths
	              });
	            }
	          }
	        };
	      }
	    };
	  }]);

	})();

	(function(){

	angular.module('ui.grid')
	.service('uiGridGridMenuService', [ 'gridUtil', 'i18nService', 'uiGridConstants', function( gridUtil, i18nService, uiGridConstants ) {
	  /**
	   *  @ngdoc service
	   *  @name ui.grid.gridMenuService
	   *
	   *  @description Methods for working with the grid menu
	   */

	  var service = {
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name initialize
	     * @description Sets up the gridMenu. Most importantly, sets our
	     * scope onto the grid object as grid.gridMenuScope, allowing us
	     * to operate when passed only the grid.  Second most importantly,
	     * we register the 'addToGridMenu' and 'removeFromGridMenu' methods
	     * on the core api.
	     * @param {$scope} $scope the scope of this gridMenu
	     * @param {Grid} grid the grid to which this gridMenu is associated
	     */
	    initialize: function( $scope, grid ){
	      grid.gridMenuScope = $scope;
	      $scope.grid = grid;
	      $scope.registeredMenuItems = [];

	      // not certain this is needed, but would be bad to create a memory leak
	      $scope.$on('$destroy', function() {
	        if ( $scope.grid && $scope.grid.gridMenuScope ){
	          $scope.grid.gridMenuScope = null;
	        }
	        if ( $scope.grid ){
	          $scope.grid = null;
	        }
	        if ( $scope.registeredMenuItems ){
	          $scope.registeredMenuItems = null;
	        }
	      });

	      $scope.registeredMenuItems = [];

	      /**
	       * @ngdoc function
	       * @name addToGridMenu
	       * @methodOf ui.grid.core.api:PublicApi
	       * @description add items to the grid menu.  Used by features
	       * to add their menu items if they are enabled, can also be used by
	       * end users to add menu items.  This method has the advantage of allowing
	       * remove again, which can simplify management of which items are included
	       * in the menu when.  (Noting that in most cases the shown and active functions
	       * provide a better way to handle visibility of menu items)
	       * @param {Grid} grid the grid on which we are acting
	       * @param {array} items menu items in the format as described in the tutorial, with
	       * the added note that if you want to use remove you must also specify an `id` field,
	       * which is provided when you want to remove an item.  The id should be unique.
	       *
	       */
	      grid.api.registerMethod( 'core', 'addToGridMenu', service.addToGridMenu );

	      /**
	       * @ngdoc function
	       * @name removeFromGridMenu
	       * @methodOf ui.grid.core.api:PublicApi
	       * @description Remove an item from the grid menu based on a provided id. Assumes
	       * that the id is unique, removes only the last instance of that id. Does nothing if
	       * the specified id is not found
	       * @param {Grid} grid the grid on which we are acting
	       * @param {string} id the id we'd like to remove from the menu
	       *
	       */
	      grid.api.registerMethod( 'core', 'removeFromGridMenu', service.removeFromGridMenu );
	    },


	    /**
	     * @ngdoc function
	     * @name addToGridMenu
	     * @propertyOf ui.grid.gridMenuService
	     * @description add items to the grid menu.  Used by features
	     * to add their menu items if they are enabled, can also be used by
	     * end users to add menu items.  This method has the advantage of allowing
	     * remove again, which can simplify management of which items are included
	     * in the menu when.  (Noting that in most cases the shown and active functions
	     * provide a better way to handle visibility of menu items)
	     * @param {Grid} grid the grid on which we are acting
	     * @param {array} items menu items in the format as described in the tutorial, with
	     * the added note that if you want to use remove you must also specify an `id` field,
	     * which is provided when you want to remove an item.  The id should be unique.
	     *
	     */
	    addToGridMenu: function( grid, menuItems ) {
	      if ( !angular.isArray( menuItems ) ) {
	        gridUtil.logError( 'addToGridMenu: menuItems must be an array, and is not, not adding any items');
	      } else {
	        if ( grid.gridMenuScope ){
	          grid.gridMenuScope.registeredMenuItems = grid.gridMenuScope.registeredMenuItems ? grid.gridMenuScope.registeredMenuItems : [];
	          grid.gridMenuScope.registeredMenuItems = grid.gridMenuScope.registeredMenuItems.concat( menuItems );
	        } else {
	          gridUtil.logError( 'Asked to addToGridMenu, but gridMenuScope not present.  Timing issue?  Please log issue with ui-grid');
	        }
	      }
	    },


	    /**
	     * @ngdoc function
	     * @name removeFromGridMenu
	     * @methodOf ui.grid.gridMenuService
	     * @description Remove an item from the grid menu based on a provided id.  Assumes
	     * that the id is unique, removes only the last instance of that id.  Does nothing if
	     * the specified id is not found.  If there is no gridMenuScope or registeredMenuItems
	     * then do nothing silently - the desired result is those menu items not be present and they
	     * aren't.
	     * @param {Grid} grid the grid on which we are acting
	     * @param {string} id the id we'd like to remove from the menu
	     *
	     */
	    removeFromGridMenu: function( grid, id ){
	      var foundIndex = -1;

	      if ( grid && grid.gridMenuScope ){
	        grid.gridMenuScope.registeredMenuItems.forEach( function( value, index ) {
	          if ( value.id === id ){
	            if (foundIndex > -1) {
	              gridUtil.logError( 'removeFromGridMenu: found multiple items with the same id, removing only the last' );
	            } else {

	              foundIndex = index;
	            }
	          }
	        });
	      }

	      if ( foundIndex > -1 ){
	        grid.gridMenuScope.registeredMenuItems.splice( foundIndex, 1 );
	      }
	    },


	    /**
	     * @ngdoc array
	     * @name gridMenuCustomItems
	     * @propertyOf ui.grid.class:GridOptions
	     * @description (optional) An array of menu items that should be added to
	     * the gridMenu.  Follow the format documented in the tutorial for column
	     * menu customisation.  The context provided to the action function will
	     * include context.grid.  An alternative if working with dynamic menus is to use the
	     * provided api - core.addToGridMenu and core.removeFromGridMenu, which handles
	     * some of the management of items for you.
	     *
	     */
	    /**
	     * @ngdoc boolean
	     * @name gridMenuShowHideColumns
	     * @propertyOf ui.grid.class:GridOptions
	     * @description true by default, whether the grid menu should allow hide/show
	     * of columns
	     *
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name getMenuItems
	     * @description Decides the menu items to show in the menu.  This is a
	     * combination of:
	     *
	     * - the default menu items that are always included,
	     * - any menu items that have been provided through the addMenuItem api. These
	     *   are typically added by features within the grid
	     * - any menu items included in grid.options.gridMenuCustomItems.  These can be
	     *   changed dynamically, as they're always recalculated whenever we show the
	     *   menu
	     * @param {$scope} $scope the scope of this gridMenu, from which we can find all
	     * the information that we need
	     * @returns {array} an array of menu items that can be shown
	     */
	    getMenuItems: function( $scope ) {
	      var menuItems = [
	        // this is where we add any menu items we want to always include
	      ];

	      if ( $scope.grid.options.gridMenuCustomItems ){
	        if ( !angular.isArray( $scope.grid.options.gridMenuCustomItems ) ){
	          gridUtil.logError( 'gridOptions.gridMenuCustomItems must be an array, and is not');
	        } else {
	          menuItems = menuItems.concat( $scope.grid.options.gridMenuCustomItems );
	        }
	      }

	      var clearFilters = [{
	        title: i18nService.getSafeText('gridMenu.clearAllFilters'),
	        action: function ($event) {
	          $scope.grid.clearAllFilters(undefined, true, undefined);
	        },
	        shown: function() {
	          return $scope.grid.options.enableFiltering;
	        },
	        order: 100
	      }];
	      menuItems = menuItems.concat( clearFilters );

	      menuItems = menuItems.concat( $scope.registeredMenuItems );

	      if ( $scope.grid.options.gridMenuShowHideColumns !== false ){
	        menuItems = menuItems.concat( service.showHideColumns( $scope ) );
	      }

	      menuItems.sort(function(a, b){
	        return a.order - b.order;
	      });

	      return menuItems;
	    },


	    /**
	     * @ngdoc array
	     * @name gridMenuTitleFilter
	     * @propertyOf ui.grid.class:GridOptions
	     * @description (optional) A function that takes a title string
	     * (usually the col.displayName), and converts it into a display value.  The function
	     * must return either a string or a promise.
	     *
	     * Used for internationalization of the grid menu column names - for angular-translate
	     * you can pass $translate as the function, for i18nService you can pass getSafeText as the
	     * function
	     * @example
	     * <pre>
	     *   gridOptions = {
	     *     gridMenuTitleFilter: $translate
	     *   }
	     * </pre>
	     */
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name showHideColumns
	     * @description Adds two menu items for each of the columns in columnDefs.  One
	     * menu item for hide, one menu item for show.  Each is visible when appropriate
	     * (show when column is not visible, hide when column is visible).  Each toggles
	     * the visible property on the columnDef using toggleColumnVisibility
	     * @param {$scope} $scope of a gridMenu, which contains a reference to the grid
	     */
	    showHideColumns: function( $scope ){
	      var showHideColumns = [];
	      if ( !$scope.grid.options.columnDefs || $scope.grid.options.columnDefs.length === 0 || $scope.grid.columns.length === 0 ) {
	        return showHideColumns;
	      }

	      // add header for columns
	      showHideColumns.push({
	        title: i18nService.getSafeText('gridMenu.columns'),
	        order: 300
	      });

	      $scope.grid.options.gridMenuTitleFilter = $scope.grid.options.gridMenuTitleFilter ? $scope.grid.options.gridMenuTitleFilter : function( title ) { return title; };

	      $scope.grid.options.columnDefs.forEach( function( colDef, index ){
	        if ( colDef.enableHiding !== false ){
	          // add hide menu item - shows an OK icon as we only show when column is already visible
	          var menuItem = {
	            icon: 'ui-grid-icon-ok',
	            action: function($event) {
	              $event.stopPropagation();
	              service.toggleColumnVisibility( this.context.gridCol );
	            },
	            shown: function() {
	              return this.context.gridCol.colDef.visible === true || this.context.gridCol.colDef.visible === undefined;
	            },
	            context: { gridCol: $scope.grid.getColumn(colDef.name || colDef.field) },
	            leaveOpen: true,
	            order: 301 + index * 2
	          };
	          service.setMenuItemTitle( menuItem, colDef, $scope.grid );
	          showHideColumns.push( menuItem );

	          // add show menu item - shows no icon as we only show when column is invisible
	          menuItem = {
	            icon: 'ui-grid-icon-cancel',
	            action: function($event) {
	              $event.stopPropagation();
	              service.toggleColumnVisibility( this.context.gridCol );
	            },
	            shown: function() {
	              return !(this.context.gridCol.colDef.visible === true || this.context.gridCol.colDef.visible === undefined);
	            },
	            context: { gridCol: $scope.grid.getColumn(colDef.name || colDef.field) },
	            leaveOpen: true,
	            order: 301 + index * 2 + 1
	          };
	          service.setMenuItemTitle( menuItem, colDef, $scope.grid );
	          showHideColumns.push( menuItem );
	        }
	      });
	      return showHideColumns;
	    },


	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name setMenuItemTitle
	     * @description Handles the response from gridMenuTitleFilter, adding it directly to the menu
	     * item if it returns a string, otherwise waiting for the promise to resolve or reject then
	     * putting the result into the title
	     * @param {object} menuItem the menuItem we want to put the title on
	     * @param {object} colDef the colDef from which we can get displayName, name or field
	     * @param {Grid} grid the grid, from which we can get the options.gridMenuTitleFilter
	     *
	     */
	    setMenuItemTitle: function( menuItem, colDef, grid ){
	      var title = grid.options.gridMenuTitleFilter( colDef.displayName || gridUtil.readableColumnName(colDef.name) || colDef.field );

	      if ( typeof(title) === 'string' ){
	        menuItem.title = title;
	      } else if ( title.then ){
	        // must be a promise
	        menuItem.title = "";
	        title.then( function( successValue ) {
	          menuItem.title = successValue;
	        }, function( errorValue ) {
	          menuItem.title = errorValue;
	        });
	      } else {
	        gridUtil.logError('Expected gridMenuTitleFilter to return a string or a promise, it has returned neither, bad config');
	        menuItem.title = 'badconfig';
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.gridMenuService
	     * @name toggleColumnVisibility
	     * @description Toggles the visibility of an individual column.  Expects to be
	     * provided a context that has on it a gridColumn, which is the column that
	     * we'll operate upon.  We change the visibility, and refresh the grid as appropriate
	     * @param {GridCol} gridCol the column that we want to toggle
	     *
	     */
	    toggleColumnVisibility: function( gridCol ) {
	      gridCol.colDef.visible = !( gridCol.colDef.visible === true || gridCol.colDef.visible === undefined );

	      gridCol.grid.refresh();
	      gridCol.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	      gridCol.grid.api.core.raise.columnVisibilityChanged( gridCol );
	    }
	  };

	  return service;
	}])



	.directive('uiGridMenuButton', ['gridUtil', 'uiGridConstants', 'uiGridGridMenuService', 'i18nService',
	function (gridUtil, uiGridConstants, uiGridGridMenuService, i18nService) {

	  return {
	    priority: 0,
	    scope: true,
	    require: ['^uiGrid'],
	    templateUrl: 'ui-grid/ui-grid-menu-button',
	    replace: true,

	    link: function ($scope, $elm, $attrs, controllers) {
	      var uiGridCtrl = controllers[0];

	      // For the aria label
	      $scope.i18n = {
	        aria: i18nService.getSafeText('gridMenu.aria')
	      };

	      uiGridGridMenuService.initialize($scope, uiGridCtrl.grid);

	      $scope.shown = false;

	      $scope.toggleMenu = function () {
	        if ( $scope.shown ){
	          $scope.$broadcast('hide-menu');
	          $scope.shown = false;
	        } else {
	          $scope.menuItems = uiGridGridMenuService.getMenuItems( $scope );
	          $scope.$broadcast('show-menu');
	          $scope.shown = true;
	        }
	      };

	      $scope.$on('menu-hidden', function() {
	        $scope.shown = false;
	        gridUtil.focus.bySelector($elm, '.ui-grid-icon-container');
	      });
	    }
	  };

	}]);

	})();

	(function(){

	/**
	 * @ngdoc directive
	 * @name ui.grid.directive:uiGridMenu
	 * @element style
	 * @restrict A
	 *
	 * @description
	 * Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.
	 *
	 * @example
	 <doc:example module="app">
	 <doc:source>
	 <script>
	 var app = angular.module('app', ['ui.grid']);

	 app.controller('MainCtrl', ['$scope', function ($scope) {

	 }]);
	 </script>

	 <div ng-controller="MainCtrl">
	   <div ui-grid-menu shown="true"  ></div>
	 </div>
	 </doc:source>
	 <doc:scenario>
	 </doc:scenario>
	 </doc:example>
	 */
	angular.module('ui.grid')

	.directive('uiGridMenu', ['$compile', '$timeout', '$window', '$document', 'gridUtil', 'uiGridConstants', 'i18nService',
	function ($compile, $timeout, $window, $document, gridUtil, uiGridConstants, i18nService) {
	  var uiGridMenu = {
	    priority: 0,
	    scope: {
	      // shown: '&',
	      menuItems: '=',
	      autoHide: '=?'
	    },
	    require: '?^uiGrid',
	    templateUrl: 'ui-grid/uiGridMenu',
	    replace: false,
	    link: function ($scope, $elm, $attrs, uiGridCtrl) {

	      $scope.dynamicStyles = '';

	      var setupHeightStyle = function(gridHeight) {
	        // magic number of 30 because the grid menu displays somewhat below
	        // the top of the grid. It is approximately 30px.
	        var gridMenuMaxHeight = gridHeight - 30;
			$scope.dynamicStyles = [
	          '.grid' + uiGridCtrl.grid.id + ' .ui-grid-menu-mid {',
	          'max-height: ' + gridMenuMaxHeight + 'px;',
	          '}'
	        ].join(' ');
	      };

	      if (uiGridCtrl) {
	        setupHeightStyle(uiGridCtrl.grid.gridHeight);
	        uiGridCtrl.grid.api.core.on.gridDimensionChanged($scope, function(oldGridHeight, oldGridWidth, newGridHeight, newGridWidth) {
	          setupHeightStyle(newGridHeight);
			});
	      }

	      $scope.i18n = {
	        close: i18nService.getSafeText('columnMenu.close')
	      };

	    // *** Show/Hide functions ******
	      $scope.showMenu = function(event, args) {
	        if ( !$scope.shown ){

	          /*
	           * In order to animate cleanly we remove the ng-if, wait a digest cycle, then
	           * animate the removal of the ng-hide.  We can't successfully (so far as I can tell)
	           * animate removal of the ng-if, as the menu items aren't there yet.  And we don't want
	           * to rely on ng-show only, as that leaves elements in the DOM that are needlessly evaluated
	           * on scroll events.
	           *
	           * Note when testing animation that animations don't run on the tutorials.  When debugging it looks
	           * like they do, but angular has a default $animate provider that is just a stub, and that's what's
	           * being called.  ALso don't be fooled by the fact that your browser has actually loaded the
	           * angular-translate.js, it's not using it.  You need to test animations in an external application.
	           */
	          $scope.shown = true;

	          $timeout( function() {
	            $scope.shownMid = true;
	            $scope.$emit('menu-shown');
	          });
	        } else if ( !$scope.shownMid ) {
	          // we're probably doing a hide then show, so we don't need to wait for ng-if
	          $scope.shownMid = true;
	          $scope.$emit('menu-shown');
	        }

	        var docEventType = 'click';
	        if (args && args.originalEvent && args.originalEvent.type && args.originalEvent.type === 'touchstart') {
	          docEventType = args.originalEvent.type;
	        }

	        // Turn off an existing document click handler
	        angular.element(document).off('click touchstart', applyHideMenu);
	        $elm.off('keyup', checkKeyUp);
	        $elm.off('keydown', checkKeyDown);

	        // Turn on the document click handler, but in a timeout so it doesn't apply to THIS click if there is one
	        $timeout(function() {
	          angular.element(document).on(docEventType, applyHideMenu);
	          $elm.on('keyup', checkKeyUp);
	          $elm.on('keydown', checkKeyDown);

	        });
	        //automatically set the focus to the first button element in the now open menu.
	        gridUtil.focus.bySelector($elm, 'button[type=button]', true);
	      };


	      $scope.hideMenu = function(event) {
	        if ( $scope.shown ){
	          /*
	           * In order to animate cleanly we animate the addition of ng-hide, then use a $timeout to
	           * set the ng-if (shown = false) after the animation runs.  In theory we can cascade off the
	           * callback on the addClass method, but it is very unreliable with unit tests for no discernable reason.
	           *
	           * The user may have clicked on the menu again whilst
	           * we're waiting, so we check that the mid isn't shown before applying the ng-if.
	           */
	          $scope.shownMid = false;
	          $timeout( function() {
	            if ( !$scope.shownMid ){
	              $scope.shown = false;
	              $scope.$emit('menu-hidden');
	            }
	          }, 200);
	        }

	        angular.element(document).off('click touchstart', applyHideMenu);
	        $elm.off('keyup', checkKeyUp);
	        $elm.off('keydown', checkKeyDown);
	      };

	      $scope.$on('hide-menu', function (event, args) {
	        $scope.hideMenu(event, args);
	      });

	      $scope.$on('show-menu', function (event, args) {
	        $scope.showMenu(event, args);
	      });


	    // *** Auto hide when click elsewhere ******
	      var applyHideMenu = function(){
	        if ($scope.shown) {
	          $scope.$apply(function () {
	            $scope.hideMenu();
	          });
	        }
	      };

	      // close menu on ESC and keep tab cyclical
	      var checkKeyUp = function(event) {
	        if (event.keyCode === 27) {
	          $scope.hideMenu();
	        }
	      };

	      var checkKeyDown = function(event) {
	        var setFocus = function(elm) {
	          elm.focus();
	          event.preventDefault();
	          return false;
	        };
	        if (event.keyCode === 9) {
	          var firstMenuItem, lastMenuItem;
	          var menuItemButtons = $elm[0].querySelectorAll('button:not(.ng-hide)');
	          if (menuItemButtons.length > 0) {
	            firstMenuItem = menuItemButtons[0];
	            lastMenuItem = menuItemButtons[menuItemButtons.length - 1];
	            if (event.target === lastMenuItem && !event.shiftKey) {
	              setFocus(firstMenuItem);
	            } else if (event.target === firstMenuItem && event.shiftKey) {
	              setFocus(lastMenuItem);
	            }
	          }
	        }
	      };

	      if (typeof($scope.autoHide) === 'undefined' || $scope.autoHide === undefined) {
	        $scope.autoHide = true;
	      }

	      if ($scope.autoHide) {
	        angular.element($window).on('resize', applyHideMenu);
	      }

	      $scope.$on('$destroy', function () {
	        angular.element(document).off('click touchstart', applyHideMenu);
	      });


	      $scope.$on('$destroy', function() {
	        angular.element($window).off('resize', applyHideMenu);
	      });

	      if (uiGridCtrl) {
	       $scope.$on('$destroy', uiGridCtrl.grid.api.core.on.scrollBegin($scope, applyHideMenu ));
	      }

	      $scope.$on('$destroy', $scope.$on(uiGridConstants.events.ITEM_DRAGGING, applyHideMenu ));
	    }
	  };

	  return uiGridMenu;
	}])

	.directive('uiGridMenuItem', ['gridUtil', '$compile', 'i18nService', function (gridUtil, $compile, i18nService) {
	  var uiGridMenuItem = {
	    priority: 0,
	    scope: {
	      name: '=',
	      active: '=',
	      action: '=',
	      icon: '=',
	      shown: '=',
	      context: '=',
	      templateUrl: '=',
	      leaveOpen: '=',
	      screenReaderOnly: '='
	    },
	    require: ['?^uiGrid'],
	    templateUrl: 'ui-grid/uiGridMenuItem',
	    replace: false,
	    compile: function() {
	      return {
	        pre: function ($scope, $elm) {
	          if ($scope.templateUrl) {
	            gridUtil.getTemplate($scope.templateUrl)
	                .then(function (contents) {
	                  var template = angular.element(contents);

	                  var newElm = $compile(template)($scope);
	                  $elm.replaceWith(newElm);
	                });
	          }
	        },
	        post: function ($scope, $elm, $attrs, controllers) {
	          var uiGridCtrl = controllers[0];

	          // TODO(c0bra): validate that shown and active are functions if they're defined. An exception is already thrown above this though
	          // if (typeof($scope.shown) !== 'undefined' && $scope.shown && typeof($scope.shown) !== 'function') {
	          //   throw new TypeError("$scope.shown is defined but not a function");
	          // }
	          if (typeof($scope.shown) === 'undefined' || $scope.shown === null) {
	            $scope.shown = function() { return true; };
	          }

	          $scope.itemShown = function () {
	            var context = {};
	            if ($scope.context) {
	              context.context = $scope.context;
	            }

	            if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
	              context.grid = uiGridCtrl.grid;
	            }

	            return $scope.shown.call(context);
	          };

	          $scope.itemAction = function($event,title) {
	            $event.stopPropagation();

	            if (typeof($scope.action) === 'function') {
	              var context = {};

	              if ($scope.context) {
	                context.context = $scope.context;
	              }

	              // Add the grid to the function call context if the uiGrid controller is present
	              if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
	                context.grid = uiGridCtrl.grid;
	              }

	              $scope.action.call(context, $event, title);

	              if ( !$scope.leaveOpen ){
	                $scope.$emit('hide-menu');
	              } else {
	                /*
	                 * XXX: Fix after column refactor
	                 * Ideally the focus would remain on the item.
	                 * However, since there are two menu items that have their 'show' property toggled instead. This is a quick fix.
	                 */
	                gridUtil.focus.bySelector(angular.element(gridUtil.closestElm($elm, ".ui-grid-menu-items")), 'button[type=button]', true);
	              }
	            }
	          };

	          $scope.i18n = i18nService.get();
	        }
	      };
	    }
	  };

	  return uiGridMenuItem;
	}]);

	})();

	(function(){
	  'use strict';
	  /**
	   * @ngdoc overview
	   * @name ui.grid.directive:uiGridOneBind
	   * @summary A group of directives that provide a one time bind to a dom element.
	   * @description A group of directives that provide a one time bind to a dom element.
	   * As one time bindings are not supported in Angular 1.2.* this directive provdes this capability.
	   * This is done to reduce the number of watchers on the dom.
	   * <br/>
	   * <h2>Short Example ({@link ui.grid.directive:uiGridOneBindSrc ui-grid-one-bind-src})</h2>
	   * <pre>
	        <div ng-init="imageName = 'myImageDir.jpg'">
	          <img ui-grid-one-bind-src="imageName"></img>
	        </div>
	     </pre>
	   * Will become:
	   * <pre>
	       <div ng-init="imageName = 'myImageDir.jpg'">
	         <img ui-grid-one-bind-src="imageName" src="myImageDir.jpg"></img>
	       </div>
	     </pre>
	     </br>
	     <h2>Short Example ({@link ui.grid.directive:uiGridOneBindText ui-grid-one-bind-text})</h2>
	   * <pre>
	        <div ng-init="text='Add this text'" ui-grid-one-bind-text="text"></div>
	     </pre>
	   * Will become:
	   * <pre>
	   <div ng-init="text='Add this text'" ui-grid-one-bind-text="text">Add this text</div>
	     </pre>
	     </br>
	   * <b>Note:</b> This behavior is slightly different for the {@link ui.grid.directive:uiGridOneBindIdGrid uiGridOneBindIdGrid}
	   * and {@link ui.grid.directive:uiGridOneBindAriaLabelledbyGrid uiGridOneBindAriaLabelledbyGrid} directives.
	   *
	   */
	  //https://github.com/joshkurz/Black-Belt-AngularJS-Directives/blob/master/directives/Optimization/oneBind.js
	  var oneBinders = angular.module('ui.grid');
	  angular.forEach([
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindSrc
	       * @memberof ui.grid.directive:uiGridOneBind
	       * @element img
	       * @restrict A
	       * @param {String} uiGridOneBindSrc The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the src dom tag.
	       *
	       */
	      {tag: 'Src', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindText
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindText The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the text dom tag.
	       */
	      {tag: 'Text', method: 'text'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindHref
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindHref The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the href dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Href', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindClass
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindClass The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @param {Object} uiGridOneBindClass The object that you want to bind. At least one of the values in the object must be something other than null or undefined for the watcher to be removed.
	       *                                    this is to prevent the watcher from being removed before the scope is initialized.
	       * @param {Array} uiGridOneBindClass An array of classes to bind to this element.
	       * @description One time binding for the class dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Class', method: 'addClass'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindHtml
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindHtml The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the html method on a dom element. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Html', method: 'html'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAlt
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAlt The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the alt dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Alt', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindStyle
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindStyle The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the style dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Style', method: 'css'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindValue
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindValue The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the value dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Value', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindId
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindId The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the value dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Id', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindIdGrid
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindIdGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the id dom tag.
	       * <h1>Important Note!</h1>
	       * If the id tag passed as a parameter does <b>not</b> contain the grid id as a substring
	       * then the directive will search the scope and the parent controller (if it is a uiGridController) for the grid.id value.
	       * If this value is found then it is appended to the begining of the id tag. If the grid is not found then the directive throws an error.
	       * This is done in order to ensure uniqueness of id tags across the grid.
	       * This is to prevent two grids in the same document having duplicate id tags.
	       */
	      {tag: 'Id', directiveName:'IdGrid', method: 'attr', appendGridId: true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindTitle
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindTitle The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the title dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       */
	      {tag: 'Title', method: 'attr'},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaLabel
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAriaLabel The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-label dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       *<br/>
	       * <pre>
	            <div ng-init="text='Add this text'" ui-grid-one-bind-aria-label="text"></div>
	         </pre>
	       * Will become:
	       * <pre>
	            <div ng-init="text='Add this text'" ui-grid-one-bind-aria-label="text" aria-label="Add this text"></div>
	         </pre>
	       */
	      {tag: 'Label', method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaLabelledby
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAriaLabelledby The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby="anId"></div>
	         </pre>
	       * Will become:
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby="anId" aria-labelledby="gridID32"></div>
	         </pre>
	       */
	      {tag: 'Labelledby', method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaLabelledbyGrid
	       * @element div
	       * @restrict A
	       * @param {String} uiGridOneBindAriaLabelledbyGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       * Works somewhat like {@link ui.grid.directive:uiGridOneBindIdGrid} however this one supports a list of ids (seperated by a space) and will dynamically add the
	       * grid id to each one.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby-grid="anId"></div>
	         </pre>
	       * Will become ([grid.id] will be replaced by the actual grid id):
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby-grid="anId" aria-labelledby-Grid="[grid.id]-gridID32"></div>
	         </pre>
	       */
	      {tag: 'Labelledby', directiveName:'LabelledbyGrid', appendGridId:true, method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaDescribedby
	       * @element ANY
	       * @restrict A
	       * @param {String} uiGridOneBindAriaDescribedby The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-describedby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby="anId"></div>
	         </pre>
	       * Will become:
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby="anId" aria-describedby="gridID32"></div>
	         </pre>
	       */
	      {tag: 'Describedby', method: 'attr', aria:true},
	      /**
	       * @ngdoc directive
	       * @name ui.grid.directive:uiGridOneBindAriaDescribedbyGrid
	       * @element ANY
	       * @restrict A
	       * @param {String} uiGridOneBindAriaDescribedbyGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
	       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
	       * Works somewhat like {@link ui.grid.directive:uiGridOneBindIdGrid} however this one supports a list of ids (seperated by a space) and will dynamically add the
	       * grid id to each one.
	       *<br/>
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby-grid="anId"></div>
	         </pre>
	       * Will become ([grid.id] will be replaced by the actual grid id):
	       * <pre>
	            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby-grid="anId" aria-describedby="[grid.id]-gridID32"></div>
	         </pre>
	       */
	      {tag: 'Describedby', directiveName:'DescribedbyGrid', appendGridId:true, method: 'attr', aria:true}],
	    function(v){

	      var baseDirectiveName = 'uiGridOneBind';
	      //If it is an aria tag then append the aria label seperately
	      //This is done because the aria tags are formatted aria-* and the directive name can't have a '-' character in it.
	      //If the diretiveName has to be overridden then it does so here. This is because the tag being modified and the directive sometimes don't match up.
	      var directiveName = (v.aria ? baseDirectiveName + 'Aria' : baseDirectiveName) + (v.directiveName ? v.directiveName : v.tag);
	      oneBinders.directive(directiveName, ['gridUtil', function(gridUtil){
	        return {
	          restrict: 'A',
	          require: ['?uiGrid','?^uiGrid'],
	          link: function(scope, iElement, iAttrs, controllers){
	            /* Appends the grid id to the beginnig of the value. */
	            var appendGridId = function(val){
	              var grid; //Get an instance of the grid if its available
	              //If its available in the scope then we don't need to try to find it elsewhere
	              if (scope.grid) {
	                grid = scope.grid;
	              }
	              //Another possible location to try to find the grid
	              else if (scope.col && scope.col.grid){
	                grid = scope.col.grid;
	              }
	              //Last ditch effort: Search through the provided controllers.
	              else if (!controllers.some( //Go through the controllers till one has the element we need
	                function(controller){
	                  if (controller && controller.grid) {
	                    grid = controller.grid;
	                    return true; //We've found the grid
	                  }
	              })){
	                //We tried our best to find it for you
	                gridUtil.logError("["+directiveName+"] A valid grid could not be found to bind id. Are you using this directive " +
	                                 "within the correct scope? Trying to generate id: [gridID]-" + val);
	                throw new Error("No valid grid could be found");
	              }

	              if (grid){
	                var idRegex = new RegExp(grid.id.toString());
	                //If the grid id hasn't been appended already in the template declaration
	                if (!idRegex.test(val)){
	                  val = grid.id.toString() + '-' + val;
	                }
	              }
	              return val;
	            };

	            // The watch returns a function to remove itself.
	            var rmWatcher = scope.$watch(iAttrs[directiveName], function(newV){
	              if (newV){
	                //If we are trying to add an id element then we also apply the grid id if it isn't already there
	                if (v.appendGridId) {
	                  var newIdString = null;
	                  //Append the id to all of the new ids.
	                  angular.forEach( newV.split(' '), function(s){
	                    newIdString = (newIdString ? (newIdString + ' ') : '') +  appendGridId(s);
	                  });
	                  newV = newIdString;
	                }

	                // Append this newValue to the dom element.
	                switch (v.method) {
	                  case 'attr': //The attr method takes two paraams the tag and the value
	                    if (v.aria) {
	                      //If it is an aria element then append the aria prefix
	                      iElement[v.method]('aria-' + v.tag.toLowerCase(),newV);
	                    } else {
	                      iElement[v.method](v.tag.toLowerCase(),newV);
	                    }
	                    break;
	                  case 'addClass':
	                    //Pulled from https://github.com/Pasvaz/bindonce/blob/master/bindonce.js
	                    if (angular.isObject(newV) && !angular.isArray(newV)) {
	                      var results = [];
	                      var nonNullFound = false; //We don't want to remove the binding unless the key is actually defined
	                      angular.forEach(newV, function (value, index) {
	                        if (value !== null && typeof(value) !== "undefined"){
	                          nonNullFound = true; //A non null value for a key was found so the object must have been initialized
	                          if (value) {results.push(index);}
	                        }
	                      });
	                      //A non null value for a key wasn't found so assume that the scope values haven't been fully initialized
	                      if (!nonNullFound){
	                        return; // If not initialized then the watcher should not be removed yet.
	                      }
	                      newV = results;
	                    }

	                    if (newV) {
	                      iElement.addClass(angular.isArray(newV) ? newV.join(' ') : newV);
	                    } else {
	                      return;
	                    }
	                    break;
	                  default:
	                    iElement[v.method](newV);
	                    break;
	                }

	                //Removes the watcher on itself after the bind
	                rmWatcher();
	              }
	            // True ensures that equality is determined using angular.equals instead of ===
	            }, true); //End rm watchers
	          } //End compile function
	        }; //End directive return
	      } // End directive function
	    ]); //End directive
	  }); // End angular foreach
	})();

	(function () {
	  'use strict';

	  var module = angular.module('ui.grid');

	  module.directive('uiGridRenderContainer', ['$timeout', '$document', 'uiGridConstants', 'gridUtil', 'ScrollEvent',
	    function($timeout, $document, uiGridConstants, gridUtil, ScrollEvent) {
	    return {
	      replace: true,
	      transclude: true,
	      templateUrl: 'ui-grid/uiGridRenderContainer',
	      require: ['^uiGrid', 'uiGridRenderContainer'],
	      scope: {
	        containerId: '=',
	        rowContainerName: '=',
	        colContainerName: '=',
	        bindScrollHorizontal: '=',
	        bindScrollVertical: '=',
	        enableVerticalScrollbar: '=',
	        enableHorizontalScrollbar: '='
	      },
	      controller: 'uiGridRenderContainer as RenderContainer',
	      compile: function () {
	        return {
	          pre: function prelink($scope, $elm, $attrs, controllers) {

	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];
	            var grid = $scope.grid = uiGridCtrl.grid;

	            // Verify that the render container for this element exists
	            if (!$scope.rowContainerName) {
	              throw "No row render container name specified";
	            }
	            if (!$scope.colContainerName) {
	              throw "No column render container name specified";
	            }

	            if (!grid.renderContainers[$scope.rowContainerName]) {
	              throw "Row render container '" + $scope.rowContainerName + "' is not registered.";
	            }
	            if (!grid.renderContainers[$scope.colContainerName]) {
	              throw "Column render container '" + $scope.colContainerName + "' is not registered.";
	            }

	            var rowContainer = $scope.rowContainer = grid.renderContainers[$scope.rowContainerName];
	            var colContainer = $scope.colContainer = grid.renderContainers[$scope.colContainerName];

	            containerCtrl.containerId = $scope.containerId;
	            containerCtrl.rowContainer = rowContainer;
	            containerCtrl.colContainer = colContainer;
	          },
	          post: function postlink($scope, $elm, $attrs, controllers) {

	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            var grid = uiGridCtrl.grid;
	            var rowContainer = containerCtrl.rowContainer;
	            var colContainer = containerCtrl.colContainer;
	            var scrollTop = null;
	            var scrollLeft = null;


	            var renderContainer = grid.renderContainers[$scope.containerId];

	            // Put the container name on this element as a class
	            $elm.addClass('ui-grid-render-container-' + $scope.containerId);

	            // Scroll the render container viewport when the mousewheel is used
	            gridUtil.on.mousewheel($elm, function (event) {
	              var scrollEvent = new ScrollEvent(grid, rowContainer, colContainer, ScrollEvent.Sources.RenderContainerMouseWheel);
	              if (event.deltaY !== 0) {
	                var scrollYAmount = event.deltaY * -1 * event.deltaFactor;

	                scrollTop = containerCtrl.viewport[0].scrollTop;

	                // Get the scroll percentage
	                scrollEvent.verticalScrollLength = rowContainer.getVerticalScrollLength();
	                var scrollYPercentage = (scrollTop + scrollYAmount) / scrollEvent.verticalScrollLength;

	                // If we should be scrolled 100%, make sure the scrollTop matches the maximum scroll length
	                //   Viewports that have "overflow: hidden" don't let the mousewheel scroll all the way to the bottom without this check
	                if (scrollYPercentage >= 1 && scrollTop < scrollEvent.verticalScrollLength) {
	                  containerCtrl.viewport[0].scrollTop = scrollEvent.verticalScrollLength;
	                }

	                // Keep scrollPercentage within the range 0-1.
	                if (scrollYPercentage < 0) { scrollYPercentage = 0; }
	                else if (scrollYPercentage > 1) { scrollYPercentage = 1; }

	                scrollEvent.y = { percentage: scrollYPercentage, pixels: scrollYAmount };
	              }
	              if (event.deltaX !== 0) {
	                var scrollXAmount = event.deltaX * event.deltaFactor;

	                // Get the scroll percentage
	                scrollLeft = gridUtil.normalizeScrollLeft(containerCtrl.viewport, grid);
	                scrollEvent.horizontalScrollLength = (colContainer.getCanvasWidth() - colContainer.getViewportWidth());
	                var scrollXPercentage = (scrollLeft + scrollXAmount) / scrollEvent.horizontalScrollLength;

	                // Keep scrollPercentage within the range 0-1.
	                if (scrollXPercentage < 0) { scrollXPercentage = 0; }
	                else if (scrollXPercentage > 1) { scrollXPercentage = 1; }

	                scrollEvent.x = { percentage: scrollXPercentage, pixels: scrollXAmount };
	              }

	              // Let the parent container scroll if the grid is already at the top/bottom
	              if ((event.deltaY !== 0 && (scrollEvent.atTop(scrollTop) || scrollEvent.atBottom(scrollTop))) ||
	                  (event.deltaX !== 0 && (scrollEvent.atLeft(scrollLeft) || scrollEvent.atRight(scrollLeft)))) {
	                //parent controller scrolls
	              }
	              else {
	                event.preventDefault();
	                event.stopPropagation();
	                scrollEvent.fireThrottledScrollingEvent('', scrollEvent);
	              }

	            });

	            $elm.bind('$destroy', function() {
	              $elm.unbind('keydown');

	              ['touchstart', 'touchmove', 'touchend','keydown', 'wheel', 'mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'].forEach(function (eventName) {
	                $elm.unbind(eventName);
	              });
	            });

	            // TODO(c0bra): Handle resizing the inner canvas based on the number of elements
	            function update() {
	              var ret = '';

	              var canvasWidth = colContainer.canvasWidth;
	              var viewportWidth = colContainer.getViewportWidth();

	              var canvasHeight = rowContainer.getCanvasHeight();

	              //add additional height for scrollbar on left and right container
	              //if ($scope.containerId !== 'body') {
	              //  canvasHeight -= grid.scrollbarHeight;
	              //}

	              var viewportHeight = rowContainer.getViewportHeight();
	              //shorten the height to make room for a scrollbar placeholder
	              if (colContainer.needsHScrollbarPlaceholder()) {
	                viewportHeight -= grid.scrollbarHeight;
	              }

	              var headerViewportWidth,
	                  footerViewportWidth;
	              headerViewportWidth = footerViewportWidth = colContainer.getHeaderViewportWidth();

	              // Set canvas dimensions
	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-canvas { width: ' + canvasWidth + 'px; height: ' + canvasHeight + 'px; }';

	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-canvas { width: ' + (canvasWidth + grid.scrollbarWidth) + 'px; }';

	              if (renderContainer.explicitHeaderCanvasHeight) {
	                ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-canvas { height: ' + renderContainer.explicitHeaderCanvasHeight + 'px; }';
	              }
	              else {
	                ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-canvas { height: inherit; }';
	              }

	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-viewport { width: ' + viewportWidth + 'px; height: ' + viewportHeight + 'px; }';
	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-header-viewport { width: ' + headerViewportWidth + 'px; }';

	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-footer-canvas { width: ' + (canvasWidth + grid.scrollbarWidth) + 'px; }';
	              ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId + ' .ui-grid-footer-viewport { width: ' + footerViewportWidth + 'px; }';

	              return ret;
	            }

	            uiGridCtrl.grid.registerStyleComputation({
	              priority: 6,
	              func: update
	            });
	          }
	        };
	      }
	    };

	  }]);

	  module.controller('uiGridRenderContainer', ['$scope', 'gridUtil', function ($scope, gridUtil) {

	  }]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridRow', ['gridUtil', function(gridUtil) {
	    return {
	      replace: true,
	      // priority: 2001,
	      // templateUrl: 'ui-grid/ui-grid-row',
	      require: ['^uiGrid', '^uiGridRenderContainer'],
	      scope: {
	         row: '=uiGridRow',
	         //rowRenderIndex is added to scope to give the true visual index of the row to any directives that need it
	         rowRenderIndex: '='
	      },
	      compile: function() {
	        return {
	          pre: function($scope, $elm, $attrs, controllers) {
	            var uiGridCtrl = controllers[0];
	            var containerCtrl = controllers[1];

	            var grid = uiGridCtrl.grid;

	            $scope.grid = uiGridCtrl.grid;
	            $scope.colContainer = containerCtrl.colContainer;

	            // Function for attaching the template to this scope
	            var clonedElement, cloneScope;
	            function compileTemplate() {
	              $scope.row.getRowTemplateFn.then(function (compiledElementFn) {
	                // var compiledElementFn = $scope.row.compiledElementFn;

	                // Create a new scope for the contents of this row, so we can destroy it later if need be
	                var newScope = $scope.$new();

	                compiledElementFn(newScope, function (newElm, scope) {
	                  // If we already have a cloned element, we need to remove it and destroy its scope
	                  if (clonedElement) {
	                    clonedElement.remove();
	                    cloneScope.$destroy();
	                  }

	                  // Empty the row and append the new element
	                  $elm.empty().append(newElm);

	                  // Save the new cloned element and scope
	                  clonedElement = newElm;
	                  cloneScope = newScope;
	                });
	              });
	            }

	            // Initially attach the compiled template to this scope
	            compileTemplate();

	            // If the row's compiled element function changes, we need to replace this element's contents with the new compiled template
	            $scope.$watch('row.getRowTemplateFn', function (newFunc, oldFunc) {
	              if (newFunc !== oldFunc) {
	                compileTemplate();
	              }
	            });
	          },
	          post: function($scope, $elm, $attrs, controllers) {

	          }
	        };
	      }
	    };
	  }]);

	})();
	(function(){
	// 'use strict';

	  /**
	   * @ngdoc directive
	   * @name ui.grid.directive:uiGridStyle
	   * @element style
	   * @restrict A
	   *
	   * @description
	   * Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.
	   *
	   * @example
	   <doc:example module="app">
	   <doc:source>
	   <script>
	   var app = angular.module('app', ['ui.grid']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.myStyle = '.blah { border: 1px solid }';
	        }]);
	   </script>

	   <div ng-controller="MainCtrl">
	   <style ui-grid-style>{{ myStyle }}</style>
	   <span class="blah">I am in a box.</span>
	   </div>
	   </doc:source>
	   <doc:scenario>
	      it('should apply the right class to the element', function () {
	        element(by.css('.blah')).getCssValue('border-top-width')
	          .then(function(c) {
	            expect(c).toContain('1px');
	          });
	      });
	   </doc:scenario>
	   </doc:example>
	   */


	  angular.module('ui.grid').directive('uiGridStyle', ['gridUtil', '$interpolate', function(gridUtil, $interpolate) {
	    return {
	      // restrict: 'A',
	      // priority: 1000,
	      // require: '?^uiGrid',
	      link: function($scope, $elm, $attrs, uiGridCtrl) {
	        // gridUtil.logDebug('ui-grid-style link');
	        // if (uiGridCtrl === undefined) {
	        //    gridUtil.logWarn('[ui-grid-style link] uiGridCtrl is undefined!');
	        // }

	        var interpolateFn = $interpolate($elm.text(), true);

	        if (interpolateFn) {
	          $scope.$watch(interpolateFn, function(value) {
	            $elm.text(value);
	          });
	        }

	          // uiGridCtrl.recalcRowStyles = function() {
	          //   var offset = (scope.options.offsetTop || 0) - (scope.options.excessRows * scope.options.rowHeight);
	          //   var rowHeight = scope.options.rowHeight;

	          //   var ret = '';
	          //   var rowStyleCount = uiGridCtrl.minRowsToRender() + (scope.options.excessRows * 2);
	          //   for (var i = 1; i <= rowStyleCount; i++) {
	          //     ret = ret + ' .grid' + scope.gridId + ' .ui-grid-row:nth-child(' + i + ') { top: ' + offset + 'px; }';
	          //     offset = offset + rowHeight;
	          //   }

	          //   scope.rowStyles = ret;
	          // };

	          // uiGridCtrl.styleComputions.push(uiGridCtrl.recalcRowStyles);

	      }
	    };
	  }]);

	})();

	(function(){
	  'use strict';

	  angular.module('ui.grid').directive('uiGridViewport', ['gridUtil','ScrollEvent','uiGridConstants', '$log',
	    function(gridUtil, ScrollEvent, uiGridConstants, $log) {
	      return {
	        replace: true,
	        scope: {},
	        controllerAs: 'Viewport',
	        templateUrl: 'ui-grid/uiGridViewport',
	        require: ['^uiGrid', '^uiGridRenderContainer'],
	        link: function($scope, $elm, $attrs, controllers) {
	          // gridUtil.logDebug('viewport post-link');

	          var uiGridCtrl = controllers[0];
	          var containerCtrl = controllers[1];

	          $scope.containerCtrl = containerCtrl;

	          var rowContainer = containerCtrl.rowContainer;
	          var colContainer = containerCtrl.colContainer;

	          var grid = uiGridCtrl.grid;

	          $scope.grid = uiGridCtrl.grid;

	          // Put the containers in scope so we can get rows and columns from them
	          $scope.rowContainer = containerCtrl.rowContainer;
	          $scope.colContainer = containerCtrl.colContainer;

	          // Register this viewport with its container
	          containerCtrl.viewport = $elm;


	          $elm.on('scroll', scrollHandler);

	          var ignoreScroll = false;

	          function scrollHandler(evt) {
	            //Leaving in this commented code in case it can someday be used
	            //It does improve performance, but because the horizontal scroll is normalized,
	            //  using this code will lead to the column header getting slightly out of line with columns
	            //
	            //if (ignoreScroll && (grid.isScrollingHorizontally || grid.isScrollingHorizontally)) {
	            //  //don't ask for scrollTop if we just set it
	            //  ignoreScroll = false;
	            //  return;
	            //}
	            //ignoreScroll = true;

	            var newScrollTop = $elm[0].scrollTop;
	            var newScrollLeft = gridUtil.normalizeScrollLeft($elm, grid);

	            var vertScrollPercentage = rowContainer.scrollVertical(newScrollTop);
	            var horizScrollPercentage = colContainer.scrollHorizontal(newScrollLeft);

	            var scrollEvent = new ScrollEvent(grid, rowContainer, colContainer, ScrollEvent.Sources.ViewPortScroll);
	            scrollEvent.newScrollLeft = newScrollLeft;
	            scrollEvent.newScrollTop = newScrollTop;
	            if ( horizScrollPercentage > -1 ){
	              scrollEvent.x = { percentage: horizScrollPercentage };
	            }

	            if ( vertScrollPercentage > -1 ){
	              scrollEvent.y = { percentage: vertScrollPercentage };
	            }

	            grid.scrollContainers($scope.$parent.containerId, scrollEvent);
	          }

	          if ($scope.$parent.bindScrollVertical) {
	            grid.addVerticalScrollSync($scope.$parent.containerId, syncVerticalScroll);
	          }

	          if ($scope.$parent.bindScrollHorizontal) {
	            grid.addHorizontalScrollSync($scope.$parent.containerId, syncHorizontalScroll);
	            grid.addHorizontalScrollSync($scope.$parent.containerId + 'header', syncHorizontalHeader);
	            grid.addHorizontalScrollSync($scope.$parent.containerId + 'footer', syncHorizontalFooter);
	          }

	          function syncVerticalScroll(scrollEvent){
	            containerCtrl.prevScrollArgs = scrollEvent;
	            var newScrollTop = scrollEvent.getNewScrollTop(rowContainer,containerCtrl.viewport);
	            $elm[0].scrollTop = newScrollTop;

	          }

	          function syncHorizontalScroll(scrollEvent){
	            containerCtrl.prevScrollArgs = scrollEvent;
	            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);
	            $elm[0].scrollLeft =  gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
	          }

	          function syncHorizontalHeader(scrollEvent){
	            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);
	            if (containerCtrl.headerViewport) {
	              containerCtrl.headerViewport.scrollLeft = gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
	            }
	          }

	          function syncHorizontalFooter(scrollEvent){
	            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);
	            if (containerCtrl.footerViewport) {
	              containerCtrl.footerViewport.scrollLeft =  gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
	            }
	          }


	        },
	        controller: ['$scope', function ($scope) {
	          this.rowStyle = function (index) {
	            var rowContainer = $scope.rowContainer;
	            var colContainer = $scope.colContainer;

	            var styles = {};

	            if (index === 0 && rowContainer.currentTopRow !== 0) {
	              // The row offset-top is just the height of the rows above the current top-most row, which are no longer rendered
	              var hiddenRowWidth = (rowContainer.currentTopRow) * rowContainer.grid.options.rowHeight;

	              // return { 'margin-top': hiddenRowWidth + 'px' };
	              styles['margin-top'] = hiddenRowWidth + 'px';
	            }

	            if (colContainer.currentFirstColumn !== 0) {
	              if (colContainer.grid.isRTL()) {
	                styles['margin-right'] = colContainer.columnOffset + 'px';
	              }
	              else {
	                styles['margin-left'] = colContainer.columnOffset + 'px';
	              }
	            }

	            return styles;
	          };
	        }]
	      };
	    }
	  ]);

	})();

	(function() {

	angular.module('ui.grid')
	.directive('uiGridVisible', function uiGridVisibleAction() {
	  return function ($scope, $elm, $attr) {
	    $scope.$watch($attr.uiGridVisible, function (visible) {
	        // $elm.css('visibility', visible ? 'visible' : 'hidden');
	        $elm[visible ? 'removeClass' : 'addClass']('ui-grid-invisible');
	    });
	  };
	});

	})();
	(function () {
	  'use strict';

	  angular.module('ui.grid').controller('uiGridController', ['$scope', '$element', '$attrs', 'gridUtil', '$q', 'uiGridConstants',
	                    '$templateCache', 'gridClassFactory', '$timeout', '$parse', '$compile',
	    function ($scope, $elm, $attrs, gridUtil, $q, uiGridConstants,
	              $templateCache, gridClassFactory, $timeout, $parse, $compile) {
	      // gridUtil.logDebug('ui-grid controller');

	      var self = this;

	      self.grid = gridClassFactory.createGrid($scope.uiGrid);

	      //assign $scope.$parent if appScope not already assigned
	      self.grid.appScope = self.grid.appScope || $scope.$parent;

	      $elm.addClass('grid' + self.grid.id);
	      self.grid.rtl = gridUtil.getStyles($elm[0])['direction'] === 'rtl';


	      // angular.extend(self.grid.options, );

	      //all properties of grid are available on scope
	      $scope.grid = self.grid;

	      if ($attrs.uiGridColumns) {
	        $attrs.$observe('uiGridColumns', function(value) {
	          self.grid.options.columnDefs = value;
	          self.grid.buildColumns()
	            .then(function(){
	              self.grid.preCompileCellTemplates();

	              self.grid.refreshCanvas(true);
	            });
	        });
	      }


	      // if fastWatch is set we watch only the length and the reference, not every individual object
	      var deregFunctions = [];
	      if (self.grid.options.fastWatch) {
	        self.uiGrid = $scope.uiGrid;
	        if (angular.isString($scope.uiGrid.data)) {
	          deregFunctions.push( $scope.$parent.$watch($scope.uiGrid.data, dataWatchFunction) );
	          deregFunctions.push( $scope.$parent.$watch(function() {
	            if ( self.grid.appScope[$scope.uiGrid.data] ){
	              return self.grid.appScope[$scope.uiGrid.data].length;
	            } else {
	              return undefined;
	            }
	          }, dataWatchFunction) );
	        } else {
	          deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.data; }, dataWatchFunction) );
	          deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.data.length; }, function(){ dataWatchFunction($scope.uiGrid.data); }) );
	        }
	        deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.columnDefs; }, columnDefsWatchFunction) );
	        deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.columnDefs.length; }, function(){ columnDefsWatchFunction($scope.uiGrid.columnDefs); }) );
	      } else {
	        if (angular.isString($scope.uiGrid.data)) {
	          deregFunctions.push( $scope.$parent.$watchCollection($scope.uiGrid.data, dataWatchFunction) );
	        } else {
	          deregFunctions.push( $scope.$parent.$watchCollection(function() { return $scope.uiGrid.data; }, dataWatchFunction) );
	        }
	        deregFunctions.push( $scope.$parent.$watchCollection(function() { return $scope.uiGrid.columnDefs; }, columnDefsWatchFunction) );
	      }


	      function columnDefsWatchFunction(n, o) {
	        if (n && n !== o) {
	          self.grid.options.columnDefs = $scope.uiGrid.columnDefs;
	          self.grid.buildColumns({ orderByColumnDefs: true })
	            .then(function(){

	              self.grid.preCompileCellTemplates();

	              self.grid.callDataChangeCallbacks(uiGridConstants.dataChange.COLUMN);
	            });
	        }
	      }

	      var mostRecentData;

	      function dataWatchFunction(newData) {
	        // gridUtil.logDebug('dataWatch fired');
	        var promises = [];

	        if ( self.grid.options.fastWatch ){
	          if (angular.isString($scope.uiGrid.data)) {
	            newData = self.grid.appScope[$scope.uiGrid.data];
	          } else {
	            newData = $scope.uiGrid.data;
	          }
	        }

	        mostRecentData = newData;

	        if (newData) {
	          // columns length is greater than the number of row header columns, which don't count because they're created automatically
	          var hasColumns = self.grid.columns.length > (self.grid.rowHeaderColumns ? self.grid.rowHeaderColumns.length : 0);

	          if (
	            // If we have no columns
	            !hasColumns &&
	            // ... and we don't have a ui-grid-columns attribute, which would define columns for us
	            !$attrs.uiGridColumns &&
	            // ... and we have no pre-defined columns
	            self.grid.options.columnDefs.length === 0 &&
	            // ... but we DO have data
	            newData.length > 0
	          ) {
	            // ... then build the column definitions from the data that we have
	            self.grid.buildColumnDefsFromData(newData);
	          }

	          // If we haven't built columns before and either have some columns defined or some data defined
	          if (!hasColumns && (self.grid.options.columnDefs.length > 0 || newData.length > 0)) {
	            // Build the column set, then pre-compile the column cell templates
	            promises.push(self.grid.buildColumns()
	              .then(function() {
	                self.grid.preCompileCellTemplates();
	              }));
	          }

	          $q.all(promises).then(function() {
	            // use most recent data, rather than the potentially outdated data passed into watcher handler
	            self.grid.modifyRows(mostRecentData)
	              .then(function () {
	                // if (self.viewport) {
	                  self.grid.redrawInPlace(true);
	                // }

	                $scope.$evalAsync(function() {
	                  self.grid.refreshCanvas(true);
	                  self.grid.callDataChangeCallbacks(uiGridConstants.dataChange.ROW);
	                });
	              });
	          });
	        }
	      }

	      var styleWatchDereg = $scope.$watch(function () { return self.grid.styleComputations; }, function() {
	        self.grid.refreshCanvas(true);
	      });

	      $scope.$on('$destroy', function() {
	        deregFunctions.forEach( function( deregFn ){ deregFn(); });
	        styleWatchDereg();
	      });

	      self.fireEvent = function(eventName, args) {
	        // Add the grid to the event arguments if it's not there
	        if (typeof(args) === 'undefined' || args === undefined) {
	          args = {};
	        }

	        if (typeof(args.grid) === 'undefined' || args.grid === undefined) {
	          args.grid = self.grid;
	        }

	        $scope.$broadcast(eventName, args);
	      };

	      self.innerCompile = function innerCompile(elm) {
	        $compile(elm)($scope);
	      };

	    }]);

	/**
	 *  @ngdoc directive
	 *  @name ui.grid.directive:uiGrid
	 *  @element div
	 *  @restrict EA
	 *  @param {Object} uiGrid Options for the grid to use
	 *
	 *  @description Create a very basic grid.
	 *
	 *  @example
	    <example module="app">
	      <file name="app.js">
	        var app = angular.module('app', ['ui.grid']);

	        app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.data = [
	            { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	          ];
	        }]);
	      </file>
	      <file name="index.html">
	        <div ng-controller="MainCtrl">
	          <div ui-grid="{ data: data }"></div>
	        </div>
	      </file>
	    </example>
	 */
	angular.module('ui.grid').directive('uiGrid', uiGridDirective);

	uiGridDirective.$inject = ['$compile', '$templateCache', '$timeout', '$window', 'gridUtil', 'uiGridConstants'];
	function uiGridDirective($compile, $templateCache, $timeout, $window, gridUtil, uiGridConstants) {
	  return {
	    templateUrl: 'ui-grid/ui-grid',
	    scope: {
	      uiGrid: '='
	    },
	    replace: true,
	    transclude: true,
	    controller: 'uiGridController',
	    compile: function () {
	      return {
	        post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          var grid = uiGridCtrl.grid;
	          // Initialize scrollbars (TODO: move to controller??)
	          uiGridCtrl.scrollbars = [];
	          grid.element = $elm;


	          // See if the grid has a rendered width, if not, wait a bit and try again
	          var sizeCheckInterval = 100; // ms
	          var maxSizeChecks = 20; // 2 seconds total
	          var sizeChecks = 0;

	          // Setup (event listeners) the grid
	          setup();

	          // And initialize it
	          init();

	          // Mark rendering complete so API events can happen
	          grid.renderingComplete();

	          // If the grid doesn't have size currently, wait for a bit to see if it gets size
	          checkSize();

	          /*-- Methods --*/

	          function checkSize() {
	            // If the grid has no width and we haven't checked more than <maxSizeChecks> times, check again in <sizeCheckInterval> milliseconds
	            if ($elm[0].offsetWidth <= 0 && sizeChecks < maxSizeChecks) {
	              setTimeout(checkSize, sizeCheckInterval);
	              sizeChecks++;
	            }
	            else {
	              $timeout(init);
	            }
	          }

	          // Setup event listeners and watchers
	          function setup() {
	            // Bind to window resize events
	            angular.element($window).on('resize', gridResize);

	            // Unbind from window resize events when the grid is destroyed
	            $elm.on('$destroy', function () {
	              angular.element($window).off('resize', gridResize);
	            });

	            // If we add a left container after render, we need to watch and react
	            $scope.$watch(function () { return grid.hasLeftContainer();}, function (newValue, oldValue) {
	              if (newValue === oldValue) {
	                return;
	              }
	              grid.refreshCanvas(true);
	            });

	            // If we add a right container after render, we need to watch and react
	            $scope.$watch(function () { return grid.hasRightContainer();}, function (newValue, oldValue) {
	              if (newValue === oldValue) {
	                return;
	              }
	              grid.refreshCanvas(true);
	            });
	          }

	          // Initialize the directive
	          function init() {
	            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);

	            // Default canvasWidth to the grid width, in case we don't get any column definitions to calculate it from
	            grid.canvasWidth = uiGridCtrl.grid.gridWidth;

	            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

	            // If the grid isn't tall enough to fit a single row, it's kind of useless. Resize it to fit a minimum number of rows
	            if (grid.gridHeight <= grid.options.rowHeight && grid.options.enableMinHeightCheck) {
	              autoAdjustHeight();
	            }

	            // Run initial canvas refresh
	            grid.refreshCanvas(true);
	          }

	          // Set the grid's height ourselves in the case that its height would be unusably small
	          function autoAdjustHeight() {
	            // Figure out the new height
	            var contentHeight = grid.options.minRowsToShow * grid.options.rowHeight;
	            var headerHeight = grid.options.showHeader ? grid.options.headerRowHeight : 0;
	            var footerHeight = grid.calcFooterHeight();

	            var scrollbarHeight = 0;
	            if (grid.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
	              scrollbarHeight = gridUtil.getScrollbarWidth();
	            }

	            var maxNumberOfFilters = 0;
	            // Calculates the maximum number of filters in the columns
	            angular.forEach(grid.options.columnDefs, function(col) {
	              if (col.hasOwnProperty('filter')) {
	                if (maxNumberOfFilters < 1) {
	                    maxNumberOfFilters = 1;
	                }
	              }
	              else if (col.hasOwnProperty('filters')) {
	                if (maxNumberOfFilters < col.filters.length) {
	                    maxNumberOfFilters = col.filters.length;
	                }
	              }
	            });

	            if (grid.options.enableFiltering  && !maxNumberOfFilters) {
	              var allColumnsHaveFilteringTurnedOff = grid.options.columnDefs.length && grid.options.columnDefs.every(function(col) {
	                return col.enableFiltering === false;
	              });

	              if (!allColumnsHaveFilteringTurnedOff) {
	                maxNumberOfFilters = 1;
	              }
	            }

	            var filterHeight = maxNumberOfFilters * headerHeight;

	            var newHeight = headerHeight + contentHeight + footerHeight + scrollbarHeight + filterHeight;

	            $elm.css('height', newHeight + 'px');

	            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);
	          }

	          // Resize the grid on window resize events
	          function gridResize($event) {
	            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);
	            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

	            grid.refreshCanvas(true);
	          }
	        }
	      };
	    }
	  };
	}

	})();

	(function(){
	  'use strict';

	  // TODO: rename this file to ui-grid-pinned-container.js

	  angular.module('ui.grid').directive('uiGridPinnedContainer', ['gridUtil', function (gridUtil) {
	    return {
	      restrict: 'EA',
	      replace: true,
	      template: '<div class="ui-grid-pinned-container"><div ui-grid-render-container container-id="side" row-container-name="\'body\'" col-container-name="side" bind-scroll-vertical="true" class="{{ side }} ui-grid-render-container-{{ side }}"></div></div>',
	      scope: {
	        side: '=uiGridPinnedContainer'
	      },
	      require: '^uiGrid',
	      compile: function compile() {
	        return {
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            // gridUtil.logDebug('ui-grid-pinned-container ' + $scope.side + ' link');

	            var grid = uiGridCtrl.grid;

	            var myWidth = 0;

	            $elm.addClass('ui-grid-pinned-container-' + $scope.side);

	            // Monkey-patch the viewport width function
	            if ($scope.side === 'left' || $scope.side === 'right') {
	              grid.renderContainers[$scope.side].getViewportWidth = monkeyPatchedGetViewportWidth;
	            }

	            function monkeyPatchedGetViewportWidth() {
	              /*jshint validthis: true */
	              var self = this;

	              var viewportWidth = 0;
	              self.visibleColumnCache.forEach(function (column) {
	                viewportWidth += column.drawnWidth;
	              });

	              var adjustment = self.getViewportAdjustment();

	              viewportWidth = viewportWidth + adjustment.width;

	              return viewportWidth;
	            }

	            function updateContainerWidth() {
	              if ($scope.side === 'left' || $scope.side === 'right') {
	                var cols = grid.renderContainers[$scope.side].visibleColumnCache;
	                var width = 0;
	                for (var i = 0; i < cols.length; i++) {
	                  var col = cols[i];
	                  width += col.drawnWidth || col.width || 0;
	                }

	                return width;
	              }
	            }

	            function updateContainerDimensions() {
	              var ret = '';

	              // Column containers
	              if ($scope.side === 'left' || $scope.side === 'right') {
	                myWidth = updateContainerWidth();

	                // gridUtil.logDebug('myWidth', myWidth);

	                // TODO(c0bra): Subtract sum of col widths from grid viewport width and update it
	                $elm.attr('style', null);

	             //   var myHeight = grid.renderContainers.body.getViewportHeight(); // + grid.horizontalScrollbarHeight;

	                ret += '.grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.side + ', .grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.side + ' .ui-grid-render-container-' + $scope.side + ' .ui-grid-viewport { width: ' + myWidth + 'px; } ';
	              }

	              return ret;
	            }

	            grid.renderContainers.body.registerViewportAdjuster(function (adjustment) {
	              myWidth = updateContainerWidth();

	              // Subtract our own width
	              adjustment.width -= myWidth;
	              adjustment.side = $scope.side;

	              return adjustment;
	            });

	            // Register style computation to adjust for columns in `side`'s render container
	            grid.registerStyleComputation({
	              priority: 15,
	              func: updateContainerDimensions
	            });
	          }
	        };
	      }
	    };
	  }]);
	})();

	(function(){

	angular.module('ui.grid')
	.factory('Grid', ['$q', '$compile', '$parse', 'gridUtil', 'uiGridConstants', 'GridOptions', 'GridColumn', 'GridRow', 'GridApi', 'rowSorter', 'rowSearcher', 'GridRenderContainer', '$timeout','ScrollEvent',
	    function($q, $compile, $parse, gridUtil, uiGridConstants, GridOptions, GridColumn, GridRow, GridApi, rowSorter, rowSearcher, GridRenderContainer, $timeout, ScrollEvent) {

	  /**
	   * @ngdoc object
	   * @name ui.grid.core.api:PublicApi
	   * @description Public Api for the core grid features
	   *
	   */

	  /**
	   * @ngdoc function
	   * @name ui.grid.class:Grid
	   * @description Grid is the main viewModel.  Any properties or methods needed to maintain state are defined in
	   * this prototype.  One instance of Grid is created per Grid directive instance.
	   * @param {object} options Object map of options to pass into the grid. An 'id' property is expected.
	   */
	  var Grid = function Grid(options) {
	    var self = this;
	    // Get the id out of the options, then remove it
	    if (options !== undefined && typeof(options.id) !== 'undefined' && options.id) {
	      if (!/^[_a-zA-Z0-9-]+$/.test(options.id)) {
	        throw new Error("Grid id '" + options.id + '" is invalid. It must follow CSS selector syntax rules.');
	      }
	    }
	    else {
	      throw new Error('No ID provided. An ID must be given when creating a grid.');
	    }

	    self.id = options.id;
	    delete options.id;

	    // Get default options
	    self.options = GridOptions.initialize( options );

	    /**
	     * @ngdoc object
	     * @name appScope
	     * @propertyOf ui.grid.class:Grid
	     * @description reference to the application scope (the parent scope of the ui-grid element).  Assigned in ui-grid controller
	     * <br/>
	     * use gridOptions.appScopeProvider to override the default assignment of $scope.$parent with any reference
	     */
	    self.appScope = self.options.appScopeProvider;

	    self.headerHeight = self.options.headerRowHeight;


	    /**
	     * @ngdoc object
	     * @name footerHeight
	     * @propertyOf ui.grid.class:Grid
	     * @description returns the total footer height gridFooter + columnFooter
	     */
	    self.footerHeight = self.calcFooterHeight();


	    /**
	     * @ngdoc object
	     * @name columnFooterHeight
	     * @propertyOf ui.grid.class:Grid
	     * @description returns the total column footer height
	     */
	    self.columnFooterHeight = self.calcColumnFooterHeight();

	    self.rtl = false;
	    self.gridHeight = 0;
	    self.gridWidth = 0;
	    self.columnBuilders = [];
	    self.rowBuilders = [];
	    self.rowsProcessors = [];
	    self.columnsProcessors = [];
	    self.styleComputations = [];
	    self.viewportAdjusters = [];
	    self.rowHeaderColumns = [];
	    self.dataChangeCallbacks = {};
	    self.verticalScrollSyncCallBackFns = {};
	    self.horizontalScrollSyncCallBackFns = {};

	    // self.visibleRowCache = [];

	    // Set of 'render' containers for self grid, which can render sets of rows
	    self.renderContainers = {};

	    // Create a
	    self.renderContainers.body = new GridRenderContainer('body', self);

	    self.cellValueGetterCache = {};

	    // Cached function to use with custom row templates
	    self.getRowTemplateFn = null;


	    //representation of the rows on the grid.
	    //these are wrapped references to the actual data rows (options.data)
	    self.rows = [];

	    //represents the columns on the grid
	    self.columns = [];

	    /**
	     * @ngdoc boolean
	     * @name isScrollingVertically
	     * @propertyOf ui.grid.class:Grid
	     * @description set to true when Grid is scrolling vertically. Set to false via debounced method
	     */
	    self.isScrollingVertically = false;

	    /**
	     * @ngdoc boolean
	     * @name isScrollingHorizontally
	     * @propertyOf ui.grid.class:Grid
	     * @description set to true when Grid is scrolling horizontally. Set to false via debounced method
	     */
	    self.isScrollingHorizontally = false;

	    /**
	     * @ngdoc property
	     * @name scrollDirection
	     * @propertyOf ui.grid.class:Grid
	     * @description set one of the uiGridConstants.scrollDirection values (UP, DOWN, LEFT, RIGHT, NONE), which tells
	     * us which direction we are scrolling. Set to NONE via debounced method
	     */
	    self.scrollDirection = uiGridConstants.scrollDirection.NONE;

	    //if true, grid will not respond to any scroll events
	    self.disableScrolling = false;


	    function vertical (scrollEvent) {
	      self.isScrollingVertically = false;
	      self.api.core.raise.scrollEnd(scrollEvent);
	      self.scrollDirection = uiGridConstants.scrollDirection.NONE;
	    }

	    var debouncedVertical = gridUtil.debounce(vertical, self.options.scrollDebounce);
	    var debouncedVerticalMinDelay = gridUtil.debounce(vertical, 0);

	    function horizontal (scrollEvent) {
	      self.isScrollingHorizontally = false;
	      self.api.core.raise.scrollEnd(scrollEvent);
	      self.scrollDirection = uiGridConstants.scrollDirection.NONE;
	    }

	    var debouncedHorizontal = gridUtil.debounce(horizontal, self.options.scrollDebounce);
	    var debouncedHorizontalMinDelay = gridUtil.debounce(horizontal, 0);


	    /**
	     * @ngdoc function
	     * @name flagScrollingVertically
	     * @methodOf ui.grid.class:Grid
	     * @description sets isScrollingVertically to true and sets it to false in a debounced function
	     */
	    self.flagScrollingVertically = function(scrollEvent) {
	      if (!self.isScrollingVertically && !self.isScrollingHorizontally) {
	        self.api.core.raise.scrollBegin(scrollEvent);
	      }
	      self.isScrollingVertically = true;
	      if (self.options.scrollDebounce === 0 || !scrollEvent.withDelay) {
	        debouncedVerticalMinDelay(scrollEvent);
	      }
	      else {
	        debouncedVertical(scrollEvent);
	      }
	    };

	    /**
	     * @ngdoc function
	     * @name flagScrollingHorizontally
	     * @methodOf ui.grid.class:Grid
	     * @description sets isScrollingHorizontally to true and sets it to false in a debounced function
	     */
	    self.flagScrollingHorizontally = function(scrollEvent) {
	      if (!self.isScrollingVertically && !self.isScrollingHorizontally) {
	        self.api.core.raise.scrollBegin(scrollEvent);
	      }
	      self.isScrollingHorizontally = true;
	      if (self.options.scrollDebounce === 0 || !scrollEvent.withDelay) {
	        debouncedHorizontalMinDelay(scrollEvent);
	      }
	      else {
	        debouncedHorizontal(scrollEvent);
	      }
	    };

	    self.scrollbarHeight = 0;
	    self.scrollbarWidth = 0;
	    if (self.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
	      self.scrollbarHeight = gridUtil.getScrollbarWidth();
	    }

	    if (self.options.enableVerticalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
	      self.scrollbarWidth = gridUtil.getScrollbarWidth();
	    }



	    self.api = new GridApi(self);

	    /**
	     * @ngdoc function
	     * @name refresh
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Refresh the rendered grid on screen.
	     * The refresh method re-runs both the columnProcessors and the
	     * rowProcessors, as well as calling refreshCanvas to update all
	     * the grid sizing.  In general you should prefer to use queueGridRefresh
	     * instead, which is basically a debounced version of refresh.
	     *
	     * If you only want to resize the grid, not regenerate all the rows
	     * and columns, you should consider directly calling refreshCanvas instead.
	     *
	     * @param {boolean} [rowsAltered] Optional flag for refreshing when the number of rows has changed
	     */
	    self.api.registerMethod( 'core', 'refresh', this.refresh );

	    /**
	     * @ngdoc function
	     * @name queueGridRefresh
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Request a refresh of the rendered grid on screen, if multiple
	     * calls to queueGridRefresh are made within a digest cycle only one will execute.
	     * The refresh method re-runs both the columnProcessors and the
	     * rowProcessors, as well as calling refreshCanvas to update all
	     * the grid sizing.  In general you should prefer to use queueGridRefresh
	     * instead, which is basically a debounced version of refresh.
	     *
	     */
	    self.api.registerMethod( 'core', 'queueGridRefresh', this.queueGridRefresh );

	    /**
	     * @ngdoc function
	     * @name refreshRows
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Runs only the rowProcessors, columns remain as they were.
	     * It then calls redrawInPlace and refreshCanvas, which adjust the grid sizing.
	     * @returns {promise} promise that is resolved when render completes?
	     *
	     */
	    self.api.registerMethod( 'core', 'refreshRows', this.refreshRows );

	    /**
	     * @ngdoc function
	     * @name queueRefresh
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Requests execution of refreshCanvas, if multiple requests are made
	     * during a digest cycle only one will run.  RefreshCanvas updates the grid sizing.
	     * @returns {promise} promise that is resolved when render completes?
	     *
	     */
	    self.api.registerMethod( 'core', 'queueRefresh', this.queueRefresh );

	    /**
	     * @ngdoc function
	     * @name handleWindowResize
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Trigger a grid resize, normally this would be picked
	     * up by a watch on window size, but in some circumstances it is necessary
	     * to call this manually
	     * @returns {promise} promise that is resolved when render completes?
	     *
	     */
	    self.api.registerMethod( 'core', 'handleWindowResize', this.handleWindowResize );


	    /**
	     * @ngdoc function
	     * @name addRowHeaderColumn
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description adds a row header column to the grid
	     * @param {object} column def
	     * @param {number} order Determines order of header column on grid.  Lower order means header
	     * is positioned to the left of higher order headers
	     *
	     */
	    self.api.registerMethod( 'core', 'addRowHeaderColumn', this.addRowHeaderColumn );

	    /**
	     * @ngdoc function
	     * @name scrollToIfNecessary
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Scrolls the grid to make a certain row and column combo visible,
	     *   in the case that it is not completely visible on the screen already.
	     * @param {GridRow} gridRow row to make visible
	     * @param {GridCol} gridCol column to make visible
	     * @returns {promise} a promise that is resolved when scrolling is complete
	     *
	     */
	    self.api.registerMethod( 'core', 'scrollToIfNecessary', function(gridRow, gridCol) { return self.scrollToIfNecessary(gridRow, gridCol);} );

	    /**
	     * @ngdoc function
	     * @name scrollTo
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Scroll the grid such that the specified
	     * row and column is in view
	     * @param {object} rowEntity gridOptions.data[] array instance to make visible
	     * @param {object} colDef to make visible
	     * @returns {promise} a promise that is resolved after any scrolling is finished
	     */
	    self.api.registerMethod( 'core', 'scrollTo', function (rowEntity, colDef) { return self.scrollTo(rowEntity, colDef);}  );

	    /**
	     * @ngdoc function
	     * @name registerRowsProcessor
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description
	     * Register a "rows processor" function. When the rows are updated,
	     * the grid calls each registered "rows processor", which has a chance
	     * to alter the set of rows (sorting, etc) as long as the count is not
	     * modified.
	     *
	     * @param {function(renderedRowsToProcess, columns )} processorFunction rows processor function, which
	     * is run in the context of the grid (i.e. this for the function will be the grid), and must
	     * return the updated rows list, which is passed to the next processor in the chain
	     * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	     * for other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.
	     *
	     * At present allRowsVisible is running at 50, sort manipulations running at 60-65, filter is running at 100,
	     * sort is at 200, grouping and treeview at 400-410, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	     */
	    self.api.registerMethod( 'core', 'registerRowsProcessor', this.registerRowsProcessor  );

	    /**
	     * @ngdoc function
	     * @name registerColumnsProcessor
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description
	     * Register a "columns processor" function. When the columns are updated,
	     * the grid calls each registered "columns processor", which has a chance
	     * to alter the set of columns as long as the count is not
	     * modified.
	     *
	     * @param {function(renderedColumnsToProcess, rows )} processorFunction columns processor function, which
	     * is run in the context of the grid (i.e. this for the function will be the grid), and must
	     * return the updated columns list, which is passed to the next processor in the chain
	     * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	     * for other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.
	     *
	     * At present allRowsVisible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	     */
	    self.api.registerMethod( 'core', 'registerColumnsProcessor', this.registerColumnsProcessor  );



	    /**
	     * @ngdoc function
	     * @name sortHandleNulls
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description A null handling method that can be used when building custom sort
	     * functions
	     * @example
	     * <pre>
	     *   mySortFn = function(a, b) {
	     *   var nulls = $scope.gridApi.core.sortHandleNulls(a, b);
	     *   if ( nulls !== null ){
	     *     return nulls;
	     *   } else {
	     *     // your code for sorting here
	     *   };
	     * </pre>
	     * @param {object} a sort value a
	     * @param {object} b sort value b
	     * @returns {number} null if there were no nulls/undefineds, otherwise returns
	     * a sort value that should be passed back from the sort function
	     *
	     */
	    self.api.registerMethod( 'core', 'sortHandleNulls', rowSorter.handleNulls );


	    /**
	     * @ngdoc function
	     * @name sortChanged
	     * @methodOf  ui.grid.core.api:PublicApi
	     * @description The sort criteria on one or more columns has
	     * changed.  Provides as parameters the grid and the output of
	     * getColumnSorting, which is an array of gridColumns
	     * that have sorting on them, sorted in priority order.
	     *
	     * @param {$scope} scope The scope of the controller. This is used to deregister this event when the scope is destroyed.
	     * @param {Function} callBack Will be called when the event is emited. The function passes back the grid and an array of
	     * columns with sorts on them, in priority order.
	     *
	     * @example
	     * <pre>
	     *      gridApi.core.on.sortChanged( $scope, function(grid, sortColumns){
	     *        // do something
	     *      });
	     * </pre>
	     */
	    self.api.registerEvent( 'core', 'sortChanged' );

	      /**
	     * @ngdoc function
	     * @name columnVisibilityChanged
	     * @methodOf  ui.grid.core.api:PublicApi
	     * @description The visibility of a column has changed,
	     * the column itself is passed out as a parameter of the event.
	     *
	     * @param {$scope} scope The scope of the controller. This is used to deregister this event when the scope is destroyed.
	     * @param {Function} callBack Will be called when the event is emited. The function passes back the GridCol that has changed.
	     *
	     * @example
	     * <pre>
	     *      gridApi.core.on.columnVisibilityChanged( $scope, function (column) {
	     *        // do something
	     *      } );
	     * </pre>
	     */
	    self.api.registerEvent( 'core', 'columnVisibilityChanged' );

	    /**
	     * @ngdoc method
	     * @name notifyDataChange
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Notify the grid that a data or config change has occurred,
	     * where that change isn't something the grid was otherwise noticing.  This
	     * might be particularly relevant where you've changed values within the data
	     * and you'd like cell classes to be re-evaluated, or changed config within
	     * the columnDef and you'd like headerCellClasses to be re-evaluated.
	     * @param {string} type one of the
	     * uiGridConstants.dataChange values (ALL, ROW, EDIT, COLUMN), which tells
	     * us which refreshes to fire.
	     *
	     */
	    self.api.registerMethod( 'core', 'notifyDataChange', this.notifyDataChange );

	    /**
	     * @ngdoc method
	     * @name clearAllFilters
	     * @methodOf ui.grid.core.api:PublicApi
	     * @description Clears all filters and optionally refreshes the visible rows.
	     * @param {object} refreshRows Defaults to true.
	     * @param {object} clearConditions Defaults to false.
	     * @param {object} clearFlags Defaults to false.
	     * @returns {promise} If `refreshRows` is true, returns a promise of the rows refreshing.
	     */
	    self.api.registerMethod('core', 'clearAllFilters', this.clearAllFilters);

	    self.registerDataChangeCallback( self.columnRefreshCallback, [uiGridConstants.dataChange.COLUMN]);
	    self.registerDataChangeCallback( self.processRowsCallback, [uiGridConstants.dataChange.EDIT]);
	    self.registerDataChangeCallback( self.updateFooterHeightCallback, [uiGridConstants.dataChange.OPTIONS]);

	    self.registerStyleComputation({
	      priority: 10,
	      func: self.getFooterStyles
	    });
	  };

	   Grid.prototype.calcFooterHeight = function () {
	     if (!this.hasFooter()) {
	       return 0;
	     }

	     var height = 0;
	     if (this.options.showGridFooter) {
	       height += this.options.gridFooterHeight;
	     }

	     height += this.calcColumnFooterHeight();

	     return height;
	   };

	   Grid.prototype.calcColumnFooterHeight = function () {
	     var height = 0;

	     if (this.options.showColumnFooter) {
	       height += this.options.columnFooterHeight;
	     }

	     return height;
	   };

	   Grid.prototype.getFooterStyles = function () {
	     var style = '.grid' + this.id + ' .ui-grid-footer-aggregates-row { height: ' + this.options.columnFooterHeight + 'px; }';
	     style += ' .grid' + this.id + ' .ui-grid-footer-info { height: ' + this.options.gridFooterHeight + 'px; }';
	     return style;
	   };

	  Grid.prototype.hasFooter = function () {
	   return this.options.showGridFooter || this.options.showColumnFooter;
	  };

	  /**
	   * @ngdoc function
	   * @name isRTL
	   * @methodOf ui.grid.class:Grid
	   * @description Returns true if grid is RightToLeft
	   */
	  Grid.prototype.isRTL = function () {
	    return this.rtl;
	  };


	  /**
	   * @ngdoc function
	   * @name registerColumnBuilder
	   * @methodOf ui.grid.class:Grid
	   * @description When the build creates columns from column definitions, the columnbuilders will be called to add
	   * additional properties to the column.
	   * @param {function(colDef, col, gridOptions)} columnBuilder function to be called
	   */
	  Grid.prototype.registerColumnBuilder = function registerColumnBuilder(columnBuilder) {
	    this.columnBuilders.push(columnBuilder);
	  };

	  /**
	   * @ngdoc function
	   * @name buildColumnDefsFromData
	   * @methodOf ui.grid.class:Grid
	   * @description Populates columnDefs from the provided data
	   * @param {function(colDef, col, gridOptions)} rowBuilder function to be called
	   */
	  Grid.prototype.buildColumnDefsFromData = function (dataRows){
	    this.options.columnDefs =  gridUtil.getColumnsFromData(dataRows, this.options.excludeProperties);
	  };

	  /**
	   * @ngdoc function
	   * @name registerRowBuilder
	   * @methodOf ui.grid.class:Grid
	   * @description When the build creates rows from gridOptions.data, the rowBuilders will be called to add
	   * additional properties to the row.
	   * @param {function(row, gridOptions)} rowBuilder function to be called
	   */
	  Grid.prototype.registerRowBuilder = function registerRowBuilder(rowBuilder) {
	    this.rowBuilders.push(rowBuilder);
	  };


	  /**
	   * @ngdoc function
	   * @name registerDataChangeCallback
	   * @methodOf ui.grid.class:Grid
	   * @description When a data change occurs, the data change callbacks of the specified type
	   * will be called.  The rules are:
	   *
	   * - when the data watch fires, that is considered a ROW change (the data watch only notices
	   *   added or removed rows)
	   * - when the api is called to inform us of a change, the declared type of that change is used
	   * - when a cell edit completes, the EDIT callbacks are triggered
	   * - when the columnDef watch fires, the COLUMN callbacks are triggered
	   * - when the options watch fires, the OPTIONS callbacks are triggered
	   *
	   * For a given event:
	   * - ALL calls ROW, EDIT, COLUMN, OPTIONS and ALL callbacks
	   * - ROW calls ROW and ALL callbacks
	   * - EDIT calls EDIT and ALL callbacks
	   * - COLUMN calls COLUMN and ALL callbacks
	   * - OPTIONS calls OPTIONS and ALL callbacks
	   *
	   * @param {function(grid)} callback function to be called
	   * @param {array} types the types of data change you want to be informed of.  Values from
	   * the uiGridConstants.dataChange values ( ALL, EDIT, ROW, COLUMN, OPTIONS ).  Optional and defaults to
	   * ALL
	   * @returns {function} deregister function - a function that can be called to deregister this callback
	   */
	  Grid.prototype.registerDataChangeCallback = function registerDataChangeCallback(callback, types, _this) {
	    var uid = gridUtil.nextUid();
	    if ( !types ){
	      types = [uiGridConstants.dataChange.ALL];
	    }
	    if ( !Array.isArray(types)){
	      gridUtil.logError("Expected types to be an array or null in registerDataChangeCallback, value passed was: " + types );
	    }
	    this.dataChangeCallbacks[uid] = { callback: callback, types: types, _this:_this };

	    var self = this;
	    var deregisterFunction = function() {
	      delete self.dataChangeCallbacks[uid];
	    };
	    return deregisterFunction;
	  };

	  /**
	   * @ngdoc function
	   * @name callDataChangeCallbacks
	   * @methodOf ui.grid.class:Grid
	   * @description Calls the callbacks based on the type of data change that
	   * has occurred. Always calls the ALL callbacks, calls the ROW, EDIT, COLUMN and OPTIONS callbacks if the
	   * event type is matching, or if the type is ALL.
	   * @param {number} type the type of event that occurred - one of the
	   * uiGridConstants.dataChange values (ALL, ROW, EDIT, COLUMN, OPTIONS)
	   */
	  Grid.prototype.callDataChangeCallbacks = function callDataChangeCallbacks(type, options) {
	    angular.forEach( this.dataChangeCallbacks, function( callback, uid ){
	      if ( callback.types.indexOf( uiGridConstants.dataChange.ALL ) !== -1 ||
	           callback.types.indexOf( type ) !== -1 ||
	           type === uiGridConstants.dataChange.ALL ) {
	        if (callback._this) {
	           callback.callback.apply(callback._this,this);
	        }
	        else {
	          callback.callback( this );
	        }
	      }
	    }, this);
	  };

	  /**
	   * @ngdoc function
	   * @name notifyDataChange
	   * @methodOf ui.grid.class:Grid
	   * @description Notifies us that a data change has occurred, used in the public
	   * api for users to tell us when they've changed data or some other event that
	   * our watches cannot pick up
	   * @param {string} type the type of event that occurred - one of the
	   * uiGridConstants.dataChange values (ALL, ROW, EDIT, COLUMN)
	   */
	  Grid.prototype.notifyDataChange = function notifyDataChange(type) {
	    var constants = uiGridConstants.dataChange;
	    if ( type === constants.ALL ||
	         type === constants.COLUMN ||
	         type === constants.EDIT ||
	         type === constants.ROW ||
	         type === constants.OPTIONS ){
	      this.callDataChangeCallbacks( type );
	    } else {
	      gridUtil.logError("Notified of a data change, but the type was not recognised, so no action taken, type was: " + type);
	    }
	  };


	  /**
	   * @ngdoc function
	   * @name columnRefreshCallback
	   * @methodOf ui.grid.class:Grid
	   * @description refreshes the grid when a column refresh
	   * is notified, which triggers handling of the visible flag.
	   * This is called on uiGridConstants.dataChange.COLUMN, and is
	   * registered as a dataChangeCallback in grid.js
	   * @param {string} name column name
	   */
	  Grid.prototype.columnRefreshCallback = function columnRefreshCallback( grid ){
	    grid.buildColumns();
	    grid.queueGridRefresh();
	  };


	  /**
	   * @ngdoc function
	   * @name processRowsCallback
	   * @methodOf ui.grid.class:Grid
	   * @description calls the row processors, specifically
	   * intended to reset the sorting when an edit is called,
	   * registered as a dataChangeCallback on uiGridConstants.dataChange.EDIT
	   * @param {string} name column name
	   */
	  Grid.prototype.processRowsCallback = function processRowsCallback( grid ){
	    grid.queueGridRefresh();
	  };


	  /**
	   * @ngdoc function
	   * @name updateFooterHeightCallback
	   * @methodOf ui.grid.class:Grid
	   * @description recalculates the footer height,
	   * registered as a dataChangeCallback on uiGridConstants.dataChange.OPTIONS
	   * @param {string} name column name
	   */
	  Grid.prototype.updateFooterHeightCallback = function updateFooterHeightCallback( grid ){
	    grid.footerHeight = grid.calcFooterHeight();
	    grid.columnFooterHeight = grid.calcColumnFooterHeight();
	  };


	  /**
	   * @ngdoc function
	   * @name getColumn
	   * @methodOf ui.grid.class:Grid
	   * @description returns a grid column for the column name
	   * @param {string} name column name
	   */
	  Grid.prototype.getColumn = function getColumn(name) {
	    var columns = this.columns.filter(function (column) {
	      return column.colDef.name === name;
	    });
	    return columns.length > 0 ? columns[0] : null;
	  };

	  /**
	   * @ngdoc function
	   * @name getColDef
	   * @methodOf ui.grid.class:Grid
	   * @description returns a grid colDef for the column name
	   * @param {string} name column.field
	   */
	  Grid.prototype.getColDef = function getColDef(name) {
	    var colDefs = this.options.columnDefs.filter(function (colDef) {
	      return colDef.name === name;
	    });
	    return colDefs.length > 0 ? colDefs[0] : null;
	  };

	  /**
	   * @ngdoc function
	   * @name assignTypes
	   * @methodOf ui.grid.class:Grid
	   * @description uses the first row of data to assign colDef.type for any types not defined.
	   */
	  /**
	   * @ngdoc property
	   * @name type
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description the type of the column, used in sorting.  If not provided then the
	   * grid will guess the type.  Add this only if the grid guessing is not to your
	   * satisfaction.  One of:
	   * - 'string'
	   * - 'boolean'
	   * - 'number'
	   * - 'date'
	   * - 'object'
	   * - 'numberStr'
	   * Note that if you choose date, your dates should be in a javascript date type
	   *
	   */
	  Grid.prototype.assignTypes = function(){
	    var self = this;
	    self.options.columnDefs.forEach(function (colDef, index) {

	      //Assign colDef type if not specified
	      if (!colDef.type) {
	        var col = new GridColumn(colDef, index, self);
	        var firstRow = self.rows.length > 0 ? self.rows[0] : null;
	        if (firstRow) {
	          colDef.type = gridUtil.guessType(self.getCellValue(firstRow, col));
	        }
	        else {
	          colDef.type = 'string';
	        }
	      }
	    });
	  };


	  /**
	   * @ngdoc function
	   * @name isRowHeaderColumn
	   * @methodOf ui.grid.class:Grid
	   * @description returns true if the column is a row Header
	   * @param {object} column column
	   */
	  Grid.prototype.isRowHeaderColumn = function isRowHeaderColumn(column) {
	    return this.rowHeaderColumns.indexOf(column) !== -1;
	  };

	  /**
	  * @ngdoc function
	  * @name addRowHeaderColumn
	  * @methodOf ui.grid.class:Grid
	  * @description adds a row header column to the grid
	  * @param {object} column def
	  */
	  Grid.prototype.addRowHeaderColumn = function addRowHeaderColumn(colDef, order) {
	    var self = this;

	    //default order
	    if (order === undefined) {
	      order = 0;
	    }

	    var rowHeaderCol = new GridColumn(colDef, gridUtil.nextUid(), self);
	    rowHeaderCol.isRowHeader = true;
	    if (self.isRTL()) {
	      self.createRightContainer();
	      rowHeaderCol.renderContainer = 'right';
	    }
	    else {
	      self.createLeftContainer();
	      rowHeaderCol.renderContainer = 'left';
	    }

	    // relies on the default column builder being first in array, as it is instantiated
	    // as part of grid creation
	    self.columnBuilders[0](colDef,rowHeaderCol,self.options)
	      .then(function(){
	        rowHeaderCol.enableFiltering = false;
	        rowHeaderCol.enableSorting = false;
	        rowHeaderCol.enableHiding = false;
	        rowHeaderCol.headerPriority = order;
	        self.rowHeaderColumns.push(rowHeaderCol);
	        self.rowHeaderColumns = self.rowHeaderColumns.sort(function (a, b) {
	          return a.headerPriority - b.headerPriority;
	        });

	        self.buildColumns()
	          .then( function() {
	            self.preCompileCellTemplates();
	            self.queueGridRefresh();
	          });
	      });
	  };

	  /**
	   * @ngdoc function
	   * @name getOnlyDataColumns
	   * @methodOf ui.grid.class:Grid
	   * @description returns all columns except for rowHeader columns
	   */
	  Grid.prototype.getOnlyDataColumns = function getOnlyDataColumns() {
	    var self = this;
	    var cols = [];
	    self.columns.forEach(function (col) {
	      if (self.rowHeaderColumns.indexOf(col) === -1) {
	        cols.push(col);
	      }
	    });
	    return cols;
	  };

	  /**
	   * @ngdoc function
	   * @name buildColumns
	   * @methodOf ui.grid.class:Grid
	   * @description creates GridColumn objects from the columnDefinition.  Calls each registered
	   * columnBuilder to further process the column
	   * @param {object} options  An object contains options to use when building columns
	   *
	   * * **orderByColumnDefs**: defaults to **false**. When true, `buildColumns` will reorder existing columns according to the order within the column definitions.
	   *
	   * @returns {Promise} a promise to load any needed column resources
	   */
	  Grid.prototype.buildColumns = function buildColumns(opts) {
	    var options = {
	      orderByColumnDefs: false
	    };

	    angular.extend(options, opts);

	    // gridUtil.logDebug('buildColumns');
	    var self = this;
	    var builderPromises = [];
	    var headerOffset = self.rowHeaderColumns.length;
	    var i;

	    // Remove any columns for which a columnDef cannot be found
	    // Deliberately don't use forEach, as it doesn't like splice being called in the middle
	    // Also don't cache columns.length, as it will change during this operation
	    for (i = 0; i < self.columns.length; i++){
	      if (!self.getColDef(self.columns[i].name)) {
	        self.columns.splice(i, 1);
	        i--;
	      }
	    }

	    //add row header columns to the grid columns array _after_ columns without columnDefs have been removed
	    //rowHeaderColumns is ordered by priority so insert in reverse
	    for (var j = self.rowHeaderColumns.length - 1; j >= 0; j--) {
	      self.columns.unshift(self.rowHeaderColumns[j]);
	    }



	    // look at each column def, and update column properties to match.  If the column def
	    // doesn't have a column, then splice in a new gridCol
	    self.options.columnDefs.forEach(function (colDef, index) {
	      self.preprocessColDef(colDef);
	      var col = self.getColumn(colDef.name);

	      if (!col) {
	        col = new GridColumn(colDef, gridUtil.nextUid(), self);
	        self.columns.splice(index + headerOffset, 0, col);
	      }
	      else {
	        // tell updateColumnDef that the column was pre-existing
	        col.updateColumnDef(colDef, false);
	      }

	      self.columnBuilders.forEach(function (builder) {
	        builderPromises.push(builder.call(self, colDef, col, self.options));
	      });
	    });

	    /*** Reorder columns if necessary ***/
	    if (!!options.orderByColumnDefs) {
	      // Create a shallow copy of the columns as a cache
	      var columnCache = self.columns.slice(0);

	      // We need to allow for the "row headers" when mapping from the column defs array to the columns array
	      //   If we have a row header in columns[0] and don't account for it   we'll overwrite it with the column in columnDefs[0]

	      // Go through all the column defs, use the shorter of columns length and colDefs.length because if a user has given two columns the same name then
	      // columns will be shorter than columnDefs.  In this situation we'll avoid an error, but the user will still get an unexpected result
	      var len = Math.min(self.options.columnDefs.length, self.columns.length);
	      for (i = 0; i < len; i++) {
	        // If the column at this index has a different name than the column at the same index in the column defs...
	        if (self.columns[i + headerOffset].name !== self.options.columnDefs[i].name) {
	          // Replace the one in the cache with the appropriate column
	          columnCache[i + headerOffset] = self.getColumn(self.options.columnDefs[i].name);
	        }
	        else {
	          // Otherwise just copy over the one from the initial columns
	          columnCache[i + headerOffset] = self.columns[i + headerOffset];
	        }
	      }

	      // Empty out the columns array, non-destructively
	      self.columns.length = 0;

	      // And splice in the updated, ordered columns from the cache
	      Array.prototype.splice.apply(self.columns, [0, 0].concat(columnCache));
	    }

	    return $q.all(builderPromises).then(function(){
	      if (self.rows.length > 0){
	        self.assignTypes();
	      }
	    });
	  };

	  Grid.prototype.preCompileCellTemplate = function(col) {
	    var self = this;
	    var html = col.cellTemplate.replace(uiGridConstants.MODEL_COL_FIELD, self.getQualifiedColField(col));
	    html = html.replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

	    var compiledElementFn = $compile(html);
	    col.compiledElementFn = compiledElementFn;

	    if (col.compiledElementFnDefer) {
	      col.compiledElementFnDefer.resolve(col.compiledElementFn);
	    }
	  };

	/**
	 * @ngdoc function
	 * @name preCompileCellTemplates
	 * @methodOf ui.grid.class:Grid
	 * @description precompiles all cell templates
	 */
	  Grid.prototype.preCompileCellTemplates = function() {
	    var self = this;
	    self.columns.forEach(function (col) {
	      if ( col.cellTemplate ){
	        self.preCompileCellTemplate( col );
	      } else if ( col.cellTemplatePromise ){
	        col.cellTemplatePromise.then( function() {
	          self.preCompileCellTemplate( col );
	        });
	      }
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name getGridQualifiedColField
	   * @methodOf ui.grid.class:Grid
	   * @description Returns the $parse-able accessor for a column within its $scope
	   * @param {GridColumn} col col object
	   */
	  Grid.prototype.getQualifiedColField = function (col) {
	    return 'row.entity.' + gridUtil.preEval(col.field);
	  };

	  /**
	   * @ngdoc function
	   * @name createLeftContainer
	   * @methodOf ui.grid.class:Grid
	   * @description creates the left render container if it doesn't already exist
	   */
	  Grid.prototype.createLeftContainer = function() {
	    if (!this.hasLeftContainer()) {
	      this.renderContainers.left = new GridRenderContainer('left', this, { disableColumnOffset: true });
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name createRightContainer
	   * @methodOf ui.grid.class:Grid
	   * @description creates the right render container if it doesn't already exist
	   */
	  Grid.prototype.createRightContainer = function() {
	    if (!this.hasRightContainer()) {
	      this.renderContainers.right = new GridRenderContainer('right', this, { disableColumnOffset: true });
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name hasLeftContainer
	   * @methodOf ui.grid.class:Grid
	   * @description returns true if leftContainer exists
	   */
	  Grid.prototype.hasLeftContainer = function() {
	    return this.renderContainers.left !== undefined;
	  };

	  /**
	   * @ngdoc function
	   * @name hasRightContainer
	   * @methodOf ui.grid.class:Grid
	   * @description returns true if rightContainer exists
	   */
	  Grid.prototype.hasRightContainer = function() {
	    return this.renderContainers.right !== undefined;
	  };


	      /**
	   * undocumented function
	   * @name preprocessColDef
	   * @methodOf ui.grid.class:Grid
	   * @description defaults the name property from field to maintain backwards compatibility with 2.x
	   * validates that name or field is present
	   */
	  Grid.prototype.preprocessColDef = function preprocessColDef(colDef) {
	    var self = this;

	    if (!colDef.field && !colDef.name) {
	      throw new Error('colDef.name or colDef.field property is required');
	    }

	    //maintain backwards compatibility with 2.x
	    //field was required in 2.x.  now name is required
	    if (colDef.name === undefined && colDef.field !== undefined) {
	      // See if the column name already exists:
	      var newName = colDef.field,
	        counter = 2;
	      while (self.getColumn(newName)) {
	        newName = colDef.field + counter.toString();
	        counter++;
	      }
	      colDef.name = newName;
	    }
	  };

	  // Return a list of items that exist in the `n` array but not the `o` array. Uses optional property accessors passed as third & fourth parameters
	  Grid.prototype.newInN = function newInN(o, n, oAccessor, nAccessor) {
	    var self = this;

	    var t = [];
	    for (var i = 0; i < n.length; i++) {
	      var nV = nAccessor ? n[i][nAccessor] : n[i];

	      var found = false;
	      for (var j = 0; j < o.length; j++) {
	        var oV = oAccessor ? o[j][oAccessor] : o[j];
	        if (self.options.rowEquality(nV, oV)) {
	          found = true;
	          break;
	        }
	      }
	      if (!found) {
	        t.push(nV);
	      }
	    }

	    return t;
	  };

	  /**
	   * @ngdoc function
	   * @name getRow
	   * @methodOf ui.grid.class:Grid
	   * @description returns the GridRow that contains the rowEntity
	   * @param {object} rowEntity the gridOptions.data array element instance
	   * @param {array} rows [optional] the rows to look in - if not provided then
	   * looks in grid.rows
	   */
	  Grid.prototype.getRow = function getRow(rowEntity, lookInRows) {
	    var self = this;

	    lookInRows = typeof(lookInRows) === 'undefined' ? self.rows : lookInRows;

	    var rows = lookInRows.filter(function (row) {
	      return self.options.rowEquality(row.entity, rowEntity);
	    });
	    return rows.length > 0 ? rows[0] : null;
	  };


	  /**
	   * @ngdoc function
	   * @name modifyRows
	   * @methodOf ui.grid.class:Grid
	   * @description creates or removes GridRow objects from the newRawData array.  Calls each registered
	   * rowBuilder to further process the row
	   * @param {array} newRawData Modified set of data
	   *
	   * This method aims to achieve three things:
	   * 1. the resulting rows array is in the same order as the newRawData, we'll call
	   * rowsProcessors immediately after to sort the data anyway
	   * 2. if we have row hashing available, we try to use the rowHash to find the row
	   * 3. no memory leaks - rows that are no longer in newRawData need to be garbage collected
	   *
	   * The basic logic flow makes use of the newRawData, oldRows and oldHash, and creates
	   * the newRows and newHash
	   *
	   * ```
	   * newRawData.forEach newEntity
	   *   if (hashing enabled)
	   *     check oldHash for newEntity
	   *   else
	   *     look for old row directly in oldRows
	   *   if !oldRowFound     // must be a new row
	   *     create newRow
	   *   append to the newRows and add to newHash
	   *   run the processors
	   * ```
	   *
	   * Rows are identified using the hashKey if configured.  If not configured, then rows
	   * are identified using the gridOptions.rowEquality function
	   *
	   * This method is useful when trying to select rows immediately after loading data without
	   * using a $timeout/$interval, e.g.:
	   *
	   *   $scope.gridOptions.data =  someData;
	   *   $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
	   *   $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
	   *
	   * OR to persist row selection after data update (e.g. rows selected, new data loaded, want
	   * originally selected rows to be re-selected))
	   */
	  Grid.prototype.modifyRows = function modifyRows(newRawData) {
	    var self = this;
	    var oldRows = self.rows.slice(0);
	    var oldRowHash = self.rowHashMap || self.createRowHashMap();
	    self.rowHashMap = self.createRowHashMap();
	    self.rows.length = 0;

	    newRawData.forEach( function( newEntity, i ) {
	      var newRow;
	      if ( self.options.enableRowHashing ){
	        // if hashing is enabled, then this row will be in the hash if we already know about it
	        newRow = oldRowHash.get( newEntity );
	      } else {
	        // otherwise, manually search the oldRows to see if we can find this row
	        newRow = self.getRow(newEntity, oldRows);
	      }

	      // if we didn't find the row, it must be new, so create it
	      if ( !newRow ){
	        newRow = self.processRowBuilders(new GridRow(newEntity, i, self));
	      }

	      self.rows.push( newRow );
	      self.rowHashMap.put( newEntity, newRow );
	    });

	    self.assignTypes();

	    var p1 = $q.when(self.processRowsProcessors(self.rows))
	      .then(function (renderableRows) {
	        return self.setVisibleRows(renderableRows);
	      });

	    var p2 = $q.when(self.processColumnsProcessors(self.columns))
	      .then(function (renderableColumns) {
	        return self.setVisibleColumns(renderableColumns);
	      });

	    return $q.all([p1, p2]);
	  };


	  /**
	   * Private Undocumented Method
	   * @name addRows
	   * @methodOf ui.grid.class:Grid
	   * @description adds the newRawData array of rows to the grid and calls all registered
	   * rowBuilders. this keyword will reference the grid
	   */
	  Grid.prototype.addRows = function addRows(newRawData) {
	    var self = this;

	    var existingRowCount = self.rows.length;
	    for (var i = 0; i < newRawData.length; i++) {
	      var newRow = self.processRowBuilders(new GridRow(newRawData[i], i + existingRowCount, self));

	      if (self.options.enableRowHashing) {
	        var found = self.rowHashMap.get(newRow.entity);
	        if (found) {
	          found.row = newRow;
	        }
	      }

	      self.rows.push(newRow);
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name processRowBuilders
	   * @methodOf ui.grid.class:Grid
	   * @description processes all RowBuilders for the gridRow
	   * @param {GridRow} gridRow reference to gridRow
	   * @returns {GridRow} the gridRow with all additional behavior added
	   */
	  Grid.prototype.processRowBuilders = function processRowBuilders(gridRow) {
	    var self = this;

	    self.rowBuilders.forEach(function (builder) {
	      builder.call(self, gridRow, self.options);
	    });

	    return gridRow;
	  };

	  /**
	   * @ngdoc function
	   * @name registerStyleComputation
	   * @methodOf ui.grid.class:Grid
	   * @description registered a styleComputation function
	   *
	   * If the function returns a value it will be appended into the grid's `<style>` block
	   * @param {function($scope)} styleComputation function
	   */
	  Grid.prototype.registerStyleComputation = function registerStyleComputation(styleComputationInfo) {
	    this.styleComputations.push(styleComputationInfo);
	  };


	  // NOTE (c0bra): We already have rowBuilders. I think these do exactly the same thing...
	  // Grid.prototype.registerRowFilter = function(filter) {
	  //   // TODO(c0bra): validate filter?

	  //   this.rowFilters.push(filter);
	  // };

	  // Grid.prototype.removeRowFilter = function(filter) {
	  //   var idx = this.rowFilters.indexOf(filter);

	  //   if (typeof(idx) !== 'undefined' && idx !== undefined) {
	  //     this.rowFilters.slice(idx, 1);
	  //   }
	  // };

	  // Grid.prototype.processRowFilters = function(rows) {
	  //   var self = this;
	  //   self.rowFilters.forEach(function (filter) {
	  //     filter.call(self, rows);
	  //   });
	  // };


	  /**
	   * @ngdoc function
	   * @name registerRowsProcessor
	   * @methodOf ui.grid.class:Grid
	   * @description
	   *
	   * Register a "rows processor" function. When the rows are updated,
	   * the grid calls each registered "rows processor", which has a chance
	   * to alter the set of rows (sorting, etc) as long as the count is not
	   * modified.
	   *
	   * @param {function(renderedRowsToProcess, columns )} processorFunction rows processor function, which
	   * is run in the context of the grid (i.e. this for the function will be the grid), and must
	   * return the updated rows list, which is passed to the next processor in the chain
	   * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	   * for other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.
	   *
	   * At present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	   *
	   */
	  Grid.prototype.registerRowsProcessor = function registerRowsProcessor(processor, priority) {
	    if (!angular.isFunction(processor)) {
	      throw 'Attempt to register non-function rows processor: ' + processor;
	    }

	    this.rowsProcessors.push({processor: processor, priority: priority});
	    this.rowsProcessors.sort(function sortByPriority( a, b ){
	      return a.priority - b.priority;
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name removeRowsProcessor
	   * @methodOf ui.grid.class:Grid
	   * @param {function(renderableRows)} rows processor function
	   * @description Remove a registered rows processor
	   */
	  Grid.prototype.removeRowsProcessor = function removeRowsProcessor(processor) {
	    var idx = -1;
	    this.rowsProcessors.forEach(function(rowsProcessor, index){
	      if ( rowsProcessor.processor === processor ){
	        idx = index;
	      }
	    });

	    if ( idx !== -1 ) {
	      this.rowsProcessors.splice(idx, 1);
	    }
	  };

	  /**
	   * Private Undocumented Method
	   * @name processRowsProcessors
	   * @methodOf ui.grid.class:Grid
	   * @param {Array[GridRow]} The array of "renderable" rows
	   * @param {Array[GridColumn]} The array of columns
	   * @description Run all the registered rows processors on the array of renderable rows
	   */
	  Grid.prototype.processRowsProcessors = function processRowsProcessors(renderableRows) {
	    var self = this;

	    // Create a shallow copy of the rows so that we can safely sort them without altering the original grid.rows sort order
	    var myRenderableRows = renderableRows.slice(0);

	    // Return myRenderableRows with no processing if we have no rows processors
	    if (self.rowsProcessors.length === 0) {
	      return $q.when(myRenderableRows);
	    }

	    // Counter for iterating through rows processors
	    var i = 0;

	    // Promise for when we're done with all the processors
	    var finished = $q.defer();

	    // This function will call the processor in self.rowsProcessors at index 'i', and then
	    //   when done will call the next processor in the list, using the output from the processor
	    //   at i as the argument for 'renderedRowsToProcess' on the next iteration.
	    //
	    //   If we're at the end of the list of processors, we resolve our 'finished' callback with
	    //   the result.
	    function startProcessor(i, renderedRowsToProcess) {
	      // Get the processor at 'i'
	      var processor = self.rowsProcessors[i].processor;

	      // Call the processor, passing in the rows to process and the current columns
	      //   (note: it's wrapped in $q.when() in case the processor does not return a promise)
	      return $q.when( processor.call(self, renderedRowsToProcess, self.columns) )
	        .then(function handleProcessedRows(processedRows) {
	          // Check for errors
	          if (!processedRows) {
	            throw "Processor at index " + i + " did not return a set of renderable rows";
	          }

	          if (!angular.isArray(processedRows)) {
	            throw "Processor at index " + i + " did not return an array";
	          }

	          // Processor is done, increment the counter
	          i++;

	          // If we're not done with the processors, call the next one
	          if (i <= self.rowsProcessors.length - 1) {
	            return startProcessor(i, processedRows);
	          }
	          // We're done! Resolve the 'finished' promise
	          else {
	            finished.resolve(processedRows);
	          }
	        });
	    }

	    // Start on the first processor
	    startProcessor(0, myRenderableRows);

	    return finished.promise;
	  };

	  Grid.prototype.setVisibleRows = function setVisibleRows(rows) {
	    var self = this;

	    // Reset all the render container row caches
	    for (var i in self.renderContainers) {
	      var container = self.renderContainers[i];

	      container.canvasHeightShouldUpdate = true;

	      if ( typeof(container.visibleRowCache) === 'undefined' ){
	        container.visibleRowCache = [];
	      } else {
	        container.visibleRowCache.length = 0;
	      }
	    }

	    // rows.forEach(function (row) {
	    for (var ri = 0; ri < rows.length; ri++) {
	      var row = rows[ri];

	      var targetContainer = (typeof(row.renderContainer) !== 'undefined' && row.renderContainer) ? row.renderContainer : 'body';

	      // If the row is visible
	      if (row.visible) {
	        self.renderContainers[targetContainer].visibleRowCache.push(row);
	      }
	    }
	    self.api.core.raise.rowsRendered(this.api);
	  };

	  /**
	   * @ngdoc function
	   * @name registerColumnsProcessor
	   * @methodOf ui.grid.class:Grid
	   * @param {function(renderedColumnsToProcess, rows)} columnProcessor column processor function, which
	   * is run in the context of the grid (i.e. this for the function will be the grid), and
	   * which must return an updated renderedColumnsToProcess which can be passed to the next processor
	   * in the chain
	   * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
	   * for other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.
	   *
	   * At present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
	   * @description

	     Register a "columns processor" function. When the columns are updated,
	     the grid calls each registered "columns processor", which has a chance
	     to alter the set of columns, as long as the count is not modified.
	   */
	  Grid.prototype.registerColumnsProcessor = function registerColumnsProcessor(processor, priority) {
	    if (!angular.isFunction(processor)) {
	      throw 'Attempt to register non-function rows processor: ' + processor;
	    }

	    this.columnsProcessors.push({processor: processor, priority: priority});
	    this.columnsProcessors.sort(function sortByPriority( a, b ){
	      return a.priority - b.priority;
	    });
	  };

	  Grid.prototype.removeColumnsProcessor = function removeColumnsProcessor(processor) {
	    var idx = this.columnsProcessors.indexOf(processor);

	    if (typeof(idx) !== 'undefined' && idx !== undefined) {
	      this.columnsProcessors.splice(idx, 1);
	    }
	  };

	  Grid.prototype.processColumnsProcessors = function processColumnsProcessors(renderableColumns) {
	    var self = this;

	    // Create a shallow copy of the rows so that we can safely sort them without altering the original grid.rows sort order
	    var myRenderableColumns = renderableColumns.slice(0);

	    // Return myRenderableRows with no processing if we have no rows processors
	    if (self.columnsProcessors.length === 0) {
	      return $q.when(myRenderableColumns);
	    }

	    // Counter for iterating through rows processors
	    var i = 0;

	    // Promise for when we're done with all the processors
	    var finished = $q.defer();

	    // This function will call the processor in self.rowsProcessors at index 'i', and then
	    //   when done will call the next processor in the list, using the output from the processor
	    //   at i as the argument for 'renderedRowsToProcess' on the next iteration.
	    //
	    //   If we're at the end of the list of processors, we resolve our 'finished' callback with
	    //   the result.
	    function startProcessor(i, renderedColumnsToProcess) {
	      // Get the processor at 'i'
	      var processor = self.columnsProcessors[i].processor;

	      // Call the processor, passing in the rows to process and the current columns
	      //   (note: it's wrapped in $q.when() in case the processor does not return a promise)
	      return $q.when( processor.call(self, renderedColumnsToProcess, self.rows) )
	        .then(function handleProcessedRows(processedColumns) {
	          // Check for errors
	          if (!processedColumns) {
	            throw "Processor at index " + i + " did not return a set of renderable rows";
	          }

	          if (!angular.isArray(processedColumns)) {
	            throw "Processor at index " + i + " did not return an array";
	          }

	          // Processor is done, increment the counter
	          i++;

	          // If we're not done with the processors, call the next one
	          if (i <= self.columnsProcessors.length - 1) {
	            return startProcessor(i, myRenderableColumns);
	          }
	          // We're done! Resolve the 'finished' promise
	          else {
	            finished.resolve(myRenderableColumns);
	          }
	        });
	    }

	    // Start on the first processor
	    startProcessor(0, myRenderableColumns);

	    return finished.promise;
	  };

	  Grid.prototype.setVisibleColumns = function setVisibleColumns(columns) {
	    // gridUtil.logDebug('setVisibleColumns');

	    var self = this;

	    // Reset all the render container row caches
	    for (var i in self.renderContainers) {
	      var container = self.renderContainers[i];

	      container.visibleColumnCache.length = 0;
	    }

	    for (var ci = 0; ci < columns.length; ci++) {
	      var column = columns[ci];

	      // If the column is visible
	      if (column.visible) {
	        // If the column has a container specified
	        if (typeof(column.renderContainer) !== 'undefined' && column.renderContainer) {
	          self.renderContainers[column.renderContainer].visibleColumnCache.push(column);
	        }
	        // If not, put it into the body container
	        else {
	          self.renderContainers.body.visibleColumnCache.push(column);
	        }
	      }
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name handleWindowResize
	   * @methodOf ui.grid.class:Grid
	   * @description Triggered when the browser window resizes; automatically resizes the grid
	   * @returns {Promise} A resolved promise once the window resize has completed.
	   */
	  Grid.prototype.handleWindowResize = function handleWindowResize($event) {
	    var self = this;

	    self.gridWidth = gridUtil.elementWidth(self.element);
	    self.gridHeight = gridUtil.elementHeight(self.element);

	    return self.queueRefresh();
	  };

	  /**
	   * @ngdoc function
	   * @name queueRefresh
	   * @methodOf ui.grid.class:Grid
	   * @description queues a grid refreshCanvas, a way of debouncing all the refreshes we might otherwise issue
	   */
	  Grid.prototype.queueRefresh = function queueRefresh() {
	    var self = this;

	    if (self.refreshCanceller) {
	      $timeout.cancel(self.refreshCanceller);
	    }

	    self.refreshCanceller = $timeout(function () {
	      self.refreshCanvas(true);
	    });

	    self.refreshCanceller.then(function () {
	      self.refreshCanceller = null;
	    });

	    return self.refreshCanceller;
	  };


	  /**
	   * @ngdoc function
	   * @name queueGridRefresh
	   * @methodOf ui.grid.class:Grid
	   * @description queues a grid refresh, a way of debouncing all the refreshes we might otherwise issue
	   */
	  Grid.prototype.queueGridRefresh = function queueGridRefresh() {
	    var self = this;

	    if (self.gridRefreshCanceller) {
	      $timeout.cancel(self.gridRefreshCanceller);
	    }

	    self.gridRefreshCanceller = $timeout(function () {
	      self.refresh(true);
	    });

	    self.gridRefreshCanceller.then(function () {
	      self.gridRefreshCanceller = null;
	    });

	    return self.gridRefreshCanceller;
	  };


	  /**
	   * @ngdoc function
	   * @name updateCanvasHeight
	   * @methodOf ui.grid.class:Grid
	   * @description flags all render containers to update their canvas height
	   */
	  Grid.prototype.updateCanvasHeight = function updateCanvasHeight() {
	    var self = this;

	    for (var containerId in self.renderContainers) {
	      if (self.renderContainers.hasOwnProperty(containerId)) {
	        var container = self.renderContainers[containerId];
	        container.canvasHeightShouldUpdate = true;
	      }
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name buildStyles
	   * @methodOf ui.grid.class:Grid
	   * @description calls each styleComputation function
	   */
	  // TODO: this used to take $scope, but couldn't see that it was used
	  Grid.prototype.buildStyles = function buildStyles() {
	    // gridUtil.logDebug('buildStyles');

	    var self = this;

	    self.customStyles = '';

	    self.styleComputations
	      .sort(function(a, b) {
	        if (a.priority === null) { return 1; }
	        if (b.priority === null) { return -1; }
	        if (a.priority === null && b.priority === null) { return 0; }
	        return a.priority - b.priority;
	      })
	      .forEach(function (compInfo) {
	        // this used to provide $scope as a second parameter, but I couldn't find any
	        // style builders that used it, so removed it as part of moving to grid from controller
	        var ret = compInfo.func.call(self);

	        if (angular.isString(ret)) {
	          self.customStyles += '\n' + ret;
	        }
	      });
	  };


	  Grid.prototype.minColumnsToRender = function minColumnsToRender() {
	    var self = this;
	    var viewport = this.getViewportWidth();

	    var min = 0;
	    var totalWidth = 0;
	    self.columns.forEach(function(col, i) {
	      if (totalWidth < viewport) {
	        totalWidth += col.drawnWidth;
	        min++;
	      }
	      else {
	        var currWidth = 0;
	        for (var j = i; j >= i - min; j--) {
	          currWidth += self.columns[j].drawnWidth;
	        }
	        if (currWidth < viewport) {
	          min++;
	        }
	      }
	    });

	    return min;
	  };

	  Grid.prototype.getBodyHeight = function getBodyHeight() {
	    // Start with the viewportHeight
	    var bodyHeight = this.getViewportHeight();

	    // Add the horizontal scrollbar height if there is one
	    //if (typeof(this.horizontalScrollbarHeight) !== 'undefined' && this.horizontalScrollbarHeight !== undefined && this.horizontalScrollbarHeight > 0) {
	    //  bodyHeight = bodyHeight + this.horizontalScrollbarHeight;
	    //}

	    return bodyHeight;
	  };

	  // NOTE: viewport drawable height is the height of the grid minus the header row height (including any border)
	  // TODO(c0bra): account for footer height
	  Grid.prototype.getViewportHeight = function getViewportHeight() {
	    var self = this;

	    var viewPortHeight = this.gridHeight - this.headerHeight - this.footerHeight;

	    // Account for native horizontal scrollbar, if present
	    //if (typeof(this.horizontalScrollbarHeight) !== 'undefined' && this.horizontalScrollbarHeight !== undefined && this.horizontalScrollbarHeight > 0) {
	    //  viewPortHeight = viewPortHeight - this.horizontalScrollbarHeight;
	    //}

	    var adjustment = self.getViewportAdjustment();

	    viewPortHeight = viewPortHeight + adjustment.height;

	    //gridUtil.logDebug('viewPortHeight', viewPortHeight);

	    return viewPortHeight;
	  };

	  Grid.prototype.getViewportWidth = function getViewportWidth() {
	    var self = this;

	    var viewPortWidth = this.gridWidth;

	    //if (typeof(this.verticalScrollbarWidth) !== 'undefined' && this.verticalScrollbarWidth !== undefined && this.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth - this.verticalScrollbarWidth;
	    //}

	    var adjustment = self.getViewportAdjustment();

	    viewPortWidth = viewPortWidth + adjustment.width;

	    //gridUtil.logDebug('getviewPortWidth', viewPortWidth);

	    return viewPortWidth;
	  };

	  Grid.prototype.getHeaderViewportWidth = function getHeaderViewportWidth() {
	    var viewPortWidth = this.getViewportWidth();

	    //if (typeof(this.verticalScrollbarWidth) !== 'undefined' && this.verticalScrollbarWidth !== undefined && this.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth + this.verticalScrollbarWidth;
	    //}

	    return viewPortWidth;
	  };

	  Grid.prototype.addVerticalScrollSync = function (containerId, callBackFn) {
	    this.verticalScrollSyncCallBackFns[containerId] = callBackFn;
	  };

	  Grid.prototype.addHorizontalScrollSync = function (containerId, callBackFn) {
	    this.horizontalScrollSyncCallBackFns[containerId] = callBackFn;
	  };

	/**
	 * Scroll needed containers by calling their ScrollSyncs
	 * @param sourceContainerId the containerId that has already set it's top/left.
	 *         can be empty string which means all containers need to set top/left
	 * @param scrollEvent
	 */
	  Grid.prototype.scrollContainers = function (sourceContainerId, scrollEvent) {

	    if (scrollEvent.y) {
	      //default for no container Id (ex. mousewheel means that all containers must set scrollTop/Left)
	      var verts = ['body','left', 'right'];

	      this.flagScrollingVertically(scrollEvent);

	      if (sourceContainerId === 'body') {
	        verts = ['left', 'right'];
	      }
	      else if (sourceContainerId === 'left') {
	        verts = ['body', 'right'];
	      }
	      else if (sourceContainerId === 'right') {
	        verts = ['body', 'left'];
	      }

	      for (var i = 0; i < verts.length; i++) {
	        var id = verts[i];
	        if (this.verticalScrollSyncCallBackFns[id]) {
	          this.verticalScrollSyncCallBackFns[id](scrollEvent);
	        }
	      }

	    }

	    if (scrollEvent.x) {
	      //default for no container Id (ex. mousewheel means that all containers must set scrollTop/Left)
	      var horizs = ['body','bodyheader', 'bodyfooter'];

	      this.flagScrollingHorizontally(scrollEvent);
	      if (sourceContainerId === 'body') {
	        horizs = ['bodyheader', 'bodyfooter'];
	      }

	      for (var j = 0; j < horizs.length; j++) {
	        var idh = horizs[j];
	        if (this.horizontalScrollSyncCallBackFns[idh]) {
	          this.horizontalScrollSyncCallBackFns[idh](scrollEvent);
	        }
	      }

	    }

	  };

	  Grid.prototype.registerViewportAdjuster = function registerViewportAdjuster(func) {
	    this.viewportAdjusters.push(func);
	  };

	  Grid.prototype.removeViewportAdjuster = function registerViewportAdjuster(func) {
	    var idx = this.viewportAdjusters.indexOf(func);

	    if (typeof(idx) !== 'undefined' && idx !== undefined) {
	      this.viewportAdjusters.splice(idx, 1);
	    }
	  };

	  Grid.prototype.getViewportAdjustment = function getViewportAdjustment() {
	    var self = this;

	    var adjustment = { height: 0, width: 0 };

	    self.viewportAdjusters.forEach(function (func) {
	      adjustment = func.call(this, adjustment);
	    });

	    return adjustment;
	  };

	  Grid.prototype.getVisibleRowCount = function getVisibleRowCount() {
	    // var count = 0;

	    // this.rows.forEach(function (row) {
	    //   if (row.visible) {
	    //     count++;
	    //   }
	    // });

	    // return this.visibleRowCache.length;
	    return this.renderContainers.body.visibleRowCache.length;
	  };

	   Grid.prototype.getVisibleRows = function getVisibleRows() {
	    return this.renderContainers.body.visibleRowCache;
	   };

	  Grid.prototype.getVisibleColumnCount = function getVisibleColumnCount() {
	    // var count = 0;

	    // this.rows.forEach(function (row) {
	    //   if (row.visible) {
	    //     count++;
	    //   }
	    // });

	    // return this.visibleRowCache.length;
	    return this.renderContainers.body.visibleColumnCache.length;
	  };


	  Grid.prototype.searchRows = function searchRows(renderableRows) {
	    return rowSearcher.search(this, renderableRows, this.columns);
	  };

	  Grid.prototype.sortByColumn = function sortByColumn(renderableRows) {
	    return rowSorter.sort(this, renderableRows, this.columns);
	  };

	  /**
	   * @ngdoc function
	   * @name getCellValue
	   * @methodOf ui.grid.class:Grid
	   * @description Gets the value of a cell for a particular row and column
	   * @param {GridRow} row Row to access
	   * @param {GridColumn} col Column to access
	   */
	  Grid.prototype.getCellValue = function getCellValue(row, col){
	    if ( typeof(row.entity[ '$$' + col.uid ]) !== 'undefined' ) {
	      return row.entity[ '$$' + col.uid].rendered;
	    } else if (this.options.flatEntityAccess && typeof(col.field) !== 'undefined' ){
	      return row.entity[col.field];
	    } else {
	      if (!col.cellValueGetterCache) {
	        col.cellValueGetterCache = $parse(row.getEntityQualifiedColField(col));
	      }

	      return col.cellValueGetterCache(row);
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name getCellDisplayValue
	   * @methodOf ui.grid.class:Grid
	   * @description Gets the displayed value of a cell after applying any the `cellFilter`
	   * @param {GridRow} row Row to access
	   * @param {GridColumn} col Column to access
	   */
	  Grid.prototype.getCellDisplayValue = function getCellDisplayValue(row, col) {
	    if ( !col.cellDisplayGetterCache ) {
	      var custom_filter = col.cellFilter ? " | " + col.cellFilter : "";

	      if (typeof(row.entity['$$' + col.uid]) !== 'undefined') {
	        col.cellDisplayGetterCache = $parse(row.entity['$$' + col.uid].rendered + custom_filter);
	      } else if (this.options.flatEntityAccess && typeof(col.field) !== 'undefined') {
	        col.cellDisplayGetterCache = $parse(row.entity[col.field] + custom_filter);
	      } else {
	        col.cellDisplayGetterCache = $parse(row.getEntityQualifiedColField(col) + custom_filter);
	      }
	    }

	    return col.cellDisplayGetterCache(row);
	  };


	  Grid.prototype.getNextColumnSortPriority = function getNextColumnSortPriority() {
	    var self = this,
	        p = 0;

	    self.columns.forEach(function (col) {
	      if (col.sort && col.sort.priority !== undefined && col.sort.priority >= p) {
	        p = col.sort.priority + 1;
	      }
	    });

	    return p;
	  };

	  /**
	   * @ngdoc function
	   * @name resetColumnSorting
	   * @methodOf ui.grid.class:Grid
	   * @description Return the columns that the grid is currently being sorted by
	   * @param {GridColumn} [excludedColumn] Optional GridColumn to exclude from having its sorting reset
	   */
	  Grid.prototype.resetColumnSorting = function resetColumnSorting(excludeCol) {
	    var self = this;

	    self.columns.forEach(function (col) {
	      if (col !== excludeCol && !col.suppressRemoveSort) {
	        col.sort = {};
	      }
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name getColumnSorting
	   * @methodOf ui.grid.class:Grid
	   * @description Return the columns that the grid is currently being sorted by
	   * @returns {Array[GridColumn]} An array of GridColumn objects
	   */
	  Grid.prototype.getColumnSorting = function getColumnSorting() {
	    var self = this;

	    var sortedCols = [], myCols;

	    // Iterate through all the columns, sorted by priority
	    // Make local copy of column list, because sorting is in-place and we do not want to
	    // change the original sequence of columns
	    myCols = self.columns.slice(0);
	    myCols.sort(rowSorter.prioritySort).forEach(function (col) {
	      if (col.sort && typeof(col.sort.direction) !== 'undefined' && col.sort.direction && (col.sort.direction === uiGridConstants.ASC || col.sort.direction === uiGridConstants.DESC)) {
	        sortedCols.push(col);
	      }
	    });

	    return sortedCols;
	  };

	  /**
	   * @ngdoc function
	   * @name sortColumn
	   * @methodOf ui.grid.class:Grid
	   * @description Set the sorting on a given column, optionally resetting any existing sorting on the Grid.
	   * Emits the sortChanged event whenever the sort criteria are changed.
	   * @param {GridColumn} column Column to set the sorting on
	   * @param {uiGridConstants.ASC|uiGridConstants.DESC} [direction] Direction to sort by, either descending or ascending.
	   *   If not provided, the column will iterate through the sort directions
	   *   specified in the {@link ui.grid.class:GridOptions.columnDef#sortDirectionCycle sortDirectionCycle} attribute.
	   * @param {boolean} [add] Add this column to the sorting. If not provided or set to `false`, the Grid will reset any existing sorting and sort
	   *   by this column only
	   * @returns {Promise} A resolved promise that supplies the column.
	   */

	  Grid.prototype.sortColumn = function sortColumn(column, directionOrAdd, add) {
	    var self = this,
	        direction = null;

	    if (typeof(column) === 'undefined' || !column) {
	      throw new Error('No column parameter provided');
	    }

	    // Second argument can either be a direction or whether to add this column to the existing sort.
	    //   If it's a boolean, it's an add, otherwise, it's a direction
	    if (typeof(directionOrAdd) === 'boolean') {
	      add = directionOrAdd;
	    }
	    else {
	      direction = directionOrAdd;
	    }

	    if (!add) {
	      self.resetColumnSorting(column);
	      column.sort.priority = undefined;
	      // Get the actual priority since there may be columns which have suppressRemoveSort set
	      column.sort.priority = self.getNextColumnSortPriority();
	    }
	    else if (!column.sort.priority){
	      column.sort.priority = self.getNextColumnSortPriority();
	    }

	    if (!direction) {
	      // Find the current position in the cycle (or -1).
	      var i = column.sortDirectionCycle.indexOf(column.sort.direction ? column.sort.direction : null);
	      // Proceed to the next position in the cycle (or start at the beginning).
	      i = (i+1) % column.sortDirectionCycle.length;
	      // If suppressRemoveSort is set, and the next position in the cycle would
	      // remove the sort, skip it.
	      if (column.colDef && column.suppressRemoveSort && !column.sortDirectionCycle[i]) {
	        i = (i+1) % column.sortDirectionCycle.length;
	      }

	      if (column.sortDirectionCycle[i]) {
	        column.sort.direction = column.sortDirectionCycle[i];
	      } else {
	        column.sort = {};
	      }
	    }
	    else {
	      column.sort.direction = direction;
	    }

	    self.api.core.raise.sortChanged( self, self.getColumnSorting() );

	    return $q.when(column);
	  };

	  /**
	   * communicate to outside world that we are done with initial rendering
	   */
	  Grid.prototype.renderingComplete = function(){
	    if (angular.isFunction(this.options.onRegisterApi)) {
	      this.options.onRegisterApi(this.api);
	    }
	    this.api.core.raise.renderingComplete( this.api );
	  };

	  Grid.prototype.createRowHashMap = function createRowHashMap() {
	    var self = this;

	    var hashMap = new RowHashMap();
	    hashMap.grid = self;

	    return hashMap;
	  };


	  /**
	   * @ngdoc function
	   * @name refresh
	   * @methodOf ui.grid.class:Grid
	   * @description Refresh the rendered grid on screen.
	   * @param {boolean} [rowsAltered] Optional flag for refreshing when the number of rows has changed.
	   */
	  Grid.prototype.refresh = function refresh(rowsAltered) {
	    var self = this;

	    var p1 = self.processRowsProcessors(self.rows).then(function (renderableRows) {
	      self.setVisibleRows(renderableRows);
	    });

	    var p2 = self.processColumnsProcessors(self.columns).then(function (renderableColumns) {
	      self.setVisibleColumns(renderableColumns);
	    });

	    return $q.all([p1, p2]).then(function () {
	      self.redrawInPlace(rowsAltered);

	      self.refreshCanvas(true);
	    });
	  };

	  /**
	   * @ngdoc function
	   * @name refreshRows
	   * @methodOf ui.grid.class:Grid
	   * @description Refresh the rendered rows on screen?  Note: not functional at present
	   * @returns {promise} promise that is resolved when render completes?
	   *
	   */
	  Grid.prototype.refreshRows = function refreshRows() {
	    var self = this;

	    return self.processRowsProcessors(self.rows)
	      .then(function (renderableRows) {
	        self.setVisibleRows(renderableRows);

	        self.redrawInPlace();

	        self.refreshCanvas( true );
	      });
	  };

	  /**
	   * @ngdoc function
	   * @name refreshCanvas
	   * @methodOf ui.grid.class:Grid
	   * @description Builds all styles and recalculates much of the grid sizing
	   * @param {object} buildStyles optional parameter.  Use TBD
	   * @returns {promise} promise that is resolved when the canvas
	   * has been refreshed
	   *
	   */
	  Grid.prototype.refreshCanvas = function(buildStyles) {
	    var self = this;

	    if (buildStyles) {
	      self.buildStyles();
	    }

	    var p = $q.defer();

	    // Get all the header heights
	    var containerHeadersToRecalc = [];
	    for (var containerId in self.renderContainers) {
	      if (self.renderContainers.hasOwnProperty(containerId)) {
	        var container = self.renderContainers[containerId];

	        // Skip containers that have no canvasWidth set yet
	        if (container.canvasWidth === null || isNaN(container.canvasWidth)) {
	          continue;
	        }

	        if (container.header || container.headerCanvas) {
	          container.explicitHeaderHeight = container.explicitHeaderHeight || null;
	          container.explicitHeaderCanvasHeight = container.explicitHeaderCanvasHeight || null;

	          containerHeadersToRecalc.push(container);
	        }
	      }
	    }

	    /*
	     *
	     * Here we loop through the headers, measuring each element as well as any header "canvas" it has within it.
	     *
	     * If any header is less than the largest header height, it will be resized to that so that we don't have headers
	     * with different heights, which looks like a rendering problem
	     *
	     * We'll do the same thing with the header canvases, and give the header CELLS an explicit height if their canvas
	     * is smaller than the largest canvas height. That was header cells without extra controls like filtering don't
	     * appear shorter than other cells.
	     *
	     */
	    if (containerHeadersToRecalc.length > 0) {
	      // Build the styles without the explicit header heights
	      if (buildStyles) {
	        self.buildStyles();
	      }

	      // Putting in a timeout as it's not calculating after the grid element is rendered and filled out
	      $timeout(function() {
	        // var oldHeaderHeight = self.grid.headerHeight;
	        // self.grid.headerHeight = gridUtil.outerElementHeight(self.header);

	        var rebuildStyles = false;

	        // Get all the header heights
	        var maxHeaderHeight = 0;
	        var maxHeaderCanvasHeight = 0;
	        var i, container;
	        var getHeight = function(oldVal, newVal){
	          if ( oldVal !== newVal){
	            rebuildStyles = true;
	          }
	          return newVal;
	        };
	        for (i = 0; i < containerHeadersToRecalc.length; i++) {
	          container = containerHeadersToRecalc[i];

	          // Skip containers that have no canvasWidth set yet
	          if (container.canvasWidth === null || isNaN(container.canvasWidth)) {
	            continue;
	          }

	          if (container.header) {
	            var headerHeight = container.headerHeight = getHeight(container.headerHeight, parseInt(gridUtil.outerElementHeight(container.header), 10));

	            // Get the "inner" header height, that is the height minus the top and bottom borders, if present. We'll use it to make sure all the headers have a consistent height
	            var topBorder = gridUtil.getBorderSize(container.header, 'top');
	            var bottomBorder = gridUtil.getBorderSize(container.header, 'bottom');
	            var innerHeaderHeight = parseInt(headerHeight - topBorder - bottomBorder, 10);

	            innerHeaderHeight  = innerHeaderHeight < 0 ? 0 : innerHeaderHeight;

	            container.innerHeaderHeight = innerHeaderHeight;

	            // If the header doesn't have an explicit height set, save the largest header height for use later
	            //   Explicit header heights are based off of the max we are calculating here. We never want to base the max on something we're setting explicitly
	            if (!container.explicitHeaderHeight && innerHeaderHeight > maxHeaderHeight) {
	              maxHeaderHeight = innerHeaderHeight;
	            }
	          }

	          if (container.headerCanvas) {
	            var headerCanvasHeight = container.headerCanvasHeight = getHeight(container.headerCanvasHeight, parseInt(gridUtil.outerElementHeight(container.headerCanvas), 10));


	            // If the header doesn't have an explicit canvas height, save the largest header canvas height for use later
	            //   Explicit header heights are based off of the max we are calculating here. We never want to base the max on something we're setting explicitly
	            if (!container.explicitHeaderCanvasHeight && headerCanvasHeight > maxHeaderCanvasHeight) {
	              maxHeaderCanvasHeight = headerCanvasHeight;
	            }
	          }
	        }

	        // Go through all the headers
	        for (i = 0; i < containerHeadersToRecalc.length; i++) {
	          container = containerHeadersToRecalc[i];

	          /* If:
	              1. We have a max header height
	              2. This container has a header height defined
	              3. And either this container has an explicit header height set, OR its header height is less than the max

	              then:

	              Give this container's header an explicit height so it will line up with the tallest header
	          */
	          if (
	            maxHeaderHeight > 0 && typeof(container.headerHeight) !== 'undefined' && container.headerHeight !== null &&
	            (container.explicitHeaderHeight || container.headerHeight < maxHeaderHeight)
	          ) {
	            container.explicitHeaderHeight = getHeight(container.explicitHeaderHeight, maxHeaderHeight);
	          }

	          // Do the same as above except for the header canvas
	          if (
	            maxHeaderCanvasHeight > 0 && typeof(container.headerCanvasHeight) !== 'undefined' && container.headerCanvasHeight !== null &&
	            (container.explicitHeaderCanvasHeight || container.headerCanvasHeight < maxHeaderCanvasHeight)
	          ) {
	            container.explicitHeaderCanvasHeight = getHeight(container.explicitHeaderCanvasHeight, maxHeaderCanvasHeight);
	          }
	        }

	        // Rebuild styles if the header height has changed
	        //   The header height is used in body/viewport calculations and those are then used in other styles so we need it to be available
	        if (buildStyles && rebuildStyles) {
	          self.buildStyles();
	        }

	        p.resolve();
	      });
	    }
	    else {
	      // Timeout still needs to be here to trigger digest after styles have been rebuilt
	      $timeout(function() {
	        p.resolve();
	      });
	    }

	    return p.promise;
	  };


	  /**
	   * @ngdoc function
	   * @name redrawCanvas
	   * @methodOf ui.grid.class:Grid
	   * @description Redraw the rows and columns based on our current scroll position
	   * @param {boolean} [rowsAdded] Optional to indicate rows are added and the scroll percentage must be recalculated
	   *
	   */
	  Grid.prototype.redrawInPlace = function redrawInPlace(rowsAdded) {
	    // gridUtil.logDebug('redrawInPlace');

	    var self = this;

	    for (var i in self.renderContainers) {
	      var container = self.renderContainers[i];

	      // gridUtil.logDebug('redrawing container', i);

	      if (rowsAdded) {
	        container.adjustRows(container.prevScrollTop, null);
	        container.adjustColumns(container.prevScrollLeft, null);
	      }
	      else {
	        container.adjustRows(null, container.prevScrolltopPercentage);
	        container.adjustColumns(null, container.prevScrollleftPercentage);
	      }
	    }
	  };

	    /**
	     * @ngdoc function
	     * @name hasLeftContainerColumns
	     * @methodOf ui.grid.class:Grid
	     * @description returns true if leftContainer has columns
	     */
	    Grid.prototype.hasLeftContainerColumns = function () {
	      return this.hasLeftContainer() && this.renderContainers.left.renderedColumns.length > 0;
	    };

	    /**
	     * @ngdoc function
	     * @name hasRightContainerColumns
	     * @methodOf ui.grid.class:Grid
	     * @description returns true if rightContainer has columns
	     */
	    Grid.prototype.hasRightContainerColumns = function () {
	      return this.hasRightContainer() && this.renderContainers.right.renderedColumns.length > 0;
	    };

	    /**
	     * @ngdoc method
	     * @methodOf  ui.grid.class:Grid
	     * @name scrollToIfNecessary
	     * @description Scrolls the grid to make a certain row and column combo visible,
	     *   in the case that it is not completely visible on the screen already.
	     * @param {GridRow} gridRow row to make visible
	     * @param {GridCol} gridCol column to make visible
	     * @returns {promise} a promise that is resolved when scrolling is complete
	     */
	    Grid.prototype.scrollToIfNecessary = function (gridRow, gridCol) {
	      var self = this;

	      var scrollEvent = new ScrollEvent(self, 'uiGrid.scrollToIfNecessary');

	      // Alias the visible row and column caches
	      var visRowCache = self.renderContainers.body.visibleRowCache;
	      var visColCache = self.renderContainers.body.visibleColumnCache;

	      /*-- Get the top, left, right, and bottom "scrolled" edges of the grid --*/

	      // The top boundary is the current Y scroll position PLUS the header height, because the header can obscure rows when the grid is scrolled downwards
	      var topBound = self.renderContainers.body.prevScrollTop + self.headerHeight;

	      // Don't the let top boundary be less than 0
	      topBound = (topBound < 0) ? 0 : topBound;

	      // The left boundary is the current X scroll position
	      var leftBound = self.renderContainers.body.prevScrollLeft;

	      // The bottom boundary is the current Y scroll position, plus the height of the grid, but minus the header height.
	      //   Basically this is the viewport height added on to the scroll position
	      var bottomBound = self.renderContainers.body.prevScrollTop + self.gridHeight - self.renderContainers.body.headerHeight - self.footerHeight -  self.scrollbarWidth;

	      // If there's a horizontal scrollbar, remove its height from the bottom boundary, otherwise we'll be letting it obscure rows
	      //if (self.horizontalScrollbarHeight) {
	      //  bottomBound = bottomBound - self.horizontalScrollbarHeight;
	      //}

	      // The right position is the current X scroll position minus the grid width
	      var rightBound = self.renderContainers.body.prevScrollLeft + Math.ceil(self.renderContainers.body.getViewportWidth());

	      // If there's a vertical scrollbar, subtract it from the right boundary or we'll allow it to obscure cells
	      //if (self.verticalScrollbarWidth) {
	      //  rightBound = rightBound - self.verticalScrollbarWidth;
	      //}

	      // We were given a row to scroll to
	      if (gridRow !== null) {
	        // This is the index of the row we want to scroll to, within the list of rows that can be visible
	        var seekRowIndex = visRowCache.indexOf(gridRow);

	        // Total vertical scroll length of the grid
	        var scrollLength = (self.renderContainers.body.getCanvasHeight() - self.renderContainers.body.getViewportHeight());

	        // Add the height of the native horizontal scrollbar to the scroll length, if it's there. Otherwise it will mask over the final row
	        //if (self.horizontalScrollbarHeight && self.horizontalScrollbarHeight > 0) {
	        //  scrollLength = scrollLength + self.horizontalScrollbarHeight;
	        //}

	        // This is the minimum amount of pixels we need to scroll vertical in order to see this row.
	        var pixelsToSeeRow = (seekRowIndex * self.options.rowHeight + self.headerHeight);

	        // Don't let the pixels required to see the row be less than zero
	        pixelsToSeeRow = (pixelsToSeeRow < 0) ? 0 : pixelsToSeeRow;

	        var scrollPixels, percentage;

	        // If the scroll position we need to see the row is LESS than the top boundary, i.e. obscured above the top of the self...
	        if (pixelsToSeeRow < topBound) {
	          // Get the different between the top boundary and the required scroll position and subtract it from the current scroll position\
	          //   to get the full position we need
	          scrollPixels = self.renderContainers.body.prevScrollTop - (topBound - pixelsToSeeRow);

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          percentage = scrollPixels / scrollLength;
	          scrollEvent.y = { percentage: percentage  };
	        }
	        // Otherwise if the scroll position we need to see the row is MORE than the bottom boundary, i.e. obscured below the bottom of the self...
	        else if (pixelsToSeeRow > bottomBound) {
	          // Get the different between the bottom boundary and the required scroll position and add it to the current scroll position
	          //   to get the full position we need
	          scrollPixels = pixelsToSeeRow - bottomBound + self.renderContainers.body.prevScrollTop;

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          percentage = scrollPixels / scrollLength;
	          scrollEvent.y = { percentage: percentage  };
	        }
	      }

	      // We were given a column to scroll to
	      if (gridCol !== null) {
	        // This is the index of the column we want to scroll to, within the list of columns that can be visible
	        var seekColumnIndex = visColCache.indexOf(gridCol);

	        // Total horizontal scroll length of the grid
	        var horizScrollLength = (self.renderContainers.body.getCanvasWidth() - self.renderContainers.body.getViewportWidth());

	        // This is the minimum amount of pixels we need to scroll horizontal in order to see this column
	        var columnLeftEdge = 0;
	        for (var i = 0; i < seekColumnIndex; i++) {
	          var col = visColCache[i];
	          columnLeftEdge += col.drawnWidth;
	        }
	        columnLeftEdge = (columnLeftEdge < 0) ? 0 : columnLeftEdge;

	        var columnRightEdge = columnLeftEdge + gridCol.drawnWidth;

	        // Don't let the pixels required to see the column be less than zero
	        columnRightEdge = (columnRightEdge < 0) ? 0 : columnRightEdge;

	        var horizScrollPixels, horizPercentage;

	        // If the scroll position we need to see the column is LESS than the left boundary, i.e. obscured before the left of the self...
	        if (columnLeftEdge < leftBound) {
	          // Get the different between the left boundary and the required scroll position and subtract it from the current scroll position\
	          //   to get the full position we need
	          horizScrollPixels = self.renderContainers.body.prevScrollLeft - (leftBound - columnLeftEdge);

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          horizPercentage = horizScrollPixels / horizScrollLength;
	          horizPercentage = (horizPercentage > 1) ? 1 : horizPercentage;
	          scrollEvent.x = { percentage: horizPercentage  };
	        }
	        // Otherwise if the scroll position we need to see the column is MORE than the right boundary, i.e. obscured after the right of the self...
	        else if (columnRightEdge > rightBound) {
	          // Get the different between the right boundary and the required scroll position and add it to the current scroll position
	          //   to get the full position we need
	          horizScrollPixels = columnRightEdge - rightBound + self.renderContainers.body.prevScrollLeft;

	          // Turn the scroll position into a percentage and make it an argument for a scroll event
	          horizPercentage = horizScrollPixels / horizScrollLength;
	          horizPercentage = (horizPercentage > 1) ? 1 : horizPercentage;
	          scrollEvent.x = { percentage: horizPercentage  };
	        }
	      }

	      var deferred = $q.defer();

	      // If we need to scroll on either the x or y axes, fire a scroll event
	      if (scrollEvent.y || scrollEvent.x) {
	        scrollEvent.withDelay = false;
	        self.scrollContainers('',scrollEvent);
	        var dereg = self.api.core.on.scrollEnd(null,function() {
	          deferred.resolve(scrollEvent);
	          dereg();
	        });
	      }
	      else {
	        deferred.resolve();
	      }

	      return deferred.promise;
	    };

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.class:Grid
	     * @name scrollTo
	     * @description Scroll the grid such that the specified
	     * row and column is in view
	     * @param {object} rowEntity gridOptions.data[] array instance to make visible
	     * @param {object} colDef to make visible
	     * @returns {promise} a promise that is resolved after any scrolling is finished
	     */
	    Grid.prototype.scrollTo = function (rowEntity, colDef) {
	      var gridRow = null, gridCol = null;

	      if (rowEntity !== null && typeof(rowEntity) !== 'undefined' ) {
	        gridRow = this.getRow(rowEntity);
	      }

	      if (colDef !== null && typeof(colDef) !== 'undefined' ) {
	        gridCol = this.getColumn(colDef.name ? colDef.name : colDef.field);
	      }
	      return this.scrollToIfNecessary(gridRow, gridCol);
	    };

	  /**
	   * @ngdoc function
	   * @name clearAllFilters
	   * @methodOf ui.grid.class:Grid
	   * @description Clears all filters and optionally refreshes the visible rows.
	   * @param {object} refreshRows Defaults to true.
	   * @param {object} clearConditions Defaults to false.
	   * @param {object} clearFlags Defaults to false.
	   * @returns {promise} If `refreshRows` is true, returns a promise of the rows refreshing.
	   */
	  Grid.prototype.clearAllFilters = function clearAllFilters(refreshRows, clearConditions, clearFlags) {
	    // Default `refreshRows` to true because it will be the most commonly desired behaviour.
	    if (refreshRows === undefined) {
	      refreshRows = true;
	    }
	    if (clearConditions === undefined) {
	      clearConditions = false;
	    }
	    if (clearFlags === undefined) {
	      clearFlags = false;
	    }

	    this.columns.forEach(function(column) {
	      column.filters.forEach(function(filter) {
	        filter.term = undefined;

	        if (clearConditions) {
	          filter.condition = undefined;
	        }

	        if (clearFlags) {
	          filter.flags = undefined;
	        }
	      });
	    });

	    if (refreshRows) {
	      return this.refreshRows();
	    }
	  };


	      // Blatantly stolen from Angular as it isn't exposed (yet? 2.0?)
	  function RowHashMap() {}

	  RowHashMap.prototype = {
	    /**
	     * Store key value pair
	     * @param key key to store can be any type
	     * @param value value to store can be any type
	     */
	    put: function(key, value) {
	      this[this.grid.options.rowIdentity(key)] = value;
	    },

	    /**
	     * @param key
	     * @returns {Object} the value for the key
	     */
	    get: function(key) {
	      return this[this.grid.options.rowIdentity(key)];
	    },

	    /**
	     * Remove the key/value pair
	     * @param key
	     */
	    remove: function(key) {
	      var value = this[key = this.grid.options.rowIdentity(key)];
	      delete this[key];
	      return value;
	    }
	  };



	  return Grid;

	}]);

	})();

	(function () {

	  angular.module('ui.grid')
	    .factory('GridApi', ['$q', '$rootScope', 'gridUtil', 'uiGridConstants', 'GridRow', 'uiGridGridMenuService',
	      function ($q, $rootScope, gridUtil, uiGridConstants, GridRow, uiGridGridMenuService) {
	        /**
	         * @ngdoc function
	         * @name ui.grid.class:GridApi
	         * @description GridApi provides the ability to register public methods events inside the grid and allow
	         * for other components to use the api via featureName.raise.methodName and featureName.on.eventName(function(args){}.
	         * <br/>
	         * To listen to events, you must add a callback to gridOptions.onRegisterApi
	         * <pre>
	         *   $scope.gridOptions.onRegisterApi = function(gridApi){
	         *      gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
	         *          $log.log('navigation event');
	         *      });
	         *   };
	         * </pre>
	         * @param {object} grid grid that owns api
	         */
	        var GridApi = function GridApi(grid) {
	          this.grid = grid;
	          this.listeners = [];

	          /**
	           * @ngdoc function
	           * @name renderingComplete
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Rendering is complete, called at the same
	           * time as `onRegisterApi`, but provides a way to obtain
	           * that same event within features without stopping end
	           * users from getting at the onRegisterApi method.
	           *
	           * Included in gridApi so that it's always there - otherwise
	           * there is still a timing problem with when a feature can
	           * call this.
	           *
	           * @param {GridApi} gridApi the grid api, as normally
	           * returned in the onRegisterApi method
	           *
	           * @example
	           * <pre>
	           *      gridApi.core.on.renderingComplete( grid );
	           * </pre>
	           */
	          this.registerEvent( 'core', 'renderingComplete' );

	          /**
	           * @ngdoc event
	           * @name filterChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised after the filter is changed.  The nature
	           * of the watch expression doesn't allow notification of what changed,
	           * so the receiver of this event will need to re-extract the filter
	           * conditions from the columns.
	           *
	           */
	          this.registerEvent( 'core', 'filterChanged' );

	          /**
	           * @ngdoc function
	           * @name setRowInvisible
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Sets an override on the row to make it always invisible,
	           * which will override any filtering or other visibility calculations.
	           * If the row is currently visible then sets it to invisible and calls
	           * both grid refresh and emits the rowsVisibleChanged event
	           * @param {object} rowEntity gridOptions.data[] array instance
	           */
	          this.registerMethod( 'core', 'setRowInvisible', GridRow.prototype.setRowInvisible );

	          /**
	           * @ngdoc function
	           * @name clearRowInvisible
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Clears any override on visibility for the row so that it returns to
	           * using normal filtering and other visibility calculations.
	           * If the row is currently invisible then sets it to visible and calls
	           * both grid refresh and emits the rowsVisibleChanged event
	           * TODO: if a filter is active then we can't just set it to visible?
	           * @param {object} rowEntity gridOptions.data[] array instance
	           */
	          this.registerMethod( 'core', 'clearRowInvisible', GridRow.prototype.clearRowInvisible );

	          /**
	           * @ngdoc function
	           * @name getVisibleRows
	           * @methodOf  ui.grid.core.api:PublicApi
	           * @description Returns all visible rows
	           * @param {Grid} grid the grid you want to get visible rows from
	           * @returns {array} an array of gridRow
	           */
	          this.registerMethod( 'core', 'getVisibleRows', this.grid.getVisibleRows );

	          /**
	           * @ngdoc event
	           * @name rowsVisibleChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised after the rows that are visible
	           * change.  The filtering is zero-based, so it isn't possible
	           * to say which rows changed (unlike in the selection feature).
	           * We can plausibly know which row was changed when setRowInvisible
	           * is called, but in that situation the user already knows which row
	           * they changed.  When a filter runs we don't know what changed,
	           * and that is the one that would have been useful.
	           *
	           */
	          this.registerEvent( 'core', 'rowsVisibleChanged' );

	          /**
	           * @ngdoc event
	           * @name rowsRendered
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised after the cache of visible rows is changed.
	           */
	          this.registerEvent( 'core', 'rowsRendered' );


	          /**
	           * @ngdoc event
	           * @name scrollBegin
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when scroll begins.  Is throttled, so won't be raised too frequently
	           */
	          this.registerEvent( 'core', 'scrollBegin' );

	          /**
	           * @ngdoc event
	           * @name scrollEnd
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when scroll has finished.  Is throttled, so won't be raised too frequently
	           */
	          this.registerEvent( 'core', 'scrollEnd' );

	          /**
	           * @ngdoc event
	           * @name canvasHeightChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when the canvas height has changed
	           * <br/>
	           * arguments: oldHeight, newHeight
	           */
	          this.registerEvent( 'core', 'canvasHeightChanged');

	          /**
	           * @ngdoc event
	           * @name gridDimensionChanged
	           * @eventOf  ui.grid.core.api:PublicApi
	           * @description  is raised when the grid dimensions have changed (when autoResize is on)
	           * <br/>
	           * arguments: oldGridHeight, oldGridWidth, newGridHeight, newGridWidth
	           */
	          this.registerEvent( 'core', 'gridDimensionChanged');
	        };

	        /**
	         * @ngdoc function
	         * @name ui.grid.class:suppressEvents
	         * @methodOf ui.grid.class:GridApi
	         * @description Used to execute a function while disabling the specified event listeners.
	         * Disables the listenerFunctions, executes the callbackFn, and then enables
	         * the listenerFunctions again
	         * @param {object} listenerFuncs listenerFunc or array of listenerFuncs to suppress. These must be the same
	         * functions that were used in the .on.eventName method
	         * @param {object} callBackFn function to execute
	         * @example
	         * <pre>
	         *    var navigate = function (newRowCol, oldRowCol){
	         *       //do something on navigate
	         *    }
	         *
	         *    gridApi.cellNav.on.navigate(scope,navigate);
	         *
	         *
	         *    //call the scrollTo event and suppress our navigate listener
	         *    //scrollTo will still raise the event for other listeners
	         *    gridApi.suppressEvents(navigate, function(){
	         *       gridApi.cellNav.scrollTo(aRow, aCol);
	         *    });
	         *
	         * </pre>
	         */
	        GridApi.prototype.suppressEvents = function (listenerFuncs, callBackFn) {
	          var self = this;
	          var listeners = angular.isArray(listenerFuncs) ? listenerFuncs : [listenerFuncs];

	          //find all registered listeners
	          var foundListeners = self.listeners.filter(function(listener) {
	            return listeners.some(function(l) {
	              return listener.handler === l;
	            });
	          });

	          //deregister all the listeners
	          foundListeners.forEach(function(l){
	            l.dereg();
	          });

	          callBackFn();

	          //reregister all the listeners
	          foundListeners.forEach(function(l){
	              l.dereg = registerEventWithAngular(l.eventId, l.handler, self.grid, l._this);
	          });

	        };

	        /**
	         * @ngdoc function
	         * @name registerEvent
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers a new event for the given feature.  The event will get a
	         * .raise and .on prepended to it
	         * <br>
	         * .raise.eventName() - takes no arguments
	         * <br/>
	         * <br/>
	         * .on.eventName(scope, callBackFn, _this)
	         * <br/>
	         * scope - a scope reference to add a deregister call to the scopes .$on('destroy').  Scope is optional and can be a null value,
	         * but in this case you must deregister it yourself via the returned deregister function
	         * <br/>
	         * callBackFn - The function to call
	         * <br/>
	         * _this - optional this context variable for callbackFn. If omitted, grid.api will be used for the context
	         * <br/>
	         * .on.eventName returns a dereg funtion that will remove the listener.  It's not necessary to use it as the listener
	         * will be removed when the scope is destroyed.
	         * @param {string} featureName name of the feature that raises the event
	         * @param {string} eventName  name of the event
	         */
	        GridApi.prototype.registerEvent = function (featureName, eventName) {
	          var self = this;
	          if (!self[featureName]) {
	            self[featureName] = {};
	          }

	          var feature = self[featureName];
	          if (!feature.on) {
	            feature.on = {};
	            feature.raise = {};
	          }

	          var eventId = self.grid.id + featureName + eventName;

	          // gridUtil.logDebug('Creating raise event method ' + featureName + '.raise.' + eventName);
	          feature.raise[eventName] = function () {
	            $rootScope.$emit.apply($rootScope, [eventId].concat(Array.prototype.slice.call(arguments)));
	          };

	          // gridUtil.logDebug('Creating on event method ' + featureName + '.on.' + eventName);
	          feature.on[eventName] = function (scope, handler, _this) {
	            if ( scope !== null && typeof(scope.$on) === 'undefined' ){
	              gridUtil.logError('asked to listen on ' + featureName + '.on.' + eventName + ' but scope wasn\'t passed in the input parameters.  It is legitimate to pass null, but you\'ve passed something else, so you probably forgot to provide scope rather than did it deliberately, not registering');
	              return;
	            }
	            var deregAngularOn = registerEventWithAngular(eventId, handler, self.grid, _this);

	            //track our listener so we can turn off and on
	            var listener = {handler: handler, dereg: deregAngularOn, eventId: eventId, scope: scope, _this:_this};
	            self.listeners.push(listener);

	            var removeListener = function(){
	              listener.dereg();
	              var index = self.listeners.indexOf(listener);
	              self.listeners.splice(index,1);
	            };

	            //destroy tracking when scope is destroyed
	            if (scope) {
	              scope.$on('$destroy', function() {
	                removeListener();
	              });
	            }


	            return removeListener;
	          };
	        };

	        function registerEventWithAngular(eventId, handler, grid, _this) {
	          return $rootScope.$on(eventId, function (event) {
	            var args = Array.prototype.slice.call(arguments);
	            args.splice(0, 1); //remove evt argument
	            handler.apply(_this ? _this : grid.api, args);
	          });
	        }

	        /**
	         * @ngdoc function
	         * @name registerEventsFromObject
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers features and events from a simple objectMap.
	         * eventObjectMap must be in this format (multiple features allowed)
	         * <pre>
	         * {featureName:
	         *        {
	         *          eventNameOne:function(args){},
	         *          eventNameTwo:function(args){}
	         *        }
	         *  }
	         * </pre>
	         * @param {object} eventObjectMap map of feature/event names
	         */
	        GridApi.prototype.registerEventsFromObject = function (eventObjectMap) {
	          var self = this;
	          var features = [];
	          angular.forEach(eventObjectMap, function (featProp, featPropName) {
	            var feature = {name: featPropName, events: []};
	            angular.forEach(featProp, function (prop, propName) {
	              feature.events.push(propName);
	            });
	            features.push(feature);
	          });

	          features.forEach(function (feature) {
	            feature.events.forEach(function (event) {
	              self.registerEvent(feature.name, event);
	            });
	          });

	        };

	        /**
	         * @ngdoc function
	         * @name registerMethod
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers a new event for the given feature
	         * @param {string} featureName name of the feature
	         * @param {string} methodName  name of the method
	         * @param {object} callBackFn function to execute
	         * @param {object} _this binds callBackFn 'this' to _this.  Defaults to gridApi.grid
	         */
	        GridApi.prototype.registerMethod = function (featureName, methodName, callBackFn, _this) {
	          if (!this[featureName]) {
	            this[featureName] = {};
	          }

	          var feature = this[featureName];

	          feature[methodName] = gridUtil.createBoundedWrapper(_this || this.grid, callBackFn);
	        };

	        /**
	         * @ngdoc function
	         * @name registerMethodsFromObject
	         * @methodOf ui.grid.class:GridApi
	         * @description Registers features and methods from a simple objectMap.
	         * eventObjectMap must be in this format (multiple features allowed)
	         * <br>
	         * {featureName:
	         *        {
	         *          methodNameOne:function(args){},
	         *          methodNameTwo:function(args){}
	         *        }
	         * @param {object} eventObjectMap map of feature/event names
	         * @param {object} _this binds this to _this for all functions.  Defaults to gridApi.grid
	         */
	        GridApi.prototype.registerMethodsFromObject = function (methodMap, _this) {
	          var self = this;
	          var features = [];
	          angular.forEach(methodMap, function (featProp, featPropName) {
	            var feature = {name: featPropName, methods: []};
	            angular.forEach(featProp, function (prop, propName) {
	              feature.methods.push({name: propName, fn: prop});
	            });
	            features.push(feature);
	          });

	          features.forEach(function (feature) {
	            feature.methods.forEach(function (method) {
	              self.registerMethod(feature.name, method.name, method.fn, _this);
	            });
	          });

	        };

	        return GridApi;

	      }]);

	})();

	(function(){

	angular.module('ui.grid')
	.factory('GridColumn', ['gridUtil', 'uiGridConstants', 'i18nService', function(gridUtil, uiGridConstants, i18nService) {

	  /**
	   * ******************************************************************************************
	   * PaulL1: Ugly hack here in documentation.  These properties are clearly properties of GridColumn,
	   * and need to be noted as such for those extending and building ui-grid itself.
	   * However, from an end-developer perspective, they interact with all these through columnDefs,
	   * and they really need to be documented there.  I feel like they're relatively static, and
	   * I can't find an elegant way for ngDoc to reference to both....so I've duplicated each
	   * comment block.  Ugh.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name name
	   * @propertyOf ui.grid.class:GridColumn
	   * @description (mandatory) each column should have a name, although for backward
	   * compatibility with 2.x name can be omitted if field is present
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name name
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description (mandatory) each column should have a name, although for backward
	   * compatibility with 2.x name can be omitted if field is present
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name displayName
	   * @propertyOf ui.grid.class:GridColumn
	   * @description Column name that will be shown in the header.  If displayName is not
	   * provided then one is generated using the name.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name displayName
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description Column name that will be shown in the header.  If displayName is not
	   * provided then one is generated using the name.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name field
	   * @propertyOf ui.grid.class:GridColumn
	   * @description field must be provided if you wish to bind to a
	   * property in the data source.  Should be an angular expression that evaluates against grid.options.data
	   * array element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.
	   * See the angular docs on binding expressions.
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name field
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description field must be provided if you wish to bind to a
	   * property in the data source.  Should be an angular expression that evaluates against grid.options.data
	   * array element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.    * See the angular docs on binding expressions.    *
	   */

	  /**
	   * @ngdoc property
	   * @name filter
	   * @propertyOf ui.grid.class:GridColumn
	   * @description Filter on this column.
	   * @example
	   * <pre>{ term: 'text', condition: uiGridConstants.filter.STARTS_WITH, placeholder: 'type to filter...', ariaLabel: 'Filter for text', flags: { caseSensitive: false }, type: uiGridConstants.filter.SELECT, [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ] }</pre>
	   *
	   */

	  /**
	   * @ngdoc object
	   * @name ui.grid.class:GridColumn
	   * @description Represents the viewModel for each column.  Any state or methods needed for a Grid Column
	   * are defined on this prototype
	   * @param {ColumnDef} colDef the column def to associate with this column
	   * @param {number} uid the unique and immutable uid we'd like to allocate to this column
	   * @param {Grid} grid the grid we'd like to create this column in
	   */
	  function GridColumn(colDef, uid, grid) {
	    var self = this;

	    self.grid = grid;
	    self.uid = uid;

	    self.updateColumnDef(colDef, true);

	    self.aggregationValue = undefined;

	    // The footer cell registers to listen for the rowsRendered event, and calls this.  Needed to be
	    // in something with a scope so that the dereg would get called
	    self.updateAggregationValue = function() {

	     // gridUtil.logDebug('getAggregationValue for Column ' + self.colDef.name);

	      /**
	       * @ngdoc property
	       * @name aggregationType
	       * @propertyOf ui.grid.class:GridOptions.columnDef
	       * @description The aggregation that you'd like to show in the columnFooter for this
	       * column.  Valid values are in uiGridConstants, and currently include `uiGridConstants.aggregationTypes.count`,
	       * `uiGridConstants.aggregationTypes.sum`, `uiGridConstants.aggregationTypes.avg`, `uiGridConstants.aggregationTypes.min`,
	       * `uiGridConstants.aggregationTypes.max`.
	       *
	       * You can also provide a function as the aggregation type, in this case your function needs to accept the full
	       * set of visible rows, and return a value that should be shown
	       */
	      if (!self.aggregationType) {
	        self.aggregationValue = undefined;
	        return;
	      }

	      var result = 0;
	      var visibleRows = self.grid.getVisibleRows();

	      var cellValues = function(){
	        var values = [];
	        visibleRows.forEach(function (row) {
	          var cellValue = self.grid.getCellValue(row, self);
	          var cellNumber = Number(cellValue);
	          if (!isNaN(cellNumber)) {
	            values.push(cellNumber);
	          }
	        });
	        return values;
	      };

	      if (angular.isFunction(self.aggregationType)) {
	        self.aggregationValue = self.aggregationType(visibleRows, self);
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.count) {
	        self.aggregationValue = self.grid.getVisibleRowCount();
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.sum) {
	        cellValues().forEach(function (value) {
	          result += value;
	        });
	        self.aggregationValue = result;
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.avg) {
	        cellValues().forEach(function (value) {
	          result += value;
	        });
	        result = result / cellValues().length;
	        self.aggregationValue = result;
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.min) {
	        self.aggregationValue = Math.min.apply(null, cellValues());
	      }
	      else if (self.aggregationType === uiGridConstants.aggregationTypes.max) {
	        self.aggregationValue = Math.max.apply(null, cellValues());
	      }
	      else {
	        self.aggregationValue = '\u00A0';
	      }
	    };

	//     var throttledUpdateAggregationValue = gridUtil.throttle(updateAggregationValue, self.grid.options.aggregationCalcThrottle, { trailing: true, context: self.name });

	    /**
	     * @ngdoc function
	     * @name getAggregationValue
	     * @methodOf ui.grid.class:GridColumn
	     * @description gets the aggregation value based on the aggregation type for this column.
	     * Debounced using scrollDebounce option setting
	     */
	    this.getAggregationValue =  function() {
	//      if (!self.grid.isScrollingVertically && !self.grid.isScrollingHorizontally) {
	//        throttledUpdateAggregationValue();
	//      }

	      return self.aggregationValue;
	    };
	  }

	  /**
	   * @ngdoc function
	   * @name hideColumn
	   * @methodOf ui.grid.class:GridColumn
	   * @description Hides the column by setting colDef.visible = false
	   */
	  GridColumn.prototype.hideColumn = function() {
	    this.colDef.visible = false;
	  };
	  

	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:GridColumn
	   * @name setPropertyOrDefault
	   * @description Sets a property on the column using the passed in columnDef, and
	   * setting the defaultValue if the value cannot be found on the colDef
	   * @param {ColumnDef} colDef the column def to look in for the property value
	   * @param {string} propName the property name we'd like to set
	   * @param {object} defaultValue the value to use if the colDef doesn't provide the setting
	   */
	  GridColumn.prototype.setPropertyOrDefault = function (colDef, propName, defaultValue) {
	    var self = this;

	    // Use the column definition filter if we were passed it
	    if (typeof(colDef[propName]) !== 'undefined' && colDef[propName]) {
	      self[propName] = colDef[propName];
	    }
	    // Otherwise use our own if it's set
	    else if (typeof(self[propName]) !== 'undefined') {
	      self[propName] = self[propName];
	    }
	    // Default to empty object for the filter
	    else {
	      self[propName] = defaultValue ? defaultValue : {};
	    }
	  };



	  /**
	   * @ngdoc property
	   * @name width
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets the column width.  Can be either
	   * a number or a percentage, or an * for auto.
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', width: 100},
	   *                                          { field: 'field2', width: '20%'},
	   *                                          { field: 'field3', width: '*' }]; </pre>
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name minWidth
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets the minimum column width.  Should be a number.
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', minWidth: 100}]; </pre>
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name maxWidth
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets the maximum column width.  Should be a number.
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', maxWidth: 100}]; </pre>
	   *
	   */

	  /**
	   * @ngdoc property
	   * @name visible
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description sets whether or not the column is visible
	   * </br>Default is true
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [
	   *     { field: 'field1', visible: true},
	   *     { field: 'field2', visible: false }
	   *   ]; </pre>
	   *
	   */

	 /**
	  * @ngdoc property
	  * @name sort
	  * @propertyOf ui.grid.class:GridOptions.columnDef
	  * @description An object of sort information, attributes are:
	  *
	  * - direction: values are uiGridConstants.ASC or uiGridConstants.DESC
	  * - ignoreSort: if set to true this sort is ignored (used by tree to manipulate the sort functionality)
	  * - priority: says what order to sort the columns in (lower priority gets sorted first).
	  * @example
	  * <pre>
	  *   $scope.gridOptions.columnDefs = [{
	  *     field: 'field1',
	  *     sort: {
	  *       direction: uiGridConstants.ASC,
	  *       ignoreSort: true,
	  *       priority: 0
	  *      }
	  *   }];
	  * </pre>
	  */


	  /**
	   * @ngdoc property
	   * @name sortingAlgorithm
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description Algorithm to use for sorting this column. Takes 'a' and 'b' parameters
	   * like any normal sorting function with additional 'rowA', 'rowB', and 'direction' parameters
	   * that are the row objects and the current direction of the sort respectively.
	   *
	   */

	  /**
	   * @ngdoc array
	   * @name filters
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description Specify multiple filter fields.
	   * @example
	   * <pre>$scope.gridOptions.columnDefs = [
	   *   {
	   *     field: 'field1', filters: [
	   *       {
	   *         term: 'aa',
	   *         condition: uiGridConstants.filter.STARTS_WITH,
	   *         placeholder: 'starts with...',
	   *         ariaLabel: 'Filter for field1',
	   *         flags: { caseSensitive: false },
	   *         type: uiGridConstants.filter.SELECT,
	   *         selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]
	   *       },
	   *       {
	   *         condition: uiGridConstants.filter.ENDS_WITH,
	   *         placeholder: 'ends with...'
	   *       }
	   *     ]
	   *   }
	   * ]; </pre>
	   *
	   *
	   */

	  /**
	   * @ngdoc array
	   * @name filters
	   * @propertyOf ui.grid.class:GridColumn
	   * @description Filters for this column. Includes 'term' property bound to filter input elements.
	   * @example
	   * <pre>[
	   *   {
	   *     term: 'foo', // ngModel for <input>
	   *     condition: uiGridConstants.filter.STARTS_WITH,
	   *     placeholder: 'starts with...',
	   *     ariaLabel: 'Filter for foo',
	   *     flags: { caseSensitive: false },
	   *     type: uiGridConstants.filter.SELECT,
	   *     selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]
	   *   },
	   *   {
	   *     term: 'baz',
	   *     condition: uiGridConstants.filter.ENDS_WITH,
	   *     placeholder: 'ends with...'
	   *   }
	   * ] </pre>
	   *
	   *
	   */

	  /**
	   * @ngdoc array
	   * @name menuItems
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description used to add menu items to a column.  Refer to the tutorial on this
	   * functionality.  A number of settings are supported:
	   *
	   * - title: controls the title that is displayed in the menu
	   * - icon: the icon shown alongside that title
	   * - action: the method to call when the menu is clicked
	   * - shown: a function to evaluate to determine whether or not to show the item
	   * - active: a function to evaluate to determine whether or not the item is currently selected
	   * - context: context to pass to the action function, available in this.context in your handler
	   * - leaveOpen: if set to true, the menu should stay open after the action, defaults to false
	   * @example
	   * <pre>  $scope.gridOptions.columnDefs = [
	   *   { field: 'field1', menuItems: [
	   *     {
	   *       title: 'Outer Scope Alert',
	   *       icon: 'ui-grid-icon-info-circled',
	   *       action: function($event) {
	   *         this.context.blargh(); // $scope.blargh() would work too, this is just an example
	   *       },
	   *       shown: function() { return true; },
	   *       active: function() { return true; },
	   *       context: $scope
	   *     },
	   *     {
	   *       title: 'Grid ID',
	   *       action: function() {
	   *         alert('Grid ID: ' + this.grid.id);
	   *       }
	   *     }
	   *   ] }]; </pre>
	   *
	   */

	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:GridColumn
	   * @name updateColumnDef
	   * @description Moves settings from the columnDef down onto the column,
	   * and sets properties as appropriate
	   * @param {ColumnDef} colDef the column def to look in for the property value
	   * @param {boolean} isNew whether the column is being newly created, if not
	   * we're updating an existing column, and some items such as the sort shouldn't
	   * be copied down
	   */
	  GridColumn.prototype.updateColumnDef = function(colDef, isNew) {
	    var self = this;

	    self.colDef = colDef;

	    if (colDef.name === undefined) {
	      throw new Error('colDef.name is required for column at index ' + self.grid.options.columnDefs.indexOf(colDef));
	    }

	    self.displayName = (colDef.displayName === undefined) ? gridUtil.readableColumnName(colDef.name) : colDef.displayName;

	    if (!angular.isNumber(self.width) || !self.hasCustomWidth || colDef.allowCustomWidthOverride) {
	      var colDefWidth = colDef.width;
	      var parseErrorMsg = "Cannot parse column width '" + colDefWidth + "' for column named '" + colDef.name + "'";
	      self.hasCustomWidth = false;

	      if (!angular.isString(colDefWidth) && !angular.isNumber(colDefWidth)) {
	        self.width = '*';
	      } else if (angular.isString(colDefWidth)) {
	        // See if it ends with a percent
	        if (gridUtil.endsWith(colDefWidth, '%')) {
	          // If so we should be able to parse the non-percent-sign part to a number
	          var percentStr = colDefWidth.replace(/%/g, '');
	          var percent = parseInt(percentStr, 10);
	          if (isNaN(percent)) {
	            throw new Error(parseErrorMsg);
	          }
	          self.width = colDefWidth;
	        }
	        // And see if it's a number string
	        else if (colDefWidth.match(/^(\d+)$/)) {
	          self.width = parseInt(colDefWidth.match(/^(\d+)$/)[1], 10);
	        }
	        // Otherwise it should be a string of asterisks
	        else if (colDefWidth.match(/^\*+$/)) {
	          self.width = colDefWidth;
	        }
	        // No idea, throw an Error
	        else {
	          throw new Error(parseErrorMsg);
	        }
	      }
	      // Is a number, use it as the width
	      else {
	        self.width = colDefWidth;
	      }
	    }

	    ['minWidth', 'maxWidth'].forEach(function (name) {
	      var minOrMaxWidth = colDef[name];
	      var parseErrorMsg = "Cannot parse column " + name + " '" + minOrMaxWidth + "' for column named '" + colDef.name + "'";

	      if (!angular.isString(minOrMaxWidth) && !angular.isNumber(minOrMaxWidth)) {
	        //Sets default minWidth and maxWidth values
	        self[name] = ((name === 'minWidth') ? 30 : 9000);
	      } else if (angular.isString(minOrMaxWidth)) {
	        if (minOrMaxWidth.match(/^(\d+)$/)) {
	          self[name] = parseInt(minOrMaxWidth.match(/^(\d+)$/)[1], 10);
	        } else {
	          throw new Error(parseErrorMsg);
	        }
	      } else {
	        self[name] = minOrMaxWidth;
	      }
	    });

	    //use field if it is defined; name if it is not
	    self.field = (colDef.field === undefined) ? colDef.name : colDef.field;

	    if ( typeof( self.field ) !== 'string' ){
	      gridUtil.logError( 'Field is not a string, this is likely to break the code, Field is: ' + self.field );
	    }

	    self.name = colDef.name;

	    // Use colDef.displayName as long as it's not undefined, otherwise default to the field name
	    self.displayName = (colDef.displayName === undefined) ? gridUtil.readableColumnName(colDef.name) : colDef.displayName;

	    //self.originalIndex = index;

	    self.aggregationType = angular.isDefined(colDef.aggregationType) ? colDef.aggregationType : null;
	    self.footerCellTemplate = angular.isDefined(colDef.footerCellTemplate) ? colDef.footerCellTemplate : null;

	    /**
	     * @ngdoc property
	     * @name cellTooltip
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description Whether or not to show a tooltip when a user hovers over the cell.
	     * If set to false, no tooltip.  If true, the cell value is shown in the tooltip (useful
	     * if you have long values in your cells), if a function then that function is called
	     * passing in the row and the col `cellTooltip( row, col )`, and the return value is shown in the tooltip,
	     * if it is a static string then displays that static string.
	     *
	     * Defaults to false
	     *
	     */
	    if ( typeof(colDef.cellTooltip) === 'undefined' || colDef.cellTooltip === false ) {
	      self.cellTooltip = false;
	    } else if ( colDef.cellTooltip === true ){
	      self.cellTooltip = function(row, col) {
	        return self.grid.getCellValue( row, col );
	      };
	    } else if (typeof(colDef.cellTooltip) === 'function' ){
	      self.cellTooltip = colDef.cellTooltip;
	    } else {
	      self.cellTooltip = function ( row, col ){
	        return col.colDef.cellTooltip;
	      };
	    }

	    /**
	     * @ngdoc property
	     * @name headerTooltip
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description Whether or not to show a tooltip when a user hovers over the header cell.
	     * If set to false, no tooltip.  If true, the displayName is shown in the tooltip (useful
	     * if you have long values in your headers), if a function then that function is called
	     * passing in the row and the col `headerTooltip( col )`, and the return value is shown in the tooltip,
	     * if a static string then shows that static string.
	     *
	     * Defaults to false
	     *
	     */
	    if ( typeof(colDef.headerTooltip) === 'undefined' || colDef.headerTooltip === false ) {
	      self.headerTooltip = false;
	    } else if ( colDef.headerTooltip === true ){
	      self.headerTooltip = function(col) {
	        return col.displayName;
	      };
	    } else if (typeof(colDef.headerTooltip) === 'function' ){
	      self.headerTooltip = colDef.headerTooltip;
	    } else {
	      self.headerTooltip = function ( col ) {
	        return col.colDef.headerTooltip;
	      };
	    }


	    /**
	     * @ngdoc property
	     * @name footerCellClass
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description footerCellClass can be a string specifying the class to append to a cell
	     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
	     *
	     */
	    self.footerCellClass = colDef.footerCellClass;

	    /**
	     * @ngdoc property
	     * @name cellClass
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description cellClass can be a string specifying the class to append to a cell
	     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
	     *
	     */
	    self.cellClass = colDef.cellClass;

	    /**
	     * @ngdoc property
	     * @name headerCellClass
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description headerCellClass can be a string specifying the class to append to a cell
	     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
	     *
	     */
	    self.headerCellClass = colDef.headerCellClass;

	    /**
	     * @ngdoc property
	     * @name cellFilter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description cellFilter is a filter to apply to the content of each cell
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].cellFilter = 'date'
	     *
	     */
	    self.cellFilter = colDef.cellFilter ? colDef.cellFilter : "";

	    /**
	     * @ngdoc boolean
	     * @name sortCellFiltered
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) False by default. When `true` uiGrid will apply the cellFilter before
	     * sorting the data. Note that when using this option uiGrid will assume that the displayed value is
	     * a string, and use the {@link ui.grid.class:RowSorter#sortAlpha sortAlpha} `sortFn`. It is possible
	     * to return a non-string value from an angularjs filter, in which case you should define a {@link ui.grid.class:GridOptions.columnDef#sortingAlgorithm sortingAlgorithm}
	     * for the column which hanldes the returned type. You may specify one of the `sortingAlgorithms`
	     * found in the {@link ui.grid.RowSorter rowSorter} service.
	     */
	    self.sortCellFiltered = colDef.sortCellFiltered ? true : false;

	    /**
	     * @ngdoc boolean
	     * @name filterCellFiltered
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) False by default. When `true` uiGrid will apply the cellFilter before
	     * applying "search" `filters`.
	     */
	    self.filterCellFiltered = colDef.filterCellFiltered ? true : false;

	    /**
	     * @ngdoc property
	     * @name headerCellFilter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description headerCellFilter is a filter to apply to the content of the column header
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].headerCellFilter = 'translate'
	     *
	     */
	    self.headerCellFilter = colDef.headerCellFilter ? colDef.headerCellFilter : "";

	    /**
	     * @ngdoc property
	     * @name footerCellFilter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description footerCellFilter is a filter to apply to the content of the column footer
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].footerCellFilter = 'date'
	     *
	     */
	    self.footerCellFilter = colDef.footerCellFilter ? colDef.footerCellFilter : "";

	    self.visible = gridUtil.isNullOrUndefined(colDef.visible) || colDef.visible;

	    self.headerClass = colDef.headerClass;
	    //self.cursor = self.sortable ? 'pointer' : 'default';

	    // Turn on sorting by default
	    self.enableSorting = typeof(colDef.enableSorting) !== 'undefined' ? colDef.enableSorting : true;
	    self.sortingAlgorithm = colDef.sortingAlgorithm;

	    /**
	     * @ngdoc property
	     * @name sortDirectionCycle
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) An array of sort directions, specifying the order that they
	     * should cycle through as the user repeatedly clicks on the column heading.
	     * The default is `[null, uiGridConstants.ASC, uiGridConstants.DESC]`. Null
	     * refers to the unsorted state. This does not affect the initial sort
	     * direction; use the {@link ui.grid.class:GridOptions.columnDef#sort sort}
	     * property for that. If
	     * {@link ui.grid.class:GridOptions.columnDef#suppressRemoveSort suppressRemoveSort}
	     * is also set, the unsorted state will be skipped even if it is listed here.
	     * Each direction may not appear in the list more than once (e.g. `[ASC,
	     * DESC, DESC]` is not allowed), and the list may not be empty.
	     */
	    self.sortDirectionCycle = typeof(colDef.sortDirectionCycle) !== 'undefined' ?
	      colDef.sortDirectionCycle :
	      [null, uiGridConstants.ASC, uiGridConstants.DESC];

	    /**
	     * @ngdoc boolean
	     * @name suppressRemoveSort
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description (optional) False by default. When enabled, this setting hides the removeSort option
	     * in the menu, and prevents users from manually removing the sort
	     */
	    if ( typeof(self.suppressRemoveSort) === 'undefined'){
	      self.suppressRemoveSort = typeof(colDef.suppressRemoveSort) !== 'undefined' ? colDef.suppressRemoveSort : false;
	    }

	    /**
	     * @ngdoc property
	     * @name enableFiltering
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description turn off filtering for an individual column, where
	     * you've turned on filtering for the overall grid
	     * @example
	     * <pre>
	     *   gridOptions.columnDefs[0].enableFiltering = false;
	     *
	     */
	    // Turn on filtering by default (it's disabled by default at the Grid level)
	    self.enableFiltering = typeof(colDef.enableFiltering) !== 'undefined' ? colDef.enableFiltering : true;

	    // self.menuItems = colDef.menuItems;
	    self.setPropertyOrDefault(colDef, 'menuItems', []);

	    // Use the column definition sort if we were passed it, but only if this is a newly added column
	    if ( isNew ){
	      self.setPropertyOrDefault(colDef, 'sort');
	    }

	    // Set up default filters array for when one is not provided.
	    //   In other words, this (in column def):
	    //
	    //       filter: { term: 'something', flags: {}, condition: [CONDITION] }
	    //
	    //   is just shorthand for this:
	    //
	    //       filters: [{ term: 'something', flags: {}, condition: [CONDITION] }]
	    //
	    var defaultFilters = [];
	    if (colDef.filter) {
	      defaultFilters.push(colDef.filter);
	    }
	    else if ( colDef.filters ){
	      defaultFilters = colDef.filters;
	    } else {
	      // Add an empty filter definition object, which will
	      // translate to a guessed condition and no pre-populated
	      // value for the filter <input>.
	      defaultFilters.push({});
	    }

	    /**
	     * @ngdoc property
	     * @name filter
	     * @propertyOf ui.grid.class:GridOptions.columnDef
	     * @description Specify a single filter field on this column.
	     *
	     * A filter consists of a condition, a term, and a placeholder:
	     *
	     * - condition defines how rows are chosen as matching the filter term. This can be set to
	     * one of the constants in uiGridConstants.filter, or you can supply a custom filter function
	     * that gets passed the following arguments: [searchTerm, cellValue, row, column].
	     * - term: If set, the filter field will be pre-populated
	     * with this value.
	     * - placeholder: String that will be set to the `<input>.placeholder` attribute.
	     * - ariaLabel: String that will be set to the `<input>.ariaLabel` attribute. This is what is read as a label to screen reader users.
	     * - noTerm: set this to true if you have defined a custom function in condition, and
	     * your custom function doesn't require a term (so it can run even when the term is null)
	     * - flags: only flag currently available is `caseSensitive`, set to false if you don't want
	     * case sensitive matching
	     * - type: defaults to uiGridConstants.filter.INPUT, which gives a text box.  If set to uiGridConstants.filter.SELECT
	     * then a select box will be shown with options selectOptions
	     * - selectOptions: options in the format `[ { value: 1, label: 'male' }]`.  No i18n filter is provided, you need
	     * to perform the i18n on the values before you provide them
	     * - disableCancelFilterButton: defaults to false. If set to true then the 'x' button that cancels/clears the filter
	     * will not be shown.
	     * @example
	     * <pre>$scope.gridOptions.columnDefs = [
	     *   {
	     *     field: 'field1',
	     *     filter: {
	     *       term: 'xx',
	     *       condition: uiGridConstants.filter.STARTS_WITH,
	     *       placeholder: 'starts with...',
	     *       ariaLabel: 'Starts with filter for field1',
	     *       flags: { caseSensitive: false },
	     *       type: uiGridConstants.filter.SELECT,
	     *       selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ],
	     *       disableCancelFilterButton: true
	     *     }
	     *   }
	     * ]; </pre>
	     *
	     */

	    /*


	    /*

	      self.filters = [
	        {
	          term: 'search term'
	          condition: uiGridConstants.filter.CONTAINS,
	          placeholder: 'my placeholder',
	          ariaLabel: 'Starts with filter for field1',
	          flags: {
	            caseSensitive: true
	          }
	        }
	      ]

	    */

	    // Only set filter if this is a newly added column, if we're updating an existing
	    // column then we don't want to put the default filter back if the user may have already
	    // removed it.
	    // However, we do want to keep the settings if they change, just not the term
	    if ( isNew ) {
	      self.setPropertyOrDefault(colDef, 'filter');
	      self.setPropertyOrDefault(colDef, 'filters', defaultFilters);
	    } else if ( self.filters.length === defaultFilters.length ) {
	      self.filters.forEach( function( filter, index ){
	        if (typeof(defaultFilters[index].placeholder) !== 'undefined') {
	          filter.placeholder = defaultFilters[index].placeholder;
	        }
	        if (typeof(defaultFilters[index].ariaLabel) !== 'undefined') {
	          filter.ariaLabel = defaultFilters[index].ariaLabel;
	        }
	        if (typeof(defaultFilters[index].flags) !== 'undefined') {
	          filter.flags = defaultFilters[index].flags;
	        }
	        if (typeof(defaultFilters[index].type) !== 'undefined') {
	          filter.type = defaultFilters[index].type;
	        }
	        if (typeof(defaultFilters[index].selectOptions) !== 'undefined') {
	          filter.selectOptions = defaultFilters[index].selectOptions;
	        }
	      });
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name unsort
	   * @methodOf ui.grid.class:GridColumn
	   * @description Removes column from the grid sorting
	   */
	  GridColumn.prototype.unsort = function () {
	    this.sort = {};
	    this.grid.api.core.raise.sortChanged( this.grid, this.grid.getColumnSorting() );
	  };


	  /**
	   * @ngdoc function
	   * @name getColClass
	   * @methodOf ui.grid.class:GridColumn
	   * @description Returns the class name for the column
	   * @param {bool} prefixDot  if true, will return .className instead of className
	   */
	  GridColumn.prototype.getColClass = function (prefixDot) {
	    var cls = uiGridConstants.COL_CLASS_PREFIX + this.uid;

	    return prefixDot ? '.' + cls : cls;
	  };

	    /**
	     * @ngdoc function
	     * @name isPinnedLeft
	     * @methodOf ui.grid.class:GridColumn
	     * @description Returns true if column is in the left render container
	     */
	    GridColumn.prototype.isPinnedLeft = function () {
	      return this.renderContainer === 'left';
	    };

	    /**
	     * @ngdoc function
	     * @name isPinnedRight
	     * @methodOf ui.grid.class:GridColumn
	     * @description Returns true if column is in the right render container
	     */
	    GridColumn.prototype.isPinnedRight = function () {
	      return this.renderContainer === 'right';
	    };


	    /**
	   * @ngdoc function
	   * @name getColClassDefinition
	   * @methodOf ui.grid.class:GridColumn
	   * @description Returns the class definition for th column
	   */
	  GridColumn.prototype.getColClassDefinition = function () {
	    return ' .grid' + this.grid.id + ' ' + this.getColClass(true) + ' { min-width: ' + this.drawnWidth + 'px; max-width: ' + this.drawnWidth + 'px; }';
	  };

	  /**
	   * @ngdoc function
	   * @name getRenderContainer
	   * @methodOf ui.grid.class:GridColumn
	   * @description Returns the render container object that this column belongs to.
	   *
	   * Columns will be default be in the `body` render container if they aren't allocated to one specifically.
	   */
	  GridColumn.prototype.getRenderContainer = function getRenderContainer() {
	    var self = this;

	    var containerId = self.renderContainer;

	    if (containerId === null || containerId === '' || containerId === undefined) {
	      containerId = 'body';
	    }

	    return self.grid.renderContainers[containerId];
	  };

	  /**
	   * @ngdoc function
	   * @name showColumn
	   * @methodOf ui.grid.class:GridColumn
	   * @description Makes the column visible by setting colDef.visible = true
	   */
	  GridColumn.prototype.showColumn = function() {
	      this.colDef.visible = true;
	  };


	  /**
	   * @ngdoc property
	   * @name aggregationHideLabel
	   * @propertyOf ui.grid.class:GridOptions.columnDef
	   * @description defaults to false, if set to true hides the label text
	   * in the aggregation footer, so only the value is displayed.
	   *
	   */
	  /**
	   * @ngdoc function
	   * @name getAggregationText
	   * @methodOf ui.grid.class:GridColumn
	   * @description Gets the aggregation label from colDef.aggregationLabel if
	   * specified or by using i18n, including deciding whether or not to display
	   * based on colDef.aggregationHideLabel.
	   *
	   * @param {string} label the i18n lookup value to use for the column label
	   *
	   */
	  GridColumn.prototype.getAggregationText = function () {
	    var self = this;
	    if ( self.colDef.aggregationHideLabel ){
	      return '';
	    }
	    else if ( self.colDef.aggregationLabel ) {
	      return self.colDef.aggregationLabel;
	    }
	    else {
	      switch ( self.colDef.aggregationType ){
	        case uiGridConstants.aggregationTypes.count:
	          return i18nService.getSafeText('aggregation.count');
	        case uiGridConstants.aggregationTypes.sum:
	          return i18nService.getSafeText('aggregation.sum');
	        case uiGridConstants.aggregationTypes.avg:
	          return i18nService.getSafeText('aggregation.avg');
	        case uiGridConstants.aggregationTypes.min:
	          return i18nService.getSafeText('aggregation.min');
	        case uiGridConstants.aggregationTypes.max:
	          return i18nService.getSafeText('aggregation.max');
	        default:
	          return '';
	      }
	    }
	  };

	  GridColumn.prototype.getCellTemplate = function () {
	    var self = this;

	    return self.cellTemplatePromise;
	  };

	  GridColumn.prototype.getCompiledElementFn = function () {
	    var self = this;

	    return self.compiledElementFnDefer.promise;
	  };

	  return GridColumn;
	}]);

	})();

	  (function(){

	angular.module('ui.grid')
	.factory('GridOptions', ['gridUtil','uiGridConstants', function(gridUtil,uiGridConstants) {

	  /**
	   * @ngdoc function
	   * @name ui.grid.class:GridOptions
	   * @description Default GridOptions class.  GridOptions are defined by the application developer and overlaid
	   * over this object.  Setting gridOptions within your controller is the most common method for an application
	   * developer to configure the behaviour of their ui-grid
	   *
	   * @example To define your gridOptions within your controller:
	   * <pre>$scope.gridOptions = {
	   *   data: $scope.myData,
	   *   columnDefs: [
	   *     { name: 'field1', displayName: 'pretty display name' },
	   *     { name: 'field2', visible: false }
	   *  ]
	   * };</pre>
	   *
	   * You can then use this within your html template, when you define your grid:
	   * <pre>&lt;div ui-grid="gridOptions"&gt;&lt;/div&gt;</pre>
	   *
	   * To provide default options for all of the grids within your application, use an angular
	   * decorator to modify the GridOptions factory.
	   * <pre>
	   * app.config(function($provide){
	   *   $provide.decorator('GridOptions',function($delegate){
	   *     var gridOptions;
	   *     gridOptions = angular.copy($delegate);
	   *     gridOptions.initialize = function(options) {
	   *       var initOptions;
	   *       initOptions = $delegate.initialize(options);
	   *       initOptions.enableColumnMenus = false;
	   *       return initOptions;
	   *     };
	   *     return gridOptions;
	   *   });
	   * });
	   * </pre>
	   */
	  return {
	    initialize: function( baseOptions ){
	      /**
	       * @ngdoc function
	       * @name onRegisterApi
	       * @propertyOf ui.grid.class:GridOptions
	       * @description A callback that returns the gridApi once the grid is instantiated, which is
	       * then used to interact with the grid programatically.
	       *
	       * Note that the gridApi.core.renderingComplete event is identical to this
	       * callback, but has the advantage that it can be called from multiple places
	       * if needed
	       *
	       * @example
	       * <pre>
	       *   $scope.gridOptions.onRegisterApi = function ( gridApi ) {
	       *     $scope.gridApi = gridApi;
	       *     $scope.gridApi.selection.selectAllRows( $scope.gridApi.grid );
	       *   };
	       * </pre>
	       *
	       */
	      baseOptions.onRegisterApi = baseOptions.onRegisterApi || angular.noop();

	      /**
	       * @ngdoc object
	       * @name data
	       * @propertyOf ui.grid.class:GridOptions
	       * @description (mandatory) Array of data to be rendered into the grid, providing the data source or data binding for
	       * the grid.
	       *
	       * Most commonly the data is an array of objects, where each object has a number of attributes.
	       * Each attribute automatically becomes a column in your grid.  This array could, for example, be sourced from
	       * an angularJS $resource query request.  The array can also contain complex objects, refer the binding tutorial
	       * for examples of that.
	       *
	       * The most flexible usage is to set your data on $scope:
	       *
	       * `$scope.data = data;`
	       *
	       * And then direct the grid to resolve whatever is in $scope.data:
	       *
	       * `$scope.gridOptions.data = 'data';`
	       *
	       * This is the most flexible approach as it allows you to replace $scope.data whenever you feel like it without
	       * getting pointer issues.
	       *
	       * Alternatively you can directly set the data array:
	       *
	       * `$scope.gridOptions.data = [ ];`
	       * or
	       *
	       * `$http.get('/data/100.json')
	       * .success(function(data) {
	       *   $scope.myData = data;
	       *   $scope.gridOptions.data = $scope.myData;
	       *  });`
	       *
	       * Where you do this, you need to take care in updating the data - you can't just update `$scope.myData` to some other
	       * array, you need to update $scope.gridOptions.data to point to that new array as well.
	       *
	       */
	      baseOptions.data = baseOptions.data || [];

	      /**
	       * @ngdoc array
	       * @name columnDefs
	       * @propertyOf  ui.grid.class:GridOptions
	       * @description Array of columnDef objects.  Only required property is name.
	       * The individual options available in columnDefs are documented in the
	       * {@link ui.grid.class:GridOptions.columnDef columnDef} section
	       * </br>_field property can be used in place of name for backwards compatibility with 2.x_
	       *  @example
	       *
	       * <pre>var columnDefs = [{name:'field1'}, {name:'field2'}];</pre>
	       *
	       */
	      baseOptions.columnDefs = baseOptions.columnDefs || [];

	      /**
	       * @ngdoc object
	       * @name ui.grid.class:GridOptions.columnDef
	       * @description Definition / configuration of an individual column, which would typically be
	       * one of many column definitions within the gridOptions.columnDefs array
	       * @example
	       * <pre>{name:'field1', field: 'field1', filter: { term: 'xxx' }}</pre>
	       *
	       */


	      /**
	       * @ngdoc array
	       * @name excludeProperties
	       * @propertyOf  ui.grid.class:GridOptions
	       * @description Array of property names in data to ignore when auto-generating column names.  Provides the
	       * inverse of columnDefs - columnDefs is a list of columns to include, excludeProperties is a list of columns
	       * to exclude.
	       *
	       * If columnDefs is defined, this will be ignored.
	       *
	       * Defaults to ['$$hashKey']
	       */

	      baseOptions.excludeProperties = baseOptions.excludeProperties || ['$$hashKey'];

	      /**
	       * @ngdoc boolean
	       * @name enableRowHashing
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, this setting allows uiGrid to add
	       * `$$hashKey`-type properties (similar to Angular) to elements in the `data` array. This allows
	       * the grid to maintain state while vastly speeding up the process of altering `data` by adding/moving/removing rows.
	       *
	       * Note that this DOES add properties to your data that you may not want, but they are stripped out when using `angular.toJson()`. IF
	       * you do not want this at all you can disable this setting but you will take a performance hit if you are using large numbers of rows
	       * and are altering the data set often.
	       */
	      baseOptions.enableRowHashing = baseOptions.enableRowHashing !== false;

	      /**
	       * @ngdoc function
	       * @name rowIdentity
	       * @methodOf ui.grid.class:GridOptions
	       * @description This function is used to get and, if necessary, set the value uniquely identifying this row (i.e. if an identity is not present it will set one).
	       *
	       * By default it returns the `$$hashKey` property if it exists. If it doesn't it uses gridUtil.nextUid() to generate one
	       */
	      baseOptions.rowIdentity = baseOptions.rowIdentity || function rowIdentity(row) {
	        return gridUtil.hashKey(row);
	      };

	      /**
	       * @ngdoc function
	       * @name getRowIdentity
	       * @methodOf ui.grid.class:GridOptions
	       * @description This function returns the identity value uniquely identifying this row, if one is not present it does not set it.
	       *
	       * By default it returns the `$$hashKey` property but can be overridden to use any property or set of properties you want.
	       */
	      baseOptions.getRowIdentity = baseOptions.getRowIdentity || function getRowIdentity(row) {
	        return row.$$hashKey;
	      };

	      /**
	       * @ngdoc property
	       * @name flatEntityAccess
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Set to true if your columns are all related directly to fields in a flat object structure - i.e.
	       * each of your columns associate directly with a property on each of the entities in your data array.
	       *
	       * In that situation we can avoid all the logic associated with complex binding to functions or to properties of sub-objects,
	       * which can provide a significant speed improvement with large data sets when filtering or sorting.
	       *
	       * By default false
	       */
	      baseOptions.flatEntityAccess = baseOptions.flatEntityAccess === true;

	      /**
	       * @ngdoc property
	       * @name showHeader
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When set to false, this setting will replace the
	       * standard header template with '<div></div>', resulting in no header being shown.
	       */
	      baseOptions.showHeader = typeof(baseOptions.showHeader) !== "undefined" ? baseOptions.showHeader : true;

	      /* (NOTE): Don't show this in the docs. We only use it internally
	       * @ngdoc property
	       * @name headerRowHeight
	       * @propertyOf ui.grid.class:GridOptions
	       * @description The height of the header in pixels, defaults to 30
	       *
	       */
	      if (!baseOptions.showHeader) {
	        baseOptions.headerRowHeight = 0;
	      }
	      else {
	        baseOptions.headerRowHeight = typeof(baseOptions.headerRowHeight) !== "undefined" ? baseOptions.headerRowHeight : 30;
	      }

	      /**
	       * @ngdoc property
	       * @name rowHeight
	       * @propertyOf ui.grid.class:GridOptions
	       * @description The height of the row in pixels, defaults to 30
	       *
	       */
	      baseOptions.rowHeight = baseOptions.rowHeight || 30;

	      /**
	       * @ngdoc integer
	       * @name minRowsToShow
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Minimum number of rows to show when the grid doesn't have a defined height. Defaults to "10".
	       */
	      baseOptions.minRowsToShow = typeof(baseOptions.minRowsToShow) !== "undefined" ? baseOptions.minRowsToShow : 10;

	      /**
	       * @ngdoc property
	       * @name showGridFooter
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Whether or not to show the footer, defaults to false
	       * The footer display Total Rows and Visible Rows (filtered rows)
	       */
	      baseOptions.showGridFooter = baseOptions.showGridFooter === true;

	      /**
	       * @ngdoc property
	       * @name showColumnFooter
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Whether or not to show the column footer, defaults to false
	       * The column footer displays column aggregates
	       */
	      baseOptions.showColumnFooter = baseOptions.showColumnFooter === true;

	      /**
	       * @ngdoc property
	       * @name columnFooterHeight
	       * @propertyOf ui.grid.class:GridOptions
	       * @description The height of the footer rows (column footer and grid footer) in pixels
	       *
	       */
	      baseOptions.columnFooterHeight = typeof(baseOptions.columnFooterHeight) !== "undefined" ? baseOptions.columnFooterHeight : 30;
	      baseOptions.gridFooterHeight = typeof(baseOptions.gridFooterHeight) !== "undefined" ? baseOptions.gridFooterHeight : 30;

	      baseOptions.columnWidth = typeof(baseOptions.columnWidth) !== "undefined" ? baseOptions.columnWidth : 50;

	      /**
	       * @ngdoc property
	       * @name maxVisibleColumnCount
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Defaults to 200
	       *
	       */
	      baseOptions.maxVisibleColumnCount = typeof(baseOptions.maxVisibleColumnCount) !== "undefined" ? baseOptions.maxVisibleColumnCount : 200;

	      /**
	       * @ngdoc property
	       * @name virtualizationThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Turn virtualization on when number of data elements goes over this number, defaults to 20
	       */
	      baseOptions.virtualizationThreshold = typeof(baseOptions.virtualizationThreshold) !== "undefined" ? baseOptions.virtualizationThreshold : 20;

	      /**
	       * @ngdoc property
	       * @name columnVirtualizationThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Turn virtualization on when number of columns goes over this number, defaults to 10
	       */
	      baseOptions.columnVirtualizationThreshold = typeof(baseOptions.columnVirtualizationThreshold) !== "undefined" ? baseOptions.columnVirtualizationThreshold : 10;

	      /**
	       * @ngdoc property
	       * @name excessRows
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Extra rows to to render outside of the viewport, which helps with smoothness of scrolling.
	       * Defaults to 4
	       */
	      baseOptions.excessRows = typeof(baseOptions.excessRows) !== "undefined" ? baseOptions.excessRows : 4;
	      /**
	       * @ngdoc property
	       * @name scrollThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Defaults to 4
	       */
	      baseOptions.scrollThreshold = typeof(baseOptions.scrollThreshold) !== "undefined" ? baseOptions.scrollThreshold : 4;

	      /**
	       * @ngdoc property
	       * @name excessColumns
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Extra columns to to render outside of the viewport, which helps with smoothness of scrolling.
	       * Defaults to 4
	       */
	      baseOptions.excessColumns = typeof(baseOptions.excessColumns) !== "undefined" ? baseOptions.excessColumns : 4;
	      /**
	       * @ngdoc property
	       * @name horizontalScrollThreshold
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Defaults to 4
	       */
	      baseOptions.horizontalScrollThreshold = typeof(baseOptions.horizontalScrollThreshold) !== "undefined" ? baseOptions.horizontalScrollThreshold : 2;


	      /**
	       * @ngdoc property
	       * @name aggregationCalcThrottle
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Default time in milliseconds to throttle aggregation calcuations, defaults to 500ms
	       */
	      baseOptions.aggregationCalcThrottle = typeof(baseOptions.aggregationCalcThrottle) !== "undefined" ? baseOptions.aggregationCalcThrottle : 500;

	      /**
	       * @ngdoc property
	       * @name wheelScrollThrottle
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Default time in milliseconds to throttle scroll events to, defaults to 70ms
	       */
	      baseOptions.wheelScrollThrottle = typeof(baseOptions.wheelScrollThrottle) !== "undefined" ? baseOptions.wheelScrollThrottle : 70;


	      /**
	       * @ngdoc property
	       * @name scrollDebounce
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Default time in milliseconds to debounce scroll events, defaults to 300ms
	       */
	      baseOptions.scrollDebounce = typeof(baseOptions.scrollDebounce) !== "undefined" ? baseOptions.scrollDebounce : 300;

	      /**
	       * @ngdoc boolean
	       * @name enableSorting
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, this setting adds sort
	       * widgets to the column headers, allowing sorting of the data for the entire grid.
	       * Sorting can then be disabled on individual columns using the columnDefs.
	       */
	      baseOptions.enableSorting = baseOptions.enableSorting !== false;

	      /**
	       * @ngdoc boolean
	       * @name enableFiltering
	       * @propertyOf ui.grid.class:GridOptions
	       * @description False by default. When enabled, this setting adds filter
	       * boxes to each column header, allowing filtering within the column for the entire grid.
	       * Filtering can then be disabled on individual columns using the columnDefs.
	       */
	      baseOptions.enableFiltering = baseOptions.enableFiltering === true;

	      /**
	       * @ngdoc boolean
	       * @name enableColumnMenus
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, this setting displays a column
	       * menu within each column.
	       */
	      baseOptions.enableColumnMenus = baseOptions.enableColumnMenus !== false;

	      /**
	       * @ngdoc boolean
	       * @name enableVerticalScrollbar
	       * @propertyOf ui.grid.class:GridOptions
	       * @description uiGridConstants.scrollbars.ALWAYS by default. This settings controls the vertical scrollbar for the grid.
	       * Supported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER
	       */
	      baseOptions.enableVerticalScrollbar = typeof(baseOptions.enableVerticalScrollbar) !== "undefined" ? baseOptions.enableVerticalScrollbar : uiGridConstants.scrollbars.ALWAYS;

	      /**
	       * @ngdoc boolean
	       * @name enableHorizontalScrollbar
	       * @propertyOf ui.grid.class:GridOptions
	       * @description uiGridConstants.scrollbars.ALWAYS by default. This settings controls the horizontal scrollbar for the grid.
	       * Supported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER
	       */
	      baseOptions.enableHorizontalScrollbar = typeof(baseOptions.enableHorizontalScrollbar) !== "undefined" ? baseOptions.enableHorizontalScrollbar : uiGridConstants.scrollbars.ALWAYS;

	      /**
	       * @ngdoc boolean
	       * @name enableMinHeightCheck
	       * @propertyOf ui.grid.class:GridOptions
	       * @description True by default. When enabled, a newly initialized grid will check to see if it is tall enough to display
	       * at least one row of data.  If the grid is not tall enough, it will resize the DOM element to display minRowsToShow number
	       * of rows.
	       */
	       baseOptions.enableMinHeightCheck = baseOptions.enableMinHeightCheck !== false;

	      /**
	       * @ngdoc boolean
	       * @name minimumColumnSize
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Columns can't be smaller than this, defaults to 10 pixels
	       */
	      baseOptions.minimumColumnSize = typeof(baseOptions.minimumColumnSize) !== "undefined" ? baseOptions.minimumColumnSize : 10;

	      /**
	       * @ngdoc function
	       * @name rowEquality
	       * @methodOf ui.grid.class:GridOptions
	       * @description By default, rows are compared using object equality.  This option can be overridden
	       * to compare on any data item property or function
	       * @param {object} entityA First Data Item to compare
	       * @param {object} entityB Second Data Item to compare
	       */
	      baseOptions.rowEquality = baseOptions.rowEquality || function(entityA, entityB) {
	        return entityA === entityB;
	      };

	      /**
	       * @ngdoc string
	       * @name headerTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description Null by default. When provided, this setting uses a custom header
	       * template, rather than the default template. Can be set to either the name of a template file:
	       * <pre>  $scope.gridOptions.headerTemplate = 'header_template.html';</pre>
	       * inline html
	       * <pre>  $scope.gridOptions.headerTemplate = '<div class="ui-grid-top-panel" style="text-align: center">I am a Custom Grid Header</div>'</pre>
	       * or the id of a precompiled template (TBD how to use this).
	       * </br>Refer to the custom header tutorial for more information.
	       * If you want no header at all, you can set to an empty div:
	       * <pre>  $scope.gridOptions.headerTemplate = '<div></div>';</pre>
	       *
	       * If you want to only have a static header, then you can set to static content.  If
	       * you want to tailor the existing column headers, then you should look at the
	       * current 'ui-grid-header.html' template in github as your starting point.
	       *
	       */
	      baseOptions.headerTemplate = baseOptions.headerTemplate || null;

	      /**
	       * @ngdoc string
	       * @name footerTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description (optional) ui-grid/ui-grid-footer by default.  This footer shows the per-column
	       * aggregation totals.
	       * When provided, this setting uses a custom footer template. Can be set to either the name of a template file 'footer_template.html', inline html
	       * <pre>'<div class="ui-grid-bottom-panel" style="text-align: center">I am a Custom Grid Footer</div>'</pre>, or the id
	       * of a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.
	       */
	      baseOptions.footerTemplate = baseOptions.footerTemplate || 'ui-grid/ui-grid-footer';

	      /**
	       * @ngdoc string
	       * @name gridFooterTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description (optional) ui-grid/ui-grid-grid-footer by default. This template by default shows the
	       * total items at the bottom of the grid, and the selected items if selection is enabled.
	       */
	      baseOptions.gridFooterTemplate = baseOptions.gridFooterTemplate || 'ui-grid/ui-grid-grid-footer';

	      /**
	       * @ngdoc string
	       * @name rowTemplate
	       * @propertyOf ui.grid.class:GridOptions
	       * @description 'ui-grid/ui-grid-row' by default. When provided, this setting uses a
	       * custom row template.  Can be set to either the name of a template file:
	       * <pre> $scope.gridOptions.rowTemplate = 'row_template.html';</pre>
	       * inline html
	       * <pre>  $scope.gridOptions.rowTemplate = '<div style="background-color: aquamarine" ng-click="grid.appScope.fnOne(row)" ng-repeat="col in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ui-grid-cell></div>';</pre>
	       * or the id of a precompiled template (TBD how to use this) can be provided.
	       * </br>Refer to the custom row template tutorial for more information.
	       */
	      baseOptions.rowTemplate = baseOptions.rowTemplate || 'ui-grid/ui-grid-row';

	      /**
	       * @ngdoc object
	       * @name appScopeProvider
	       * @propertyOf ui.grid.class:GridOptions
	       * @description by default, the parent scope of the ui-grid element will be assigned to grid.appScope
	       * this property allows you to assign any reference you want to grid.appScope
	       */
	      baseOptions.appScopeProvider = baseOptions.appScopeProvider || null;

	      return baseOptions;
	    }
	  };


	}]);

	})();

	(function(){

	angular.module('ui.grid')

	  /**
	   * @ngdoc function
	   * @name ui.grid.class:GridRenderContainer
	   * @description The grid has render containers, allowing the ability to have pinned columns.  If the grid
	   * is right-to-left then there may be a right render container, if left-to-right then there may
	   * be a left render container.  There is always a body render container.
	   * @param {string} name The name of the render container ('body', 'left', or 'right')
	   * @param {Grid} grid the grid the render container is in
	   * @param {object} options the render container options
	   */
	.factory('GridRenderContainer', ['gridUtil', 'uiGridConstants', function(gridUtil, uiGridConstants) {
	  function GridRenderContainer(name, grid, options) {
	    var self = this;

	    // if (gridUtil.type(grid) !== 'Grid') {
	    //   throw new Error('Grid argument is not a Grid object');
	    // }

	    self.name = name;

	    self.grid = grid;

	    // self.rowCache = [];
	    // self.columnCache = [];

	    self.visibleRowCache = [];
	    self.visibleColumnCache = [];

	    self.renderedRows = [];
	    self.renderedColumns = [];

	    self.prevScrollTop = 0;
	    self.prevScrolltopPercentage = 0;
	    self.prevRowScrollIndex = 0;

	    self.prevScrollLeft = 0;
	    self.prevScrollleftPercentage = 0;
	    self.prevColumnScrollIndex = 0;

	    self.columnStyles = "";

	    self.viewportAdjusters = [];

	    /**
	     *  @ngdoc boolean
	     *  @name hasHScrollbar
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description flag to signal that container has a horizontal scrollbar
	     */
	    self.hasHScrollbar = false;

	    /**
	     *  @ngdoc boolean
	     *  @name hasVScrollbar
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description flag to signal that container has a vertical scrollbar
	     */
	    self.hasVScrollbar = false;

	    /**
	     *  @ngdoc boolean
	     *  @name canvasHeightShouldUpdate
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description flag to signal that container should recalculate the canvas size
	     */
	    self.canvasHeightShouldUpdate = true;

	    /**
	     *  @ngdoc boolean
	     *  @name canvasHeight
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description last calculated canvas height value
	     */
	    self.$$canvasHeight = 0;

	    if (options && angular.isObject(options)) {
	      angular.extend(self, options);
	    }

	    grid.registerStyleComputation({
	      priority: 5,
	      func: function () {
	        self.updateColumnWidths();
	        return self.columnStyles;
	      }
	    });
	  }


	  GridRenderContainer.prototype.reset = function reset() {
	    // this.rowCache.length = 0;
	    // this.columnCache.length = 0;

	    this.visibleColumnCache.length = 0;
	    this.visibleRowCache.length = 0;

	    this.renderedRows.length = 0;
	    this.renderedColumns.length = 0;
	  };

	  // TODO(c0bra): calculate size?? Should this be in a stackable directive?


	  GridRenderContainer.prototype.containsColumn = function (col) {
	     return this.visibleColumnCache.indexOf(col) !== -1;
	  };

	  GridRenderContainer.prototype.minRowsToRender = function minRowsToRender() {
	    var self = this;
	    var minRows = 0;
	    var rowAddedHeight = 0;
	    var viewPortHeight = self.getViewportHeight();
	    for (var i = self.visibleRowCache.length - 1; rowAddedHeight < viewPortHeight && i >= 0; i--) {
	      rowAddedHeight += self.visibleRowCache[i].height;
	      minRows++;
	    }
	    return minRows;
	  };

	  GridRenderContainer.prototype.minColumnsToRender = function minColumnsToRender() {
	    var self = this;
	    var viewportWidth = this.getViewportWidth();

	    var min = 0;
	    var totalWidth = 0;
	    // self.columns.forEach(function(col, i) {
	    for (var i = 0; i < self.visibleColumnCache.length; i++) {
	      var col = self.visibleColumnCache[i];

	      if (totalWidth < viewportWidth) {
	        totalWidth += col.drawnWidth ? col.drawnWidth : 0;
	        min++;
	      }
	      else {
	        var currWidth = 0;
	        for (var j = i; j >= i - min; j--) {
	          currWidth += self.visibleColumnCache[j].drawnWidth ? self.visibleColumnCache[j].drawnWidth : 0;
	        }
	        if (currWidth < viewportWidth) {
	          min++;
	        }
	      }
	    }

	    return min;
	  };

	  GridRenderContainer.prototype.getVisibleRowCount = function getVisibleRowCount() {
	    return this.visibleRowCache.length;
	  };

	  /**
	   * @ngdoc function
	   * @name registerViewportAdjuster
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Registers an adjuster to the render container's available width or height.  Adjusters are used
	   * to tell the render container that there is something else consuming space, and to adjust it's size
	   * appropriately.
	   * @param {function} func the adjuster function we want to register
	   */

	  GridRenderContainer.prototype.registerViewportAdjuster = function registerViewportAdjuster(func) {
	    this.viewportAdjusters.push(func);
	  };

	  /**
	   * @ngdoc function
	   * @name removeViewportAdjuster
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Removes an adjuster, should be used when your element is destroyed
	   * @param {function} func the adjuster function we want to remove
	   */
	  GridRenderContainer.prototype.removeViewportAdjuster = function removeViewportAdjuster(func) {
	    var idx = this.viewportAdjusters.indexOf(func);

	    if (idx > -1) {
	      this.viewportAdjusters.splice(idx, 1);
	    }
	  };

	  /**
	   * @ngdoc function
	   * @name getViewportAdjustment
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Gets the adjustment based on the viewportAdjusters.
	   * @returns {object} a hash of { height: x, width: y }.  Usually the values will be negative
	   */
	  GridRenderContainer.prototype.getViewportAdjustment = function getViewportAdjustment() {
	    var self = this;

	    var adjustment = { height: 0, width: 0 };

	    self.viewportAdjusters.forEach(function (func) {
	      adjustment = func.call(this, adjustment);
	    });

	    return adjustment;
	  };

	  GridRenderContainer.prototype.getMargin = function getMargin(side) {
	    var self = this;

	    var amount = 0;

	    self.viewportAdjusters.forEach(function (func) {
	      var adjustment = func.call(this, { height: 0, width: 0 });

	      if (adjustment.side && adjustment.side === side) {
	        amount += adjustment.width * -1;
	      }
	    });

	    return amount;
	  };

	  GridRenderContainer.prototype.getViewportHeight = function getViewportHeight() {
	    var self = this;

	    var headerHeight = (self.headerHeight) ? self.headerHeight : self.grid.headerHeight;

	    var viewPortHeight = self.grid.gridHeight - headerHeight - self.grid.footerHeight;


	    var adjustment = self.getViewportAdjustment();

	    viewPortHeight = viewPortHeight + adjustment.height;

	    return viewPortHeight;
	  };

	  GridRenderContainer.prototype.getViewportWidth = function getViewportWidth() {
	    var self = this;

	    var viewportWidth = self.grid.gridWidth;

	    //if (typeof(self.grid.verticalScrollbarWidth) !== 'undefined' && self.grid.verticalScrollbarWidth !== undefined && self.grid.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth - self.grid.verticalScrollbarWidth;
	    //}

	    // var viewportWidth = 0;\
	    // self.visibleColumnCache.forEach(function (column) {
	    //   viewportWidth += column.drawnWidth;
	    // });

	    var adjustment = self.getViewportAdjustment();

	    viewportWidth = viewportWidth + adjustment.width;

	    return viewportWidth;
	  };

	  GridRenderContainer.prototype.getHeaderViewportWidth = function getHeaderViewportWidth() {
	    var self = this;

	    var viewportWidth = this.getViewportWidth();

	    //if (typeof(self.grid.verticalScrollbarWidth) !== 'undefined' && self.grid.verticalScrollbarWidth !== undefined && self.grid.verticalScrollbarWidth > 0) {
	    //  viewPortWidth = viewPortWidth + self.grid.verticalScrollbarWidth;
	    //}

	    // var adjustment = self.getViewportAdjustment();
	    // viewPortWidth = viewPortWidth + adjustment.width;

	    return viewportWidth;
	  };


	  /**
	   * @ngdoc function
	   * @name getCanvasHeight
	   * @methodOf ui.grid.class:GridRenderContainer
	   * @description Returns the total canvas height.   Only recalculates if canvasHeightShouldUpdate = false
	   * @returns {number} total height of all the visible rows in the container
	   */
	  GridRenderContainer.prototype.getCanvasHeight = function getCanvasHeight() {
	    var self = this;

	    if (!self.canvasHeightShouldUpdate) {
	      return self.$$canvasHeight;
	    }

	    var oldCanvasHeight = self.$$canvasHeight;

	    self.$$canvasHeight =  0;

	    self.visibleRowCache.forEach(function(row){
	      self.$$canvasHeight += row.height;
	    });


	    self.canvasHeightShouldUpdate = false;

	    self.grid.api.core.raise.canvasHeightChanged(oldCanvasHeight, self.$$canvasHeight);

	    return self.$$canvasHeight;
	  };

	  GridRenderContainer.prototype.getVerticalScrollLength = function getVerticalScrollLength() {
	    return this.getCanvasHeight() - this.getViewportHeight() + this.grid.scrollbarHeight;
	  };

	  GridRenderContainer.prototype.getHorizontalScrollLength = function getHorizontalScrollLength() {
	    return this.getCanvasWidth() - this.getViewportWidth() + this.grid.scrollbarWidth;
	  };

	  GridRenderContainer.prototype.getCanvasWidth = function getCanvasWidth() {
	    var self = this;

	    var ret = self.canvasWidth;

	    return ret;
	  };

	  GridRenderContainer.prototype.setRenderedRows = function setRenderedRows(newRows) {
	    this.renderedRows.length = newRows.length;
	    for (var i = 0; i < newRows.length; i++) {
	      this.renderedRows[i] = newRows[i];
	    }
	  };

	  GridRenderContainer.prototype.setRenderedColumns = function setRenderedColumns(newColumns) {
	    var self = this;

	    // OLD:
	    this.renderedColumns.length = newColumns.length;
	    for (var i = 0; i < newColumns.length; i++) {
	      this.renderedColumns[i] = newColumns[i];
	    }

	    this.updateColumnOffset();
	  };

	  GridRenderContainer.prototype.updateColumnOffset = function updateColumnOffset() {
	    // Calculate the width of the columns on the left side that are no longer rendered.
	    //  That will be the offset for the columns as we scroll horizontally.
	    var hiddenColumnsWidth = 0;
	    for (var i = 0; i < this.currentFirstColumn; i++) {
	      hiddenColumnsWidth += this.visibleColumnCache[i].drawnWidth;
	    }

	    this.columnOffset = hiddenColumnsWidth;
	  };

	  GridRenderContainer.prototype.scrollVertical = function (newScrollTop) {
	    var vertScrollPercentage = -1;

	    if (newScrollTop !== this.prevScrollTop) {
	      var yDiff = newScrollTop - this.prevScrollTop;

	      if (yDiff > 0 ) { this.grid.scrollDirection = uiGridConstants.scrollDirection.DOWN; }
	      if (yDiff < 0 ) { this.grid.scrollDirection = uiGridConstants.scrollDirection.UP; }

	      var vertScrollLength = this.getVerticalScrollLength();

	      vertScrollPercentage = newScrollTop / vertScrollLength;

	      // console.log('vert', vertScrollPercentage, newScrollTop, vertScrollLength);

	      if (vertScrollPercentage > 1) { vertScrollPercentage = 1; }
	      if (vertScrollPercentage < 0) { vertScrollPercentage = 0; }

	      this.adjustScrollVertical(newScrollTop, vertScrollPercentage);
	      return vertScrollPercentage;
	    }
	  };

	  GridRenderContainer.prototype.scrollHorizontal = function(newScrollLeft){
	    var horizScrollPercentage = -1;

	    // Handle RTL here

	    if (newScrollLeft !== this.prevScrollLeft) {
	      var xDiff = newScrollLeft - this.prevScrollLeft;

	      if (xDiff > 0) { this.grid.scrollDirection = uiGridConstants.scrollDirection.RIGHT; }
	      if (xDiff < 0) { this.grid.scrollDirection = uiGridConstants.scrollDirection.LEFT; }

	      var horizScrollLength = this.getHorizontalScrollLength();
	      if (horizScrollLength !== 0) {
	        horizScrollPercentage = newScrollLeft / horizScrollLength;
	      }
	      else {
	        horizScrollPercentage = 0;
	      }

	      this.adjustScrollHorizontal(newScrollLeft, horizScrollPercentage);
	      return horizScrollPercentage;
	    }
	  };

	  GridRenderContainer.prototype.adjustScrollVertical = function adjustScrollVertical(scrollTop, scrollPercentage, force) {
	    if (this.prevScrollTop === scrollTop && !force) {
	      return;
	    }

	    if (typeof(scrollTop) === 'undefined' || scrollTop === undefined || scrollTop === null) {
	      scrollTop = (this.getCanvasHeight() - this.getViewportHeight()) * scrollPercentage;
	    }

	    this.adjustRows(scrollTop, scrollPercentage, false);

	    this.prevScrollTop = scrollTop;
	    this.prevScrolltopPercentage = scrollPercentage;

	    this.grid.queueRefresh();
	  };

	  GridRenderContainer.prototype.adjustScrollHorizontal = function adjustScrollHorizontal(scrollLeft, scrollPercentage, force) {
	    if (this.prevScrollLeft === scrollLeft && !force) {
	      return;
	    }

	    if (typeof(scrollLeft) === 'undefined' || scrollLeft === undefined || scrollLeft === null) {
	      scrollLeft = (this.getCanvasWidth() - this.getViewportWidth()) * scrollPercentage;
	    }

	    this.adjustColumns(scrollLeft, scrollPercentage);

	    this.prevScrollLeft = scrollLeft;
	    this.prevScrollleftPercentage = scrollPercentage;

	    this.grid.queueRefresh();
	  };

	  GridRenderContainer.prototype.adjustRows = function adjustRows(scrollTop, scrollPercentage, postDataLoaded) {
	    var self = this;

	    var minRows = self.minRowsToRender();

	    var rowCache = self.visibleRowCache;

	    var maxRowIndex = rowCache.length - minRows;

	    // console.log('scroll%1', scrollPercentage);

	    // Calculate the scroll percentage according to the scrollTop location, if no percentage was provided
	    if ((typeof(scrollPercentage) === 'undefined' || scrollPercentage === null) && scrollTop) {
	      scrollPercentage = scrollTop / self.getVerticalScrollLength();
	    }

	    var rowIndex = Math.ceil(Math.min(maxRowIndex, maxRowIndex * scrollPercentage));

	    // console.log('maxRowIndex / scroll%', maxRowIndex, scrollPercentage, rowIndex);

	    // Define a max row index that we can't scroll past
	    if (rowIndex > maxRowIndex) {
	      rowIndex = maxRowIndex;
	    }

	    var newRange = [];
	    if (rowCache.length > self.grid.options.virtualizationThreshold) {
	      if (!(typeof(scrollTop) === 'undefined' || scrollTop === null)) {
	        // Have we hit the threshold going down?
	        if ( !self.grid.suppressParentScrollDown && self.prevScrollTop < scrollTop && rowIndex < self.prevRowScrollIndex + self.grid.options.scrollThreshold && rowIndex < maxRowIndex) {
	          return;
	        }
	        //Have we hit the threshold going up?
	        if ( !self.grid.suppressParentScrollUp && self.prevScrollTop > scrollTop && rowIndex > self.prevRowScrollIndex - self.grid.options.scrollThreshold && rowIndex < maxRowIndex) {
	          return;
	        }
	      }
	      var rangeStart = {};
	      var rangeEnd = {};

	      rangeStart = Math.max(0, rowIndex - self.grid.options.excessRows);
	      rangeEnd = Math.min(rowCache.length, rowIndex + minRows + self.grid.options.excessRows);

	      newRange = [rangeStart, rangeEnd];
	    }
	    else {
	      var maxLen = self.visibleRowCache.length;
	      newRange = [0, Math.max(maxLen, minRows + self.grid.options.excessRows)];
	    }

	    self.updateViewableRowRange(newRange);

	    self.prevRowScrollIndex = rowIndex;
	  };

	  GridRenderContainer.prototype.adjustColumns = function adjustColumns(scrollLeft, scrollPercentage) {
	    var self = this;

	    var minCols = self.minColumnsToRender();

	    var columnCache = self.visibleColumnCache;
	    var maxColumnIndex = columnCache.length - minCols;

	    // Calculate the scroll percentage according to the scrollLeft location, if no percentage was provided
	    if ((typeof(scrollPercentage) === 'undefined' || scrollPercentage === null) && scrollLeft) {
	      scrollPercentage = scrollLeft / self.getHorizontalScrollLength();
	    }

	    var colIndex = Math.ceil(Math.min(maxColumnIndex, maxColumnIndex * scrollPercentage));

	    // Define a max row index that we can't scroll past
	    if (colIndex > maxColumnIndex) {
	      colIndex = maxColumnIndex;
	    }

	    var newRange = [];
	    if (columnCache.length > self.grid.options.columnVirtualizationThreshold && self.getCanvasWidth() > self.getViewportWidth()) {
	      /* Commented the following lines because otherwise the moved column wasn't visible immediately on the new position
	       * in the case of many columns with horizontal scroll, one had to scroll left or right and then return in order to see it
	      // Have we hit the threshold going down?
	      if (self.prevScrollLeft < scrollLeft && colIndex < self.prevColumnScrollIndex + self.grid.options.horizontalScrollThreshold && colIndex < maxColumnIndex) {
	        return;
	      }
	      //Have we hit the threshold going up?
	      if (self.prevScrollLeft > scrollLeft && colIndex > self.prevColumnScrollIndex - self.grid.options.horizontalScrollThreshold && colIndex < maxColumnIndex) {
	        return;
	      }*/

	      var rangeStart = Math.max(0, colIndex - self.grid.options.excessColumns);
	      var rangeEnd = Math.min(columnCache.length, colIndex + minCols + self.grid.options.excessColumns);

	      newRange = [rangeStart, rangeEnd];
	    }
	    else {
	      var maxLen = self.visibleColumnCache.length;

	      newRange = [0, Math.max(maxLen, minCols + self.grid.options.excessColumns)];
	    }

	    self.updateViewableColumnRange(newRange);

	    self.prevColumnScrollIndex = colIndex;
	  };

	  // Method for updating the visible rows
	  GridRenderContainer.prototype.updateViewableRowRange = function updateViewableRowRange(renderedRange) {
	    // Slice out the range of rows from the data
	    // var rowArr = uiGridCtrl.grid.rows.slice(renderedRange[0], renderedRange[1]);
	    var rowArr = this.visibleRowCache.slice(renderedRange[0], renderedRange[1]);

	    // Define the top-most rendered row
	    this.currentTopRow = renderedRange[0];

	    this.setRenderedRows(rowArr);
	  };

	  // Method for updating the visible columns
	  GridRenderContainer.prototype.updateViewableColumnRange = function updateViewableColumnRange(renderedRange) {
	    // Slice out the range of rows from the data
	    // var columnArr = uiGridCtrl.grid.columns.slice(renderedRange[0], renderedRange[1]);
	    var columnArr = this.visibleColumnCache.slice(renderedRange[0], renderedRange[1]);

	    // Define the left-most rendered columns
	    this.currentFirstColumn = renderedRange[0];

	    this.setRenderedColumns(columnArr);
	  };

	  GridRenderContainer.prototype.headerCellWrapperStyle = function () {
	    var self = this;

	    if (self.currentFirstColumn !== 0) {
	      var offset = self.columnOffset;

	      if (self.grid.isRTL()) {
	        return { 'margin-right': offset + 'px' };
	      }
	      else {
	        return { 'margin-left': offset + 'px' };
	      }
	    }

	    return null;
	  };

	    /**
	     *  @ngdoc boolean
	     *  @name updateColumnWidths
	     *  @propertyOf  ui.grid.class:GridRenderContainer
	     *  @description Determine the appropriate column width of each column across all render containers.
	     *
	     *  Column width is easy when each column has a specified width.  When columns are variable width (i.e.
	     *  have an * or % of the viewport) then we try to calculate so that things fit in.  The problem is that
	     *  we have multiple render containers, and we don't want one render container to just take the whole viewport
	     *  when it doesn't need to - we want things to balance out across the render containers.
	     *
	     *  To do this, we use this method to calculate all the renderContainers, recognising that in a given render
	     *  cycle it'll get called once per render container, so it needs to return the same values each time.
	     *
	     *  The constraints on this method are therefore:
	     *  - must return the same value when called multiple times, to do this it needs to rely on properties of the
	     *    columns, but not properties that change when this is called (so it shouldn't rely on drawnWidth)
	     *
	     *  The general logic of this method is:
	     *  - calculate our total available width
	     *  - look at all the columns across all render containers, and work out which have widths and which have
	     *    constraints such as % or * or something else
	     *  - for those with *, count the total number of * we see and add it onto a running total, add this column to an * array
	     *  - for those with a %, allocate the % as a percentage of the viewport, having consideration of min and max
	     *  - for those with manual width (in pixels) we set the drawnWidth to the specified width
	     *  - we end up with an asterisks array still to process
	     *  - we look at our remaining width.  If it's greater than zero, we divide it up among the asterisk columns, then process
	     *    them for min and max width constraints
	     *  - if it's zero or less, we set the asterisk columns to their minimum widths
	     *  - we use parseInt quite a bit, as we try to make all our column widths integers
	     */
	  GridRenderContainer.prototype.updateColumnWidths = function () {
	    var self = this;

	    var asterisksArray = [],
	        asteriskNum = 0,
	        usedWidthSum = 0,
	        ret = '';

	    // Get the width of the viewport
	    var availableWidth = self.grid.getViewportWidth() - self.grid.scrollbarWidth;

	    // get all the columns across all render containers, we have to calculate them all or one render container
	    // could consume the whole viewport
	    var columnCache = [];
	    angular.forEach(self.grid.renderContainers, function( container, name){
	      columnCache = columnCache.concat(container.visibleColumnCache);
	    });

	    // look at each column, process any manual values or %, put the * into an array to look at later
	    columnCache.forEach(function(column, i) {
	      var width = 0;
	      // Skip hidden columns
	      if (!column.visible) { return; }

	      if (angular.isNumber(column.width)) {
	        // pixel width, set to this value
	        width = parseInt(column.width, 10);
	        usedWidthSum = usedWidthSum + width;
	        column.drawnWidth = width;

	      } else if (gridUtil.endsWith(column.width, "%")) {
	        // percentage width, set to percentage of the viewport
	        width = parseInt(parseInt(column.width.replace(/%/g, ''), 10) / 100 * availableWidth);

	        if ( width > column.maxWidth ){
	          width = column.maxWidth;
	        }

	        if ( width < column.minWidth ){
	          width = column.minWidth;
	        }

	        usedWidthSum = usedWidthSum + width;
	        column.drawnWidth = width;
	      } else if (angular.isString(column.width) && column.width.indexOf('*') !== -1) {
	        // is an asterisk column, the gridColumn already checked the string consists only of '****'
	        asteriskNum = asteriskNum + column.width.length;
	        asterisksArray.push(column);
	      }
	    });

	    // Get the remaining width (available width subtracted by the used widths sum)
	    var remainingWidth = availableWidth - usedWidthSum;

	    var i, column, colWidth;

	    if (asterisksArray.length > 0) {
	      // the width that each asterisk value would be assigned (this can be negative)
	      var asteriskVal = remainingWidth / asteriskNum;

	      asterisksArray.forEach(function( column ){
	        var width = parseInt(column.width.length * asteriskVal, 10);

	        if ( width > column.maxWidth ){
	          width = column.maxWidth;
	        }

	        if ( width < column.minWidth ){
	          width = column.minWidth;
	        }

	        usedWidthSum = usedWidthSum + width;
	        column.drawnWidth = width;
	      });
	    }

	    // If the grid width didn't divide evenly into the column widths and we have pixels left over, or our
	    // calculated widths would have the grid narrower than the available space,
	    // dole the remainder out one by one to make everything fit
	    var processColumnUpwards = function(column){
	      if ( column.drawnWidth < column.maxWidth && leftoverWidth > 0) {
	        column.drawnWidth++;
	        usedWidthSum++;
	        leftoverWidth--;
	        columnsToChange = true;
	      }
	    };

	    var leftoverWidth = availableWidth - usedWidthSum;
	    var columnsToChange = true;

	    while (leftoverWidth > 0 && columnsToChange) {
	      columnsToChange = false;
	      asterisksArray.forEach(processColumnUpwards);
	    }

	    // We can end up with too much width even though some columns aren't at their max width, in this situation
	    // we can trim the columns a little
	    var processColumnDownwards = function(column){
	      if ( column.drawnWidth > column.minWidth && excessWidth > 0) {
	        column.drawnWidth--;
	        usedWidthSum--;
	        excessWidth--;
	        columnsToChange = true;
	      }
	    };

	    var excessWidth =  usedWidthSum - availableWidth;
	    columnsToChange = true;

	    while (excessWidth > 0 && columnsToChange) {
	      columnsToChange = false;
	      asterisksArray.forEach(processColumnDownwards);
	    }


	    // all that was across all the renderContainers, now we need to work out what that calculation decided for
	    // our renderContainer
	    var canvasWidth = 0;
	    self.visibleColumnCache.forEach(function(column){
	      if ( column.visible ){
	        canvasWidth = canvasWidth + column.drawnWidth;
	      }
	    });

	    // Build the CSS
	    columnCache.forEach(function (column) {
	      ret = ret + column.getColClassDefinition();
	    });

	    self.canvasWidth = canvasWidth;

	    // Return the styles back to buildStyles which pops them into the `customStyles` scope variable
	    // return ret;

	    // Set this render container's column styles so they can be used in style computation
	    this.columnStyles = ret;
	  };

	  GridRenderContainer.prototype.needsHScrollbarPlaceholder = function () {
	    return this.grid.options.enableHorizontalScrollbar && !this.hasHScrollbar && !this.grid.disableScrolling;
	  };

	  GridRenderContainer.prototype.getViewportStyle = function () {
	    var self = this;
	    var styles = {};

	    self.hasHScrollbar = false;
	    self.hasVScrollbar = false;

	    if (self.grid.disableScrolling) {
	      styles['overflow-x'] = 'hidden';
	      styles['overflow-y'] = 'hidden';
	      return styles;
	    }

	    if (self.name === 'body') {
	      self.hasHScrollbar = self.grid.options.enableHorizontalScrollbar !== uiGridConstants.scrollbars.NEVER;
	      if (!self.grid.isRTL()) {
	        if (!self.grid.hasRightContainerColumns()) {
	          self.hasVScrollbar = self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER;
	        }
	      }
	      else {
	        if (!self.grid.hasLeftContainerColumns()) {
	          self.hasVScrollbar = self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER;
	        }
	      }
	    }
	    else if (self.name === 'left') {
	      self.hasVScrollbar = self.grid.isRTL() ? self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER : false;
	    }
	    else {
	      self.hasVScrollbar = !self.grid.isRTL() ? self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER : false;
	    }

	    styles['overflow-x'] = self.hasHScrollbar ? 'scroll' : 'hidden';
	    styles['overflow-y'] = self.hasVScrollbar ? 'scroll' : 'hidden';


	    return styles;


	  };

	  return GridRenderContainer;
	}]);

	})();

	(function(){

	angular.module('ui.grid')
	.factory('GridRow', ['gridUtil', function(gridUtil) {

	   /**
	   * @ngdoc function
	   * @name ui.grid.class:GridRow
	   * @description GridRow is the viewModel for one logical row on the grid.  A grid Row is not necessarily a one-to-one
	   * relation to gridOptions.data.
	   * @param {object} entity the array item from GridOptions.data
	   * @param {number} index the current position of the row in the array
	   * @param {Grid} reference to the parent grid
	   */
	  function GridRow(entity, index, grid) {

	     /**
	      *  @ngdoc object
	      *  @name grid
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description A reference back to the grid
	      */
	     this.grid = grid;

	     /**
	      *  @ngdoc object
	      *  @name entity
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description A reference to an item in gridOptions.data[]
	      */
	    this.entity = entity;

	     /**
	      *  @ngdoc object
	      *  @name uid
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description  UniqueId of row
	      */
	     this.uid = gridUtil.nextUid();

	     /**
	      *  @ngdoc object
	      *  @name visible
	      *  @propertyOf  ui.grid.class:GridRow
	      *  @description If true, the row will be rendered
	      */
	    // Default to true
	    this.visible = true;


	    this.$$height = grid.options.rowHeight;

	  }

	    /**
	     *  @ngdoc object
	     *  @name height
	     *  @propertyOf  ui.grid.class:GridRow
	     *  @description height of each individual row. changing the height will flag all
	     *  row renderContainers to recalculate their canvas height
	     */
	    Object.defineProperty(GridRow.prototype, 'height', {
	      get: function() {
	        return this.$$height;
	      },
	      set: function(height) {
	        if (height !== this.$$height) {
	          this.grid.updateCanvasHeight();
	          this.$$height = height;
	        }
	      }
	    });

	  /**
	   * @ngdoc function
	   * @name getQualifiedColField
	   * @methodOf ui.grid.class:GridRow
	   * @description returns the qualified field name as it exists on scope
	   * ie: row.entity.fieldA
	   * @param {GridCol} col column instance
	   * @returns {string} resulting name that can be evaluated on scope
	   */
	    GridRow.prototype.getQualifiedColField = function(col) {
	      return 'row.' + this.getEntityQualifiedColField(col);
	    };

	    /**
	     * @ngdoc function
	     * @name getEntityQualifiedColField
	     * @methodOf ui.grid.class:GridRow
	     * @description returns the qualified field name minus the row path
	     * ie: entity.fieldA
	     * @param {GridCol} col column instance
	     * @returns {string} resulting name that can be evaluated against a row
	     */
	  GridRow.prototype.getEntityQualifiedColField = function(col) {
	    return gridUtil.preEval('entity.' + col.field);
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name setRowInvisible
	   * @methodOf  ui.grid.class:GridRow
	   * @description Sets an override on the row that forces it to always
	   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility.
	   * 
	   * This method can be called from the api, passing in the gridRow we want
	   * altered.  It should really work by calling gridRow.setRowInvisible, but that's
	   * not the way I coded it, and too late to change now.  Changed to just call
	   * the internal function row.setThisRowInvisible().
	   * 
	   * @param {GridRow} row the row we want to set to invisible
	   * 
	   */
	  GridRow.prototype.setRowInvisible = function ( row ) {
	    if (row && row.setThisRowInvisible){
	      row.setThisRowInvisible( 'user' );
	    }
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name clearRowInvisible
	   * @methodOf  ui.grid.class:GridRow
	   * @description Clears an override on the row that forces it to always
	   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility.
	   * 
	   * This method can be called from the api, passing in the gridRow we want
	   * altered.  It should really work by calling gridRow.clearRowInvisible, but that's
	   * not the way I coded it, and too late to change now.  Changed to just call
	   * the internal function row.clearThisRowInvisible().
	   * 
	   * @param {GridRow} row the row we want to clear the invisible flag
	   * 
	   */
	  GridRow.prototype.clearRowInvisible = function ( row ) {
	    if (row && row.clearThisRowInvisible){
	      row.clearThisRowInvisible( 'user' );
	    }
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name setThisRowInvisible
	   * @methodOf  ui.grid.class:GridRow
	   * @description Sets an override on the row that forces it to always
	   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility
	   *
	   * @param {string} reason the reason (usually the module) for the row to be invisible.
	   * E.g. grouping, user, filter
	   * @param {boolean} fromRowsProcessor whether we were called from a rowsProcessor, passed through to evaluateRowVisibility
	   */
	  GridRow.prototype.setThisRowInvisible = function ( reason, fromRowsProcessor ) {
	    if ( !this.invisibleReason ){
	      this.invisibleReason = {};
	    }
	    this.invisibleReason[reason] = true;
	    this.evaluateRowVisibility( fromRowsProcessor);
	  };


	  /**
	   * @ngdoc function
	   * @name clearRowInvisible
	   * @methodOf ui.grid.class:GridRow
	   * @description Clears any override on the row visibility, returning it 
	   * to normal visibility calculations.  Emits the rowsVisibleChanged
	   * event
	   * 
	   * @param {string} reason the reason (usually the module) for the row to be invisible.
	   * E.g. grouping, user, filter
	   * @param {boolean} fromRowsProcessor whether we were called from a rowsProcessor, passed through to evaluateRowVisibility
	   */
	  GridRow.prototype.clearThisRowInvisible = function ( reason, fromRowsProcessor ) {
	    if (typeof(this.invisibleReason) !== 'undefined' ) {
	      delete this.invisibleReason[reason];
	    }
	    this.evaluateRowVisibility( fromRowsProcessor );
	  };


	  /**
	   * @ngdoc function
	   * @name evaluateRowVisibility
	   * @methodOf ui.grid.class:GridRow
	   * @description Determines whether the row should be visible based on invisibleReason, 
	   * and if it changes the row visibility, then emits the rowsVisibleChanged event.
	   * 
	   * Queues a grid refresh, but doesn't call it directly to avoid hitting lots of grid refreshes.
	   * @param {boolean} fromRowProcessor if true, then it won't raise events or queue the refresh, the
	   * row processor does that already
	   */
	  GridRow.prototype.evaluateRowVisibility = function ( fromRowProcessor ) {
	    var newVisibility = true;
	    if ( typeof(this.invisibleReason) !== 'undefined' ){
	      angular.forEach(this.invisibleReason, function( value, key ){
	        if ( value ){
	          newVisibility = false;
	        }
	      });
	    }
	    
	    if ( typeof(this.visible) === 'undefined' || this.visible !== newVisibility ){
	      this.visible = newVisibility;
	      if ( !fromRowProcessor ){
	        this.grid.queueGridRefresh();
	        this.grid.api.core.raise.rowsVisibleChanged(this);
	      }
	    }
	  };
	  

	  return GridRow;
	}]);

	})();

	(function(){
	  'use strict';
	  /**
	   * @ngdoc object
	   * @name ui.grid.class:GridRowColumn
	   * @param {GridRow} row The row for this pair
	   * @param {GridColumn} column The column for this pair
	   * @description A row and column pair that represents the intersection of these two entities.
	   * Must be instantiated as a constructor using the `new` keyword.
	   */
	  angular.module('ui.grid')
	  .factory('GridRowColumn', ['$parse', '$filter',
	    function GridRowColumnFactory($parse, $filter){
	      var GridRowColumn = function GridRowColumn(row, col) {
	        if ( !(this instanceof GridRowColumn)){
	          throw "Using GridRowColumn as a function insead of as a constructor. Must be called with `new` keyword";
	        }

	        /**
	         * @ngdoc object
	         * @name row
	         * @propertyOf ui.grid.class:GridRowColumn
	         * @description {@link ui.grid.class:GridRow }
	         */
	        this.row = row;
	        /**
	         * @ngdoc object
	         * @name col
	         * @propertyOf ui.grid.class:GridRowColumn
	         * @description {@link ui.grid.class:GridColumn }
	         */
	        this.col = col;
	      };

	      /**
	       * @ngdoc function
	       * @name getIntersectionValueRaw
	       * @methodOf ui.grid.class:GridRowColumn
	       * @description Gets the intersection of where the row and column meet.
	       * @returns {String|Number|Object} The value from the grid data that this GridRowColumn points too.
	       *          If the column has a cellFilter this will NOT return the filtered value.
	       */
	      GridRowColumn.prototype.getIntersectionValueRaw = function(){
	        var getter = $parse(this.row.getEntityQualifiedColField(this.col));
	        var context = this.row;
	        return getter(context);
	      };
	      return GridRowColumn;
	    }
	  ]);
	})();

	(function () {
	  angular.module('ui.grid')
	    .factory('ScrollEvent', ['gridUtil', function (gridUtil) {

	      /**
	       * @ngdoc function
	       * @name ui.grid.class:ScrollEvent
	       * @description Model for all scrollEvents
	       * @param {Grid} grid that owns the scroll event
	       * @param {GridRenderContainer} sourceRowContainer that owns the scroll event. Can be null
	       * @param {GridRenderContainer} sourceColContainer that owns the scroll event. Can be null
	       * @param {string} source the source of the event - from uiGridConstants.scrollEventSources or a string value of directive/service/factory.functionName
	       */
	      function ScrollEvent(grid, sourceRowContainer, sourceColContainer, source) {
	        var self = this;
	        if (!grid) {
	          throw new Error("grid argument is required");
	        }

	        /**
	         *  @ngdoc object
	         *  @name grid
	         *  @propertyOf  ui.grid.class:ScrollEvent
	         *  @description A reference back to the grid
	         */
	         self.grid = grid;



	        /**
	         *  @ngdoc object
	         *  @name source
	         *  @propertyOf  ui.grid.class:ScrollEvent
	         *  @description the source of the scroll event. limited to values from uiGridConstants.scrollEventSources
	         */
	        self.source = source;


	        /**
	         *  @ngdoc object
	         *  @name noDelay
	         *  @propertyOf  ui.grid.class:ScrollEvent
	         *  @description most scroll events from the mouse or trackpad require delay to operate properly
	         *  set to false to eliminate delay.  Useful for scroll events that the grid causes, such as scrolling to make a row visible.
	         */
	        self.withDelay = true;

	        self.sourceRowContainer = sourceRowContainer;
	        self.sourceColContainer = sourceColContainer;

	        self.newScrollLeft = null;
	        self.newScrollTop = null;
	        self.x = null;
	        self.y = null;

	        self.verticalScrollLength = -9999999;
	        self.horizontalScrollLength = -999999;


	        /**
	         *  @ngdoc function
	         *  @name fireThrottledScrollingEvent
	         *  @methodOf  ui.grid.class:ScrollEvent
	         *  @description fires a throttled event using grid.api.core.raise.scrollEvent
	         */
	        self.fireThrottledScrollingEvent = gridUtil.throttle(function(sourceContainerId) {
	          self.grid.scrollContainers(sourceContainerId, self);
	        }, self.grid.options.wheelScrollThrottle, {trailing: true});

	      }


	      /**
	       *  @ngdoc function
	       *  @name getNewScrollLeft
	       *  @methodOf  ui.grid.class:ScrollEvent
	       *  @description returns newScrollLeft property if available; calculates a new value if it isn't
	       */
	      ScrollEvent.prototype.getNewScrollLeft = function(colContainer, viewport){
	        var self = this;

	        if (!self.newScrollLeft){
	          var scrollWidth = (colContainer.getCanvasWidth() - colContainer.getViewportWidth());

	          var oldScrollLeft = gridUtil.normalizeScrollLeft(viewport, self.grid);

	          var scrollXPercentage;
	          if (typeof(self.x.percentage) !== 'undefined' && self.x.percentage !== undefined) {
	            scrollXPercentage = self.x.percentage;
	          }
	          else if (typeof(self.x.pixels) !== 'undefined' && self.x.pixels !== undefined) {
	            scrollXPercentage = self.x.percentage = (oldScrollLeft + self.x.pixels) / scrollWidth;
	          }
	          else {
	            throw new Error("No percentage or pixel value provided for scroll event X axis");
	          }

	          return Math.max(0, scrollXPercentage * scrollWidth);
	        }

	        return self.newScrollLeft;
	      };


	      /**
	       *  @ngdoc function
	       *  @name getNewScrollTop
	       *  @methodOf  ui.grid.class:ScrollEvent
	       *  @description returns newScrollTop property if available; calculates a new value if it isn't
	       */
	      ScrollEvent.prototype.getNewScrollTop = function(rowContainer, viewport){
	        var self = this;


	        if (!self.newScrollTop){
	          var scrollLength = rowContainer.getVerticalScrollLength();

	          var oldScrollTop = viewport[0].scrollTop;

	          var scrollYPercentage;
	          if (typeof(self.y.percentage) !== 'undefined' && self.y.percentage !== undefined) {
	            scrollYPercentage = self.y.percentage;
	          }
	          else if (typeof(self.y.pixels) !== 'undefined' && self.y.pixels !== undefined) {
	            scrollYPercentage = self.y.percentage = (oldScrollTop + self.y.pixels) / scrollLength;
	          }
	          else {
	            throw new Error("No percentage or pixel value provided for scroll event Y axis");
	          }

	          return Math.max(0, scrollYPercentage * scrollLength);
	        }

	        return self.newScrollTop;
	      };

	      ScrollEvent.prototype.atTop = function(scrollTop) {
	        return (this.y && (this.y.percentage === 0 || this.verticalScrollLength < 0) && scrollTop === 0);
	      };

	      ScrollEvent.prototype.atBottom = function(scrollTop) {
	        return (this.y && (this.y.percentage === 1 || this.verticalScrollLength === 0) && scrollTop > 0);
	      };

	      ScrollEvent.prototype.atLeft = function(scrollLeft) {
	        return (this.x && (this.x.percentage === 0 || this.horizontalScrollLength < 0) && scrollLeft === 0);
	      };

	      ScrollEvent.prototype.atRight = function(scrollLeft) {
	        return (this.x && (this.x.percentage === 1 || this.horizontalScrollLength ===0) && scrollLeft > 0);
	      };


	      ScrollEvent.Sources = {
	        ViewPortScroll: 'ViewPortScroll',
	        RenderContainerMouseWheel: 'RenderContainerMouseWheel',
	        RenderContainerTouchMove: 'RenderContainerTouchMove',
	        Other: 99
	      };

	      return ScrollEvent;
	    }]);



	})();

	(function () {
	  'use strict';
	  /**
	   *  @ngdoc object
	   *  @name ui.grid.service:gridClassFactory
	   *
	   *  @description factory to return dom specific instances of a grid
	   *
	   */
	  angular.module('ui.grid').service('gridClassFactory', ['gridUtil', '$q', '$compile', '$templateCache', 'uiGridConstants', 'Grid', 'GridColumn', 'GridRow',
	    function (gridUtil, $q, $compile, $templateCache, uiGridConstants, Grid, GridColumn, GridRow) {

	      var service = {
	        /**
	         * @ngdoc method
	         * @name createGrid
	         * @methodOf ui.grid.service:gridClassFactory
	         * @description Creates a new grid instance. Each instance will have a unique id
	         * @param {object} options An object map of options to pass into the created grid instance.
	         * @returns {Grid} grid
	         */
	        createGrid : function(options) {
	          options = (typeof(options) !== 'undefined') ? options : {};
	          options.id = gridUtil.newId();
	          var grid = new Grid(options);

	          // NOTE/TODO: rowTemplate should always be defined...
	          if (grid.options.rowTemplate) {
	            var rowTemplateFnPromise = $q.defer();
	            grid.getRowTemplateFn = rowTemplateFnPromise.promise;
	            
	            gridUtil.getTemplate(grid.options.rowTemplate)
	              .then(
	                function (template) {
	                  var rowTemplateFn = $compile(template);
	                  rowTemplateFnPromise.resolve(rowTemplateFn);
	                },
	                function (res) {
	                  // Todo handle response error here?
	                  throw new Error("Couldn't fetch/use row template '" + grid.options.rowTemplate + "'");
	                });
	          }

	          grid.registerColumnBuilder(service.defaultColumnBuilder);

	          // Row builder for custom row templates
	          grid.registerRowBuilder(service.rowTemplateAssigner);

	          // Reset all rows to visible initially
	          grid.registerRowsProcessor(function allRowsVisible(rows) {
	            rows.forEach(function (row) {
	              row.evaluateRowVisibility( true );
	            }, 50);

	            return rows;
	          });

	          grid.registerColumnsProcessor(function applyColumnVisibility(columns) {
	            columns.forEach(function (column) {
	              column.visible = angular.isDefined(column.colDef.visible) ? column.colDef.visible : true;
	            });

	            return columns;
	          }, 50);

	          grid.registerRowsProcessor(grid.searchRows, 100);

	          // Register the default row processor, it sorts rows by selected columns
	          if (grid.options.externalSort && angular.isFunction(grid.options.externalSort)) {
	            grid.registerRowsProcessor(grid.options.externalSort, 200);
	          }
	          else {
	            grid.registerRowsProcessor(grid.sortByColumn, 200);
	          }

	          return grid;
	        },

	        /**
	         * @ngdoc function
	         * @name defaultColumnBuilder
	         * @methodOf ui.grid.service:gridClassFactory
	         * @description Processes designTime column definitions and applies them to col for the
	         *              core grid features
	         * @param {object} colDef reference to column definition
	         * @param {GridColumn} col reference to gridCol
	         * @param {object} gridOptions reference to grid options
	         */
	        defaultColumnBuilder: function (colDef, col, gridOptions) {

	          var templateGetPromises = [];

	          // Abstracts the standard template processing we do for every template type.
	          var processTemplate = function( templateType, providedType, defaultTemplate, filterType, tooltipType ) {
	            if ( !colDef[templateType] ){
	              col[providedType] = defaultTemplate;
	            } else {
	              col[providedType] = colDef[templateType];
	            }
	 
	             templateGetPromises.push(gridUtil.getTemplate(col[providedType])
	                .then(
	                function (template) {
	                  if ( angular.isFunction(template) ) { template = template(); }
	                  var tooltipCall = ( tooltipType === 'cellTooltip' ) ? 'col.cellTooltip(row,col)' : 'col.headerTooltip(col)';
	                  if ( tooltipType && col[tooltipType] === false ){
	                    template = template.replace(uiGridConstants.TOOLTIP, '');
	                  } else if ( tooltipType && col[tooltipType] ){
	                    template = template.replace(uiGridConstants.TOOLTIP, 'title="{{' + tooltipCall + ' CUSTOM_FILTERS }}"');
	                  }

	                  if ( filterType ){
	                    col[templateType] = template.replace(uiGridConstants.CUSTOM_FILTERS, function() {
	                      return col[filterType] ? "|" + col[filterType] : "";
	                    });
	                  } else {
	                    col[templateType] = template;
	                  }
	                },
	                function (res) {
	                  throw new Error("Couldn't fetch/use colDef." + templateType + " '" + colDef[templateType] + "'");
	                })
	            );

	          };


	          /**
	           * @ngdoc property
	           * @name cellTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for each cell in this column.  The default
	           * is ui-grid/uiGridCell.  If you are using the cellNav feature, this template
	           * must contain a div that can receive focus.
	           *
	           */
	          processTemplate( 'cellTemplate', 'providedCellTemplate', 'ui-grid/uiGridCell', 'cellFilter', 'cellTooltip' );
	          col.cellTemplatePromise = templateGetPromises[0];

	          /**
	           * @ngdoc property
	           * @name headerCellTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for the header for this column.  The default
	           * is ui-grid/uiGridHeaderCell
	           *
	           */
	          processTemplate( 'headerCellTemplate', 'providedHeaderCellTemplate', 'ui-grid/uiGridHeaderCell', 'headerCellFilter', 'headerTooltip' );

	          /**
	           * @ngdoc property
	           * @name footerCellTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for the footer for this column.  The default
	           * is ui-grid/uiGridFooterCell
	           *
	           */
	          processTemplate( 'footerCellTemplate', 'providedFooterCellTemplate', 'ui-grid/uiGridFooterCell', 'footerCellFilter' );

	          /**
	           * @ngdoc property
	           * @name filterHeaderTemplate
	           * @propertyOf ui.grid.class:GridOptions.columnDef
	           * @description a custom template for the filter input.  The default is ui-grid/ui-grid-filter
	           *
	           */
	          processTemplate( 'filterHeaderTemplate', 'providedFilterHeaderTemplate', 'ui-grid/ui-grid-filter' );

	          // Create a promise for the compiled element function
	          col.compiledElementFnDefer = $q.defer();

	          return $q.all(templateGetPromises);
	        },
	        

	        rowTemplateAssigner: function rowTemplateAssigner(row) {
	          var grid = this;

	          // Row has no template assigned to it
	          if (!row.rowTemplate) {
	            // Use the default row template from the grid
	            row.rowTemplate = grid.options.rowTemplate;

	            // Use the grid's function for fetching the compiled row template function
	            row.getRowTemplateFn = grid.getRowTemplateFn;
	          }
	          // Row has its own template assigned
	          else {
	            // Create a promise for the compiled row template function
	            var perRowTemplateFnPromise = $q.defer();
	            row.getRowTemplateFn = perRowTemplateFnPromise.promise;

	            // Get the row template
	            gridUtil.getTemplate(row.rowTemplate)
	              .then(function (template) {
	                // Compile the template
	                var rowTemplateFn = $compile(template);
	                
	                // Resolve the compiled template function promise
	                perRowTemplateFnPromise.resolve(rowTemplateFn);
	              },
	              function (res) {
	                // Todo handle response error here?
	                throw new Error("Couldn't fetch/use row template '" + row.rowTemplate + "'");
	              });
	          }

	          return row.getRowTemplateFn;
	        }
	      };

	      //class definitions (moved to separate factories)

	      return service;
	    }]);

	})();

	(function() {

	var module = angular.module('ui.grid');

	function escapeRegExp(str) {
	  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
	}


	/**
	 *  @ngdoc service
	 *  @name ui.grid.service:rowSearcher
	 *
	 *  @description Service for searching/filtering rows based on column value conditions.
	 */
	module.service('rowSearcher', ['gridUtil', 'uiGridConstants', function (gridUtil, uiGridConstants) {
	  var defaultCondition = uiGridConstants.filter.CONTAINS;

	  var rowSearcher = {};

	  /**
	   * @ngdoc function
	   * @name getTerm
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Get the term from a filter
	   * Trims leading and trailing whitespace
	   * @param {object} filter object to use
	   * @returns {object} Parsed term
	   */
	  rowSearcher.getTerm = function getTerm(filter) {
	    if (typeof(filter.term) === 'undefined') { return filter.term; }
	    
	    var term = filter.term;

	    // Strip leading and trailing whitespace if the term is a string
	    if (typeof(term) === 'string') {
	      term = term.trim();
	    }

	    return term;
	  };

	  /**
	   * @ngdoc function
	   * @name stripTerm
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Remove leading and trailing asterisk (*) from the filter's term
	   * @param {object} filter object to use
	   * @returns {uiGridConstants.filter<int>} Value representing the condition constant value
	   */
	  rowSearcher.stripTerm = function stripTerm(filter) {
	    var term = rowSearcher.getTerm(filter);

	    if (typeof(term) === 'string') {
	      return escapeRegExp(term.replace(/(^\*|\*$)/g, ''));
	    }
	    else {
	      return term;
	    }
	  };
	  

	  /**
	   * @ngdoc function
	   * @name guessCondition
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Guess the condition for a filter based on its term
	   * <br>
	   * Defaults to STARTS_WITH. Uses CONTAINS for strings beginning and ending with *s (*bob*).
	   * Uses STARTS_WITH for strings ending with * (bo*). Uses ENDS_WITH for strings starting with * (*ob).
	   * @param {object} filter object to use
	   * @returns {uiGridConstants.filter<int>} Value representing the condition constant value
	   */
	  rowSearcher.guessCondition = function guessCondition(filter) {
	    if (typeof(filter.term) === 'undefined' || !filter.term) {
	      return defaultCondition;
	    }

	    var term = rowSearcher.getTerm(filter);
	    
	    if (/\*/.test(term)) {
	      var regexpFlags = '';
	      if (!filter.flags || !filter.flags.caseSensitive) {
	        regexpFlags += 'i';
	      }

	      var reText = term.replace(/(\\)?\*/g, function ($0, $1) { return $1 ? $0 : '[\\s\\S]*?'; });
	      return new RegExp('^' + reText + '$', regexpFlags);
	    }
	    // Otherwise default to default condition
	    else {
	      return defaultCondition;
	    }
	  };
	  
	  
	  /**
	   * @ngdoc function
	   * @name setupFilters
	   * @methodOf ui.grid.service:rowSearcher
	   * @description For a given columns filters (either col.filters, or [col.filter] can be passed in),
	   * do all the parsing and pre-processing and store that data into a new filters object.  The object
	   * has the condition, the flags, the stripped term, and a parsed reg exp if there was one.
	   * 
	   * We could use a forEach in here, since it's much less performance sensitive, but since we're using 
	   * for loops everywhere else in this module...
	   * 
	   * @param {array} filters the filters from the column (col.filters or [col.filter])
	   * @returns {array} An array of parsed/preprocessed filters
	   */
	  rowSearcher.setupFilters = function setupFilters( filters ){
	    var newFilters = [];
	    
	    var filtersLength = filters.length;
	    for ( var i = 0; i < filtersLength; i++ ){
	      var filter = filters[i];
	      
	      if ( filter.noTerm || !gridUtil.isNullOrUndefined(filter.term) ){
	        var newFilter = {};
	        
	        var regexpFlags = '';
	        if (!filter.flags || !filter.flags.caseSensitive) {
	          regexpFlags += 'i';
	        }
	    
	        if ( !gridUtil.isNullOrUndefined(filter.term) ){
	          // it is possible to have noTerm.  We don't need to copy that across, it was just a flag to avoid
	          // getting the filter ignored if the filter was a function that didn't use a term
	          newFilter.term = rowSearcher.stripTerm(filter);
	        }
	        
	        if ( filter.condition ){
	          newFilter.condition = filter.condition;
	        } else {
	          newFilter.condition = rowSearcher.guessCondition(filter);
	        }

	        newFilter.flags = angular.extend( { caseSensitive: false, date: false }, filter.flags );

	        if (newFilter.condition === uiGridConstants.filter.STARTS_WITH) {
	          newFilter.startswithRE = new RegExp('^' + newFilter.term, regexpFlags);
	        }
	        
	         if (newFilter.condition === uiGridConstants.filter.ENDS_WITH) {
	          newFilter.endswithRE = new RegExp(newFilter.term + '$', regexpFlags);
	        }

	        if (newFilter.condition === uiGridConstants.filter.CONTAINS) {
	          newFilter.containsRE = new RegExp(newFilter.term, regexpFlags);
	        }

	        if (newFilter.condition === uiGridConstants.filter.EXACT) {
	          newFilter.exactRE = new RegExp('^' + newFilter.term + '$', regexpFlags);
	        }
	        
	        newFilters.push(newFilter);
	      }
	    }
	    return newFilters;
	  };
	  

	  /**
	   * @ngdoc function
	   * @name runColumnFilter
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Runs a single pre-parsed filter against a cell, returning true
	   * if the cell matches that one filter.
	   * 
	   * @param {Grid} grid the grid we're working against
	   * @param {GridRow} row the row we're matching against
	   * @param {GridCol} column the column that we're working against
	   * @param {object} filter the specific, preparsed, filter that we want to test
	   * @returns {boolean} true if we match (row stays visible)
	   */
	  rowSearcher.runColumnFilter = function runColumnFilter(grid, row, column, filter) {
	    // Cache typeof condition
	    var conditionType = typeof(filter.condition);

	    // Term to search for.
	    var term = filter.term;

	    // Get the column value for this row
	    var value;
	    if ( column.filterCellFiltered ){
	      value = grid.getCellDisplayValue(row, column);
	    } else {
	      value = grid.getCellValue(row, column);
	    }


	    // If the filter's condition is a RegExp, then use it
	    if (filter.condition instanceof RegExp) {
	      return filter.condition.test(value);
	    }

	    // If the filter's condition is a function, run it
	    if (conditionType === 'function') {
	      return filter.condition(term, value, row, column);
	    }

	    if (filter.startswithRE) {
	      return filter.startswithRE.test(value);
	    }

	    if (filter.endswithRE) {
	      return filter.endswithRE.test(value);
	    }

	    if (filter.containsRE) {
	      return filter.containsRE.test(value);
	    }

	    if (filter.exactRE) {
	      return filter.exactRE.test(value);
	    }

	    if (filter.condition === uiGridConstants.filter.NOT_EQUAL) {
	      var regex = new RegExp('^' + term + '$');
	      return !regex.exec(value);
	    }

	    if (typeof(value) === 'number' && typeof(term) === 'string' ){
	      // if the term has a decimal in it, it comes through as '9\.4', we need to take out the \
	      // the same for negative numbers
	      // TODO: I suspect the right answer is to look at escapeRegExp at the top of this code file, maybe it's not needed?
	      var tempFloat = parseFloat(term.replace(/\\\./,'.').replace(/\\\-/,'-'));
	      if (!isNaN(tempFloat)) {
	        term = tempFloat;
	      }
	    }

	    if (filter.flags.date === true) {
	      value = new Date(value);
	      // If the term has a dash in it, it comes through as '\-' -- we need to take out the '\'.
	      term = new Date(term.replace(/\\/g, ''));
	    }

	    if (filter.condition === uiGridConstants.filter.GREATER_THAN) {
	      return (value > term);
	    }

	    if (filter.condition === uiGridConstants.filter.GREATER_THAN_OR_EQUAL) {
	      return (value >= term);
	    }

	    if (filter.condition === uiGridConstants.filter.LESS_THAN) {
	      return (value < term);
	    }

	    if (filter.condition === uiGridConstants.filter.LESS_THAN_OR_EQUAL) {
	      return (value <= term);
	    }

	    return true;
	  };


	  /**
	   * @ngdoc boolean
	   * @name useExternalFiltering
	   * @propertyOf ui.grid.class:GridOptions
	   * @description False by default. When enabled, this setting suppresses the internal filtering.
	   * All UI logic will still operate, allowing filter conditions to be set and modified.
	   * 
	   * The external filter logic can listen for the `filterChange` event, which fires whenever
	   * a filter has been adjusted.
	   */
	  /**
	   * @ngdoc function
	   * @name searchColumn
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Process provided filters on provided column against a given row. If the row meets 
	   * the conditions on all the filters, return true.
	   * @param {Grid} grid Grid to search in
	   * @param {GridRow} row Row to search on
	   * @param {GridCol} column Column with the filters to use
	   * @param {array} filters array of pre-parsed/preprocessed filters to apply
	   * @returns {boolean} Whether the column matches or not.
	   */
	  rowSearcher.searchColumn = function searchColumn(grid, row, column, filters) {
	    if (grid.options.useExternalFiltering) {
	      return true;
	    }

	    var filtersLength = filters.length;
	    for (var i = 0; i < filtersLength; i++) {
	      var filter = filters[i];

	      if ( !gridUtil.isNullOrUndefined(filter.term) && filter.term !== '' || filter.noTerm ){ 
	        var ret = rowSearcher.runColumnFilter(grid, row, column, filter);
	        if (!ret) {
	          return false;
	        }
	      }
	    }

	    return true;
	  };


	  /**
	   * @ngdoc function
	   * @name search
	   * @methodOf ui.grid.service:rowSearcher
	   * @description Run a search across the given rows and columns, marking any rows that don't 
	   * match the stored col.filters or col.filter as invisible.
	   * @param {Grid} grid Grid instance to search inside
	   * @param {Array[GridRow]} rows GridRows to filter
	   * @param {Array[GridColumn]} columns GridColumns with filters to process
	   */
	  rowSearcher.search = function search(grid, rows, columns) {
	    /*
	     * Added performance optimisations into this code base, as this logic creates deeply nested
	     * loops and is therefore very performance sensitive.  In particular, avoiding forEach as
	     * this impacts some browser optimisers (particularly Chrome), using iterators instead
	     */

	    // Don't do anything if we weren't passed any rows
	    if (!rows) {
	      return;
	    }

	    // don't filter if filtering currently disabled
	    if (!grid.options.enableFiltering){
	      return rows;
	    }

	    // Build list of filters to apply
	    var filterData = [];

	    var colsLength = columns.length;

	    var hasTerm = function( filters ) {
	      var hasTerm = false;

	      filters.forEach( function (filter) {
	        if ( !gridUtil.isNullOrUndefined(filter.term) && filter.term !== '' || filter.noTerm ){
	          hasTerm = true;
	        }
	      });

	      return hasTerm;
	    };

	    for (var i = 0; i < colsLength; i++) {
	      var col = columns[i];

	      if (typeof(col.filters) !== 'undefined' && hasTerm(col.filters) ) {
	        filterData.push( { col: col, filters: rowSearcher.setupFilters(col.filters) } );
	      }
	    }

	    if (filterData.length > 0) {
	      // define functions outside the loop, performance optimisation
	      var foreachRow = function(grid, row, col, filters){
	        if ( row.visible && !rowSearcher.searchColumn(grid, row, col, filters) ) {
	          row.visible = false;
	        }
	      };

	      var foreachFilterCol = function(grid, filterData){
	        var rowsLength = rows.length;
	        for ( var i = 0; i < rowsLength; i++){
	          foreachRow(grid, rows[i], filterData.col, filterData.filters);  
	        }
	      };

	      // nested loop itself - foreachFilterCol, which in turn calls foreachRow
	      var filterDataLength = filterData.length;
	      for ( var j = 0; j < filterDataLength; j++){
	        foreachFilterCol( grid, filterData[j] );  
	      }

	      if (grid.api.core.raise.rowsVisibleChanged) {
	        grid.api.core.raise.rowsVisibleChanged();
	      }

	      // drop any invisible rows
	      // keeping these, as needed with filtering for trees - we have to come back and make parent nodes visible if child nodes are selected in the filter
	      // rows = rows.filter(function(row){ return row.visible; });

	    }

	    return rows;
	  };

	  return rowSearcher;
	}]);

	})();

	(function() {

	var module = angular.module('ui.grid');

	/**
	 * @ngdoc object
	 * @name ui.grid.class:RowSorter
	 * @description RowSorter provides the default sorting mechanisms,
	 * including guessing column types and applying appropriate sort
	 * algorithms
	 *
	 */

	module.service('rowSorter', ['$parse', 'uiGridConstants', function ($parse, uiGridConstants) {
	  var currencyRegexStr =
	    '(' +
	    uiGridConstants.CURRENCY_SYMBOLS
	      .map(function (a) { return '\\' + a; }) // Escape all the currency symbols ($ at least will jack up this regex)
	      .join('|') + // Join all the symbols together with |s
	    ')?';

	  // /^[-+]?[£$¤¥]?[\d,.]+%?$/
	  var numberStrRegex = new RegExp('^[-+]?' + currencyRegexStr + '[\\d,.]+' + currencyRegexStr + '%?$');

	  var rowSorter = {
	    // Cache of sorting functions. Once we create them, we don't want to keep re-doing it
	    //   this takes a piece of data from the cell and tries to determine its type and what sorting
	    //   function to use for it
	    colSortFnCache: {}
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name guessSortFn
	   * @description Assigns a sort function to use based on the itemType in the column
	   * @param {string} itemType one of 'number', 'boolean', 'string', 'date', 'object'.  And
	   * error will be thrown for any other type.
	   * @returns {function} a sort function that will sort that type
	   */
	  rowSorter.guessSortFn = function guessSortFn(itemType) {
	    switch (itemType) {
	      case "number":
	        return rowSorter.sortNumber;
	      case "numberStr":
	        return rowSorter.sortNumberStr;
	      case "boolean":
	        return rowSorter.sortBool;
	      case "string":
	        return rowSorter.sortAlpha;
	      case "date":
	        return rowSorter.sortDate;
	      case "object":
	        return rowSorter.basicSort;
	      default:
	        throw new Error('No sorting function found for type:' + itemType);
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name handleNulls
	   * @description Sorts nulls and undefined to the bottom (top when
	   * descending).  Called by each of the internal sorters before
	   * attempting to sort.  Note that this method is available on the core api
	   * via gridApi.core.sortHandleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} null if there were no nulls/undefineds, otherwise returns
	   * a sort value that should be passed back from the sort function
	   */
	  rowSorter.handleNulls = function handleNulls(a, b) {
	    // We want to allow zero values and false values to be evaluated in the sort function
	    if ((!a && a !== 0 && a !== false) || (!b && b !== 0 && b !== false)) {
	      // We want to force nulls and such to the bottom when we sort... which effectively is "greater than"
	      if ((!a && a !== 0 && a !== false) && (!b && b !== 0 && b !== false)) {
	        return 0;
	      }
	      else if (!a && a !== 0 && a !== false) {
	        return 1;
	      }
	      else if (!b && b !== 0 && b !== false) {
	        return -1;
	      }
	    }
	    return null;
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name basicSort
	   * @description Sorts any values that provide the < method, including strings
	   * or numbers.  Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.basicSort = function basicSort(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      if (a === b) {
	        return 0;
	      }
	      if (a < b) {
	        return -1;
	      }
	      return 1;
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name sortNumber
	   * @description Sorts numerical values.  Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortNumber = function sortNumber(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      return a - b;
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name sortNumberStr
	   * @description Sorts numerical values that are stored in a string (i.e. parses them to numbers first).
	   * Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortNumberStr = function sortNumberStr(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      var numA, // The parsed number form of 'a'
	          numB, // The parsed number form of 'b'
	          badA = false,
	          badB = false;

	      // Try to parse 'a' to a float
	      numA = parseFloat(a.replace(/[^0-9.-]/g, ''));

	      // If 'a' couldn't be parsed to float, flag it as bad
	      if (isNaN(numA)) {
	          badA = true;
	      }

	      // Try to parse 'b' to a float
	      numB = parseFloat(b.replace(/[^0-9.-]/g, ''));

	      // If 'b' couldn't be parsed to float, flag it as bad
	      if (isNaN(numB)) {
	          badB = true;
	      }

	      // We want bad ones to get pushed to the bottom... which effectively is "greater than"
	      if (badA && badB) {
	          return 0;
	      }

	      if (badA) {
	          return 1;
	      }

	      if (badB) {
	          return -1;
	      }

	      return numA - numB;
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name sortAlpha
	   * @description Sorts string values. Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortAlpha = function sortAlpha(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      var strA = a.toString().toLowerCase(),
	          strB = b.toString().toLowerCase();

	      return strA === strB ? 0 : strA.localeCompare(strB);
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name sortDate
	   * @description Sorts date values. Handles nulls and undefined through calling handleNulls.
	   * Handles date strings by converting to Date object if not already an instance of Date
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortDate = function sortDate(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      if (!(a instanceof Date)) {
	        a = new Date(a);
	      }
	      if (!(b instanceof Date)){
	        b = new Date(b);
	      }
	      var timeA = a.getTime(),
	          timeB = b.getTime();

	      return timeA === timeB ? 0 : (timeA < timeB ? -1 : 1);
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name sortBool
	   * @description Sorts boolean values, true is considered larger than false.
	   * Handles nulls and undefined through calling handleNulls
	   * @param {object} a sort value a
	   * @param {object} b sort value b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.sortBool = function sortBool(a, b) {
	    var nulls = rowSorter.handleNulls(a, b);
	    if ( nulls !== null ){
	      return nulls;
	    } else {
	      if (a && b) {
	        return 0;
	      }

	      if (!a && !b) {
	        return 0;
	      }
	      else {
	        return a ? 1 : -1;
	      }
	    }
	  };


	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name getSortFn
	   * @description Get the sort function for the column.  Looks first in
	   * rowSorter.colSortFnCache using the column name, failing that it
	   * looks at col.sortingAlgorithm (and puts it in the cache), failing that
	   * it guesses the sort algorithm based on the data type.
	   *
	   * The cache currently seems a bit pointless, as none of the work we do is
	   * processor intensive enough to need caching.  Presumably in future we might
	   * inspect the row data itself to guess the sort function, and in that case
	   * it would make sense to have a cache, the infrastructure is in place to allow
	   * that.
	   *
	   * @param {Grid} grid the grid to consider
	   * @param {GridCol} col the column to find a function for
	   * @param {array} rows an array of grid rows.  Currently unused, but presumably in future
	   * we might inspect the rows themselves to decide what sort of data might be there
	   * @returns {function} the sort function chosen for the column
	   */
	  rowSorter.getSortFn = function getSortFn(grid, col, rows) {
	    var sortFn, item;

	    // See if we already figured out what to use to sort the column and have it in the cache
	    if (rowSorter.colSortFnCache[col.colDef.name]) {
	      sortFn = rowSorter.colSortFnCache[col.colDef.name];
	    }
	    // If the column has its OWN sorting algorithm, use that
	    else if (col.sortingAlgorithm !== undefined) {
	      sortFn = col.sortingAlgorithm;
	      rowSorter.colSortFnCache[col.colDef.name] = col.sortingAlgorithm;
	    }
	    // Always default to sortAlpha when sorting after a cellFilter
	    else if ( col.sortCellFiltered && col.cellFilter ){
	      sortFn = rowSorter.sortAlpha;
	      rowSorter.colSortFnCache[col.colDef.name] = sortFn;
	    }
	    // Try and guess what sort function to use
	    else {
	      // Guess the sort function
	      sortFn = rowSorter.guessSortFn(col.colDef.type);

	      // If we found a sort function, cache it
	      if (sortFn) {
	        rowSorter.colSortFnCache[col.colDef.name] = sortFn;
	      }
	      else {
	        // We assign the alpha sort because anything that is null/undefined will never get passed to
	        // the actual sorting function. It will get caught in our null check and returned to be sorted
	        // down to the bottom
	        sortFn = rowSorter.sortAlpha;
	      }
	    }

	    return sortFn;
	  };



	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name prioritySort
	   * @description Used where multiple columns are present in the sort criteria,
	   * we determine which column should take precedence in the sort by sorting
	   * the columns based on their sort.priority
	   *
	   * @param {gridColumn} a column a
	   * @param {gridColumn} b column b
	   * @returns {number} normal sort function, returns -ve, 0, +ve
	   */
	  rowSorter.prioritySort = function (a, b) {
	    // Both columns have a sort priority
	    if (a.sort.priority !== undefined && b.sort.priority !== undefined) {
	      // A is higher priority
	      if (a.sort.priority < b.sort.priority) {
	        return -1;
	      }
	      // Equal
	      else if (a.sort.priority === b.sort.priority) {
	        return 0;
	      }
	      // B is higher
	      else {
	        return 1;
	      }
	    }
	    // Only A has a priority
	    else if (a.sort.priority || a.sort.priority === undefined) {
	      return -1;
	    }
	    // Only B has a priority
	    else if (b.sort.priority || b.sort.priority === undefined) {
	      return 1;
	    }
	    // Neither has a priority
	    else {
	      return 0;
	    }
	  };


	  /**
	   * @ngdoc object
	   * @name useExternalSorting
	   * @propertyOf ui.grid.class:GridOptions
	   * @description Prevents the internal sorting from executing.  Events will
	   * still be fired when the sort changes, and the sort information on
	   * the columns will be updated, allowing an external sorter (for example,
	   * server sorting) to be implemented.  Defaults to false.
	   *
	   */
	  /**
	   * @ngdoc method
	   * @methodOf ui.grid.class:RowSorter
	   * @name sort
	   * @description sorts the grid
	   * @param {Object} grid the grid itself
	   * @param {array} rows the rows to be sorted
	   * @param {array} columns the columns in which to look
	   * for sort criteria
	   * @returns {array} sorted rows
	   */
	  rowSorter.sort = function rowSorterSort(grid, rows, columns) {
	    // first make sure we are even supposed to do work
	    if (!rows) {
	      return;
	    }

	    if (grid.options.useExternalSorting){
	      return rows;
	    }

	    // Build the list of columns to sort by
	    var sortCols = [];
	    columns.forEach(function (col) {
	      if (col.sort && !col.sort.ignoreSort && col.sort.direction && (col.sort.direction === uiGridConstants.ASC || col.sort.direction === uiGridConstants.DESC)) {
	        sortCols.push(col);
	      }
	    });

	    // Sort the "sort columns" by their sort priority
	    sortCols = sortCols.sort(rowSorter.prioritySort);

	    // Now rows to sort by, maintain original order
	    if (sortCols.length === 0) {
	      return rows;
	    }

	    // Re-usable variables
	    var col, direction;

	    // put a custom index field on each row, used to make a stable sort out of unstable sorts (e.g. Chrome)
	    var setIndex = function( row, idx ){
	      row.entity.$$uiGridIndex = idx;
	    };
	    rows.forEach(setIndex);

	    // IE9-11 HACK.... the 'rows' variable would be empty where we call rowSorter.getSortFn(...) below. We have to use a separate reference
	    // var d = data.slice(0);
	    var r = rows.slice(0);

	    // Now actually sort the data
	    var rowSortFn = function (rowA, rowB) {
	      var tem = 0,
	          idx = 0,
	          sortFn;

	      while (tem === 0 && idx < sortCols.length) {
	        // grab the metadata for the rest of the logic
	        col = sortCols[idx];
	        direction = sortCols[idx].sort.direction;

	        sortFn = rowSorter.getSortFn(grid, col, r);

	        var propA, propB;

	        if ( col.sortCellFiltered ){
	          propA = grid.getCellDisplayValue(rowA, col);
	          propB = grid.getCellDisplayValue(rowB, col);
	        } else {
	          propA = grid.getCellValue(rowA, col);
	          propB = grid.getCellValue(rowB, col);
	        }

	        tem = sortFn(propA, propB, rowA, rowB, direction);

	        idx++;
	      }

	      // Chrome doesn't implement a stable sort function.  If our sort returns 0
	      // (i.e. the items are equal), and we're at the last sort column in the list,
	      // then return the previous order using our custom
	      // index variable
	      if (tem === 0 ) {
	        return rowA.entity.$$uiGridIndex - rowB.entity.$$uiGridIndex;
	      }

	      // Made it this far, we don't have to worry about null & undefined
	      if (direction === uiGridConstants.ASC) {
	        return tem;
	      } else {
	        return 0 - tem;
	      }
	    };

	    var newRows = rows.sort(rowSortFn);

	    // remove the custom index field on each row, used to make a stable sort out of unstable sorts (e.g. Chrome)
	    var clearIndex = function( row, idx ){
	       delete row.entity.$$uiGridIndex;
	    };
	    rows.forEach(clearIndex);

	    return newRows;
	  };

	  return rowSorter;
	}]);

	})();

	(function() {

	var module = angular.module('ui.grid');

	var bindPolyfill;
	if (typeof Function.prototype.bind !== "function") {
	  bindPolyfill = function() {
	    var slice = Array.prototype.slice;
	    return function(context) {
	      var fn = this,
	        args = slice.call(arguments, 1);
	      if (args.length) {
	        return function() {
	          return arguments.length ? fn.apply(context, args.concat(slice.call(arguments))) : fn.apply(context, args);
	        };
	      }
	      return function() {
	        return arguments.length ? fn.apply(context, arguments) : fn.call(context);
	      };
	    };
	  };
	}

	function  getStyles (elem) {
	  var e = elem;
	  if (typeof(e.length) !== 'undefined' && e.length) {
	    e = elem[0];
	  }

	  return e.ownerDocument.defaultView.getComputedStyle(e, null);
	}

	var rnumnonpx = new RegExp( "^(" + (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source + ")(?!px)[a-z%]+$", "i" ),
	    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	    rdisplayswap = /^(block|none|table(?!-c[ea]).+)/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" };

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	  var i = extra === ( isBorderBox ? 'border' : 'content' ) ?
	          // If we already have the right measurement, avoid augmentation
	          4 :
	          // Otherwise initialize for horizontal or vertical properties
	          name === 'width' ? 1 : 0,

	          val = 0;

	  var sides = ['Top', 'Right', 'Bottom', 'Left'];

	  for ( ; i < 4; i += 2 ) {
	    var side = sides[i];
	    // dump('side', side);

	    // both box models exclude margin, so add it if we want it
	    if ( extra === 'margin' ) {
	      var marg = parseFloat(styles[extra + side]);
	      if (!isNaN(marg)) {
	        val += marg;
	      }
	    }
	    // dump('val1', val);

	    if ( isBorderBox ) {
	      // border-box includes padding, so remove it if we want content
	      if ( extra === 'content' ) {
	        var padd = parseFloat(styles['padding' + side]);
	        if (!isNaN(padd)) {
	          val -= padd;
	          // dump('val2', val);
	        }
	      }

	      // at this point, extra isn't border nor margin, so remove border
	      if ( extra !== 'margin' ) {
	        var bordermarg = parseFloat(styles['border' + side + 'Width']);
	        if (!isNaN(bordermarg)) {
	          val -= bordermarg;
	          // dump('val3', val);
	        }
	      }
	    }
	    else {
	      // at this point, extra isn't content, so add padding
	      var nocontentPad = parseFloat(styles['padding' + side]);
	      if (!isNaN(nocontentPad)) {
	        val += nocontentPad;
	        // dump('val4', val);
	      }

	      // at this point, extra isn't content nor padding, so add border
	      if ( extra !== 'padding') {
	        var nocontentnopad = parseFloat(styles['border' + side + 'Width']);
	        if (!isNaN(nocontentnopad)) {
	          val += nocontentnopad;
	          // dump('val5', val);
	        }
	      }
	    }
	  }

	  // dump('augVal', val);

	  return val;
	}

	function getWidthOrHeight( elem, name, extra ) {
	  // Start with offset property, which is equivalent to the border-box value
	  var valueIsBorderBox = true,
	          val, // = name === 'width' ? elem.offsetWidth : elem.offsetHeight,
	          styles = getStyles(elem),
	          isBorderBox = styles['boxSizing'] === 'border-box';

	  // some non-html elements return undefined for offsetWidth, so check for null/undefined
	  // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	  // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	  if ( val <= 0 || val == null ) {
	    // Fall back to computed then uncomputed css if necessary
	    val = styles[name];
	    if ( val < 0 || val == null ) {
	      val = elem.style[ name ];
	    }

	    // Computed unit is not pixels. Stop here and return.
	    if ( rnumnonpx.test(val) ) {
	      return val;
	    }

	    // we need the check for style in case a browser which returns unreliable values
	    // for getComputedStyle silently falls back to the reliable elem.style
	    valueIsBorderBox = isBorderBox &&
	            ( true || val === elem.style[ name ] ); // use 'true' instead of 'support.boxSizingReliable()'

	    // Normalize "", auto, and prepare for extra
	    val = parseFloat( val ) || 0;
	  }

	  // use the active box-sizing model to add/subtract irrelevant styles
	  var ret = ( val +
	    augmentWidthOrHeight(
	      elem,
	      name,
	      extra || ( isBorderBox ? "border" : "content" ),
	      valueIsBorderBox,
	      styles
	    )
	  );

	  // dump('ret', ret, val);
	  return ret;
	}

	function getLineHeight(elm) {
	  elm = angular.element(elm)[0];
	  var parent = elm.parentElement;

	  if (!parent) {
	    parent = document.getElementsByTagName('body')[0];
	  }

	  return parseInt( getStyles(parent).fontSize ) || parseInt( getStyles(elm).fontSize ) || 16;
	}

	var uid = ['0', '0', '0', '0'];
	var uidPrefix = 'uiGrid-';

	/**
	 *  @ngdoc service
	 *  @name ui.grid.service:GridUtil
	 *
	 *  @description Grid utility functions
	 */
	module.service('gridUtil', ['$log', '$window', '$document', '$http', '$templateCache', '$timeout', '$interval', '$injector', '$q', '$interpolate', 'uiGridConstants',
	  function ($log, $window, $document, $http, $templateCache, $timeout, $interval, $injector, $q, $interpolate, uiGridConstants) {
	  var s = {

	    augmentWidthOrHeight: augmentWidthOrHeight,

	    getStyles: getStyles,

	    /**
	     * @ngdoc method
	     * @name createBoundedWrapper
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {object} Object to bind 'this' to
	     * @param {method} Method to bind
	     * @returns {Function} The wrapper that performs the binding
	     *
	     * @description
	     * Binds given method to given object.
	     *
	     * By means of a wrapper, ensures that ``method`` is always bound to
	     * ``object`` regardless of its calling environment.
	     * Iow, inside ``method``, ``this`` always points to ``object``.
	     *
	     * See http://alistapart.com/article/getoutbindingsituations
	     *
	     */
	    createBoundedWrapper: function(object, method) {
	        return function() {
	            return method.apply(object, arguments);
	        };
	    },


	    /**
	     * @ngdoc method
	     * @name readableColumnName
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {string} columnName Column name as a string
	     * @returns {string} Column name appropriately capitalized and split apart
	     *
	       @example
	       <example module="app">
	        <file name="app.js">
	          var app = angular.module('app', ['ui.grid']);

	          app.controller('MainCtrl', ['$scope', 'gridUtil', function ($scope, gridUtil) {
	            $scope.name = 'firstName';
	            $scope.columnName = function(name) {
	              return gridUtil.readableColumnName(name);
	            };
	          }]);
	        </file>
	        <file name="index.html">
	          <div ng-controller="MainCtrl">
	            <strong>Column name:</strong> <input ng-model="name" />
	            <br>
	            <strong>Output:</strong> <span ng-bind="columnName(name)"></span>
	          </div>
	        </file>
	      </example>
	     */
	    readableColumnName: function (columnName) {
	      // Convert underscores to spaces
	      if (typeof(columnName) === 'undefined' || columnName === undefined || columnName === null) { return columnName; }

	      if (typeof(columnName) !== 'string') {
	        columnName = String(columnName);
	      }

	      return columnName.replace(/_+/g, ' ')
	        // Replace a completely all-capsed word with a first-letter-capitalized version
	        .replace(/^[A-Z]+$/, function (match) {
	          return angular.lowercase(angular.uppercase(match.charAt(0)) + match.slice(1));
	        })
	        // Capitalize the first letter of words
	        .replace(/([\w\u00C0-\u017F]+)/g, function (match) {
	          return angular.uppercase(match.charAt(0)) + match.slice(1);
	        })
	        // Put a space in between words that have partial capilizations (i.e. 'firstName' becomes 'First Name')
	        // .replace(/([A-Z]|[A-Z]\w+)([A-Z])/g, "$1 $2");
	        // .replace(/(\w+?|\w)([A-Z])/g, "$1 $2");
	        .replace(/(\w+?(?=[A-Z]))/g, '$1 ');
	    },

	    /**
	     * @ngdoc method
	     * @name getColumnsFromData
	     * @methodOf ui.grid.service:GridUtil
	     * @description Return a list of column names, given a data set
	     *
	     * @param {string} data Data array for grid
	     * @returns {Object} Column definitions with field accessor and column name
	     *
	     * @example
	       <pre>
	         var data = [
	           { firstName: 'Bob', lastName: 'Jones' },
	           { firstName: 'Frank', lastName: 'Smith' }
	         ];

	         var columnDefs = GridUtil.getColumnsFromData(data, excludeProperties);

	         columnDefs == [
	          {
	            field: 'firstName',
	            name: 'First Name'
	          },
	          {
	            field: 'lastName',
	            name: 'Last Name'
	          }
	         ];
	       </pre>
	     */
	    getColumnsFromData: function (data, excludeProperties) {
	      var columnDefs = [];

	      if (!data || typeof(data[0]) === 'undefined' || data[0] === undefined) { return []; }
	      if (angular.isUndefined(excludeProperties)) { excludeProperties = []; }

	      var item = data[0];

	      angular.forEach(item,function (prop, propName) {
	        if ( excludeProperties.indexOf(propName) === -1){
	          columnDefs.push({
	            name: propName
	          });
	        }
	      });

	      return columnDefs;
	    },

	    /**
	     * @ngdoc method
	     * @name newId
	     * @methodOf ui.grid.service:GridUtil
	     * @description Return a unique ID string
	     *
	     * @returns {string} Unique string
	     *
	     * @example
	       <pre>
	        var id = GridUtil.newId();

	        # 1387305700482;
	       </pre>
	     */
	    newId: (function() {
	      var seedId = new Date().getTime();
	      return function() {
	          return seedId += 1;
	      };
	    })(),


	    /**
	     * @ngdoc method
	     * @name getTemplate
	     * @methodOf ui.grid.service:GridUtil
	     * @description Get's template from cache / element / url
	     *
	     * @param {string|element|promise} Either a string representing the template id, a string representing the template url,
	     *   an jQuery/Angualr element, or a promise that returns the template contents to use.
	     * @returns {object} a promise resolving to template contents
	     *
	     * @example
	     <pre>
	     GridUtil.getTemplate(url).then(function (contents) {
	          alert(contents);
	        })
	     </pre>
	     */
	    getTemplate: function (template) {
	      // Try to fetch the template out of the templateCache
	      if ($templateCache.get(template)) {
	        return s.postProcessTemplate($templateCache.get(template));
	      }

	      // See if the template is itself a promise
	      if (angular.isFunction(template.then)) {
	        return template.then(s.postProcessTemplate);
	      }

	      // If the template is an element, return the element
	      try {
	        if (angular.element(template).length > 0) {
	          return $q.when(template).then(s.postProcessTemplate);
	        }
	      }
	      catch (err){
	        //do nothing; not valid html
	      }

	      s.logDebug('fetching url', template);

	      // Default to trying to fetch the template as a url with $http
	      return $http({ method: 'GET', url: template})
	        .then(
	          function (result) {
	            var templateHtml = result.data.trim();
	            //put in templateCache for next call
	            $templateCache.put(template, templateHtml);
	            return templateHtml;
	          },
	          function (err) {
	            throw new Error("Could not get template " + template + ": " + err);
	          }
	        )
	        .then(s.postProcessTemplate);
	    },

	    //
	    postProcessTemplate: function (template) {
	      var startSym = $interpolate.startSymbol(),
	          endSym = $interpolate.endSymbol();

	      // If either of the interpolation symbols have been changed, we need to alter this template
	      if (startSym !== '{{' || endSym !== '}}') {
	        template = template.replace(/\{\{/g, startSym);
	        template = template.replace(/\}\}/g, endSym);
	      }

	      return $q.when(template);
	    },

	    /**
	     * @ngdoc method
	     * @name guessType
	     * @methodOf ui.grid.service:GridUtil
	     * @description guesses the type of an argument
	     *
	     * @param {string/number/bool/object} item variable to examine
	     * @returns {string} one of the following
	     * - 'string'
	     * - 'boolean'
	     * - 'number'
	     * - 'date'
	     * - 'object'
	     */
	    guessType : function (item) {
	      var itemType = typeof(item);

	      // Check for numbers and booleans
	      switch (itemType) {
	        case "number":
	        case "boolean":
	        case "string":
	          return itemType;
	        default:
	          if (angular.isDate(item)) {
	            return "date";
	          }
	          return "object";
	      }
	    },


	  /**
	    * @ngdoc method
	    * @name elementWidth
	    * @methodOf ui.grid.service:GridUtil
	    *
	    * @param {element} element DOM element
	    * @param {string} [extra] Optional modifier for calculation. Use 'margin' to account for margins on element
	    *
	    * @returns {number} Element width in pixels, accounting for any borders, etc.
	    */
	    elementWidth: function (elem) {

	    },

	    /**
	    * @ngdoc method
	    * @name elementHeight
	    * @methodOf ui.grid.service:GridUtil
	    *
	    * @param {element} element DOM element
	    * @param {string} [extra] Optional modifier for calculation. Use 'margin' to account for margins on element
	    *
	    * @returns {number} Element height in pixels, accounting for any borders, etc.
	    */
	    elementHeight: function (elem) {

	    },

	    // Thanks to http://stackoverflow.com/a/13382873/888165
	    getScrollbarWidth: function() {
	        var outer = document.createElement("div");
	        outer.style.visibility = "hidden";
	        outer.style.width = "100px";
	        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps

	        document.body.appendChild(outer);

	        var widthNoScroll = outer.offsetWidth;
	        // force scrollbars
	        outer.style.overflow = "scroll";

	        // add innerdiv
	        var inner = document.createElement("div");
	        inner.style.width = "100%";
	        outer.appendChild(inner);

	        var widthWithScroll = inner.offsetWidth;

	        // remove divs
	        outer.parentNode.removeChild(outer);

	        return widthNoScroll - widthWithScroll;
	    },

	    swap: function( elem, options, callback, args ) {
	      var ret, name,
	              old = {};

	      // Remember the old values, and insert the new ones
	      for ( name in options ) {
	        old[ name ] = elem.style[ name ];
	        elem.style[ name ] = options[ name ];
	      }

	      ret = callback.apply( elem, args || [] );

	      // Revert the old values
	      for ( name in options ) {
	        elem.style[ name ] = old[ name ];
	      }

	      return ret;
	    },

	    fakeElement: function( elem, options, callback, args ) {
	      var ret, name,
	          newElement = angular.element(elem).clone()[0];

	      for ( name in options ) {
	        newElement.style[ name ] = options[ name ];
	      }

	      angular.element(document.body).append(newElement);

	      ret = callback.call( newElement, newElement );

	      angular.element(newElement).remove();

	      return ret;
	    },

	    /**
	    * @ngdoc method
	    * @name normalizeWheelEvent
	    * @methodOf ui.grid.service:GridUtil
	    *
	    * @param {event} event A mouse wheel event
	    *
	    * @returns {event} A normalized event
	    *
	    * @description
	    * Given an event from this list:
	    *
	    * `wheel, mousewheel, DomMouseScroll, MozMousePixelScroll`
	    *
	    * "normalize" it
	    * so that it stays consistent no matter what browser it comes from (i.e. scale it correctly and make sure the direction is right.)
	    */
	    normalizeWheelEvent: function (event) {
	      // var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
	      // var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
	      var lowestDelta, lowestDeltaXY;

	      var orgEvent   = event || window.event,
	          args       = [].slice.call(arguments, 1),
	          delta      = 0,
	          deltaX     = 0,
	          deltaY     = 0,
	          absDelta   = 0,
	          absDeltaXY = 0,
	          fn;

	      // event = $.event.fix(orgEvent);
	      // event.type = 'mousewheel';

	      // NOTE: jQuery masks the event and stores it in the event as originalEvent
	      if (orgEvent.originalEvent) {
	        orgEvent = orgEvent.originalEvent;
	      }

	      // Old school scrollwheel delta
	      if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
	      if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

	      // At a minimum, setup the deltaY to be delta
	      deltaY = delta;

	      // Firefox < 17 related to DOMMouseScroll event
	      if ( orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
	          deltaY = 0;
	          deltaX = delta * -1;
	      }

	      // New school wheel delta (wheel event)
	      if ( orgEvent.deltaY ) {
	          deltaY = orgEvent.deltaY * -1;
	          delta  = deltaY;
	      }
	      if ( orgEvent.deltaX ) {
	          deltaX = orgEvent.deltaX;
	          delta  = deltaX * -1;
	      }

	      // Webkit
	      if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
	      if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX; }

	      // Look for lowest delta to normalize the delta values
	      absDelta = Math.abs(delta);
	      if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
	      absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
	      if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

	      // Get a whole value for the deltas
	      fn     = delta > 0 ? 'floor' : 'ceil';
	      delta  = Math[fn](delta  / lowestDelta);
	      deltaX = Math[fn](deltaX / lowestDeltaXY);
	      deltaY = Math[fn](deltaY / lowestDeltaXY);

	      return {
	        delta: delta,
	        deltaX: deltaX,
	        deltaY: deltaY
	      };
	    },

	    // Stolen from Modernizr
	    // TODO: make this, and everythign that flows from it, robust
	    //http://www.stucox.com/blog/you-cant-detect-a-touchscreen/
	    isTouchEnabled: function() {
	      var bool;

	      if (('ontouchstart' in $window) || $window.DocumentTouch && $document instanceof DocumentTouch) {
	        bool = true;
	      }

	      return bool;
	    },

	    isNullOrUndefined: function(obj) {
	      if (obj === undefined || obj === null) {
	        return true;
	      }
	      return false;
	    },

	    endsWith: function(str, suffix) {
	      if (!str || !suffix || typeof str !== "string") {
	        return false;
	      }
	      return str.indexOf(suffix, str.length - suffix.length) !== -1;
	    },

	    arrayContainsObjectWithProperty: function(array, propertyName, propertyValue) {
	        var found = false;
	        angular.forEach(array, function (object) {
	            if (object[propertyName] === propertyValue) {
	                found = true;
	            }
	        });
	        return found;
	    },

	    //// Shim requestAnimationFrame
	    //requestAnimationFrame: $window.requestAnimationFrame && $window.requestAnimationFrame.bind($window) ||
	    //                       $window.webkitRequestAnimationFrame && $window.webkitRequestAnimationFrame.bind($window) ||
	    //                       function(fn) {
	    //                         return $timeout(fn, 10, false);
	    //                       },

	    numericAndNullSort: function (a, b) {
	      if (a === null) { return 1; }
	      if (b === null) { return -1; }
	      if (a === null && b === null) { return 0; }
	      return a - b;
	    },

	    // Disable ngAnimate animations on an element
	    disableAnimations: function (element) {
	      var $animate;
	      try {
	        $animate = $injector.get('$animate');
	        // See: http://brianhann.com/angular-1-4-breaking-changes-to-be-aware-of/#animate
	        if (angular.version.major > 1 || (angular.version.major === 1 && angular.version.minor >= 4)) {
	          $animate.enabled(element, false);
	        } else {
	          $animate.enabled(false, element);
	        }
	      }
	      catch (e) {}
	    },

	    enableAnimations: function (element) {
	      var $animate;
	      try {
	        $animate = $injector.get('$animate');
	        // See: http://brianhann.com/angular-1-4-breaking-changes-to-be-aware-of/#animate
	        if (angular.version.major > 1 || (angular.version.major === 1 && angular.version.minor >= 4)) {
	          $animate.enabled(element, true);
	        } else {
	          $animate.enabled(true, element);
	        }
	        return $animate;
	      }
	      catch (e) {}
	    },

	    // Blatantly stolen from Angular as it isn't exposed (yet. 2.0 maybe?)
	    nextUid: function nextUid() {
	      var index = uid.length;
	      var digit;

	      while (index) {
	        index--;
	        digit = uid[index].charCodeAt(0);
	        if (digit === 57 /*'9'*/) {
	          uid[index] = 'A';
	          return uidPrefix + uid.join('');
	        }
	        if (digit === 90  /*'Z'*/) {
	          uid[index] = '0';
	        } else {
	          uid[index] = String.fromCharCode(digit + 1);
	          return uidPrefix + uid.join('');
	        }
	      }
	      uid.unshift('0');

	      return uidPrefix + uid.join('');
	    },

	    // Blatantly stolen from Angular as it isn't exposed (yet. 2.0 maybe?)
	    hashKey: function hashKey(obj) {
	      var objType = typeof obj,
	          key;

	      if (objType === 'object' && obj !== null) {
	        if (typeof (key = obj.$$hashKey) === 'function') {
	          // must invoke on object to keep the right this
	          key = obj.$$hashKey();
	        }
	        else if (typeof(obj.$$hashKey) !== 'undefined' && obj.$$hashKey) {
	          key = obj.$$hashKey;
	        }
	        else if (key === undefined) {
	          key = obj.$$hashKey = s.nextUid();
	        }
	      }
	      else {
	        key = obj;
	      }

	      return objType + ':' + key;
	    },

	    resetUids: function () {
	      uid = ['0', '0', '0'];
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil
	     * @name logError
	     * @description wraps the $log method, allowing us to choose different
	     * treatment within ui-grid if we so desired.  At present we only log
	     * error messages if uiGridConstants.LOG_ERROR_MESSAGES is set to true
	     * @param {string} logMessage message to be logged to the console
	     *
	     */
	    logError: function( logMessage ){
	      if ( uiGridConstants.LOG_ERROR_MESSAGES ){
	        $log.error( logMessage );
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil
	     * @name logWarn
	     * @description wraps the $log method, allowing us to choose different
	     * treatment within ui-grid if we so desired.  At present we only log
	     * warning messages if uiGridConstants.LOG_WARN_MESSAGES is set to true
	     * @param {string} logMessage message to be logged to the console
	     *
	     */
	    logWarn: function( logMessage ){
	      if ( uiGridConstants.LOG_WARN_MESSAGES ){
	        $log.warn( logMessage );
	      }
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil
	     * @name logDebug
	     * @description wraps the $log method, allowing us to choose different
	     * treatment within ui-grid if we so desired.  At present we only log
	     * debug messages if uiGridConstants.LOG_DEBUG_MESSAGES is set to true
	     *
	     */
	    logDebug: function() {
	      if ( uiGridConstants.LOG_DEBUG_MESSAGES ){
	        $log.debug.apply($log, arguments);
	      }
	    }

	  };

	  /**
	   * @ngdoc object
	   * @name focus
	   * @propertyOf ui.grid.service:GridUtil
	   * @description Provies a set of methods to set the document focus inside the grid.
	   * See {@link ui.grid.service:GridUtil.focus} for more information.
	   */

	  /**
	   * @ngdoc object
	   * @name ui.grid.service:GridUtil.focus
	   * @description Provies a set of methods to set the document focus inside the grid.
	   * Timeouts are utilized to ensure that the focus is invoked after any other event has been triggered.
	   * e.g. click events that need to run before the focus or
	   * inputs elements that are in a disabled state but are enabled when those events
	   * are triggered.
	   */
	  s.focus = {
	    queue: [],
	    //http://stackoverflow.com/questions/25596399/set-element-focus-in-angular-way
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil.focus
	     * @name byId
	     * @description Sets the focus of the document to the given id value.
	     * If provided with the grid object it will automatically append the grid id.
	     * This is done to encourage unique dom id's as it allows for multiple grids on a
	     * page.
	     * @param {String} id the id of the dom element to set the focus on
	     * @param {Object=} Grid the grid object for this grid instance. See: {@link ui.grid.class:Grid}
	     * @param {Number} Grid.id the unique id for this grid. Already set on an initialized grid object.
	     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
	     * then the promise will fail with the `'canceled'` reason.
	     */
	    byId: function (id, Grid) {
	      this._purgeQueue();
	      var promise = $timeout(function() {
	        var elementID = (Grid && Grid.id ? Grid.id + '-' : '') + id;
	        var element = $window.document.getElementById(elementID);
	        if (element) {
	          element.focus();
	        } else {
	          s.logWarn('[focus.byId] Element id ' + elementID + ' was not found.');
	        }
	      });
	      this.queue.push(promise);
	      return promise;
	    },

	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil.focus
	     * @name byElement
	     * @description Sets the focus of the document to the given dom element.
	     * @param {(element|angular.element)} element the DOM element to set the focus on
	     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
	     * then the promise will fail with the `'canceled'` reason.
	     */
	    byElement: function(element){
	      if (!angular.isElement(element)){
	        s.logWarn("Trying to focus on an element that isn\'t an element.");
	        return $q.reject('not-element');
	      }
	      element = angular.element(element);
	      this._purgeQueue();
	      var promise = $timeout(function(){
	        if (element){
	          element[0].focus();
	        }
	      });
	      this.queue.push(promise);
	      return promise;
	    },
	    /**
	     * @ngdoc method
	     * @methodOf ui.grid.service:GridUtil.focus
	     * @name bySelector
	     * @description Sets the focus of the document to the given dom element.
	     * @param {(element|angular.element)} parentElement the parent/ancestor of the dom element that you are selecting using the query selector
	     * @param {String} querySelector finds the dom element using the {@link http://www.w3schools.com/jsref/met_document_queryselector.asp querySelector}
	     * @param {boolean} [aSync=false] If true then the selector will be querried inside of a timeout. Otherwise the selector will be querried imidately
	     * then the focus will be called.
	     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
	     * then the promise will fail with the `'canceled'` reason.
	     */
	    bySelector: function(parentElement, querySelector, aSync){
	      var self = this;
	      if (!angular.isElement(parentElement)){
	        throw new Error("The parent element is not an element.");
	      }
	      // Ensure that this is an angular element.
	      // It is fine if this is already an angular element.
	      parentElement = angular.element(parentElement);
	      var focusBySelector = function(){
	        var element = parentElement[0].querySelector(querySelector);
	        return self.byElement(element);
	      };
	      this._purgeQueue();
	      if (aSync){ //Do this asynchronysly
	        var promise = $timeout(focusBySelector);
	        this.queue.push($timeout(focusBySelector));
	        return promise;
	      } else {
	        return focusBySelector();
	      }
	    },
	    _purgeQueue: function(){
	      this.queue.forEach(function(element){
	        $timeout.cancel(element);
	      });
	      this.queue = [];
	    }
	  };


	  ['width', 'height'].forEach(function (name) {
	    var capsName = angular.uppercase(name.charAt(0)) + name.substr(1);
	    s['element' + capsName] = function (elem, extra) {
	      var e = elem;
	      if (e && typeof(e.length) !== 'undefined' && e.length) {
	        e = elem[0];
	      }

	      if (e) {
	        var styles = getStyles(e);
	        return e.offsetWidth === 0 && rdisplayswap.test(styles.display) ?
	                  s.swap(e, cssShow, function() {
	                    return getWidthOrHeight(e, name, extra );
	                  }) :
	                  getWidthOrHeight( e, name, extra );
	      }
	      else {
	        return null;
	      }
	    };

	    s['outerElement' + capsName] = function (elem, margin) {
	      return elem ? s['element' + capsName].call(this, elem, margin ? 'margin' : 'border') : null;
	    };
	  });

	  // http://stackoverflow.com/a/24107550/888165
	  s.closestElm = function closestElm(el, selector) {
	    if (typeof(el.length) !== 'undefined' && el.length) {
	      el = el[0];
	    }

	    var matchesFn;

	    // find vendor prefix
	    ['matches','webkitMatchesSelector','mozMatchesSelector','msMatchesSelector','oMatchesSelector'].some(function(fn) {
	        if (typeof document.body[fn] === 'function') {
	            matchesFn = fn;
	            return true;
	        }
	        return false;
	    });

	    // traverse parents
	    var parent;
	    while (el !== null) {
	      parent = el.parentElement;
	      if (parent !== null && parent[matchesFn](selector)) {
	          return parent;
	      }
	      el = parent;
	    }

	    return null;
	  };

	  s.type = function (obj) {
	    var text = Function.prototype.toString.call(obj.constructor);
	    return text.match(/function (.*?)\(/)[1];
	  };

	  s.getBorderSize = function getBorderSize(elem, borderType) {
	    if (typeof(elem.length) !== 'undefined' && elem.length) {
	      elem = elem[0];
	    }

	    var styles = getStyles(elem);

	    // If a specific border is supplied, like 'top', read the 'borderTop' style property
	    if (borderType) {
	      borderType = 'border' + borderType.charAt(0).toUpperCase() + borderType.slice(1);
	    }
	    else {
	      borderType = 'border';
	    }

	    borderType += 'Width';

	    var val = parseInt(styles[borderType], 10);

	    if (isNaN(val)) {
	      return 0;
	    }
	    else {
	      return val;
	    }
	  };

	  // http://stackoverflow.com/a/22948274/888165
	  // TODO: Opera? Mobile?
	  s.detectBrowser = function detectBrowser() {
	    var userAgent = $window.navigator.userAgent;

	    var browsers = {chrome: /chrome/i, safari: /safari/i, firefox: /firefox/i, ie: /internet explorer|trident\//i};

	    for (var key in browsers) {
	      if (browsers[key].test(userAgent)) {
	        return key;
	      }
	    }

	    return 'unknown';
	  };

	  // Borrowed from https://github.com/othree/jquery.rtl-scroll-type
	  // Determine the scroll "type" this browser is using for RTL
	  s.rtlScrollType = function rtlScrollType() {
	    if (rtlScrollType.type) {
	      return rtlScrollType.type;
	    }

	    var definer = angular.element('<div dir="rtl" style="font-size: 14px; width: 1px; height: 1px; position: absolute; top: -1000px; overflow: scroll">A</div>')[0],
	        type = 'reverse';

	    document.body.appendChild(definer);

	    if (definer.scrollLeft > 0) {
	      type = 'default';
	    }
	    else {
	      definer.scrollLeft = 1;
	      if (definer.scrollLeft === 0) {
	        type = 'negative';
	      }
	    }

	    angular.element(definer).remove();
	    rtlScrollType.type = type;

	    return type;
	  };

	    /**
	     * @ngdoc method
	     * @name normalizeScrollLeft
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {element} element The element to get the `scrollLeft` from.
	     * @param {grid} grid -  grid used to normalize (uses the rtl property)
	     *
	     * @returns {number} A normalized scrollLeft value for the current browser.
	     *
	     * @description
	     * Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method normalizes them
	     */
	  s.normalizeScrollLeft = function normalizeScrollLeft(element, grid) {
	    if (typeof(element.length) !== 'undefined' && element.length) {
	      element = element[0];
	    }

	    var scrollLeft = element.scrollLeft;

	    if (grid.isRTL()) {
	      switch (s.rtlScrollType()) {
	        case 'default':
	          return element.scrollWidth - scrollLeft - element.clientWidth;
	        case 'negative':
	          return Math.abs(scrollLeft);
	        case 'reverse':
	          return scrollLeft;
	      }
	    }

	    return scrollLeft;
	  };

	  /**
	  * @ngdoc method
	  * @name denormalizeScrollLeft
	  * @methodOf ui.grid.service:GridUtil
	  *
	  * @param {element} element The element to normalize the `scrollLeft` value for
	  * @param {number} scrollLeft The `scrollLeft` value to denormalize.
	  * @param {grid} grid The grid that owns the scroll event.
	  *
	  * @returns {number} A normalized scrollLeft value for the current browser.
	  *
	  * @description
	  * Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method denormalizes a value for the current browser.
	  */
	  s.denormalizeScrollLeft = function denormalizeScrollLeft(element, scrollLeft, grid) {
	    if (typeof(element.length) !== 'undefined' && element.length) {
	      element = element[0];
	    }

	    if (grid.isRTL()) {
	      switch (s.rtlScrollType()) {
	        case 'default':
	          // Get the max scroll for the element
	          var maxScrollLeft = element.scrollWidth - element.clientWidth;

	          // Subtract the current scroll amount from the max scroll
	          return maxScrollLeft - scrollLeft;
	        case 'negative':
	          return scrollLeft * -1;
	        case 'reverse':
	          return scrollLeft;
	      }
	    }

	    return scrollLeft;
	  };

	    /**
	     * @ngdoc method
	     * @name preEval
	     * @methodOf ui.grid.service:GridUtil
	     *
	     * @param {string} path Path to evaluate
	     *
	     * @returns {string} A path that is normalized.
	     *
	     * @description
	     * Takes a field path and converts it to bracket notation to allow for special characters in path
	     * @example
	     * <pre>
	     * gridUtil.preEval('property') == 'property'
	     * gridUtil.preEval('nested.deep.prop-erty') = "nested['deep']['prop-erty']"
	     * </pre>
	     */
	  s.preEval = function (path) {
	    var m = uiGridConstants.BRACKET_REGEXP.exec(path);
	    if (m) {
	      return (m[1] ? s.preEval(m[1]) : m[1]) + m[2] + (m[3] ? s.preEval(m[3]) : m[3]);
	    } else {
	      path = path.replace(uiGridConstants.APOS_REGEXP, '\\\'');
	      var parts = path.split(uiGridConstants.DOT_REGEXP);
	      var preparsed = [parts.shift()];    // first item must be var notation, thus skip
	      angular.forEach(parts, function (part) {
	        preparsed.push(part.replace(uiGridConstants.FUNC_REGEXP, '\']$1'));
	      });
	      return preparsed.join('[\'');
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name debounce
	   * @methodOf ui.grid.service:GridUtil
	   *
	   * @param {function} func function to debounce
	   * @param {number} wait milliseconds to delay
	   * @param {boolean} immediate execute before delay
	   *
	   * @returns {function} A function that can be executed as debounced function
	   *
	   * @description
	   * Copied from https://github.com/shahata/angular-debounce
	   * Takes a function, decorates it to execute only 1 time after multiple calls, and returns the decorated function
	   * @example
	   * <pre>
	   * var debouncedFunc =  gridUtil.debounce(function(){alert('debounced');}, 500);
	   * debouncedFunc();
	   * debouncedFunc();
	   * debouncedFunc();
	   * </pre>
	   */
	  s.debounce =  function (func, wait, immediate) {
	    var timeout, args, context, result;
	    function debounce() {
	      /* jshint validthis:true */
	      context = this;
	      args = arguments;
	      var later = function () {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	        }
	      };
	      var callNow = immediate && !timeout;
	      if (timeout) {
	        $timeout.cancel(timeout);
	      }
	      timeout = $timeout(later, wait, false);
	      if (callNow) {
	        result = func.apply(context, args);
	      }
	      return result;
	    }
	    debounce.cancel = function () {
	      $timeout.cancel(timeout);
	      timeout = null;
	    };
	    return debounce;
	  };

	  /**
	   * @ngdoc method
	   * @name throttle
	   * @methodOf ui.grid.service:GridUtil
	   *
	   * @param {function} func function to throttle
	   * @param {number} wait milliseconds to delay after first trigger
	   * @param {Object} params to use in throttle.
	   *
	   * @returns {function} A function that can be executed as throttled function
	   *
	   * @description
	   * Adapted from debounce function (above)
	   * Potential keys for Params Object are:
	   *    trailing (bool) - whether to trigger after throttle time ends if called multiple times
	   * Updated to use $interval rather than $timeout, as protractor (e2e tests) is able to work with $interval,
	   * but not with $timeout
	   *
	   * Note that when using throttle, you need to use throttle to create a new function upfront, then use the function
	   * return from that call each time you need to call throttle.  If you call throttle itself repeatedly, the lastCall
	   * variable will get overwritten and the throttling won't work
	   *
	   * @example
	   * <pre>
	   * var throttledFunc =  gridUtil.throttle(function(){console.log('throttled');}, 500, {trailing: true});
	   * throttledFunc(); //=> logs throttled
	   * throttledFunc(); //=> queues attempt to log throttled for ~500ms (since trailing param is truthy)
	   * throttledFunc(); //=> updates arguments to keep most-recent request, but does not do anything else.
	   * </pre>
	   */
	  s.throttle = function(func, wait, options){
	    options = options || {};
	    var lastCall = 0, queued = null, context, args;

	    function runFunc(endDate){
	      lastCall = +new Date();
	      func.apply(context, args);
	      $interval(function(){queued = null; }, 0, 1, false);
	    }

	    return function(){
	      /* jshint validthis:true */
	      context = this;
	      args = arguments;
	      if (queued === null){
	        var sinceLast = +new Date() - lastCall;
	        if (sinceLast > wait){
	          runFunc();
	        }
	        else if (options.trailing){
	          queued = $interval(runFunc, wait - sinceLast, 1, false);
	        }
	      }
	    };
	  };

	  s.on = {};
	  s.off = {};
	  s._events = {};

	  s.addOff = function (eventName) {
	    s.off[eventName] = function (elm, fn) {
	      var idx = s._events[eventName].indexOf(fn);
	      if (idx > 0) {
	        s._events[eventName].removeAt(idx);
	      }
	    };
	  };

	  var mouseWheeltoBind = ( 'onwheel' in document || document.documentMode >= 9 ) ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
	      nullLowestDeltaTimeout,
	      lowestDelta;

	  s.on.mousewheel = function (elm, fn) {
	    if (!elm || !fn) { return; }

	    var $elm = angular.element(elm);

	    // Store the line height and page height for this particular element
	    $elm.data('mousewheel-line-height', getLineHeight($elm));
	    $elm.data('mousewheel-page-height', s.elementHeight($elm));
	    if (!$elm.data('mousewheel-callbacks')) { $elm.data('mousewheel-callbacks', {}); }

	    var cbs = $elm.data('mousewheel-callbacks');
	    cbs[fn] = (Function.prototype.bind || bindPolyfill).call(mousewheelHandler, $elm[0], fn);

	    // Bind all the mousew heel events
	    for ( var i = mouseWheeltoBind.length; i; ) {
	      $elm.on(mouseWheeltoBind[--i], cbs[fn]);
	    }
	  };
	  s.off.mousewheel = function (elm, fn) {
	    var $elm = angular.element(elm);

	    var cbs = $elm.data('mousewheel-callbacks');
	    var handler = cbs[fn];

	    if (handler) {
	      for ( var i = mouseWheeltoBind.length; i; ) {
	        $elm.off(mouseWheeltoBind[--i], handler);
	      }
	    }

	    delete cbs[fn];

	    if (Object.keys(cbs).length === 0) {
	      $elm.removeData('mousewheel-line-height');
	      $elm.removeData('mousewheel-page-height');
	      $elm.removeData('mousewheel-callbacks');
	    }
	  };

	  function mousewheelHandler(fn, event) {
	    var $elm = angular.element(this);

	    var delta      = 0,
	        deltaX     = 0,
	        deltaY     = 0,
	        absDelta   = 0,
	        offsetX    = 0,
	        offsetY    = 0;

	    // jQuery masks events
	    if (event.originalEvent) { event = event.originalEvent; }

	    if ( 'detail'      in event ) { deltaY = event.detail * -1;      }
	    if ( 'wheelDelta'  in event ) { deltaY = event.wheelDelta;       }
	    if ( 'wheelDeltaY' in event ) { deltaY = event.wheelDeltaY;      }
	    if ( 'wheelDeltaX' in event ) { deltaX = event.wheelDeltaX * -1; }

	    // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	    if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {
	      deltaX = deltaY * -1;
	      deltaY = 0;
	    }

	    // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
	    delta = deltaY === 0 ? deltaX : deltaY;

	    // New school wheel delta (wheel event)
	    if ( 'deltaY' in event ) {
	      deltaY = event.deltaY * -1;
	      delta  = deltaY;
	    }
	    if ( 'deltaX' in event ) {
	      deltaX = event.deltaX;
	      if ( deltaY === 0 ) { delta  = deltaX * -1; }
	    }

	    // No change actually happened, no reason to go any further
	    if ( deltaY === 0 && deltaX === 0 ) { return; }

	    // Need to convert lines and pages to pixels if we aren't already in pixels
	    // There are three delta modes:
	    //   * deltaMode 0 is by pixels, nothing to do
	    //   * deltaMode 1 is by lines
	    //   * deltaMode 2 is by pages
	    if ( event.deltaMode === 1 ) {
	        var lineHeight = $elm.data('mousewheel-line-height');
	        delta  *= lineHeight;
	        deltaY *= lineHeight;
	        deltaX *= lineHeight;
	    }
	    else if ( event.deltaMode === 2 ) {
	        var pageHeight = $elm.data('mousewheel-page-height');
	        delta  *= pageHeight;
	        deltaY *= pageHeight;
	        deltaX *= pageHeight;
	    }

	    // Store lowest absolute delta to normalize the delta values
	    absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

	    if ( !lowestDelta || absDelta < lowestDelta ) {
	      lowestDelta = absDelta;

	      // Adjust older deltas if necessary
	      if ( shouldAdjustOldDeltas(event, absDelta) ) {
	        lowestDelta /= 40;
	      }
	    }

	    // Get a whole, normalized value for the deltas
	    delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
	    deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
	    deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

	    // Normalise offsetX and offsetY properties
	    // if ($elm[0].getBoundingClientRect ) {
	    //   var boundingRect = $(elm)[0].getBoundingClientRect();
	    //   offsetX = event.clientX - boundingRect.left;
	    //   offsetY = event.clientY - boundingRect.top;
	    // }

	    // event.deltaX = deltaX;
	    // event.deltaY = deltaY;
	    // event.deltaFactor = lowestDelta;

	    var newEvent = {
	      originalEvent: event,
	      deltaX: deltaX,
	      deltaY: deltaY,
	      deltaFactor: lowestDelta,
	      preventDefault: function () { event.preventDefault(); },
	      stopPropagation: function () { event.stopPropagation(); }
	    };

	    // Clearout lowestDelta after sometime to better
	    // handle multiple device types that give
	    // a different lowestDelta
	    // Ex: trackpad = 3 and mouse wheel = 120
	    if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
	    nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

	    fn.call($elm[0], newEvent);
	  }

	  function nullLowestDelta() {
	    lowestDelta = null;
	  }

	  function shouldAdjustOldDeltas(orgEvent, absDelta) {
	    // If this is an older event and the delta is divisable by 120,
	    // then we are assuming that the browser is treating this as an
	    // older mouse wheel event and that we should divide the deltas
	    // by 40 to try and get a more usable deltaFactor.
	    // Side note, this actually impacts the reported scroll distance
	    // in older browsers and can cause scrolling to be slower than native.
	    // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
	    return orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
	  }

	  return s;
	}]);

	// Add 'px' to the end of a number string if it doesn't have it already
	module.filter('px', function() {
	  return function(str) {
	    if (str.match(/^[\d\.]+$/)) {
	      return str + 'px';
	    }
	    else {
	      return str;
	    }
	  };
	});

	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      var lang = {
	              aggregate: {
	                  label: 'položky'
	              },
	              groupPanel: {
	                  description: 'Přesuňte záhlaví zde pro vytvoření skupiny dle sloupce.'
	              },
	              search: {
	                  placeholder: 'Hledat...',
	                  showingItems: 'Zobrazuji položky:',
	                  selectedItems: 'Vybrané položky:',
	                  totalItems: 'Celkem položek:',
	                  size: 'Velikost strany:',
	                  first: 'První strana',
	                  next: 'Další strana',
	                  previous: 'Předchozí strana',
	                  last: 'Poslední strana'
	              },
	              menu: {
	                  text: 'Vyberte sloupec:'
	              },
	              sort: {
	                  ascending: 'Seřadit od A-Z',
	                  descending: 'Seřadit od Z-A',
	                  remove: 'Odebrat seřazení'
	              },
	              column: {
	                  hide: 'Schovat sloupec'
	              },
	              aggregation: {
	                  count: 'celkem řádků: ',
	                  sum: 'celkem: ',
	                  avg: 'avg: ',
	                  min: 'min.: ',
	                  max: 'max.: '
	              },
	              pinning: {
	                  pinLeft: 'Zamknout vlevo',
	                  pinRight: 'Zamknout vpravo',
	                  unpin: 'Odemknout'
	              },
	              gridMenu: {
	                  columns: 'Sloupce:',
	                  importerTitle: 'Importovat soubor',
	                  exporterAllAsCsv: 'Exportovat všechna data do csv',
	                  exporterVisibleAsCsv: 'Exportovat viditelná data do csv',
	                  exporterSelectedAsCsv: 'Exportovat vybraná data do csv',
	                  exporterAllAsPdf: 'Exportovat všechna data do pdf',
	                  exporterVisibleAsPdf: 'Exportovat viditelná data do pdf',
	                  exporterSelectedAsPdf: 'Exportovat vybraná data do pdf',
	                  clearAllFilters: 'Odstranit všechny filtry'
	              },
	              importer: {
	                  noHeaders: 'Názvy sloupců se nepodařilo získat, obsahuje soubor záhlaví?',
	                  noObjects: 'Data se nepodařilo zpracovat, obsahuje soubor řádky mimo záhlaví?',
	                  invalidCsv: 'Soubor nelze zpracovat, jedná se o CSV?',
	                  invalidJson: 'Soubor nelze zpracovat, je to JSON?',
	                  jsonNotArray: 'Soubor musí obsahovat json. Ukončuji..'
	              },
	              pagination: {
	                  sizes: 'položek na stránku',
	                  totalItems: 'položek'
	              },
	              grouping: {
	                  group: 'Seskupit',
	                  ungroup: 'Odebrat seskupení',
	                  aggregate_count: 'Agregace: Count',
	                  aggregate_sum: 'Agregace: Sum',
	                  aggregate_max: 'Agregace: Max',
	                  aggregate_min: 'Agregace: Min',
	                  aggregate_avg: 'Agregace: Avg',
	                  aggregate_remove: 'Agregace: Odebrat'
	              }
	          };

	          // support varianty of different czech keys.
	          $delegate.add('cs', lang);
	          $delegate.add('cz', lang);
	          $delegate.add('cs-cz', lang);
	          $delegate.add('cs-CZ', lang);
	      return $delegate;
	    }]);
	  }]);
	})();

	(function(){
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('da', {
	        aggregate:{
	          label: 'artikler'
	        },
	        groupPanel:{
	          description: 'Grupér rækker udfra en kolonne ved at trække dens overskift hertil.'
	        },
	        search:{
	          placeholder: 'Søg...',
	          showingItems: 'Viste rækker:',
	          selectedItems: 'Valgte rækker:',
	          totalItems: 'Rækker totalt:',
	          size: 'Side størrelse:',
	          first: 'Første side',
	          next: 'Næste side',
	          previous: 'Forrige side',
	          last: 'Sidste side'
	        },
	        menu:{
	          text: 'Vælg kolonner:'
	        },
	        sort: {
	          ascending: 'Sorter stigende',
	          descending: 'Sorter faldende',
	          none: 'Sorter ingen',
	          remove: 'Fjern sortering'
	        },
	        column: {
	          hide: 'Skjul kolonne'
	        },
	        aggregation: {
	          count: 'antal rækker: ',
	          sum: 'sum: ',
	          avg: 'gns: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        gridMenu: {
	          columns: 'Kolonner:',
	          importerTitle: 'Importer fil',
	          exporterAllAsCsv: 'Eksporter alle data som csv',
	          exporterVisibleAsCsv: 'Eksporter synlige data som csv',
	          exporterSelectedAsCsv: 'Eksporter markerede data som csv',
	          exporterAllAsPdf: 'Eksporter alle data som pdf',
	          exporterVisibleAsPdf: 'Eksporter synlige data som pdf',
	          exporterSelectedAsPdf: 'Eksporter markerede data som pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function ($provide) {
	    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
	      $delegate.add('de', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter für Spalte',
	            removeFilter: 'Filter löschen',
	            columnMenuButtonLabel: 'Spaltenmenü'
	          },
	          priority: 'Priorität:',
	          filterLabel: "Filter für Spalte: "
	        },
	        aggregate: {
	          label: 'Eintrag'
	        },
	        groupPanel: {
	          description: 'Ziehen Sie eine Spaltenüberschrift hierhin, um nach dieser Spalte zu gruppieren.'
	        },
	        search: {
	          placeholder: 'Suche...',
	          showingItems: 'Zeige Einträge:',
	          selectedItems: 'Ausgewählte Einträge:',
	          totalItems: 'Einträge gesamt:',
	          size: 'Einträge pro Seite:',
	          first: 'Erste Seite',
	          next: 'Nächste Seite',
	          previous: 'Vorherige Seite',
	          last: 'Letzte Seite'
	        },
	        menu: {
	          text: 'Spalten auswählen:'
	        },
	        sort: {
	          ascending: 'aufsteigend sortieren',
	          descending: 'absteigend sortieren',
	          none: 'keine Sortierung',
	          remove: 'Sortierung zurücksetzen'
	        },
	        column: {
	          hide: 'Spalte ausblenden'
	        },
	        aggregation: {
	          count: 'Zeilen insgesamt: ',
	          sum: 'gesamt: ',
	          avg: 'Durchschnitt: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	            pinLeft: 'Links anheften',
	            pinRight: 'Rechts anheften',
	            unpin: 'Lösen'
	        },
	        columnMenu: {
	          close: 'Schließen'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Tabellenmenü'
	          },
	          columns: 'Spalten:',
	          importerTitle: 'Datei importieren',
	          exporterAllAsCsv: 'Alle Daten als CSV exportieren',
	          exporterVisibleAsCsv: 'sichtbare Daten als CSV exportieren',
	          exporterSelectedAsCsv: 'markierte Daten als CSV exportieren',
	          exporterAllAsPdf: 'Alle Daten als PDF exportieren',
	          exporterVisibleAsPdf: 'sichtbare Daten als PDF exportieren',
	          exporterSelectedAsPdf: 'markierte Daten als PDF exportieren',
	          clearAllFilters: 'Alle Filter zurücksetzen'
	        },
	        importer: {
	          noHeaders: 'Es konnten keine Spaltennamen ermittelt werden. Sind in der Datei Spaltendefinitionen enthalten?',
	          noObjects: 'Es konnten keine Zeileninformationen gelesen werden, Sind in der Datei außer den Spaltendefinitionen auch Daten enthalten?',
	          invalidCsv: 'Die Datei konnte nicht eingelesen werden, ist es eine gültige CSV-Datei?',
	          invalidJson: 'Die Datei konnte nicht eingelesen werden. Enthält sie gültiges JSON?',
	          jsonNotArray: 'Die importierte JSON-Datei muß ein Array enthalten. Breche Import ab.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Zum Anfang',
	            pageBack: 'Seite zurück',
	            pageSelected: 'Ausgwählte Seite',
	            pageForward: 'Seite vor',
	            pageToLast: 'Zum Ende'
	          },
	          sizes: 'Einträge pro Seite',
	          totalItems: 'Einträge',
	          through: 'bis',
	          of: 'von'
	        },
	        grouping: {
	            group: 'Gruppieren',
	            ungroup: 'Gruppierung aufheben',
	            aggregate_count: 'Agg: Anzahl',
	            aggregate_sum: 'Agg: Summe',
	            aggregate_max: 'Agg: Maximum',
	            aggregate_min: 'Agg: Minimum',
	            aggregate_avg: 'Agg: Mittelwert',
	            aggregate_remove: 'Aggregation entfernen'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('en', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter for column',
	            removeFilter: 'Remove Filter',
	            columnMenuButtonLabel: 'Column Menu'
	          },
	          priority: 'Priority:',
	          filterLabel: "Filter for column: "
	        },
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Drag a column header here and drop it to group by that column.'
	        },
	        search: {
	          placeholder: 'Search...',
	          showingItems: 'Showing Items:',
	          selectedItems: 'Selected Items:',
	          totalItems: 'Total Items:',
	          size: 'Page Size:',
	          first: 'First Page',
	          next: 'Next Page',
	          previous: 'Previous Page',
	          last: 'Last Page'
	        },
	        menu: {
	          text: 'Choose Columns:'
	        },
	        sort: {
	          ascending: 'Sort Ascending',
	          descending: 'Sort Descending',
	          none: 'Sort None',
	          remove: 'Remove Sort'
	        },
	        column: {
	          hide: 'Hide Column'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Pin Left',
	          pinRight: 'Pin Right',
	          unpin: 'Unpin'
	        },
	        columnMenu: {
	          close: 'Close'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Grid Menu'
	          },
	          columns: 'Columns:',
	          importerTitle: 'Import file',
	          exporterAllAsCsv: 'Export all data as csv',
	          exporterVisibleAsCsv: 'Export visible data as csv',
	          exporterSelectedAsCsv: 'Export selected data as csv',
	          exporterAllAsPdf: 'Export all data as pdf',
	          exporterVisibleAsPdf: 'Export visible data as pdf',
	          exporterSelectedAsPdf: 'Export selected data as pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Page to first',
	            pageBack: 'Page back',
	            pageSelected: 'Selected page',
	            pageForward: 'Page forward',
	            pageToLast: 'Page to last'
	          },
	          sizes: 'items per page',
	          totalItems: 'items',
	          through: 'through',
	          of: 'of'
	        },
	        grouping: {
	          group: 'Group',
	          ungroup: 'Ungroup',
	          aggregate_count: 'Agg: Count',
	          aggregate_sum: 'Agg: Sum',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Avg',
	          aggregate_remove: 'Agg: Remove'
	        },
	        validate: {
	          error: 'Error:',
	          minLength: 'Value should be at least THRESHOLD characters long.',
	          maxLength: 'Value should be at most THRESHOLD characters long.',
	          required: 'A value is needed.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('es', {
	        aggregate: {
	          label: 'Artículos'
	        },
	        groupPanel: {
	          description: 'Arrastre un encabezado de columna aquí y suéltelo para agrupar por esa columna.'
	        },
	        search: {
	          placeholder: 'Buscar...',
	          showingItems: 'Artículos Mostrados:',
	          selectedItems: 'Artículos Seleccionados:',
	          totalItems: 'Artículos Totales:',
	          size: 'Tamaño de Página:',
	          first: 'Primera Página',
	          next: 'Página Siguiente',
	          previous: 'Página Anterior',
	          last: 'Última Página'
	        },
	        menu: {
	          text: 'Elegir columnas:'
	        },
	        sort: {
	          ascending: 'Orden Ascendente',
	          descending: 'Orden Descendente',
	          remove: 'Sin Ordenar'
	        },
	        column: {
	          hide: 'Ocultar la columna'
	        },
	        aggregation: {
	          count: 'filas totales: ',
	          sum: 'total: ',
	          avg: 'media: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Fijar a la Izquierda',
	          pinRight: 'Fijar a la Derecha',
	          unpin: 'Quitar Fijación'
	        },
	        gridMenu: {
	          columns: 'Columnas:',
	          importerTitle: 'Importar archivo',
	          exporterAllAsCsv: 'Exportar todo como csv',
	          exporterVisibleAsCsv: 'Exportar vista como csv',
	          exporterSelectedAsCsv: 'Exportar selección como csv',
	          exporterAllAsPdf: 'Exportar todo como pdf',
	          exporterVisibleAsPdf: 'Exportar vista como pdf',
	          exporterSelectedAsPdf: 'Exportar selección como pdf',
	          clearAllFilters: 'Limpiar todos los filtros'
	        },
	        importer: {
	          noHeaders: 'No fue posible derivar los nombres de las columnas, ¿tiene encabezados el archivo?',
	          noObjects: 'No fue posible obtener registros, ¿contiene datos el archivo, aparte de los encabezados?',
	          invalidCsv: 'No fue posible procesar el archivo, ¿es un CSV válido?',
	          invalidJson: 'No fue posible procesar el archivo, ¿es un Json válido?',
	          jsonNotArray: 'El archivo json importado debe contener un array, abortando.'
	        },
	        pagination: {
	          sizes: 'registros por página',
	          totalItems: 'registros',
	          of: 'de'
	        },
	        grouping: {
	          group: 'Agrupar',
	          ungroup: 'Desagrupar',
	          aggregate_count: 'Agr: Cont',
	          aggregate_sum: 'Agr: Sum',
	          aggregate_max: 'Agr: Máx',
	          aggregate_min: 'Agr: Min',
	          aggregate_avg: 'Agr: Prom',
	          aggregate_remove: 'Agr: Quitar'
	        }
	      });
	      return $delegate;
	    }]);
	}]);
	})();

	/**
	 * Translated by: R. Salarmehr
	 *                M. Hosseynzade
	 *                Using Vajje.com online dictionary.
	 */
	(function () {
	  angular.module('ui.grid').config(['$provide', function ($provide) {
	    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
	      $delegate.add('fa', {
	        aggregate: {
	          label: 'قلم'
	        },
	        groupPanel: {
	          description: 'عنوان یک ستون را بگیر و به گروهی از آن ستون رها کن.'
	        },
	        search: {
	          placeholder: 'جستجو...',
	          showingItems: 'نمایش اقلام:',
	          selectedItems: 'قلم\u200cهای انتخاب شده:',
	          totalItems: 'مجموع اقلام:',
	          size: 'اندازه\u200cی صفحه:',
	          first: 'اولین صفحه',
	          next: 'صفحه\u200cی\u200cبعدی',
	          previous: 'صفحه\u200cی\u200c قبلی',
	          last: 'آخرین صفحه'
	        },
	        menu: {
	          text: 'ستون\u200cهای انتخابی:'
	        },
	        sort: {
	          ascending: 'ترتیب صعودی',
	          descending: 'ترتیب نزولی',
	          remove: 'حذف مرتب کردن'
	        },
	        column: {
	          hide: 'پنهان\u200cکردن ستون'
	        },
	        aggregation: {
	          count: 'تعداد: ',
	          sum: 'مجموع: ',
	          avg: 'میانگین: ',
	          min: 'کمترین: ',
	          max: 'بیشترین: '
	        },
	        pinning: {
	          pinLeft: 'پین کردن سمت چپ',
	          pinRight: 'پین کردن سمت راست',
	          unpin: 'حذف پین'
	        },
	        gridMenu: {
	          columns: 'ستون\u200cها:',
	          importerTitle: 'وارد کردن فایل',
	          exporterAllAsCsv: 'خروجی تمام داده\u200cها در فایل csv',
	          exporterVisibleAsCsv: 'خروجی داده\u200cهای قابل مشاهده در فایل csv',
	          exporterSelectedAsCsv: 'خروجی داده\u200cهای انتخاب\u200cشده در فایل csv',
	          exporterAllAsPdf: 'خروجی تمام داده\u200cها در فایل pdf',
	          exporterVisibleAsPdf: 'خروجی داده\u200cهای قابل مشاهده در فایل pdf',
	          exporterSelectedAsPdf: 'خروجی داده\u200cهای انتخاب\u200cشده در فایل pdf',
	          clearAllFilters: 'پاک کردن تمام فیلتر'
	        },
	        importer: {
	          noHeaders: 'نام ستون قابل استخراج نیست. آیا فایل عنوان دارد؟',
	          noObjects: 'اشیا قابل استخراج نیستند. آیا به جز عنوان\u200cها در فایل داده وجود دارد؟',
	          invalidCsv: 'فایل قابل پردازش نیست. آیا فرمت  csv  معتبر است؟',
	          invalidJson: 'فایل قابل پردازش نیست. آیا فرمت json   معتبر است؟',
	          jsonNotArray: 'فایل json وارد شده باید حاوی آرایه باشد. عملیات ساقط شد.'
	        },
	        pagination: {
	          sizes: 'اقلام در هر صفحه',
	          totalItems: 'اقلام',
	          of: 'از'
	        },
	        grouping: {
	          group: 'گروه\u200cبندی',
	          ungroup: 'حذف گروه\u200cبندی',
	          aggregate_count: 'Agg: تعداد',
	          aggregate_sum: 'Agg: جمع',
	          aggregate_max: 'Agg: بیشینه',
	          aggregate_min: 'Agg: کمینه',
	          aggregate_avg: 'Agg: میانگین',
	          aggregate_remove: 'Agg: حذف'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('fi', {
	        aggregate: {
	          label: 'rivit'
	        },
	        groupPanel: {
	          description: 'Raahaa ja pudota otsikko tähän ryhmittääksesi sarakkeen mukaan.'
	        },
	        search: {
	          placeholder: 'Hae...',
	          showingItems: 'Näytetään rivejä:',
	          selectedItems: 'Valitut rivit:',
	          totalItems: 'Rivejä yht.:',
	          size: 'Näytä:',
	          first: 'Ensimmäinen sivu',
	          next: 'Seuraava sivu',
	          previous: 'Edellinen sivu',
	          last: 'Viimeinen sivu'
	        },
	        menu: {
	          text: 'Valitse sarakkeet:'
	        },
	        sort: {
	          ascending: 'Järjestä nouseva',
	          descending: 'Järjestä laskeva',
	          remove: 'Poista järjestys'
	        },
	        column: {
	          hide: 'Piilota sarake'
	        },
	        aggregation: {
	          count: 'Rivejä yht.: ',
	          sum: 'Summa: ',
	          avg: 'K.a.: ',
	          min: 'Min: ',
	          max: 'Max: '
	        },
	        pinning: {
	         pinLeft: 'Lukitse vasemmalle',
	          pinRight: 'Lukitse oikealle',
	          unpin: 'Poista lukitus'
	        },
	        gridMenu: {
	          columns: 'Sarakkeet:',
	          importerTitle: 'Tuo tiedosto',
	          exporterAllAsCsv: 'Vie tiedot csv-muodossa',
	          exporterVisibleAsCsv: 'Vie näkyvä tieto csv-muodossa',
	          exporterSelectedAsCsv: 'Vie valittu tieto csv-muodossa',
	          exporterAllAsPdf: 'Vie tiedot pdf-muodossa',
	          exporterVisibleAsPdf: 'Vie näkyvä tieto pdf-muodossa',
	          exporterSelectedAsPdf: 'Vie valittu tieto pdf-muodossa',
	          clearAllFilters: 'Puhdista kaikki suodattimet'
	        },
	        importer: {
	          noHeaders: 'Sarakkeen nimiä ei voitu päätellä, onko tiedostossa otsikkoriviä?',
	          noObjects: 'Tietoja ei voitu lukea, onko tiedostossa muuta kuin otsikkot?',
	          invalidCsv: 'Tiedostoa ei voitu käsitellä, oliko se CSV-muodossa?',
	          invalidJson: 'Tiedostoa ei voitu käsitellä, oliko se JSON-muodossa?',
	          jsonNotArray: 'Tiedosto ei sisältänyt taulukkoa, lopetetaan.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('fr', {
	        aggregate: {
	          label: 'éléments'
	        },
	        groupPanel: {
	          description: 'Faites glisser une en-tête de colonne ici pour créer un groupe de colonnes.'
	        },
	        search: {
	          placeholder: 'Recherche...',
	          showingItems: 'Affichage des éléments :',
	          selectedItems: 'Éléments sélectionnés :',
	          totalItems: 'Nombre total d\'éléments:',
	          size: 'Taille de page:',
	          first: 'Première page',
	          next: 'Page Suivante',
	          previous: 'Page précédente',
	          last: 'Dernière page'
	        },
	        menu: {
	          text: 'Choisir des colonnes :'
	        },
	        sort: {
	          ascending: 'Trier par ordre croissant',
	          descending: 'Trier par ordre décroissant',
	          remove: 'Enlever le tri'
	        },
	        column: {
	          hide: 'Cacher la colonne'
	        },
	        aggregation: {
	          count: 'lignes totales: ',
	          sum: 'total: ',
	          avg: 'moy: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Épingler à gauche',
	          pinRight: 'Épingler à droite',
	          unpin: 'Détacher'
	        },
	        gridMenu: {
	          columns: 'Colonnes:',
	          importerTitle: 'Importer un fichier',
	          exporterAllAsCsv: 'Exporter toutes les données en CSV',
	          exporterVisibleAsCsv: 'Exporter les données visibles en CSV',
	          exporterSelectedAsCsv: 'Exporter les données sélectionnées en CSV',
	          exporterAllAsPdf: 'Exporter toutes les données en PDF',
	          exporterVisibleAsPdf: 'Exporter les données visibles en PDF',
	          exporterSelectedAsPdf: 'Exporter les données sélectionnées en PDF',
	          clearAllFilters: 'Nettoyez tous les filtres'
	        },
	        importer: {
	          noHeaders: 'Impossible de déterminer le nom des colonnes, le fichier possède-t-il une en-tête ?',
	          noObjects: 'Aucun objet trouvé, le fichier possède-t-il des données autres que l\'en-tête ?',
	          invalidCsv: 'Le fichier n\'a pas pu être traité, le CSV est-il valide ?',
	          invalidJson: 'Le fichier n\'a pas pu être traité, le JSON est-il valide ?',
	          jsonNotArray: 'Le fichier JSON importé doit contenir un tableau, abandon.'
	        },
	        pagination: {
	          sizes: 'éléments par page',
	          totalItems: 'éléments',
	          of: 'sur'
	        },
	        grouping: {
	          group: 'Grouper',
	          ungroup: 'Dégrouper',
	          aggregate_count: 'Agg: Compte',
	          aggregate_sum: 'Agg: Somme',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Moy',
	          aggregate_remove: 'Agg: Retirer'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function ($provide) {
	    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
	      $delegate.add('he', {
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'גרור עמודה לכאן ושחרר בכדי לקבץ עמודה זו.'
	        },
	        search: {
	          placeholder: 'חפש...',
	          showingItems: 'מציג:',
	          selectedItems: 'סה"כ נבחרו:',
	          totalItems: 'סה"כ רשומות:',
	          size: 'תוצאות בדף:',
	          first: 'דף ראשון',
	          next: 'דף הבא',
	          previous: 'דף קודם',
	          last: 'דף אחרון'
	        },
	        menu: {
	          text: 'בחר עמודות:'
	        },
	        sort: {
	          ascending: 'סדר עולה',
	          descending: 'סדר יורד',
	          remove: 'בטל'
	        },
	        column: {
	          hide: 'טור הסתר'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        gridMenu: {
	          columns: 'Columns:',
	          importerTitle: 'Import file',
	          exporterAllAsCsv: 'Export all data as csv',
	          exporterVisibleAsCsv: 'Export visible data as csv',
	          exporterSelectedAsCsv: 'Export selected data as csv',
	          exporterAllAsPdf: 'Export all data as pdf',
	          exporterVisibleAsPdf: 'Export visible data as pdf',
	          exporterSelectedAsPdf: 'Export selected data as pdf',
	          clearAllFilters: 'Clean all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('hy', {
	        aggregate: {
	          label: 'տվյալներ'
	        },
	        groupPanel: {
	          description: 'Ըստ սյան խմբավորելու համար քաշեք և գցեք վերնագիրն այստեղ։'
	        },
	        search: {
	          placeholder: 'Փնտրում...',
	          showingItems: 'Ցուցադրված տվյալներ՝',
	          selectedItems: 'Ընտրված:',
	          totalItems: 'Ընդամենը՝',
	          size: 'Տողերի քանակը էջում՝',
	          first: 'Առաջին էջ',
	          next: 'Հաջորդ էջ',
	          previous: 'Նախորդ էջ',
	          last: 'Վերջին էջ'
	        },
	        menu: {
	          text: 'Ընտրել սյուները:'
	        },
	        sort: {
	          ascending: 'Աճման կարգով',
	          descending: 'Նվազման կարգով',
	          remove: 'Հանել '
	        },
	        column: {
	          hide: 'Թաքցնել սյունը'
	        },
	        aggregation: {
	          count: 'ընդամենը տող՝ ',
	          sum: 'ընդամենը՝ ',
	          avg: 'միջին՝ ',
	          min: 'մին՝ ',
	          max: 'մաքս՝ '
	        },
	        pinning: {
	          pinLeft: 'Կպցնել ձախ կողմում',
	          pinRight: 'Կպցնել աջ կողմում',
	          unpin: 'Արձակել'
	        },
	        gridMenu: {
	          columns: 'Սյուներ:',
	          importerTitle: 'Ներմուծել ֆայլ',
	          exporterAllAsCsv: 'Արտահանել ամբողջը CSV',
	          exporterVisibleAsCsv: 'Արտահանել երևացող տվյալները CSV',
	          exporterSelectedAsCsv: 'Արտահանել ընտրված տվյալները CSV',
	          exporterAllAsPdf: 'Արտահանել PDF',
	          exporterVisibleAsPdf: 'Արտահանել երևացող տվյալները PDF',
	          exporterSelectedAsPdf: 'Արտահանել ընտրված տվյալները PDF',
	          clearAllFilters: 'Մաքրել բոլոր ֆիլտրերը'
	        },
	        importer: {
	          noHeaders: 'Հնարավոր չեղավ որոշել սյան վերնագրերը։ Արդյո՞ք ֆայլը ունի վերնագրեր։',
	          noObjects: 'Հնարավոր չեղավ կարդալ տվյալները։ Արդյո՞ք ֆայլում կան տվյալներ։',
	          invalidCsv: 'Հնարավոր չեղավ մշակել ֆայլը։ Արդյո՞ք այն վավեր CSV է։',
	          invalidJson: 'Հնարավոր չեղավ մշակել ֆայլը։ Արդյո՞ք այն վավեր Json է։',
	          jsonNotArray: 'Ներմուծված json ֆայլը պետք է պարունակի զանգված, կասեցվում է։'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('it', {
	        aggregate: {
	          label: 'elementi'
	        },
	        groupPanel: {
	          description: 'Trascina un\'intestazione all\'interno del gruppo della colonna.'
	        },
	        search: {
	          placeholder: 'Ricerca...',
	          showingItems: 'Mostra:',
	          selectedItems: 'Selezionati:',
	          totalItems: 'Totali:',
	          size: 'Tot Pagine:',
	          first: 'Prima',
	          next: 'Prossima',
	          previous: 'Precedente',
	          last: 'Ultima'
	        },
	        menu: {
	          text: 'Scegli le colonne:'
	        },
	        sort: {
	          ascending: 'Asc.',
	          descending: 'Desc.',
	          remove: 'Annulla ordinamento'
	        },
	        column: {
	          hide: 'Nascondi'
	        },
	        aggregation: {
	          count: 'righe totali: ',
	          sum: 'tot: ',
	          avg: 'media: ',
	          min: 'minimo: ',
	          max: 'massimo: '
	        },
	        pinning: {
	         pinLeft: 'Blocca a sx',
	          pinRight: 'Blocca a dx',
	          unpin: 'Blocca in alto'
	        },
	        gridMenu: {
	          columns: 'Colonne:',
	          importerTitle: 'Importa',
	          exporterAllAsCsv: 'Esporta tutti i dati in CSV',
	          exporterVisibleAsCsv: 'Esporta i dati visibili in CSV',
	          exporterSelectedAsCsv: 'Esporta i dati selezionati in CSV',
	          exporterAllAsPdf: 'Esporta tutti i dati in PDF',
	          exporterVisibleAsPdf: 'Esporta i dati visibili in PDF',
	          exporterSelectedAsPdf: 'Esporta i dati selezionati in PDF',
	          clearAllFilters: 'Pulire tutti i filtri'
	        },
	        importer: {
	          noHeaders: 'Impossibile reperire i nomi delle colonne, sicuro che siano indicati all\'interno del file?',
	          noObjects: 'Impossibile reperire gli oggetti, sicuro che siano indicati all\'interno del file?',
	          invalidCsv: 'Impossibile elaborare il file, sicuro che sia un CSV?',
	          invalidJson: 'Impossibile elaborare il file, sicuro che sia un JSON valido?',
	          jsonNotArray: 'Errore! Il file JSON da importare deve contenere un array.'
	        },
	        grouping: {
	          group: 'Raggruppa',
	          ungroup: 'Separa',
	          aggregate_count: 'Agg: N. Elem.',
	          aggregate_sum: 'Agg: Somma',
	          aggregate_max: 'Agg: Massimo',
	          aggregate_min: 'Agg: Minimo',
	          aggregate_avg: 'Agg: Media',
	          aggregate_remove: 'Agg: Rimuovi'
	        },
	        validate: {
	          error: 'Errore:',
	          minLength: 'Lunghezza minima pari a THRESHOLD caratteri.',
	          maxLength: 'Lunghezza massima pari a THRESHOLD caratteri.',
	          required: 'Necessario inserire un valore.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function() {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ja', {
	        aggregate: {
	          label: '項目'
	        },
	        groupPanel: {
	          description: 'ここに列ヘッダをドラッグアンドドロップして、その列でグループ化します。'
	        },
	        search: {
	          placeholder: '検索...',
	          showingItems: '表示中の項目:',
	          selectedItems: '選択した項目:',
	          totalItems: '項目の総数:',
	          size: 'ページサイズ:',
	          first: '最初のページ',
	          next: '次のページ',
	          previous: '前のページ',
	          last: '前のページ'
	        },
	        menu: {
	          text: '列の選択:'
	        },
	        sort: {
	          ascending: '昇順に並べ替え',
	          descending: '降順に並べ替え',
	          remove: '並べ替えの解除'
	        },
	        column: {
	          hide: '列の非表示'
	        },
	        aggregation: {
	          count: '合計行数: ',
	          sum: '合計: ',
	          avg: '平均: ',
	          min: '最小: ',
	          max: '最大: '
	        },
	        pinning: {
	          pinLeft: '左に固定',
	          pinRight: '右に固定',
	          unpin: '固定解除'
	        },
	        gridMenu: {
	          columns: '列:',
	          importerTitle: 'ファイルのインポート',
	          exporterAllAsCsv: 'すべてのデータをCSV形式でエクスポート',
	          exporterVisibleAsCsv: '表示中のデータをCSV形式でエクスポート',
	          exporterSelectedAsCsv: '選択したデータをCSV形式でエクスポート',
	          exporterAllAsPdf: 'すべてのデータをPDF形式でエクスポート',
	          exporterVisibleAsPdf: '表示中のデータをPDF形式でエクスポート',
	          exporterSelectedAsPdf: '選択したデータをPDF形式でエクスポート',
	          clearAllFilters: 'すべてのフィルタを清掃してください'
	        },
	        importer: {
	          noHeaders: '列名を取得できません。ファイルにヘッダが含まれていることを確認してください。',
	          noObjects: 'オブジェクトを取得できません。ファイルにヘッダ以外のデータが含まれていることを確認してください。',
	          invalidCsv: 'ファイルを処理できません。ファイルが有効なCSV形式であることを確認してください。',
	          invalidJson: 'ファイルを処理できません。ファイルが有効なJSON形式であることを確認してください。',
	          jsonNotArray: 'インポートしたJSONファイルには配列が含まれている必要があります。処理を中止します。'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: '最初のページ',
	            pageBack: '前のページ',
	            pageSelected: '現在のページ',
	            pageForward: '次のページ',
	            pageToLast: '最後のページ'
	          },
	          sizes: '項目/ページ',
	          totalItems: '項目',
	          through: 'から',
	          of: '項目/全'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ko', {
	        aggregate: {
	          label: '아이템'
	        },
	        groupPanel: {
	          description: '컬럼으로 그룹핑하기 위해서는 컬럼 헤더를 끌어 떨어뜨려 주세요.'
	        },
	        search: {
	          placeholder: '검색...',
	          showingItems: '항목 보여주기:',
	          selectedItems: '선택 항목:',
	          totalItems: '전체 항목:',
	          size: '페이지 크기:',
	          first: '첫번째 페이지',
	          next: '다음 페이지',
	          previous: '이전 페이지',
	          last: '마지막 페이지'
	        },
	        menu: {
	          text: '컬럼을 선택하세요:'
	        },
	        sort: {
	          ascending: '오름차순 정렬',
	          descending: '내림차순 정렬',
	          remove: '소팅 제거'
	        },
	        column: {
	          hide: '컬럼 제거'
	        },
	        aggregation: {
	          count: '전체 갯수: ',
	          sum: '전체: ',
	          avg: '평균: ',
	          min: '최소: ',
	          max: '최대: '
	        },
	        pinning: {
	         pinLeft: '왼쪽 핀',
	          pinRight: '오른쪽 핀',
	          unpin: '핀 제거'
	        },
	        gridMenu: {
	          columns: '컬럼:',
	          importerTitle: '파일 가져오기',
	          exporterAllAsCsv: 'csv로 모든 데이터 내보내기',
	          exporterVisibleAsCsv: 'csv로 보이는 데이터 내보내기',
	          exporterSelectedAsCsv: 'csv로 선택된 데이터 내보내기',
	          exporterAllAsPdf: 'pdf로 모든 데이터 내보내기',
	          exporterVisibleAsPdf: 'pdf로 보이는 데이터 내보내기',
	          exporterSelectedAsPdf: 'pdf로 선택 데이터 내보내기',
	          clearAllFilters: '모든 필터를 청소'
	        },
	        importer: {
	          noHeaders: '컬럼명이 지정되어 있지 않습니다. 파일에 헤더가 명시되어 있는지 확인해 주세요.',
	          noObjects: '데이터가 지정되어 있지 않습니다. 데이터가 파일에 있는지 확인해 주세요.',
	          invalidCsv: '파일을 처리할 수 없습니다. 올바른 csv인지 확인해 주세요.',
	          invalidJson: '파일을 처리할 수 없습니다. 올바른 json인지 확인해 주세요.',
	          jsonNotArray: 'json 파일은 배열을 포함해야 합니다.'
	        },
	        pagination: {
	          sizes: '페이지당 항목',
	          totalItems: '전체 항목'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('nl', {
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Sleep hier een kolomnaam heen om op te groeperen.'
	        },
	        search: {
	          placeholder: 'Zoeken...',
	          showingItems: 'Getoonde items:',
	          selectedItems: 'Geselecteerde items:',
	          totalItems: 'Totaal aantal items:',
	          size: 'Items per pagina:',
	          first: 'Eerste pagina',
	          next: 'Volgende pagina',
	          previous: 'Vorige pagina',
	          last: 'Laatste pagina'
	        },
	        menu: {
	          text: 'Kies kolommen:'
	        },
	        sort: {
	          ascending: 'Sorteer oplopend',
	          descending: 'Sorteer aflopend',
	          remove: 'Verwijder sortering'
	        },
	        column: {
	          hide: 'Verberg kolom'
	        },
	        aggregation: {
	          count: 'Aantal rijen: ',
	          sum: 'Som: ',
	          avg: 'Gemiddelde: ',
	          min: 'Min: ',
	          max: 'Max: '
	        },
	        pinning: {
	          pinLeft: 'Zet links vast',
	          pinRight: 'Zet rechts vast',
	          unpin: 'Maak los'
	        },
	        gridMenu: {
	          columns: 'Kolommen:',
	          importerTitle: 'Importeer bestand',
	          exporterAllAsCsv: 'Exporteer alle data als csv',
	          exporterVisibleAsCsv: 'Exporteer zichtbare data als csv',
	          exporterSelectedAsCsv: 'Exporteer geselecteerde data als csv',
	          exporterAllAsPdf: 'Exporteer alle data als pdf',
	          exporterVisibleAsPdf: 'Exporteer zichtbare data als pdf',
	          exporterSelectedAsPdf: 'Exporteer geselecteerde data als pdf',
	          clearAllFilters: 'Reinig alle filters'
	        },
	        importer: {
	          noHeaders: 'Kolomnamen kunnen niet worden afgeleid. Heeft het bestand een header?',
	          noObjects: 'Objecten kunnen niet worden afgeleid. Bevat het bestand data naast de headers?',
	          invalidCsv: 'Het bestand kan niet verwerkt worden. Is het een valide csv bestand?',
	          invalidJson: 'Het bestand kan niet verwerkt worden. Is het valide json?',
	          jsonNotArray: 'Het json bestand moet een array bevatten. De actie wordt geannuleerd.'
	        },
	        pagination: {
	            sizes: 'items per pagina',
	            totalItems: 'items',
	            of: 'van de'
	        },
	        grouping: {
	            group: 'Groepeer',
	            ungroup: 'Groepering opheffen',
	            aggregate_count: 'Agg: Aantal',
	            aggregate_sum: 'Agg: Som',
	            aggregate_max: 'Agg: Max',
	            aggregate_min: 'Agg: Min',
	            aggregate_avg: 'Agg: Gem',
	            aggregate_remove: 'Agg: Verwijder'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('no', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter for column',
	            removeFilter: 'Remove Filter',
	            columnMenuButtonLabel: 'Column Menu'
	          },
	          priority: 'Priority:',
	          filterLabel: "Filter for column: "
	        },
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Drag a column header here and drop it to group by that column.'
	        },
	        search: {
	          placeholder: 'Search...',
	          showingItems: 'Showing Items:',
	          selectedItems: 'Selected Items:',
	          totalItems: 'Total Items:',
	          size: 'Page Size:',
	          first: 'First Page',
	          next: 'Next Page',
	          previous: 'Previous Page',
	          last: 'Last Page'
	        },
	        menu: {
	          text: 'Choose Columns:'
	        },
	        sort: {
	          ascending: 'Sort Ascending',
	          descending: 'Sort Descending',
	          none: 'Sort None',
	          remove: 'Remove Sort'
	        },
	        column: {
	          hide: 'Hide Column'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Pin Left',
	          pinRight: 'Pin Right',
	          unpin: 'Unpin'
	        },
	        columnMenu: {
	          close: 'Close'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Grid Menu'
	          },
	          columns: 'Kolonner:',
	          importerTitle: 'Importer fil',
	          exporterAllAsCsv: 'Eksporter alle data som csv',
	          exporterVisibleAsCsv: 'Eksporter synlige data som csv',
	          exporterSelectedAsCsv: 'Eksporter utvalgte data som csv',
	          exporterAllAsPdf: 'Eksporter alle data som pdf',
	          exporterVisibleAsPdf: 'Eksporter synlige data som pdf',
	          exporterSelectedAsPdf: 'Eksporter utvalgte data som pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Page to first',
	            pageBack: 'Page back',
	            pageSelected: 'Selected page',
	            pageForward: 'Page forward',
	            pageToLast: 'Page to last'
	          },
	          sizes: 'items per page',
	          totalItems: 'items',
	          through: 'through',
	          of: 'of'
	        },
	        grouping: {
	          group: 'Group',
	          ungroup: 'Ungroup',
	          aggregate_count: 'Agg: Count',
	          aggregate_sum: 'Agg: Sum',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Avg',
	          aggregate_remove: 'Agg: Remove'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('pl', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filter dla kolumny',
	            removeFilter: 'Usuń filter',
	            columnMenuButtonLabel: 'Menu kolumny'
	          },
	          priority: 'Prioritet:',
	          filterLabel: "Filtr dla kolumny: "
	        },
	        aggregate: {
	          label: 'pozycji'
	        },
	        groupPanel: {
	          description: 'Przeciągnij nagłówek kolumny tutaj, aby pogrupować według niej.'
	        },
	        search: {
	          placeholder: 'Szukaj...',
	          showingItems: 'Widoczne pozycje:',
	          selectedItems: 'Zaznaczone pozycje:',
	          totalItems: 'Wszystkich pozycji:',
	          size: 'Rozmiar strony:',
	          first: 'Pierwsza strona',
	          next: 'Następna strona',
	          previous: 'Poprzednia strona',
	          last: 'Ostatnia strona'
	        },
	        menu: {
	          text: 'Wybierz kolumny:'
	        },
	        sort: {
	          ascending: 'Sortuj rosnąco',
	          descending: 'Sortuj malejąco',
	          none: 'Brak sortowania',
	          remove: 'Wyłącz sortowanie'
	        },
	        column: {
	          hide: 'Ukryj kolumne'
	        },
	        aggregation: {
	          count: 'Razem pozycji: ',
	            sum: 'Razem: ',
	            avg: 'Średnia: ',
	            min: 'Min: ',
	            max: 'Max: '
	        },
	        pinning: {
	          pinLeft: 'Przypnij do lewej',
	          pinRight: 'Przypnij do prawej',
	          unpin: 'Odepnij'
	        },
	        columnMenu: {
	          close: 'Zamknij'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu Grida'
	          },
	          columns: 'Kolumny:',
	          importerTitle: 'Importuj plik',
	          exporterAllAsCsv: 'Eksportuj wszystkie dane do csv',
	          exporterVisibleAsCsv: 'Eksportuj widoczne dane do csv',
	          exporterSelectedAsCsv: 'Eksportuj zaznaczone dane do csv',
	          exporterAllAsPdf: 'Eksportuj wszystkie dane do pdf',
	          exporterVisibleAsPdf: 'Eksportuj widoczne dane do pdf',
	          exporterSelectedAsPdf: 'Eksportuj zaznaczone dane do pdf',
	          clearAllFilters: 'Wyczyść filtry'
	        },
	        importer: {
	          noHeaders: 'Nie udało się wczytać nazw kolumn. Czy plik posiada nagłówek?',
	          noObjects: 'Nie udalo się wczytać pozycji. Czy plik zawiera dane??',
	          invalidCsv: 'Nie udało się przetworzyć pliku, jest to prawidlowy plik CSV??',
	          invalidJson: 'Nie udało się przetworzyć pliku, jest to prawidlowy plik Json?',
	          jsonNotArray: 'Importowany plik json musi zawierać tablicę, importowanie przerwane.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Pierwsza strona',
	            pageBack: 'Poprzednia strona',
	            pageSelected: 'Wybrana strona',
	            pageForward: 'Następna strona',
	            pageToLast: 'Ostatnia strona'
	          },
	          sizes: 'pozycji na stronę',
	          totalItems: 'pozycji',
	          through: 'do',
	          of: 'z'
	        },
	        grouping: {
	          group: 'Grupuj',
	          ungroup: 'Rozgrupuj',
	          aggregate_count: 'Zbiorczo: Razem',
	          aggregate_sum: 'Zbiorczo: Suma',
	          aggregate_max: 'Zbiorczo: Max',
	          aggregate_min: 'Zbiorczo: Min',
	          aggregate_avg: 'Zbiorczo: Średnia',
	          aggregate_remove: 'Zbiorczo: Usuń'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('pt-br', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtro por coluna',
	            removeFilter: 'Remover filtro',
	            columnMenuButtonLabel: 'Menu coluna'
	          },
	          priority: 'Prioridade:',
	          filterLabel: "Filtro por coluna: "
	        },
	        aggregate: {
	          label: 'itens'
	        },
	        groupPanel: {
	          description: 'Arraste e solte uma coluna aqui para agrupar por essa coluna'
	        },
	        search: {
	          placeholder: 'Procurar...',
	          showingItems: 'Mostrando os Itens:',
	          selectedItems: 'Items Selecionados:',
	          totalItems: 'Total de Itens:',
	          size: 'Tamanho da Página:',
	          first: 'Primeira Página',
	          next: 'Próxima Página',
	          previous: 'Página Anterior',
	          last: 'Última Página'
	        },
	        menu: {
	          text: 'Selecione as colunas:'
	        },
	        sort: {
	          ascending: 'Ordenar Ascendente',
	          descending: 'Ordenar Descendente',
	          none: 'Nenhuma Ordem',
	          remove: 'Remover Ordenação'
	        },
	        column: {
	          hide: 'Esconder coluna'
	        },
	        aggregation: {
	          count: 'total de linhas: ',
	          sum: 'total: ',
	          avg: 'med: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Fixar Esquerda',
	          pinRight: 'Fixar Direita',
	          unpin: 'Desprender'
	        },
	        columnMenu: {
	          close: 'Fechar'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu Grid'
	          },
	          columns: 'Colunas:',
	          importerTitle: 'Importar arquivo',
	          exporterAllAsCsv: 'Exportar todos os dados como csv',
	          exporterVisibleAsCsv: 'Exportar dados visíveis como csv',
	          exporterSelectedAsCsv: 'Exportar dados selecionados como csv',
	          exporterAllAsPdf: 'Exportar todos os dados como pdf',
	          exporterVisibleAsPdf: 'Exportar dados visíveis como pdf',
	          exporterSelectedAsPdf: 'Exportar dados selecionados como pdf',
	          clearAllFilters: 'Limpar todos os filtros'
	        },
	        importer: {
	          noHeaders: 'Nomes de colunas não puderam ser derivados. O arquivo tem um cabeçalho?',
	          noObjects: 'Objetos não puderam ser derivados. Havia dados no arquivo, além dos cabeçalhos?',
	          invalidCsv: 'Arquivo não pode ser processado. É um CSV válido?',
	          invalidJson: 'Arquivo não pode ser processado. É um Json válido?',
	          jsonNotArray: 'Arquivo json importado tem que conter um array. Abortando.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Primeira página',
	            pageBack: 'Página anterior',
	            pageSelected: 'Página Selecionada',
	            pageForward: 'Proxima',
	            pageToLast: 'Anterior'
	          },
	          sizes: 'itens por página',
	          totalItems: 'itens',
	          through: 'através dos',
	          of: 'de'
	        },
	        grouping: {
	          group: 'Agrupar',
	          ungroup: 'Desagrupar',
	          aggregate_count: 'Agr: Contar',
	          aggregate_sum: 'Agr: Soma',
	          aggregate_max: 'Agr: Max',
	          aggregate_min: 'Agr: Min',
	          aggregate_avg: 'Agr: Med',
	          aggregate_remove: 'Agr: Remover'
	        }
	      });
	      return $delegate;
	    }]);
	}]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('pt', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtro por coluna',
	            removeFilter: 'Remover filtro',
	            columnMenuButtonLabel: 'Menu coluna'
	          },
	          priority: 'Prioridade:',
	          filterLabel: "Filtro por coluna: "
	        },
	        aggregate: {
	          label: 'itens'
	        },
	        groupPanel: {
	          description: 'Arraste e solte uma coluna aqui para agrupar por essa coluna'
	        },
	        search: {
	          placeholder: 'Procurar...',
	          showingItems: 'Mostrando os Itens:',
	          selectedItems: 'Itens Selecionados:',
	          totalItems: 'Total de Itens:',
	          size: 'Tamanho da Página:',
	          first: 'Primeira Página',
	          next: 'Próxima Página',
	          previous: 'Página Anterior',
	          last: 'Última Página'
	        },
	        menu: {
	          text: 'Selecione as colunas:'
	        },
	        sort: {
	          ascending: 'Ordenar Ascendente',
	          descending: 'Ordenar Descendente',
	          none: 'Nenhuma Ordem',
	          remove: 'Remover Ordenação'
	        },
	        column: {
	          hide: 'Esconder coluna'
	        },
	        aggregation: {
	          count: 'total de linhas: ',
	          sum: 'total: ',
	          avg: 'med: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Fixar Esquerda',
	          pinRight: 'Fixar Direita',
	          unpin: 'Desprender'
	        },
	        columnMenu: {
	          close: 'Fechar'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Menu Grid'
	          },
	          columns: 'Colunas:',
	          importerTitle: 'Importar ficheiro',
	          exporterAllAsCsv: 'Exportar todos os dados como csv',
	          exporterVisibleAsCsv: 'Exportar dados visíveis como csv',
	          exporterSelectedAsCsv: 'Exportar dados selecionados como csv',
	          exporterAllAsPdf: 'Exportar todos os dados como pdf',
	          exporterVisibleAsPdf: 'Exportar dados visíveis como pdf',
	          exporterSelectedAsPdf: 'Exportar dados selecionados como pdf',
	          clearAllFilters: 'Limpar todos os filtros'
	        },
	        importer: {
	          noHeaders: 'Nomes de colunas não puderam ser derivados. O ficheiro tem um cabeçalho?',
	          noObjects: 'Objetos não puderam ser derivados. Havia dados no ficheiro, além dos cabeçalhos?',
	          invalidCsv: 'Ficheiro não pode ser processado. É um CSV válido?',
	          invalidJson: 'Ficheiro não pode ser processado. É um Json válido?',
	          jsonNotArray: 'Ficheiro json importado tem que conter um array. Interrompendo.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Primeira página',
	            pageBack: 'Página anterior',
	            pageSelected: 'Página Selecionada',
	            pageForward: 'Próxima',
	            pageToLast: 'Anterior'
	          },
	          sizes: 'itens por página',
	          totalItems: 'itens',
	          through: 'através dos',
	          of: 'de'
	        },
	        grouping: {
	          group: 'Agrupar',
	          ungroup: 'Desagrupar',
	          aggregate_count: 'Agr: Contar',
	          aggregate_sum: 'Agr: Soma',
	          aggregate_max: 'Agr: Max',
	          aggregate_min: 'Agr: Min',
	          aggregate_avg: 'Agr: Med',
	          aggregate_remove: 'Agr: Remover'
	        }
	      });
	      return $delegate;
	    }]);
	}]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ro', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Filtru pentru coloana',
	            removeFilter: 'Sterge filtru',
	            columnMenuButtonLabel: 'Column Menu'
	          },
	          priority: 'Prioritate:',
	          filterLabel: "Filtru pentru coloana:"
	        },
	        aggregate: {
	          label: 'Elemente'
	        },
	        groupPanel: {
	          description: 'Trage un cap de coloana aici pentru a grupa elementele dupa coloana respectiva'
	        },
	        search: {
	          placeholder: 'Cauta...',
	          showingItems: 'Arata elementele:',
	          selectedItems: 'Elementele selectate:',
	          totalItems: 'Total elemente:',
	          size: 'Marime pagina:',
	          first: 'Prima pagina',
	          next: 'Pagina urmatoare',
	          previous: 'Pagina anterioara',
	          last: 'Ultima pagina'
	        },
	        menu: {
	          text: 'Alege coloane:'
	        },
	        sort: {
	          ascending: 'Ordoneaza crescator',
	          descending: 'Ordoneaza descrescator',
	          none: 'Fara ordonare',
	          remove: 'Sterge ordonarea'
	        },
	        column: {
	          hide: 'Ascunde coloana'
	        },
	        aggregation: {
	          count: 'total linii: ',
	          sum: 'total: ',
	          avg: 'medie: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        pinning: {
	          pinLeft: 'Pin la stanga',
	          pinRight: 'Pin la dreapta',
	          unpin: 'Sterge pinul'
	        },
	        columnMenu: {
	          close: 'Inchide'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Grid Menu'
	          },
	          columns: 'Coloane:',
	          importerTitle: 'Incarca fisier',
	          exporterAllAsCsv: 'Exporta toate datele ca csv',
	          exporterVisibleAsCsv: 'Exporta datele vizibile ca csv',
	          exporterSelectedAsCsv: 'Exporta datele selectate ca csv',
	          exporterAllAsPdf: 'Exporta toate datele ca pdf',
	          exporterVisibleAsPdf: 'Exporta datele vizibile ca pdf',
	          exporterSelectedAsPdf: 'Exporta datele selectate ca csv pdf',
	          clearAllFilters: 'Sterge toate filtrele'
	        },
	        importer: {
	          noHeaders: 'Numele coloanelor nu a putut fi incarcat, acest fisier are un header?',
	          noObjects: 'Datele nu au putut fi incarcate, exista date in fisier in afara numelor de coloane?',
	          invalidCsv: 'Fisierul nu a putut fi procesat, ati incarcat un CSV valid ?',
	          invalidJson: 'Fisierul nu a putut fi procesat, ati incarcat un Json valid?',
	          jsonNotArray: 'Json-ul incarcat trebuie sa contina un array, inchidere.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Prima pagina',
	            pageBack: 'O pagina inapoi',
	            pageSelected: 'Pagina selectata',
	            pageForward: 'O pagina inainte',
	            pageToLast: 'Ultima pagina'
	          },
	          sizes: 'Elemente per pagina',
	          totalItems: 'elemente',
	          through: 'prin',
	          of: 'of'
	        },
	        grouping: {
	          group: 'Grupeaza',
	          ungroup: 'Opreste gruparea',
	          aggregate_count: 'Agg: Count',
	          aggregate_sum: 'Agg: Sum',
	          aggregate_max: 'Agg: Max',
	          aggregate_min: 'Agg: Min',
	          aggregate_avg: 'Agg: Avg',
	          aggregate_remove: 'Agg: Remove'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ru', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Фильтр столбца',
	            removeFilter: 'Удалить фильтр',
	            columnMenuButtonLabel: 'Меню столбца'
	          },
	          priority: 'Приоритет:',
	          filterLabel: "Фильтр столбца: "
	        },
	        aggregate: {
	          label: 'элементы'
	        },
	        groupPanel: {
	          description: 'Для группировки по столбцу перетащите сюда его название.'
	        },
	        search: {
	          placeholder: 'Поиск...',
	          showingItems: 'Показать элементы:',
	          selectedItems: 'Выбранные элементы:',
	          totalItems: 'Всего элементов:',
	          size: 'Размер страницы:',
	          first: 'Первая страница',
	          next: 'Следующая страница',
	          previous: 'Предыдущая страница',
	          last: 'Последняя страница'
	        },
	        menu: {
	          text: 'Выбрать столбцы:'
	        },
	        sort: {
	          ascending: 'По возрастанию',
	          descending: 'По убыванию',
	          none: 'Без сортировки',
	          remove: 'Убрать сортировку'
	        },
	        column: {
	          hide: 'Спрятать столбец'
	        },
	        aggregation: {
	          count: 'всего строк: ',
	          sum: 'итого: ',
	          avg: 'среднее: ',
	          min: 'мин: ',
	          max: 'макс: '
	        },
					pinning: {
						pinLeft: 'Закрепить слева',
						pinRight: 'Закрепить справа',
						unpin: 'Открепить'
					},
	        columnMenu: {
	          close: 'Закрыть'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Меню'
	          },
	          columns: 'Столбцы:',
	          importerTitle: 'Импортировать файл',
	          exporterAllAsCsv: 'Экспортировать всё в CSV',
	          exporterVisibleAsCsv: 'Экспортировать видимые данные в CSV',
	          exporterSelectedAsCsv: 'Экспортировать выбранные данные в CSV',
	          exporterAllAsPdf: 'Экспортировать всё в PDF',
	          exporterVisibleAsPdf: 'Экспортировать видимые данные в PDF',
	          exporterSelectedAsPdf: 'Экспортировать выбранные данные в PDF',
	          clearAllFilters: 'Очистите все фильтры'
	        },
	        importer: {
	          noHeaders: 'Не удалось получить названия столбцов, есть ли в файле заголовок?',
	          noObjects: 'Не удалось получить данные, есть ли в файле строки кроме заголовка?',
	          invalidCsv: 'Не удалось обработать файл, это правильный CSV-файл?',
	          invalidJson: 'Не удалось обработать файл, это правильный JSON?',
	          jsonNotArray: 'Импортируемый JSON-файл должен содержать массив, операция отменена.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'Первая страница',
	            pageBack: 'Предыдущая страница',
	            pageSelected: 'Выбранная страница',
	            pageForward: 'Следующая страница',
	            pageToLast: 'Последняя страница'
	          },
	          sizes: 'строк на страницу',
	          totalItems: 'строк',
	          through: 'по',
	          of: 'из'
	        },
	        grouping: {
	          group: 'Группировать',
	          ungroup: 'Разгруппировать',
	          aggregate_count: 'Группировать: Count',
	          aggregate_sum: 'Для группы: Сумма',
	          aggregate_max: 'Для группы: Максимум',
	          aggregate_min: 'Для группы: Минимум',
	          aggregate_avg: 'Для группы: Среднее',
	          aggregate_remove: 'Для группы: Пусто'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('sk', {
	        aggregate: {
	          label: 'items'
	        },
	        groupPanel: {
	          description: 'Pretiahni sem názov stĺpca pre zoskupenie podľa toho stĺpca.'
	        },
	        search: {
	          placeholder: 'Hľadaj...',
	          showingItems: 'Zobrazujem položky:',
	          selectedItems: 'Vybraté položky:',
	          totalItems: 'Počet položiek:',
	          size: 'Počet:',
	          first: 'Prvá strana',
	          next: 'Ďalšia strana',
	          previous: 'Predchádzajúca strana',
	          last: 'Posledná strana'
	        },
	        menu: {
	          text: 'Vyberte stĺpce:'
	        },
	        sort: {
	          ascending: 'Zotriediť vzostupne',
	          descending: 'Zotriediť zostupne',
	          remove: 'Vymazať triedenie'
	        },
	        aggregation: {
	          count: 'total rows: ',
	          sum: 'total: ',
	          avg: 'avg: ',
	          min: 'min: ',
	          max: 'max: '
	        },
	        gridMenu: {
	          columns: 'Columns:',
	          importerTitle: 'Import file',
	          exporterAllAsCsv: 'Export all data as csv',
	          exporterVisibleAsCsv: 'Export visible data as csv',
	          exporterSelectedAsCsv: 'Export selected data as csv',
	          exporterAllAsPdf: 'Export all data as pdf',
	          exporterVisibleAsPdf: 'Export visible data as pdf',
	          exporterSelectedAsPdf: 'Export selected data as pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'Column names were unable to be derived, does the file have a header?',
	          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
	          invalidCsv: 'File was unable to be processed, is it valid CSV?',
	          invalidJson: 'File was unable to be processed, is it valid Json?',
	          jsonNotArray: 'Imported json file must contain an array, aborting.'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('sv', {
	        aggregate: {
	          label: 'Artiklar'
	        },
	        groupPanel: {
	          description: 'Dra en kolumnrubrik hit och släpp den för att gruppera efter den kolumnen.'
	        },
	        search: {
	          placeholder: 'Sök...',
	          showingItems: 'Visar artiklar:',
	          selectedItems: 'Valda artiklar:',
	          totalItems: 'Antal artiklar:',
	          size: 'Sidstorlek:',
	          first: 'Första sidan',
	          next: 'Nästa sida',
	          previous: 'Föregående sida',
	          last: 'Sista sidan'
	        },
	        menu: {
	          text: 'Välj kolumner:'
	        },
	        sort: {
	          ascending: 'Sortera stigande',
	          descending: 'Sortera fallande',
	          remove: 'Inaktivera sortering'
	        },
	        column: {
	          hide: 'Göm kolumn'
	        },
	        aggregation: {
	          count: 'Antal rader: ',
	          sum: 'Summa: ',
	          avg: 'Genomsnitt: ',
	          min: 'Min: ',
	          max: 'Max: '
	        },
	        pinning: {
	          pinLeft: 'Fäst vänster',
	          pinRight: 'Fäst höger',
	          unpin: 'Lösgör'
	        },
	        gridMenu: {
	          columns: 'Kolumner:',
	          importerTitle: 'Importera fil',
	          exporterAllAsCsv: 'Exportera all data som CSV',
	          exporterVisibleAsCsv: 'Exportera synlig data som CSV',
	          exporterSelectedAsCsv: 'Exportera markerad data som CSV',
	          exporterAllAsPdf: 'Exportera all data som PDF',
	          exporterVisibleAsPdf: 'Exportera synlig data som PDF',
	          exporterSelectedAsPdf: 'Exportera markerad data som PDF',
	          clearAllFilters: 'Rengör alla filter'
	        },
	        importer: {
	          noHeaders: 'Kolumnnamn kunde inte härledas. Har filen ett sidhuvud?',
	          noObjects: 'Objekt kunde inte härledas. Har filen data undantaget sidhuvud?',
	          invalidCsv: 'Filen kunde inte behandlas, är den en giltig CSV?',
	          invalidJson: 'Filen kunde inte behandlas, är den en giltig JSON?',
	          jsonNotArray: 'Importerad JSON-fil måste innehålla ett fält. Import avbruten.'
	        },
	        pagination: {
	          sizes: 'Artiklar per sida',
	          totalItems: 'Artiklar'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('ta', {
	        aggregate: {
	          label: 'உருப்படிகள்'
	        },
	        groupPanel: {
	          description: 'ஒரு பத்தியை குழுவாக அமைக்க அப்பத்தியின் தலைப்பை இங்கே  இழுத்து வரவும் '
	        },
	        search: {
	          placeholder: 'தேடல் ...',
	          showingItems: 'உருப்படிகளை காண்பித்தல்:',
	          selectedItems: 'தேர்ந்தெடுக்கப்பட்ட  உருப்படிகள்:',
	          totalItems: 'மொத்த உருப்படிகள்:',
	          size: 'பக்க அளவு: ',
	          first: 'முதல் பக்கம்',
	          next: 'அடுத்த பக்கம்',
	          previous: 'முந்தைய பக்கம் ',
	          last: 'இறுதி பக்கம்'
	        },
	        menu: {
	          text: 'பத்திகளை தேர்ந்தெடு:'
	        },
	        sort: {
	          ascending: 'மேலிருந்து கீழாக',
	          descending: 'கீழிருந்து மேலாக',
	          remove: 'வரிசையை நீக்கு'
	        },
	        column: {
	          hide: 'பத்தியை மறைத்து வை '
	        },
	        aggregation: {
	          count: 'மொத்த வரிகள்:',
	          sum: 'மொத்தம்: ',
	          avg: 'சராசரி: ',
	          min: 'குறைந்தபட்ச: ',
	          max: 'அதிகபட்ச: '
	        },
	        pinning: {
	         pinLeft: 'இடதுபுறமாக தைக்க ',
	          pinRight: 'வலதுபுறமாக தைக்க',
	          unpin: 'பிரி'
	        },
	        gridMenu: {
	          columns: 'பத்திகள்:',
	          importerTitle: 'கோப்பு : படித்தல்',
	          exporterAllAsCsv: 'எல்லா தரவுகளையும் கோப்பாக்கு: csv',
	          exporterVisibleAsCsv: 'இருக்கும் தரவுகளை கோப்பாக்கு: csv',
	          exporterSelectedAsCsv: 'தேர்ந்தெடுத்த தரவுகளை கோப்பாக்கு: csv',
	          exporterAllAsPdf: 'எல்லா தரவுகளையும் கோப்பாக்கு: pdf',
	          exporterVisibleAsPdf: 'இருக்கும் தரவுகளை கோப்பாக்கு: pdf',
	          exporterSelectedAsPdf: 'தேர்ந்தெடுத்த தரவுகளை கோப்பாக்கு: pdf',
	          clearAllFilters: 'Clear all filters'
	        },
	        importer: {
	          noHeaders: 'பத்தியின் தலைப்புகளை பெற இயலவில்லை, கோப்பிற்கு தலைப்பு உள்ளதா?',
	          noObjects: 'இலக்குகளை உருவாக்க முடியவில்லை, கோப்பில் தலைப்புகளை தவிர தரவு ஏதேனும் உள்ளதா? ',
	          invalidCsv:	'சரிவர நடைமுறை படுத்த இயலவில்லை, கோப்பு சரிதானா? - csv',
	          invalidJson: 'சரிவர நடைமுறை படுத்த இயலவில்லை, கோப்பு சரிதானா? - json',
	          jsonNotArray: 'படித்த கோப்பில் வரிசைகள் உள்ளது, நடைமுறை ரத்து செய் : json'
	        },
	        pagination: {
	          sizes		: 'உருப்படிகள் / பக்கம்',
	          totalItems	: 'உருப்படிகள் '
	        },
	        grouping: {
	          group	: 'குழு',
	          ungroup : 'பிரி',
	          aggregate_count	: 'மதிப்பீட்டு : எண்ணு',
	          aggregate_sum : 'மதிப்பீட்டு : கூட்டல்',
	          aggregate_max	: 'மதிப்பீட்டு : அதிகபட்சம்',
	          aggregate_min	: 'மதிப்பீட்டு : குறைந்தபட்சம்',
	          aggregate_avg	: 'மதிப்பீட்டு : சராசரி',
	          aggregate_remove : 'மதிப்பீட்டு : நீக்கு'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function () {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('tr', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: 'Sütun için filtre',
	            removeFilter: 'Filtreyi Kaldır',
	            columnMenuButtonLabel: 'Sütun Menüsü'
	          },
	          priority: 'Öncelik:',
	          filterLabel: "Sütun için filtre: "
	        },
	        aggregate: {
	          label: 'kayıtlar'
	        },
	        groupPanel: {
	          description: 'Sütuna göre gruplamak için sütun başlığını buraya sürükleyin ve bırakın.'
	        },
	        search: {
	          placeholder: 'Arama...',
	          showingItems: 'Gösterilen Kayıt:',
	          selectedItems: 'Seçili Kayıt:',
	          totalItems: 'Toplam Kayıt:',
	          size: 'Sayfa Boyutu:',
	          first: 'İlk Sayfa',
	          next: 'Sonraki Sayfa',
	          previous: 'Önceki Sayfa',
	          last: 'Son Sayfa'
	        },
	        menu: {
	          text: 'Sütunları Seç:'
	        },
	        sort: {
	          ascending: 'Artan Sırada Sırala',
	          descending: 'Azalan Sırada Sırala',
	          none: 'Sıralama Yapma',
	          remove: 'Sıralamayı Kaldır'
	        },
	        column: {
	          hide: 'Sütunu Gizle'
	        },
	        aggregation: {
	          count: 'toplam satır: ',
	          sum: 'toplam: ',
	          avg: 'ort: ',
	          min: 'min: ',
	          max: 'maks: '
	        },
	        pinning: {
	          pinLeft: 'Sola Sabitle',
	          pinRight: 'Sağa Sabitle',
	          unpin: 'Sabitlemeyi Kaldır'
	        },
	        columnMenu: {
	          close: 'Kapat'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: 'Tablo Menü'
	          },
	          columns: 'Sütunlar:',
	          importerTitle: 'Dosya içeri aktar',
	          exporterAllAsCsv: 'Bütün veriyi CSV olarak dışarı aktar',
	          exporterVisibleAsCsv: 'Görünen veriyi CSV olarak dışarı aktar',
	          exporterSelectedAsCsv: 'Seçili veriyi CSV olarak dışarı aktar',
	          exporterAllAsPdf: 'Bütün veriyi PDF olarak dışarı aktar',
	          exporterVisibleAsPdf: 'Görünen veriyi PDF olarak dışarı aktar',
	          exporterSelectedAsPdf: 'Seçili veriyi PDF olarak dışarı aktar',
	          clearAllFilters: 'Bütün filtreleri kaldır'
	        },
	        importer: {
	          noHeaders: 'Sütun isimleri üretilemiyor, dosyanın bir başlığı var mı?',
	          noObjects: 'Nesneler üretilemiyor, dosyada başlıktan başka bir veri var mı?',
	          invalidCsv: 'Dosya işlenemedi, geçerli bir CSV dosyası mı?',
	          invalidJson: 'Dosya işlenemedi, geçerli bir Json dosyası mı?',
	          jsonNotArray: 'Alınan Json dosyasında bir dizi bulunmalıdır, işlem iptal ediliyor.'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: 'İlk sayfaya',
	            pageBack: 'Geri git',
	            pageSelected: 'Seçili sayfa',
	            pageForward: 'İleri git',
	            pageToLast: 'Sona git'
	          },
	          sizes: 'Sayfadaki nesne sayısı',
	          totalItems: 'kayıtlar',
	          through: '', //note(fsw) : turkish dont have this preposition 
	          of: '' //note(fsw) : turkish dont have this preposition
	        },
	        grouping: {
	          group: 'Grupla',
	          ungroup: 'Gruplama',
	          aggregate_count: 'Yekun: Sayı',
	          aggregate_sum: 'Yekun: Toplam',
	          aggregate_max: 'Yekun: Maks',
	          aggregate_min: 'Yekun: Min',
	          aggregate_avg: 'Yekun: Ort',
	          aggregate_remove: 'Yekun: Sil'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();
	/**
	 * @ngdoc overview
	 * @name ui.grid.i18n
	 * @description
	 *
	 *  # ui.grid.i18n
	 * This module provides i18n functions to ui.grid and any application that wants to use it

	 *
	 * <div doc-module-components="ui.grid.i18n"></div>
	 */

	(function () {
	  var DIRECTIVE_ALIASES = ['uiT', 'uiTranslate'];
	  var FILTER_ALIASES = ['t', 'uiTranslate'];

	  var module = angular.module('ui.grid.i18n');


	  /**
	   *  @ngdoc object
	   *  @name ui.grid.i18n.constant:i18nConstants
	   *
	   *  @description constants available in i18n module
	   */
	  module.constant('i18nConstants', {
	    MISSING: '[MISSING]',
	    UPDATE_EVENT: '$uiI18n',

	    LOCALE_DIRECTIVE_ALIAS: 'uiI18n',
	    // default to english
	    DEFAULT_LANG: 'en'
	  });

	//    module.config(['$provide', function($provide) {
	//        $provide.decorator('i18nService', ['$delegate', function($delegate) {}])}]);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.i18n.service:i18nService
	   *
	   *  @description Services for i18n
	   */
	  module.service('i18nService', ['$log', 'i18nConstants', '$rootScope',
	    function ($log, i18nConstants, $rootScope) {

	      var langCache = {
	        _langs: {},
	        current: null,
	        get: function (lang) {
	          return this._langs[lang.toLowerCase()];
	        },
	        add: function (lang, strings) {
	          var lower = lang.toLowerCase();
	          if (!this._langs[lower]) {
	            this._langs[lower] = {};
	          }
	          angular.extend(this._langs[lower], strings);
	        },
	        getAllLangs: function () {
	          var langs = [];
	          if (!this._langs) {
	            return langs;
	          }

	          for (var key in this._langs) {
	            langs.push(key);
	          }

	          return langs;
	        },
	        setCurrent: function (lang) {
	          this.current = lang.toLowerCase();
	        },
	        getCurrentLang: function () {
	          return this.current;
	        }
	      };

	      var service = {

	        /**
	         * @ngdoc service
	         * @name add
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  Adds the languages and strings to the cache. Decorate this service to
	         * add more translation strings
	         * @param {string} lang language to add
	         * @param {object} stringMaps of strings to add grouped by property names
	         * @example
	         * <pre>
	         *      i18nService.add('en', {
	         *         aggregate: {
	         *                 label1: 'items',
	         *                 label2: 'some more items'
	         *                 }
	         *         },
	         *         groupPanel: {
	         *              description: 'Drag a column header here and drop it to group by that column.'
	         *           }
	         *      }
	         * </pre>
	         */
	        add: function (langs, stringMaps) {
	          if (typeof(langs) === 'object') {
	            angular.forEach(langs, function (lang) {
	              if (lang) {
	                langCache.add(lang, stringMaps);
	              }
	            });
	          } else {
	            langCache.add(langs, stringMaps);
	          }
	        },

	        /**
	         * @ngdoc service
	         * @name getAllLangs
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  return all currently loaded languages
	         * @returns {array} string
	         */
	        getAllLangs: function () {
	          return langCache.getAllLangs();
	        },

	        /**
	         * @ngdoc service
	         * @name get
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  return all currently loaded languages
	         * @param {string} lang to return.  If not specified, returns current language
	         * @returns {object} the translation string maps for the language
	         */
	        get: function (lang) {
	          var language = lang ? lang : service.getCurrentLang();
	          return langCache.get(language);
	        },

	        /**
	         * @ngdoc service
	         * @name getSafeText
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description  returns the text specified in the path or a Missing text if text is not found
	         * @param {string} path property path to use for retrieving text from string map
	         * @param {string} lang to return.  If not specified, returns current language
	         * @returns {object} the translation for the path
	         * @example
	         * <pre>
	         * i18nService.getSafeText('sort.ascending')
	         * </pre>
	         */
	        getSafeText: function (path, lang) {
	          var language = lang ? lang : service.getCurrentLang();
	          var trans = langCache.get(language);

	          if (!trans) {
	            return i18nConstants.MISSING;
	          }

	          var paths = path.split('.');
	          var current = trans;

	          for (var i = 0; i < paths.length; ++i) {
	            if (current[paths[i]] === undefined || current[paths[i]] === null) {
	              return i18nConstants.MISSING;
	            } else {
	              current = current[paths[i]];
	            }
	          }

	          return current;

	        },

	        /**
	         * @ngdoc service
	         * @name setCurrentLang
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description sets the current language to use in the application
	         * $broadcasts the Update_Event on the $rootScope
	         * @param {string} lang to set
	         * @example
	         * <pre>
	         * i18nService.setCurrentLang('fr');
	         * </pre>
	         */

	        setCurrentLang: function (lang) {
	          if (lang) {
	            langCache.setCurrent(lang);
	            $rootScope.$broadcast(i18nConstants.UPDATE_EVENT);
	          }
	        },

	        /**
	         * @ngdoc service
	         * @name getCurrentLang
	         * @methodOf ui.grid.i18n.service:i18nService
	         * @description returns the current language used in the application
	         */
	        getCurrentLang: function () {
	          var lang = langCache.getCurrentLang();
	          if (!lang) {
	            lang = i18nConstants.DEFAULT_LANG;
	            langCache.setCurrent(lang);
	          }
	          return lang;
	        }

	      };

	      return service;

	    }]);

	  var localeDirective = function (i18nService, i18nConstants) {
	    return {
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs) {
	            var alias = i18nConstants.LOCALE_DIRECTIVE_ALIAS;
	            // check for watchable property
	            var lang = $scope.$eval($attrs[alias]);
	            if (lang) {
	              $scope.$watch($attrs[alias], function () {
	                i18nService.setCurrentLang(lang);
	              });
	            } else if ($attrs.$$observers) {
	              $attrs.$observe(alias, function () {
	                i18nService.setCurrentLang($attrs[alias] || i18nConstants.DEFAULT_LANG);
	              });
	            }
	          }
	        };
	      }
	    };
	  };

	  module.directive('uiI18n', ['i18nService', 'i18nConstants', localeDirective]);

	  // directive syntax
	  var uitDirective = function ($parse, i18nService, i18nConstants) {
	    return {
	      restrict: 'EA',
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs) {
	            var alias1 = DIRECTIVE_ALIASES[0],
	              alias2 = DIRECTIVE_ALIASES[1];
	            var token = $attrs[alias1] || $attrs[alias2] || $elm.html();
	            var missing = i18nConstants.MISSING + token;
	            var observer;
	            if ($attrs.$$observers) {
	              var prop = $attrs[alias1] ? alias1 : alias2;
	              observer = $attrs.$observe(prop, function (result) {
	                if (result) {
	                  $elm.html($parse(result)(i18nService.getCurrentLang()) || missing);
	                }
	              });
	            }
	            var getter = $parse(token);
	            var listener = $scope.$on(i18nConstants.UPDATE_EVENT, function (evt) {
	              if (observer) {
	                observer($attrs[alias1] || $attrs[alias2]);
	              } else {
	                // set text based on i18n current language
	                $elm.html(getter(i18nService.get()) || missing);
	              }
	            });
	            $scope.$on('$destroy', listener);

	            $elm.html(getter(i18nService.get()) || missing);
	          }
	        };
	      }
	    };
	  };

	  angular.forEach( DIRECTIVE_ALIASES, function ( alias ) {
	    module.directive( alias, ['$parse', 'i18nService', 'i18nConstants', uitDirective] );
	  } );

	  // optional filter syntax
	  var uitFilter = function ($parse, i18nService, i18nConstants) {
	    return function (data) {
	      var getter = $parse(data);
	      // set text based on i18n current language
	      return getter(i18nService.get()) || i18nConstants.MISSING + data;
	    };
	  };

	  angular.forEach( FILTER_ALIASES, function ( alias ) {
	    module.filter( alias, ['$parse', 'i18nService', 'i18nConstants', uitFilter] );
	  } );


	})();
	(function() {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('zh-cn', {
	        headerCell: {
	          aria: {
	            defaultFilterLabel: '列过滤器',
	            removeFilter: '移除过滤器',
	            columnMenuButtonLabel: '列菜单'
	          },
	          priority: '优先级:',
	          filterLabel: "列过滤器: "
	        },
	        aggregate: {
	          label: '行'
	        },
	        groupPanel: {
	          description: '拖曳表头到此处进行分组'
	        },
	        search: {
	          placeholder: '查找',
	          showingItems: '已显示行数：',
	          selectedItems: '已选择行数：',
	          totalItems: '总行数：',
	          size: '每页显示行数：',
	          first: '首页',
	          next: '下一页',
	          previous: '上一页',
	          last: '末页'
	        },
	        menu: {
	          text: '选择列：'
	        },
	        sort: {
	          ascending: '升序',
	          descending: '降序',
	          none: '无序',
	          remove: '取消排序'
	        },
	        column: {
	          hide: '隐藏列'
	        },
	        aggregation: {
	          count: '计数：',
	          sum: '求和：',
	          avg: '均值：',
	          min: '最小值：',
	          max: '最大值：'
	        },
	        pinning: {
	          pinLeft: '左侧固定',
	          pinRight: '右侧固定',
	          unpin: '取消固定'
	        },
	        columnMenu: {
	          close: '关闭'
	        },
	        gridMenu: {
	          aria: {
	            buttonLabel: '表格菜单'
	          },
	          columns: '列：',
	          importerTitle: '导入文件',
	          exporterAllAsCsv: '导出全部数据到CSV',
	          exporterVisibleAsCsv: '导出可见数据到CSV',
	          exporterSelectedAsCsv: '导出已选数据到CSV',
	          exporterAllAsPdf: '导出全部数据到PDF',
	          exporterVisibleAsPdf: '导出可见数据到PDF',
	          exporterSelectedAsPdf: '导出已选数据到PDF',
	          clearAllFilters: '清除所有过滤器'
	        },
	        importer: {
	          noHeaders: '无法获取列名，确定文件包含表头？',
	          noObjects: '无法获取数据，确定文件包含数据？',
	          invalidCsv: '无法处理文件，确定是合法的CSV文件？',
	          invalidJson: '无法处理文件，确定是合法的JSON文件？',
	          jsonNotArray: '导入的文件不是JSON数组！'
	        },
	        pagination: {
	          aria: {
	            pageToFirst: '第一页',
	            pageBack: '上一页',
	            pageSelected: '当前页',
	            pageForward: '下一页',
	            pageToLast: '最后一页'
	          },
	          sizes: '行每页',
	          totalItems: '行',
	          through: '至',
	          of: '共'
	        },
	        grouping: {
	          group: '分组',
	          ungroup: '取消分组',
	          aggregate_count: '合计: 计数',
	          aggregate_sum: '合计: 求和',
	          aggregate_max: '合计: 最大',
	          aggregate_min: '合计: 最小',
	          aggregate_avg: '合计: 平均',
	          aggregate_remove: '合计: 移除'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function() {
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('i18nService', ['$delegate', function($delegate) {
	      $delegate.add('zh-tw', {
	        aggregate: {
	          label: '行'
	        },
	        groupPanel: {
	          description: '拖曳表頭到此處進行分組'
	        },
	        search: {
	          placeholder: '查找',
	          showingItems: '已顯示行數：',
	          selectedItems: '已選擇行數：',
	          totalItems: '總行數：',
	          size: '每頁顯示行數：',
	          first: '首頁',
	          next: '下壹頁',
	          previous: '上壹頁',
	          last: '末頁'
	        },
	        menu: {
	          text: '選擇列：'
	        },
	        sort: {
	          ascending: '升序',
	          descending: '降序',
	          remove: '取消排序'
	        },
	        column: {
	          hide: '隱藏列'
	        },
	        aggregation: {
	          count: '計數：',
	          sum: '求和：',
	          avg: '均值：',
	          min: '最小值：',
	          max: '最大值：'
	        },
	        pinning: {
	          pinLeft: '左側固定',
	          pinRight: '右側固定',
	          unpin: '取消固定'
	        },
	        gridMenu: {
	          columns: '列：',
	          importerTitle: '導入文件',
	          exporterAllAsCsv: '導出全部數據到CSV',
	          exporterVisibleAsCsv: '導出可見數據到CSV',
	          exporterSelectedAsCsv: '導出已選數據到CSV',
	          exporterAllAsPdf: '導出全部數據到PDF',
	          exporterVisibleAsPdf: '導出可見數據到PDF',
	          exporterSelectedAsPdf: '導出已選數據到PDF',
	          clearAllFilters: '清除所有过滤器'
	        },
	        importer: {
	          noHeaders: '無法獲取列名，確定文件包含表頭？',
	          noObjects: '無法獲取數據，確定文件包含數據？',
	          invalidCsv: '無法處理文件，確定是合法的CSV文件？',
	          invalidJson: '無法處理文件，確定是合法的JSON文件？',
	          jsonNotArray: '導入的文件不是JSON數組！'
	        },
	        pagination: {
	          sizes: '行每頁',
	          totalItems: '行'
	        }
	      });
	      return $delegate;
	    }]);
	  }]);
	})();

	(function() {
	  'use strict';
	  /**
	   *  @ngdoc overview
	   *  @name ui.grid.autoResize
	   *
	   *  @description
	   *
	   *  #ui.grid.autoResize
	   *
	   *  <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   *  This module provides auto-resizing functionality to UI-Grid.
	   */
	  var module = angular.module('ui.grid.autoResize', ['ui.grid']);


	  module.directive('uiGridAutoResize', ['$timeout', 'gridUtil', function ($timeout, gridUtil) {
	    return {
	      require: 'uiGrid',
	      scope: false,
	      link: function ($scope, $elm, $attrs, uiGridCtrl) {
	        var prevGridWidth, prevGridHeight;

	        function getDimensions() {
	          prevGridHeight = gridUtil.elementHeight($elm);
	          prevGridWidth = gridUtil.elementWidth($elm);
	        }

	        // Initialize the dimensions
	        getDimensions();

	        var resizeTimeoutId;
	        function startTimeout() {
	          clearTimeout(resizeTimeoutId);

	          resizeTimeoutId = setTimeout(function () {
	            var newGridHeight = gridUtil.elementHeight($elm);
	            var newGridWidth = gridUtil.elementWidth($elm);

	            if (newGridHeight !== prevGridHeight || newGridWidth !== prevGridWidth) {
	              uiGridCtrl.grid.gridHeight = newGridHeight;
	              uiGridCtrl.grid.gridWidth = newGridWidth;
	              uiGridCtrl.grid.api.core.raise.gridDimensionChanged(prevGridHeight, prevGridWidth, newGridHeight, newGridWidth);

	              $scope.$apply(function () {
	                uiGridCtrl.grid.refresh()
	                  .then(function () {
	                    getDimensions();

	                    startTimeout();
	                  });
	              });
	            }
	            else {
	              startTimeout();
	            }
	          }, 250);
	        }

	        startTimeout();

	        $scope.$on('$destroy', function() {
	          clearTimeout(resizeTimeoutId);
	        });
	      }
	    };
	  }]);
	})();

	(function () {
	  'use strict';

	  /**
	   *  @ngdoc overview
	   *  @name ui.grid.cellNav
	   *
	   *  @description

	      #ui.grid.cellNav

	      <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

	      This module provides auto-resizing functionality to UI-Grid.
	   */
	  var module = angular.module('ui.grid.cellNav', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.cellNav.constant:uiGridCellNavConstants
	   *
	   *  @description constants available in cellNav
	   */
	  module.constant('uiGridCellNavConstants', {
	    FEATURE_NAME: 'gridCellNav',
	    CELL_NAV_EVENT: 'cellNav',
	    direction: {LEFT: 0, RIGHT: 1, UP: 2, DOWN: 3, PG_UP: 4, PG_DOWN: 5},
	    EVENT_TYPE: {
	      KEYDOWN: 0,
	      CLICK: 1,
	      CLEAR: 2
	    }
	  });


	  module.factory('uiGridCellNavFactory', ['gridUtil', 'uiGridConstants', 'uiGridCellNavConstants', 'GridRowColumn', '$q',
	    function (gridUtil, uiGridConstants, uiGridCellNavConstants, GridRowColumn, $q) {
	      /**
	       *  @ngdoc object
	       *  @name ui.grid.cellNav.object:CellNav
	       *  @description returns a CellNav prototype function
	       *  @param {object} rowContainer container for rows
	       *  @param {object} colContainer parent column container
	       *  @param {object} leftColContainer column container to the left of parent
	       *  @param {object} rightColContainer column container to the right of parent
	       */
	      var UiGridCellNav = function UiGridCellNav(rowContainer, colContainer, leftColContainer, rightColContainer) {
	        this.rows = rowContainer.visibleRowCache;
	        this.columns = colContainer.visibleColumnCache;
	        this.leftColumns = leftColContainer ? leftColContainer.visibleColumnCache : [];
	        this.rightColumns = rightColContainer ? rightColContainer.visibleColumnCache : [];
	        this.bodyContainer = rowContainer;
	      };

	      /** returns focusable columns of all containers */
	      UiGridCellNav.prototype.getFocusableCols = function () {
	        var allColumns = this.leftColumns.concat(this.columns, this.rightColumns);

	        return allColumns.filter(function (col) {
	          return col.colDef.allowCellFocus;
	        });
	      };

	      /**
	       *  @ngdoc object
	       *  @name ui.grid.cellNav.api:GridRow
	       *
	       *  @description GridRow settings for cellNav feature, these are available to be
	       *  set only internally (for example, by other features)
	       */

	      /**
	       *  @ngdoc object
	       *  @name allowCellFocus
	       *  @propertyOf  ui.grid.cellNav.api:GridRow
	       *  @description Enable focus on a cell within this row.  If set to false then no cells
	       *  in this row can be focused - group header rows as an example would set this to false.
	       *  <br/>Defaults to true
	       */
	      /** returns focusable rows */
	      UiGridCellNav.prototype.getFocusableRows = function () {
	        return this.rows.filter(function(row) {
	          return row.allowCellFocus !== false;
	        });
	      };

	      UiGridCellNav.prototype.getNextRowCol = function (direction, curRow, curCol) {
	        switch (direction) {
	          case uiGridCellNavConstants.direction.LEFT:
	            return this.getRowColLeft(curRow, curCol);
	          case uiGridCellNavConstants.direction.RIGHT:
	            return this.getRowColRight(curRow, curCol);
	          case uiGridCellNavConstants.direction.UP:
	            return this.getRowColUp(curRow, curCol);
	          case uiGridCellNavConstants.direction.DOWN:
	            return this.getRowColDown(curRow, curCol);
	          case uiGridCellNavConstants.direction.PG_UP:
	            return this.getRowColPageUp(curRow, curCol);
	          case uiGridCellNavConstants.direction.PG_DOWN:
	            return this.getRowColPageDown(curRow, curCol);
	        }

	      };

	      UiGridCellNav.prototype.initializeSelection = function () {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        if (focusableCols.length === 0 || focusableRows.length === 0) {
	          return null;
	        }

	        var curRowIndex = 0;
	        var curColIndex = 0;
	        return new GridRowColumn(focusableRows[0], focusableCols[0]); //return same row
	      };

	      UiGridCellNav.prototype.getRowColLeft = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 1
	        if (curColIndex === -1) {
	          curColIndex = 1;
	        }

	        var nextColIndex = curColIndex === 0 ? focusableCols.length - 1 : curColIndex - 1;

	        //get column to left
	        if (nextColIndex > curColIndex) {
	          // On the first row
	          // if (curRowIndex === 0 && curColIndex === 0) {
	          //   return null;
	          // }
	          if (curRowIndex === 0) {
	            return new GridRowColumn(curRow, focusableCols[nextColIndex]); //return same row
	          }
	          else {
	            //up one row and far right column
	            return new GridRowColumn(focusableRows[curRowIndex - 1], focusableCols[nextColIndex]);
	          }
	        }
	        else {
	          return new GridRowColumn(curRow, focusableCols[nextColIndex]);
	        }
	      };



	      UiGridCellNav.prototype.getRowColRight = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }
	        var nextColIndex = curColIndex === focusableCols.length - 1 ? 0 : curColIndex + 1;

	        if (nextColIndex < curColIndex) {
	          if (curRowIndex === focusableRows.length - 1) {
	            return new GridRowColumn(curRow, focusableCols[nextColIndex]); //return same row
	          }
	          else {
	            //down one row and far left column
	            return new GridRowColumn(focusableRows[curRowIndex + 1], focusableCols[nextColIndex]);
	          }
	        }
	        else {
	          return new GridRowColumn(curRow, focusableCols[nextColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColDown = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        if (curRowIndex === focusableRows.length - 1) {
	          return new GridRowColumn(curRow, focusableCols[curColIndex]); //return same row
	        }
	        else {
	          //down one row
	          return new GridRowColumn(focusableRows[curRowIndex + 1], focusableCols[curColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColPageDown = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        var pageSize = this.bodyContainer.minRowsToRender();
	        if (curRowIndex >= focusableRows.length - pageSize) {
	          return new GridRowColumn(focusableRows[focusableRows.length - 1], focusableCols[curColIndex]); //return last row
	        }
	        else {
	          //down one page
	          return new GridRowColumn(focusableRows[curRowIndex + pageSize], focusableCols[curColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColUp = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        if (curRowIndex === 0) {
	          return new GridRowColumn(curRow, focusableCols[curColIndex]); //return same row
	        }
	        else {
	          //up one row
	          return new GridRowColumn(focusableRows[curRowIndex - 1], focusableCols[curColIndex]);
	        }
	      };

	      UiGridCellNav.prototype.getRowColPageUp = function (curRow, curCol) {
	        var focusableCols = this.getFocusableCols();
	        var focusableRows = this.getFocusableRows();
	        var curColIndex = focusableCols.indexOf(curCol);
	        var curRowIndex = focusableRows.indexOf(curRow);

	        //could not find column in focusable Columns so set it to 0
	        if (curColIndex === -1) {
	          curColIndex = 0;
	        }

	        var pageSize = this.bodyContainer.minRowsToRender();
	        if (curRowIndex - pageSize < 0) {
	          return new GridRowColumn(focusableRows[0], focusableCols[curColIndex]); //return first row
	        }
	        else {
	          //up one page
	          return new GridRowColumn(focusableRows[curRowIndex - pageSize], focusableCols[curColIndex]);
	        }
	      };
	      return UiGridCellNav;
	    }]);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.cellNav.service:uiGridCellNavService
	   *
	   *  @description Services for cell navigation features. If you don't like the key maps we use,
	   *  or the direction cells navigation, override with a service decorator (see angular docs)
	   */
	  module.service('uiGridCellNavService', ['gridUtil', 'uiGridConstants', 'uiGridCellNavConstants', '$q', 'uiGridCellNavFactory', 'GridRowColumn', 'ScrollEvent',
	    function (gridUtil, uiGridConstants, uiGridCellNavConstants, $q, UiGridCellNav, GridRowColumn, ScrollEvent) {

	      var service = {

	        initializeGrid: function (grid) {
	          grid.registerColumnBuilder(service.cellNavColumnBuilder);


	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav:Grid.cellNav
	           * @description cellNav properties added to grid class
	           */
	          grid.cellNav = {};
	          grid.cellNav.lastRowCol = null;
	          grid.cellNav.focusedCells = [];

	          service.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav.api:PublicApi
	           *
	           *  @description Public Api for cellNav feature
	           */
	          var publicApi = {
	            events: {
	              cellNav: {
	                /**
	                 * @ngdoc event
	                 * @name navigate
	                 * @eventOf  ui.grid.cellNav.api:PublicApi
	                 * @description raised when the active cell is changed
	                 * <pre>
	                 *      gridApi.cellNav.on.navigate(scope,function(newRowcol, oldRowCol){})
	                 * </pre>
	                 * @param {object} newRowCol new position
	                 * @param {object} oldRowCol old position
	                 */
	                navigate: function (newRowCol, oldRowCol) {},
	                /**
	                 * @ngdoc event
	                 * @name viewPortKeyDown
	                 * @eventOf  ui.grid.cellNav.api:PublicApi
	                 * @description  is raised when the viewPort receives a keyDown event. Cells never get focus in uiGrid
	                 * due to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this
	                 * event whenever you need a keydown event on a cell
	                 * <br/>
	                 * @param {object} event keydown event
	                 * @param {object} rowCol current rowCol position
	                 */
	                viewPortKeyDown: function (event, rowCol) {},

	                /**
	                 * @ngdoc event
	                 * @name viewPortKeyPress
	                 * @eventOf  ui.grid.cellNav.api:PublicApi
	                 * @description  is raised when the viewPort receives a keyPress event. Cells never get focus in uiGrid
	                 * due to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this
	                 * event whenever you need a keypress event on a cell
	                 * <br/>
	                 * @param {object} event keypress event
	                 * @param {object} rowCol current rowCol position
	                 */
	                viewPortKeyPress: function (event, rowCol) {}
	              }
	            },
	            methods: {
	              cellNav: {
	                /**
	                 * @ngdoc function
	                 * @name scrollToFocus
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description brings the specified row and column into view, and sets focus
	                 * to that cell
	                 * @param {object} rowEntity gridOptions.data[] array instance to make visible and set focus
	                 * @param {object} colDef to make visible and set focus
	                 * @returns {promise} a promise that is resolved after any scrolling is finished
	                 */
	                scrollToFocus: function (rowEntity, colDef) {
	                  return service.scrollToFocus(grid, rowEntity, colDef);
	                },

	                /**
	                 * @ngdoc function
	                 * @name getFocusedCell
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description returns the current (or last if Grid does not have focus) focused row and column
	                 * <br> value is null if no selection has occurred
	                 */
	                getFocusedCell: function () {
	                  return grid.cellNav.lastRowCol;
	                },

	                /**
	                 * @ngdoc function
	                 * @name getCurrentSelection
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description returns an array containing the current selection
	                 * <br> array is empty if no selection has occurred
	                 */
	                getCurrentSelection: function () {
	                  return grid.cellNav.focusedCells;
	                },

	                /**
	                 * @ngdoc function
	                 * @name rowColSelectIndex
	                 * @methodOf  ui.grid.cellNav.api:PublicApi
	                 * @description returns the index in the order in which the GridRowColumn was selected, returns -1 if the GridRowColumn
	                 * isn't selected
	                 * @param {object} rowCol the rowCol to evaluate
	                 */
	                rowColSelectIndex: function (rowCol) {
	                  //return gridUtil.arrayContainsObjectWithProperty(grid.cellNav.focusedCells, 'col.uid', rowCol.col.uid) &&
	                  var index = -1;
	                  for (var i = 0; i < grid.cellNav.focusedCells.length; i++) {
	                    if (grid.cellNav.focusedCells[i].col.uid === rowCol.col.uid &&
	                      grid.cellNav.focusedCells[i].row.uid === rowCol.row.uid) {
	                      index = i;
	                      break;
	                    }
	                  }
	                  return index;
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav.api:GridOptions
	           *
	           *  @description GridOptions for cellNav feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name modifierKeysToMultiSelectCells
	           *  @propertyOf  ui.grid.cellNav.api:GridOptions
	           *  @description Enable multiple cell selection only when using the ctrlKey or shiftKey.
	           *  <br/>Defaults to false
	           */
	          gridOptions.modifierKeysToMultiSelectCells = gridOptions.modifierKeysToMultiSelectCells === true;

	        },

	        /**
	         * @ngdoc service
	         * @name decorateRenderContainers
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @description  decorates grid renderContainers with cellNav functions
	         */
	        decorateRenderContainers: function (grid) {

	          var rightContainer = grid.hasRightContainer() ? grid.renderContainers.right : null;
	          var leftContainer = grid.hasLeftContainer() ? grid.renderContainers.left : null;

	          if (leftContainer !== null) {
	            grid.renderContainers.left.cellNav = new UiGridCellNav(grid.renderContainers.body, leftContainer, rightContainer, grid.renderContainers.body);
	          }
	          if (rightContainer !== null) {
	            grid.renderContainers.right.cellNav = new UiGridCellNav(grid.renderContainers.body, rightContainer, grid.renderContainers.body, leftContainer);
	          }

	          grid.renderContainers.body.cellNav = new UiGridCellNav(grid.renderContainers.body, grid.renderContainers.body, leftContainer, rightContainer);
	        },

	        /**
	         * @ngdoc service
	         * @name getDirection
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @description  determines which direction to for a given keyDown event
	         * @returns {uiGridCellNavConstants.direction} direction
	         */
	        getDirection: function (evt) {
	          if (evt.keyCode === uiGridConstants.keymap.LEFT ||
	            (evt.keyCode === uiGridConstants.keymap.TAB && evt.shiftKey)) {
	            return uiGridCellNavConstants.direction.LEFT;
	          }
	          if (evt.keyCode === uiGridConstants.keymap.RIGHT ||
	            evt.keyCode === uiGridConstants.keymap.TAB) {
	            return uiGridCellNavConstants.direction.RIGHT;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.UP ||
	            (evt.keyCode === uiGridConstants.keymap.ENTER && evt.shiftKey) ) {
	            return uiGridCellNavConstants.direction.UP;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.PG_UP){
	            return uiGridCellNavConstants.direction.PG_UP;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.DOWN ||
	            evt.keyCode === uiGridConstants.keymap.ENTER && !(evt.ctrlKey || evt.altKey)) {
	            return uiGridCellNavConstants.direction.DOWN;
	          }

	          if (evt.keyCode === uiGridConstants.keymap.PG_DOWN){
	            return uiGridCellNavConstants.direction.PG_DOWN;
	          }

	          return null;
	        },

	        /**
	         * @ngdoc service
	         * @name cellNavColumnBuilder
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @description columnBuilder function that adds cell navigation properties to grid column
	         * @returns {promise} promise that will load any needed templates when resolved
	         */
	        cellNavColumnBuilder: function (colDef, col, gridOptions) {
	          var promises = [];

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.cellNav.api:ColumnDef
	           *
	           *  @description Column Definitions for cellNav feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	           */

	          /**
	           *  @ngdoc object
	           *  @name allowCellFocus
	           *  @propertyOf  ui.grid.cellNav.api:ColumnDef
	           *  @description Enable focus on a cell within this column.
	           *  <br/>Defaults to true
	           */
	          colDef.allowCellFocus = colDef.allowCellFocus === undefined ? true : colDef.allowCellFocus;

	          return $q.all(promises);
	        },

	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @name scrollToFocus
	         * @description Scroll the grid such that the specified
	         * row and column is in view, and set focus to the cell in that row and column
	         * @param {Grid} grid the grid you'd like to act upon, usually available
	         * from gridApi.grid
	         * @param {object} rowEntity gridOptions.data[] array instance to make visible and set focus to
	         * @param {object} colDef to make visible and set focus to
	         * @returns {promise} a promise that is resolved after any scrolling is finished
	         */
	        scrollToFocus: function (grid, rowEntity, colDef) {
	          var gridRow = null, gridCol = null;

	          if (typeof(rowEntity) !== 'undefined' && rowEntity !== null) {
	            gridRow = grid.getRow(rowEntity);
	          }

	          if (typeof(colDef) !== 'undefined' && colDef !== null) {
	            gridCol = grid.getColumn(colDef.name ? colDef.name : colDef.field);
	          }
	          return grid.api.core.scrollToIfNecessary(gridRow, gridCol).then(function () {
	            var rowCol = { row: gridRow, col: gridCol };

	            // Broadcast the navigation
	            if (gridRow !== null && gridCol !== null) {
	              grid.cellNav.broadcastCellNav(rowCol);
	            }
	          });



	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
	         * @name getLeftWidth
	         * @description Get the current drawn width of the columns in the
	         * grid up to the numbered column, and add an apportionment for the
	         * column that we're on.  So if we are on column 0, we want to scroll
	         * 0% (i.e. exclude this column from calc).  If we're on the last column
	         * we want to scroll to 100% (i.e. include this column in the calc). So
	         * we include (thisColIndex / totalNumberCols) % of this column width
	         * @param {Grid} grid the grid you'd like to act upon, usually available
	         * from gridApi.grid
	         * @param {gridCol} upToCol the column to total up to and including
	         */
	        getLeftWidth: function (grid, upToCol) {
	          var width = 0;

	          if (!upToCol) {
	            return width;
	          }

	          var lastIndex = grid.renderContainers.body.visibleColumnCache.indexOf( upToCol );

	          // total column widths up-to but not including the passed in column
	          grid.renderContainers.body.visibleColumnCache.forEach( function( col, index ) {
	            if ( index < lastIndex ){
	              width += col.drawnWidth;
	            }
	          });

	          // pro-rata the final column based on % of total columns.
	          var percentage = lastIndex === 0 ? 0 : (lastIndex + 1) / grid.renderContainers.body.visibleColumnCache.length;
	          width += upToCol.drawnWidth * percentage;

	          return width;
	        }
	      };

	      return service;
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.cellNav.directive:uiCellNav
	   *  @element div
	   *  @restrict EA
	   *
	   *  @description Adds cell navigation features to the grid columns
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.cellNav']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name'},
	        {name: 'title'}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-cellnav></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridCellnav', ['gridUtil', 'uiGridCellNavService', 'uiGridCellNavConstants', 'uiGridConstants', 'GridRowColumn', '$timeout', '$compile',
	    function (gridUtil, uiGridCellNavService, uiGridCellNavConstants, uiGridConstants, GridRowColumn, $timeout, $compile) {
	      return {
	        replace: true,
	        priority: -150,
	        require: '^uiGrid',
	        scope: false,
	        controller: function () {},
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              var _scope = $scope;

	              var grid = uiGridCtrl.grid;
	              uiGridCellNavService.initializeGrid(grid);

	              uiGridCtrl.cellNav = {};

	              //Ensure that the object has all of the methods we expect it to
	              uiGridCtrl.cellNav.makeRowCol = function (obj) {
	                if (!(obj instanceof GridRowColumn)) {
	                  obj = new GridRowColumn(obj.row, obj.col);
	                }
	                return obj;
	              };

	              uiGridCtrl.cellNav.getActiveCell = function () {
	                var elms = $elm[0].getElementsByClassName('ui-grid-cell-focus');
	                if (elms.length > 0){
	                  return elms[0];
	                }

	                return undefined;
	              };

	              uiGridCtrl.cellNav.broadcastCellNav = grid.cellNav.broadcastCellNav = function (newRowCol, modifierDown, originEvt) {
	                modifierDown = !(modifierDown === undefined || !modifierDown);

	                newRowCol = uiGridCtrl.cellNav.makeRowCol(newRowCol);

	                uiGridCtrl.cellNav.broadcastFocus(newRowCol, modifierDown, originEvt);
	                _scope.$broadcast(uiGridCellNavConstants.CELL_NAV_EVENT, newRowCol, modifierDown, originEvt);
	              };

	              uiGridCtrl.cellNav.clearFocus = grid.cellNav.clearFocus = function () {
	                grid.cellNav.focusedCells = [];
	                _scope.$broadcast(uiGridCellNavConstants.CELL_NAV_EVENT);
	              };

	              uiGridCtrl.cellNav.broadcastFocus = function (rowCol, modifierDown, originEvt) {
	                modifierDown = !(modifierDown === undefined || !modifierDown);

	                rowCol = uiGridCtrl.cellNav.makeRowCol(rowCol);

	                var row = rowCol.row,
	                  col = rowCol.col;

	                var rowColSelectIndex = uiGridCtrl.grid.api.cellNav.rowColSelectIndex(rowCol);

	                if (grid.cellNav.lastRowCol === null || rowColSelectIndex === -1) {
	                  var newRowCol = new GridRowColumn(row, col);

	                  if (grid.cellNav.lastRowCol === null || grid.cellNav.lastRowCol.row !== newRowCol.row || grid.cellNav.lastRowCol.col !== newRowCol.col){
	                    grid.api.cellNav.raise.navigate(newRowCol, grid.cellNav.lastRowCol);
	                    grid.cellNav.lastRowCol = newRowCol;  
	                  }
	                  if (uiGridCtrl.grid.options.modifierKeysToMultiSelectCells && modifierDown) {
	                    grid.cellNav.focusedCells.push(rowCol);
	                  } else {
	                    grid.cellNav.focusedCells = [rowCol];
	                  }
	                } else if (grid.options.modifierKeysToMultiSelectCells && modifierDown &&
	                  rowColSelectIndex >= 0) {

	                  grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
	                }
	              };

	              uiGridCtrl.cellNav.handleKeyDown = function (evt) {
	                var direction = uiGridCellNavService.getDirection(evt);
	                if (direction === null) {
	                  return null;
	                }

	                var containerId = 'body';
	                if (evt.uiGridTargetRenderContainerId) {
	                  containerId = evt.uiGridTargetRenderContainerId;
	                }

	                // Get the last-focused row+col combo
	                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (lastRowCol) {
	                  // Figure out which new row+combo we're navigating to
	                  var rowCol = uiGridCtrl.grid.renderContainers[containerId].cellNav.getNextRowCol(direction, lastRowCol.row, lastRowCol.col);
	                  var focusableCols = uiGridCtrl.grid.renderContainers[containerId].cellNav.getFocusableCols();
	                  var rowColSelectIndex = uiGridCtrl.grid.api.cellNav.rowColSelectIndex(rowCol);
	                  // Shift+tab on top-left cell should exit cellnav on render container
	                  if (
	                    // Navigating left
	                    direction === uiGridCellNavConstants.direction.LEFT &&
	                    // New col is last col (i.e. wrap around)
	                    rowCol.col === focusableCols[focusableCols.length - 1] &&
	                    // Staying on same row, which means we're at first row
	                    rowCol.row === lastRowCol.row &&
	                    evt.keyCode === uiGridConstants.keymap.TAB &&
	                    evt.shiftKey
	                  ) {
	                    grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
	                    uiGridCtrl.cellNav.clearFocus();
	                    return true;
	                  }
	                  // Tab on bottom-right cell should exit cellnav on render container
	                  else if (
	                    direction === uiGridCellNavConstants.direction.RIGHT &&
	                    // New col is first col (i.e. wrap around)
	                    rowCol.col === focusableCols[0] &&
	                    // Staying on same row, which means we're at first row
	                    rowCol.row === lastRowCol.row &&
	                    evt.keyCode === uiGridConstants.keymap.TAB &&
	                    !evt.shiftKey
	                  ) {
	                    grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
	                    uiGridCtrl.cellNav.clearFocus();
	                    return true;
	                  }

	                  // Scroll to the new cell, if it's not completely visible within the render container's viewport
	                  grid.scrollToIfNecessary(rowCol.row, rowCol.col).then(function () {
	                    uiGridCtrl.cellNav.broadcastCellNav(rowCol);
	                  });


	                  evt.stopPropagation();
	                  evt.preventDefault();

	                  return false;
	                }
	              };
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	              var _scope = $scope;
	              var grid = uiGridCtrl.grid;

	              function addAriaLiveRegion(){
	                // Thanks to google docs for the inspiration behind how to do this
	                // XXX: Why is this entire mess nessasary?
	                // Because browsers take a lot of coercing to get them to read out live regions
	                //http://www.paciellogroup.com/blog/2012/06/html5-accessibility-chops-aria-rolealert-browser-support/
	                var ariaNotifierDomElt = '<div ' +
	                                           'id="' + grid.id +'-aria-speakable" ' +
	                                           'class="ui-grid-a11y-ariascreenreader-speakable ui-grid-offscreen" ' +
	                                           'aria-live="assertive" ' +
	                                           'role="region" ' +
	                                           'aria-atomic="true" ' +
	                                           'aria-hidden="false" ' +
	                                           'aria-relevant="additions" ' +
	                                           '>' +
	                                           '&nbsp;' +
	                                         '</div>';

	                var ariaNotifier = $compile(ariaNotifierDomElt)($scope);
	                $elm.prepend(ariaNotifier);
	                $scope.$on(uiGridCellNavConstants.CELL_NAV_EVENT, function (evt, rowCol, modifierDown, originEvt) {
	                  /*
	                   * If the cell nav event was because of a focus event then we don't want to
	                   * change the notifier text.
	                   * Reasoning: Voice Over fires a focus events when moving arround the grid.
	                   * If the screen reader is handing the grid nav properly then we don't need to
	                   * use the alert to notify the user of the movement.
	                   * In all other cases we do want a notification event.
	                   */
	                  if (originEvt && originEvt.type === 'focus'){return;}

	                  function setNotifyText(text){
	                    if (text === ariaNotifier.text()){return;}
	                    ariaNotifier[0].style.clip = 'rect(0px,0px,0px,0px)';
	                    /*
	                     * This is how google docs handles clearing the div. Seems to work better than setting the text of the div to ''
	                     */
	                    ariaNotifier[0].innerHTML = "";
	                    ariaNotifier[0].style.visibility = 'hidden';
	                    ariaNotifier[0].style.visibility = 'visible';
	                    if (text !== ''){
	                      ariaNotifier[0].style.clip = 'auto';
	                      /*
	                       * The space after the text is something that google docs does.
	                       */
	                      ariaNotifier[0].appendChild(document.createTextNode(text + " "));
	                      ariaNotifier[0].style.visibility = 'hidden';
	                      ariaNotifier[0].style.visibility = 'visible';
	                    }
	                  }

	                  var values = [];
	                  var currentSelection = grid.api.cellNav.getCurrentSelection();
	                  for (var i = 0; i < currentSelection.length; i++) {
	                    values.push(grid.getCellDisplayValue(currentSelection[i].row, currentSelection[i].col));
	                  }
	                  var cellText = values.toString();
	                  setNotifyText(cellText);

	                });
	              }
	              addAriaLiveRegion();
	            }
	          };
	        }
	      };
	    }]);

	  module.directive('uiGridRenderContainer', ['$timeout', '$document', 'gridUtil', 'uiGridConstants', 'uiGridCellNavService', '$compile','uiGridCellNavConstants',
	    function ($timeout, $document, gridUtil, uiGridConstants, uiGridCellNavService, $compile, uiGridCellNavConstants) {
	      return {
	        replace: true,
	        priority: -99999, //this needs to run very last
	        require: ['^uiGrid', 'uiGridRenderContainer', '?^uiGridCellnav'],
	        scope: false,
	        compile: function () {
	          return {
	            post: function ($scope, $elm, $attrs, controllers) {
	              var uiGridCtrl = controllers[0],
	                 renderContainerCtrl = controllers[1],
	                 uiGridCellnavCtrl = controllers[2];

	              // Skip attaching cell-nav specific logic if the directive is not attached above us
	              if (!uiGridCtrl.grid.api.cellNav) { return; }

	              var containerId = renderContainerCtrl.containerId;

	              var grid = uiGridCtrl.grid;

	              //run each time a render container is created
	              uiGridCellNavService.decorateRenderContainers(grid);

	              // focusser only created for body
	              if (containerId !== 'body') {
	                return;
	              }



	              if (uiGridCtrl.grid.options.modifierKeysToMultiSelectCells){
	                $elm.attr('aria-multiselectable', true);
	              } else {
	                $elm.attr('aria-multiselectable', false);
	              }

	              //add an element with no dimensions that can be used to set focus and capture keystrokes
	              var focuser = $compile('<div class="ui-grid-focuser" role="region" aria-live="assertive" aria-atomic="false" tabindex="0" aria-controls="' + grid.id +'-aria-speakable '+ grid.id + '-grid-container' +'" aria-owns="' + grid.id + '-grid-container' + '"></div>')($scope);
	              $elm.append(focuser);

	              focuser.on('focus', function (evt) {
	                evt.uiGridTargetRenderContainerId = containerId;
	                var rowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (rowCol === null) {
	                  rowCol = uiGridCtrl.grid.renderContainers[containerId].cellNav.getNextRowCol(uiGridCellNavConstants.direction.DOWN, null, null);
	                  if (rowCol.row && rowCol.col) {
	                    uiGridCtrl.cellNav.broadcastCellNav(rowCol);
	                  }
	                }
	              });

	              uiGridCellnavCtrl.setAriaActivedescendant = function(id){
	                $elm.attr('aria-activedescendant', id);
	              };

	              uiGridCellnavCtrl.removeAriaActivedescendant = function(id){
	                if ($elm.attr('aria-activedescendant') === id){
	                  $elm.attr('aria-activedescendant', '');
	                }
	              };


	              uiGridCtrl.focus = function () {
	                gridUtil.focus.byElement(focuser[0]);
	                //allow for first time grid focus
	              };

	              var viewPortKeyDownWasRaisedForRowCol = null;
	              // Bind to keydown events in the render container
	              focuser.on('keydown', function (evt) {
	                evt.uiGridTargetRenderContainerId = containerId;
	                var rowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                var result = uiGridCtrl.cellNav.handleKeyDown(evt);
	                if (result === null) {
	                  uiGridCtrl.grid.api.cellNav.raise.viewPortKeyDown(evt, rowCol);
	                  viewPortKeyDownWasRaisedForRowCol = rowCol;
	                }
	              });
	              //Bind to keypress events in the render container
	              //keypress events are needed by edit function so the key press
	              //that initiated an edit is not lost
	              //must fire the event in a timeout so the editor can
	              //initialize and subscribe to the event on another event loop
	              focuser.on('keypress', function (evt) {
	                if (viewPortKeyDownWasRaisedForRowCol) {
	                  $timeout(function () {
	                    uiGridCtrl.grid.api.cellNav.raise.viewPortKeyPress(evt, viewPortKeyDownWasRaisedForRowCol);
	                  },4);

	                  viewPortKeyDownWasRaisedForRowCol = null;
	                }
	              });

	              $scope.$on('$destroy', function(){
	                //Remove all event handlers associated with this focuser.
	                focuser.off();
	              });

	            }
	          };
	        }
	      };
	    }]);

	  module.directive('uiGridViewport', ['$timeout', '$document', 'gridUtil', 'uiGridConstants', 'uiGridCellNavService', 'uiGridCellNavConstants','$log','$compile',
	    function ($timeout, $document, gridUtil, uiGridConstants, uiGridCellNavService, uiGridCellNavConstants, $log, $compile) {
	      return {
	        replace: true,
	        priority: -99999, //this needs to run very last
	        require: ['^uiGrid', '^uiGridRenderContainer', '?^uiGridCellnav'],
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            },
	            post: function ($scope, $elm, $attrs, controllers) {
	              var uiGridCtrl = controllers[0],
	                renderContainerCtrl = controllers[1];

	              // Skip attaching cell-nav specific logic if the directive is not attached above us
	              if (!uiGridCtrl.grid.api.cellNav) { return; }

	              var containerId = renderContainerCtrl.containerId;
	              //no need to process for other containers
	              if (containerId !== 'body') {
	                return;
	              }

	              var grid = uiGridCtrl.grid;

	              grid.api.core.on.scrollBegin($scope, function (args) {

	                // Skip if there's no currently-focused cell
	                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (lastRowCol === null) {
	                  return;
	                }

	                //if not in my container, move on
	                //todo: worry about horiz scroll
	                if (!renderContainerCtrl.colContainer.containsColumn(lastRowCol.col)) {
	                  return;
	                }

	                uiGridCtrl.cellNav.clearFocus();

	              });

	              grid.api.core.on.scrollEnd($scope, function (args) {
	                // Skip if there's no currently-focused cell
	                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
	                if (lastRowCol === null) {
	                  return;
	                }

	                //if not in my container, move on
	                //todo: worry about horiz scroll
	                if (!renderContainerCtrl.colContainer.containsColumn(lastRowCol.col)) {
	                  return;
	                }

	                uiGridCtrl.cellNav.broadcastCellNav(lastRowCol);

	              });

	              grid.api.cellNav.on.navigate($scope, function () {
	                //focus again because it can be lost
	                 uiGridCtrl.focus();
	              });

	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.cellNav.directive:uiGridCell
	   *  @element div
	   *  @restrict A
	   *  @description Stacks on top of ui.grid.uiGridCell to provide cell navigation
	   */
	  module.directive('uiGridCell', ['$timeout', '$document', 'uiGridCellNavService', 'gridUtil', 'uiGridCellNavConstants', 'uiGridConstants', 'GridRowColumn',
	    function ($timeout, $document, uiGridCellNavService, gridUtil, uiGridCellNavConstants, uiGridConstants, GridRowColumn) {
	      return {
	        priority: -150, // run after default uiGridCell directive and ui.grid.edit uiGridCell
	        restrict: 'A',
	        require: ['^uiGrid', '?^uiGridCellnav'],
	        scope: false,
	        link: function ($scope, $elm, $attrs, controllers) {
	          var uiGridCtrl = controllers[0],
	              uiGridCellnavCtrl = controllers[1];
	          // Skip attaching cell-nav specific logic if the directive is not attached above us
	          if (!uiGridCtrl.grid.api.cellNav) { return; }

	          if (!$scope.col.colDef.allowCellFocus) {
	            return;
	          }

	          //Convinience local variables
	          var grid = uiGridCtrl.grid;
	          $scope.focused = false;

	          // Make this cell focusable but only with javascript/a mouse click
	          $elm.attr('tabindex', -1);

	          // When a cell is clicked, broadcast a cellNav event saying that this row+col combo is now focused
	          $elm.find('div').on('click', function (evt) {
	            uiGridCtrl.cellNav.broadcastCellNav(new GridRowColumn($scope.row, $scope.col), evt.ctrlKey || evt.metaKey, evt);

	            evt.stopPropagation();
	            $scope.$apply();
	          });


	          /*
	           * XXX Hack for screen readers.
	           * This allows the grid to focus using only the screen reader cursor.
	           * Since the focus event doesn't include key press information we can't use it
	           * as our primary source of the event.
	           */
	          $elm.on('mousedown', preventMouseDown);

	          //turn on and off for edit events
	          if (uiGridCtrl.grid.api.edit) {
	            uiGridCtrl.grid.api.edit.on.beginCellEdit($scope, function () {
	              $elm.off('mousedown', preventMouseDown);
	            });

	            uiGridCtrl.grid.api.edit.on.afterCellEdit($scope, function () {
	              $elm.on('mousedown', preventMouseDown);
	            });

	            uiGridCtrl.grid.api.edit.on.cancelCellEdit($scope, function () {
	              $elm.on('mousedown', preventMouseDown);
	            });
	          }

	          function preventMouseDown(evt) {
	            //Prevents the foucus event from firing if the click event is already going to fire.
	            //If both events fire it will cause bouncing behavior.
	            evt.preventDefault();
	          }

	          //You can only focus on elements with a tabindex value
	          $elm.on('focus', function (evt) {
	            uiGridCtrl.cellNav.broadcastCellNav(new GridRowColumn($scope.row, $scope.col), false, evt);
	            evt.stopPropagation();
	            $scope.$apply();
	          });

	          // This event is fired for all cells.  If the cell matches, then focus is set
	          $scope.$on(uiGridCellNavConstants.CELL_NAV_EVENT, function (evt, rowCol, modifierDown) {
	            var isFocused = grid.cellNav.focusedCells.some(function(focusedRowCol, index){
	              return (focusedRowCol.row === $scope.row && focusedRowCol.col === $scope.col);
	            });
	            if (isFocused){
	              setFocused();
	            } else {
	              clearFocus();
	            }
	          });

	          function setFocused() {
	            if (!$scope.focused){
	              var div = $elm.find('div');
	              div.addClass('ui-grid-cell-focus');
	              $elm.attr('aria-selected', true);
	              uiGridCellnavCtrl.setAriaActivedescendant($elm.attr('id'));
	              $scope.focused = true;
	            }
	          }

	          function clearFocus() {
	            if ($scope.focused){
	              var div = $elm.find('div');
	              div.removeClass('ui-grid-cell-focus');
	              $elm.attr('aria-selected', false);
	              uiGridCellnavCtrl.removeAriaActivedescendant($elm.attr('id'));
	              $scope.focused = false;
	            }
	          }

	          $scope.$on('$destroy', function () {
	            //.off withouth paramaters removes all handlers
	            $elm.find('div').off();
	            $elm.off();
	          });
	        }
	      };
	    }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.edit
	   * @description
	   *
	   * # ui.grid.edit
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides cell editing capability to ui.grid. The goal was to emulate keying data in a spreadsheet via
	   * a keyboard.
	   * <br/>
	   * <br/>
	   * To really get the full spreadsheet-like data entry, the ui.grid.cellNav module should be used. This will allow the
	   * user to key data and then tab, arrow, or enter to the cells beside or below.
	   *
	   * <div doc-module-components="ui.grid.edit"></div>
	   */

	  var module = angular.module('ui.grid.edit', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.edit.constant:uiGridEditConstants
	   *
	   *  @description constants available in edit module
	   */
	  module.constant('uiGridEditConstants', {
	    EDITABLE_CELL_TEMPLATE: /EDITABLE_CELL_TEMPLATE/g,
	    //must be lowercase because template bulder converts to lower
	    EDITABLE_CELL_DIRECTIVE: /editable_cell_directive/g,
	    events: {
	      BEGIN_CELL_EDIT: 'uiGridEventBeginCellEdit',
	      END_CELL_EDIT: 'uiGridEventEndCellEdit',
	      CANCEL_CELL_EDIT: 'uiGridEventCancelCellEdit'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.edit.service:uiGridEditService
	   *
	   *  @description Services for editing features
	   */
	  module.service('uiGridEditService', ['$q', 'uiGridConstants', 'gridUtil',
	    function ($q, uiGridConstants, gridUtil) {

	      var service = {

	        initializeGrid: function (grid) {

	          service.defaultGridOptions(grid.options);

	          grid.registerColumnBuilder(service.editColumnBuilder);
	          grid.edit = {};

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.edit.api:PublicApi
	           *
	           *  @description Public Api for edit feature
	           */
	          var publicApi = {
	            events: {
	              edit: {
	                /**
	                 * @ngdoc event
	                 * @name afterCellEdit
	                 * @eventOf  ui.grid.edit.api:PublicApi
	                 * @description raised when cell editing is complete
	                 * <pre>
	                 *      gridApi.edit.on.afterCellEdit(scope,function(rowEntity, colDef){})
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @param {object} colDef the column that was edited
	                 * @param {object} newValue new value
	                 * @param {object} oldValue old value
	                 */
	                afterCellEdit: function (rowEntity, colDef, newValue, oldValue) {
	                },
	                /**
	                 * @ngdoc event
	                 * @name beginCellEdit
	                 * @eventOf  ui.grid.edit.api:PublicApi
	                 * @description raised when cell editing starts on a cell
	                 * <pre>
	                 *      gridApi.edit.on.beginCellEdit(scope,function(rowEntity, colDef){})
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @param {object} colDef the column that was edited
	                 * @param {object} triggerEvent the event that triggered the edit.  Useful to prevent losing keystrokes on some
	                 *                 complex editors
	                 */
	                beginCellEdit: function (rowEntity, colDef, triggerEvent) {
	                },
	                /**
	                 * @ngdoc event
	                 * @name cancelCellEdit
	                 * @eventOf  ui.grid.edit.api:PublicApi
	                 * @description raised when cell editing is cancelled on a cell
	                 * <pre>
	                 *      gridApi.edit.on.cancelCellEdit(scope,function(rowEntity, colDef){})
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @param {object} colDef the column that was edited
	                 */
	                cancelCellEdit: function (rowEntity, colDef) {
	                }
	              }
	            },
	            methods: {
	              edit: { }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);
	          //grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.edit.api:GridOptions
	           *
	           *  @description Options for configuring the edit feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableCellEdit
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If defined, sets the default value for the editable flag on each individual colDefs
	           *  if their individual enableCellEdit configuration is not defined. Defaults to undefined.
	           */

	          /**
	           *  @ngdoc object
	           *  @name cellEditableCondition
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If specified, either a value or function to be used by all columns before editing.
	           *  If falsy, then editing of cell is not allowed.
	           *  @example
	           *  <pre>
	           *  function($scope){
	           *    //use $scope.row.entity and $scope.col.colDef to determine if editing is allowed
	           *    return true;
	           *  }
	           *  </pre>
	           */
	          gridOptions.cellEditableCondition = gridOptions.cellEditableCondition === undefined ? true : gridOptions.cellEditableCondition;

	          /**
	           *  @ngdoc object
	           *  @name editableCellTemplate
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If specified, cellTemplate to use as the editor for all columns.
	           *  <br/> defaults to 'ui-grid/cellTextEditor'
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableCellEditOnFocus
	           *  @propertyOf  ui.grid.edit.api:GridOptions
	           *  @description If true, then editor is invoked as soon as cell receives focus. Default false.
	           *  <br/>_requires cellNav feature and the edit feature to be enabled_
	           */
	            //enableCellEditOnFocus can only be used if cellnav module is used
	          gridOptions.enableCellEditOnFocus = gridOptions.enableCellEditOnFocus === undefined ? false : gridOptions.enableCellEditOnFocus;
	        },

	        /**
	         * @ngdoc service
	         * @name editColumnBuilder
	         * @methodOf ui.grid.edit.service:uiGridEditService
	         * @description columnBuilder function that adds edit properties to grid column
	         * @returns {promise} promise that will load any needed templates when resolved
	         */
	        editColumnBuilder: function (colDef, col, gridOptions) {

	          var promises = [];

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.edit.api:ColumnDef
	           *
	           *  @description Column Definition for edit feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableCellEdit
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description enable editing on column
	           */
	          colDef.enableCellEdit = colDef.enableCellEdit === undefined ? (gridOptions.enableCellEdit === undefined ?
	            (colDef.type !== 'object') : gridOptions.enableCellEdit) : colDef.enableCellEdit;

	          /**
	           *  @ngdoc object
	           *  @name cellEditableCondition
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description If specified, either a value or function evaluated before editing cell.  If falsy, then editing of cell is not allowed.
	           *  @example
	           *  <pre>
	           *  function($scope){
	           *    //use $scope.row.entity and $scope.col.colDef to determine if editing is allowed
	           *    return true;
	           *  }
	           *  </pre>
	           */
	          colDef.cellEditableCondition = colDef.cellEditableCondition === undefined ? gridOptions.cellEditableCondition :  colDef.cellEditableCondition;

	          /**
	           *  @ngdoc object
	           *  @name editableCellTemplate
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description cell template to be used when editing this column. Can be Url or text template
	           *  <br/>Defaults to gridOptions.editableCellTemplate
	           */
	          if (colDef.enableCellEdit) {
	            colDef.editableCellTemplate = colDef.editableCellTemplate || gridOptions.editableCellTemplate || 'ui-grid/cellEditor';

	            promises.push(gridUtil.getTemplate(colDef.editableCellTemplate)
	              .then(
	              function (template) {
	                col.editableCellTemplate = template;
	              },
	              function (res) {
	                // Todo handle response error here?
	                throw new Error("Couldn't fetch/use colDef.editableCellTemplate '" + colDef.editableCellTemplate + "'");
	              }));
	          }

	          /**
	           *  @ngdoc object
	           *  @name enableCellEditOnFocus
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @requires ui.grid.cellNav
	           *  @description If true, then editor is invoked as soon as cell receives focus. Default false.
	           *  <br>_requires both the cellNav feature and the edit feature to be enabled_
	           */
	            //enableCellEditOnFocus can only be used if cellnav module is used
	          colDef.enableCellEditOnFocus = colDef.enableCellEditOnFocus === undefined ? gridOptions.enableCellEditOnFocus : colDef.enableCellEditOnFocus;


	          /**
	           *  @ngdoc string
	           *  @name editModelField
	           *  @propertyOf  ui.grid.edit.api:ColumnDef
	           *  @description a bindable string value that is used when binding to edit controls instead of colDef.field
	           *  <br/> example: You have a complex property on and object like state:{abbrev:'MS',name:'Mississippi'}.  The
	           *  grid should display state.name in the cell and sort/filter based on the state.name property but the editor
	           *  requires the full state object.
	           *  <br/>colDef.field = 'state.name'
	           *  <br/>colDef.editModelField = 'state'
	           */
	          //colDef.editModelField

	          return $q.all(promises);
	        },

	        /**
	         * @ngdoc service
	         * @name isStartEditKey
	         * @methodOf ui.grid.edit.service:uiGridEditService
	         * @description  Determines if a keypress should start editing.  Decorate this service to override with your
	         * own key events.  See service decorator in angular docs.
	         * @param {Event} evt keydown event
	         * @returns {boolean} true if an edit should start
	         */
	        isStartEditKey: function (evt) {
	          if (evt.metaKey ||
	              evt.keyCode === uiGridConstants.keymap.ESC ||
	              evt.keyCode === uiGridConstants.keymap.SHIFT ||
	              evt.keyCode === uiGridConstants.keymap.CTRL ||
	              evt.keyCode === uiGridConstants.keymap.ALT ||
	              evt.keyCode === uiGridConstants.keymap.WIN ||
	              evt.keyCode === uiGridConstants.keymap.CAPSLOCK ||

	             evt.keyCode === uiGridConstants.keymap.LEFT ||
	            (evt.keyCode === uiGridConstants.keymap.TAB && evt.shiftKey) ||

	            evt.keyCode === uiGridConstants.keymap.RIGHT ||
	            evt.keyCode === uiGridConstants.keymap.TAB ||

	            evt.keyCode === uiGridConstants.keymap.UP ||
	            (evt.keyCode === uiGridConstants.keymap.ENTER && evt.shiftKey) ||

	            evt.keyCode === uiGridConstants.keymap.DOWN ||
	            evt.keyCode === uiGridConstants.keymap.ENTER) {
	            return false;

	          }
	          return true;
	        }


	      };

	      return service;

	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEdit
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds editing features to the ui-grid directive.
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.edit']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-edit></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridEdit', ['gridUtil', 'uiGridEditService', function (gridUtil, uiGridEditService) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridEditService.initializeGrid(uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridRenderContainer
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds keydown listeners to renderContainer element so we can capture when to begin edits
	   *
	   */
	  module.directive('uiGridViewport', [ 'uiGridEditConstants',
	    function ( uiGridEditConstants) {
	      return {
	        replace: true,
	        priority: -99998, //run before cellNav
	        require: ['^uiGrid', '^uiGridRenderContainer'],
	        scope: false,
	        compile: function () {
	          return {
	            post: function ($scope, $elm, $attrs, controllers) {
	              var uiGridCtrl = controllers[0];

	              // Skip attaching if edit and cellNav is not enabled
	              if (!uiGridCtrl.grid.api.edit || !uiGridCtrl.grid.api.cellNav) { return; }

	              var containerId =  controllers[1].containerId;
	              //no need to process for other containers
	              if (containerId !== 'body') {
	                return;
	              }

	              //refocus on the grid
	              $scope.$on(uiGridEditConstants.events.CANCEL_CELL_EDIT, function () {
	                uiGridCtrl.focus();
	              });
	              $scope.$on(uiGridEditConstants.events.END_CELL_EDIT, function () {
	                uiGridCtrl.focus();
	              });

	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridCell
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Stacks on top of ui.grid.uiGridCell to provide in-line editing capabilities to the cell
	   *  Editing Actions.
	   *
	   *  Binds edit start events to the uiGridCell element.  When the events fire, the gridCell element is appended
	   *  with the columnDef.editableCellTemplate element ('cellEditor.html' by default).
	   *
	   *  The editableCellTemplate should respond to uiGridEditConstants.events.BEGIN\_CELL\_EDIT angular event
	   *  and do the initial steps needed to edit the cell (setfocus on input element, etc).
	   *
	   *  When the editableCellTemplate recognizes that the editing is ended (blur event, Enter key, etc.)
	   *  it should emit the uiGridEditConstants.events.END\_CELL\_EDIT event.
	   *
	   *  If editableCellTemplate recognizes that the editing has been cancelled (esc key)
	   *  it should emit the uiGridEditConstants.events.CANCEL\_CELL\_EDIT event.  The original value
	   *  will be set back on the model by the uiGridCell directive.
	   *
	   *  Events that invoke editing:
	   *    - dblclick
	   *    - F2 keydown (when using cell selection)
	   *
	   *  Events that end editing:
	   *    - Dependent on the specific editableCellTemplate
	   *    - Standards should be blur and enter keydown
	   *
	   *  Events that cancel editing:
	   *    - Dependent on the specific editableCellTemplate
	   *    - Standards should be Esc keydown
	   *
	   *  Grid Events that end editing:
	   *    - uiGridConstants.events.GRID_SCROLL
	   *
	   */

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.edit.api:GridRow
	   *
	   *  @description GridRow options for edit feature, these are available to be
	   *  set internally only, by other features
	   */

	  /**
	   *  @ngdoc object
	   *  @name enableCellEdit
	   *  @propertyOf  ui.grid.edit.api:GridRow
	   *  @description enable editing on row, grouping for example might disable editing on group header rows
	   */

	  module.directive('uiGridCell',
	    ['$compile', '$injector', '$timeout', 'uiGridConstants', 'uiGridEditConstants', 'gridUtil', '$parse', 'uiGridEditService', '$rootScope', '$q',
	      function ($compile, $injector, $timeout, uiGridConstants, uiGridEditConstants, gridUtil, $parse, uiGridEditService, $rootScope, $q) {
	        var touchstartTimeout = 500;
	        if ($injector.has('uiGridCellNavService')) {
	          var uiGridCellNavService = $injector.get('uiGridCellNavService');
	        }

	        return {
	          priority: -100, // run after default uiGridCell directive
	          restrict: 'A',
	          scope: false,
	          require: '?^uiGrid',
	          link: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var html;
	            var origCellValue;
	            var inEdit = false;
	            var cellModel;
	            var cancelTouchstartTimeout;

	            var editCellScope;

	            if (!$scope.col.colDef.enableCellEdit) {
	              return;
	            }

	            var cellNavNavigateDereg = function() {};
	            var viewPortKeyDownDereg = function() {};


	            var setEditable = function() {
	              if ($scope.col.colDef.enableCellEdit && $scope.row.enableCellEdit !== false) {
	                if (!$scope.beginEditEventsWired) { //prevent multiple attachments
	                  registerBeginEditEvents();
	                }
	              } else {
	                if ($scope.beginEditEventsWired) {
	                  cancelBeginEditEvents();
	                }
	              }
	            };

	            setEditable();

	            var rowWatchDereg = $scope.$watch('row', function (n, o) {
	              if (n !== o) {
	                setEditable();
	              }
	            });


	            $scope.$on( '$destroy', rowWatchDereg );

	            function registerBeginEditEvents() {
	              $elm.on('dblclick', beginEdit);

	              // Add touchstart handling. If the users starts a touch and it doesn't end after X milliseconds, then start the edit
	              $elm.on('touchstart', touchStart);

	              if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {

	                viewPortKeyDownDereg = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown($scope, function (evt, rowCol) {
	                  if (rowCol === null) {
	                    return;
	                  }

	                  if (rowCol.row === $scope.row && rowCol.col === $scope.col && !$scope.col.colDef.enableCellEditOnFocus) {
	                    //important to do this before scrollToIfNecessary
	                    beginEditKeyDown(evt);
	                  }
	                });

	                cellNavNavigateDereg = uiGridCtrl.grid.api.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
	                  if ($scope.col.colDef.enableCellEditOnFocus) {
	                    // Don't begin edit if the cell hasn't changed
	                    if ((!oldRowCol || newRowCol.row !== oldRowCol.row || newRowCol.col !== oldRowCol.col) &&
	                      newRowCol.row === $scope.row && newRowCol.col === $scope.col) {
	                      $timeout(function () {
	                        beginEdit();
	                      });
	                    }
	                  }
	                });
	              }

	              $scope.beginEditEventsWired = true;

	            }

	            function touchStart(event) {
	              // jQuery masks events
	              if (typeof(event.originalEvent) !== 'undefined' && event.originalEvent !== undefined) {
	                event = event.originalEvent;
	              }

	              // Bind touchend handler
	              $elm.on('touchend', touchEnd);

	              // Start a timeout
	              cancelTouchstartTimeout = $timeout(function() { }, touchstartTimeout);

	              // Timeout's done! Start the edit
	              cancelTouchstartTimeout.then(function () {
	                // Use setTimeout to start the edit because beginEdit expects to be outside of $digest
	                setTimeout(beginEdit, 0);

	                // Undbind the touchend handler, we don't need it anymore
	                $elm.off('touchend', touchEnd);
	              });
	            }

	            // Cancel any touchstart timeout
	            function touchEnd(event) {
	              $timeout.cancel(cancelTouchstartTimeout);
	              $elm.off('touchend', touchEnd);
	            }

	            function cancelBeginEditEvents() {
	              $elm.off('dblclick', beginEdit);
	              $elm.off('keydown', beginEditKeyDown);
	              $elm.off('touchstart', touchStart);
	              cellNavNavigateDereg();
	              viewPortKeyDownDereg();
	              $scope.beginEditEventsWired = false;
	            }

	            function beginEditKeyDown(evt) {
	              if (uiGridEditService.isStartEditKey(evt)) {
	                beginEdit(evt);
	              }
	            }

	            function shouldEdit(col, row) {
	              return !row.isSaving &&
	                ( angular.isFunction(col.colDef.cellEditableCondition) ?
	                    col.colDef.cellEditableCondition($scope) :
	                    col.colDef.cellEditableCondition );
	            }


	            function beginEdit(triggerEvent) {
	              //we need to scroll the cell into focus before invoking the editor
	              $scope.grid.api.core.scrollToIfNecessary($scope.row, $scope.col)
	                .then(function () {
	                  beginEditAfterScroll(triggerEvent);
	                });
	            }

	            /**
	             *  @ngdoc property
	             *  @name editDropdownOptionsArray
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description an array of values in the format
	             *  [ {id: xxx, value: xxx} ], which is populated
	             *  into the edit dropdown
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownIdLabel
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description the label for the "id" field
	             *  in the editDropdownOptionsArray.  Defaults
	             *  to 'id'
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownRowEntityOptionsArrayPath
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description a path to a property on row.entity containing an
	             *  array of values in the format
	             *  [ {id: xxx, value: xxx} ], which will be used to populate
	             *  the edit dropdown.  This can be used when the dropdown values are dependent on
	             *  the backing row entity.
	             *  If this property is set then editDropdownOptionsArray will be ignored.
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownRowEntityOptionsArrayPath: 'foo.bars[0].baz',
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc service
	             *  @name editDropdownOptionsFunction
	             *  @methodOf ui.grid.edit.api:ColumnDef
	             *  @description a function returning an array of values in the format
	             *  [ {id: xxx, value: xxx} ], which will be used to populate
	             *  the edit dropdown.  This can be used when the dropdown values are dependent on
	             *  the backing row entity with some kind of algorithm.
	             *  If this property is set then both editDropdownOptionsArray and
	             *  editDropdownRowEntityOptionsArrayPath will be ignored.
	             *  @param {object} rowEntity the options.data element that the returned array refers to
	             *  @param {object} colDef the column that implements this dropdown
	             *  @returns {object} an array of values in the format
	             *  [ {id: xxx, value: xxx} ] used to populate the edit dropdown
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsFunction: function(rowEntity, colDef) {
	             *            if (rowEntity.foo === 'bar') {
	             *              return [{id: 'bar1', value: 'BAR 1'},
	             *                      {id: 'bar2', value: 'BAR 2'},
	             *                      {id: 'bar3', value: 'BAR 3'}];
	             *            } else {
	             *              return [{id: 'foo1', value: 'FOO 1'},
	             *                      {id: 'foo2', value: 'FOO 2'}];
	             *            }
	             *          },
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownValueLabel
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description the label for the "value" field
	             *  in the editDropdownOptionsArray.  Defaults
	             *  to 'value'
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
	             *      ],
	             *  </pre>
	             *
	             */
	            /**
	             *  @ngdoc property
	             *  @name editDropdownFilter
	             *  @propertyOf ui.grid.edit.api:ColumnDef
	             *  @description A filter that you would like to apply to the values in the options list
	             *  of the dropdown.  For example if you were using angular-translate you might set this
	             *  to `'translate'`
	             *  @example
	             *  <pre>
	             *    $scope.gridOptions = {
	             *      columnDefs: [
	             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
	             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
	             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status', editDropdownFilter: 'translate' }
	             *      ],
	             *  </pre>
	             *
	             */
	            function beginEditAfterScroll(triggerEvent) {
	              // If we are already editing, then just skip this so we don't try editing twice...
	              if (inEdit) {
	                return;
	              }

	              if (!shouldEdit($scope.col, $scope.row)) {
	                return;
	              }


	              cellModel = $parse($scope.row.getQualifiedColField($scope.col));
	              //get original value from the cell
	              origCellValue = cellModel($scope);

	              html = $scope.col.editableCellTemplate;

	              if ($scope.col.colDef.editModelField) {
	                html = html.replace(uiGridConstants.MODEL_COL_FIELD, gridUtil.preEval('row.entity.' + $scope.col.colDef.editModelField));
	              }
	              else {
	                html = html.replace(uiGridConstants.MODEL_COL_FIELD, $scope.row.getQualifiedColField($scope.col));
	              }

	              html = html.replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

	              var optionFilter = $scope.col.colDef.editDropdownFilter ? '|' + $scope.col.colDef.editDropdownFilter : '';
	              html = html.replace(uiGridConstants.CUSTOM_FILTERS, optionFilter);

	              var inputType = 'text';
	              switch ($scope.col.colDef.type){
	                case 'boolean':
	                  inputType = 'checkbox';
	                  break;
	                case 'number':
	                  inputType = 'number';
	                  break;
	                case 'date':
	                  inputType = 'date';
	                  break;
	              }
	              html = html.replace('INPUT_TYPE', inputType);

	              // In order to fill dropdown options we use:
	              // - A function/promise or
	              // - An array inside of row entity if no function exists or
	              // - A single array for the whole column if none of the previous exists.
	              var editDropdownOptionsFunction = $scope.col.colDef.editDropdownOptionsFunction;
	              if (editDropdownOptionsFunction) {
	                $q.when(editDropdownOptionsFunction($scope.row.entity, $scope.col.colDef))
	                        .then(function(result) {
	                  $scope.editDropdownOptionsArray = result;
	                });
	              } else {
	                var editDropdownRowEntityOptionsArrayPath = $scope.col.colDef.editDropdownRowEntityOptionsArrayPath;
	                if (editDropdownRowEntityOptionsArrayPath) {
	                  $scope.editDropdownOptionsArray =  resolveObjectFromPath($scope.row.entity, editDropdownRowEntityOptionsArrayPath);
	                }
	                else {
	                  $scope.editDropdownOptionsArray = $scope.col.colDef.editDropdownOptionsArray;
	                }
	              }
	              $scope.editDropdownIdLabel = $scope.col.colDef.editDropdownIdLabel ? $scope.col.colDef.editDropdownIdLabel : 'id';
	              $scope.editDropdownValueLabel = $scope.col.colDef.editDropdownValueLabel ? $scope.col.colDef.editDropdownValueLabel : 'value';

	              var cellElement;
	              var createEditor = function(){
	                inEdit = true;
	                cancelBeginEditEvents();
	                var cellElement = angular.element(html);
	                $elm.append(cellElement);
	                editCellScope = $scope.$new();
	                $compile(cellElement)(editCellScope);
	                var gridCellContentsEl = angular.element($elm.children()[0]);
	                gridCellContentsEl.addClass('ui-grid-cell-contents-hidden');
	              };
	              if (!$rootScope.$$phase) {
	                $scope.$apply(createEditor);
	              } else {
	                createEditor();
	              }

	              //stop editing when grid is scrolled
	              var deregOnGridScroll = $scope.col.grid.api.core.on.scrollBegin($scope, function () {
	                if ($scope.grid.disableScrolling) {
	                  return;
	                }
	                endEdit();
	                $scope.grid.api.edit.raise.afterCellEdit($scope.row.entity, $scope.col.colDef, cellModel($scope), origCellValue);
	                deregOnGridScroll();
	                deregOnEndCellEdit();
	                deregOnCancelCellEdit();
	              });

	              //end editing
	              var deregOnEndCellEdit = $scope.$on(uiGridEditConstants.events.END_CELL_EDIT, function () {
	                endEdit();
	                $scope.grid.api.edit.raise.afterCellEdit($scope.row.entity, $scope.col.colDef, cellModel($scope), origCellValue);
	                deregOnEndCellEdit();
	                deregOnGridScroll();
	                deregOnCancelCellEdit();
	              });

	              //cancel editing
	              var deregOnCancelCellEdit = $scope.$on(uiGridEditConstants.events.CANCEL_CELL_EDIT, function () {
	                cancelEdit();
	                deregOnCancelCellEdit();
	                deregOnGridScroll();
	                deregOnEndCellEdit();
	              });

	              $scope.$broadcast(uiGridEditConstants.events.BEGIN_CELL_EDIT, triggerEvent);
	              $timeout(function () {
	                //execute in a timeout to give any complex editor templates a cycle to completely render
	                $scope.grid.api.edit.raise.beginCellEdit($scope.row.entity, $scope.col.colDef, triggerEvent);
	              });
	            }

	            function endEdit() {
	              $scope.grid.disableScrolling = false;
	              if (!inEdit) {
	                return;
	              }

	              //sometimes the events can't keep up with the keyboard and grid focus is lost, so always focus
	              //back to grid here. The focus call needs to be before the $destroy and removal of the control,
	              //otherwise ng-model-options of UpdateOn: 'blur' will not work.
	              if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                uiGridCtrl.focus();
	              }

	              var gridCellContentsEl = angular.element($elm.children()[0]);
	              //remove edit element
	              editCellScope.$destroy();
	              var children = $elm.children();
	              for (var i = 1; i < children.length; i++) {
	                angular.element(children[i]).remove();
	              }
	              gridCellContentsEl.removeClass('ui-grid-cell-contents-hidden');
	              inEdit = false;
	              registerBeginEditEvents();
	              $scope.grid.api.core.notifyDataChange( uiGridConstants.dataChange.EDIT );
	            }

	            function cancelEdit() {
	              $scope.grid.disableScrolling = false;
	              if (!inEdit) {
	                return;
	              }
	              cellModel.assign($scope, origCellValue);
	              $scope.$apply();

	              $scope.grid.api.edit.raise.cancelCellEdit($scope.row.entity, $scope.col.colDef);
	              endEdit();
	            }

	            // resolves a string path against the given object
	            // shamelessly borrowed from
	            // http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key
	            function resolveObjectFromPath(object, path) {
	              path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
	              path = path.replace(/^\./, '');           // strip a leading dot
	              var a = path.split('.');
	              while (a.length) {
	                  var n = a.shift();
	                  if (n in object) {
	                      object = object[n];
	                  } else {
	                      return;
	                  }
	              }
	              return object;
	            }

	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEditor
	   *  @element div
	   *  @restrict A
	   *
	   *  @description input editor directive for editable fields.
	   *  Provides EndEdit and CancelEdit events
	   *
	   *  Events that end editing:
	   *     blur and enter keydown
	   *
	   *  Events that cancel editing:
	   *    - Esc keydown
	   *
	   */
	  module.directive('uiGridEditor',
	    ['gridUtil', 'uiGridConstants', 'uiGridEditConstants','$timeout', 'uiGridEditService',
	      function (gridUtil, uiGridConstants, uiGridEditConstants, $timeout, uiGridEditService) {
	        return {
	          scope: true,
	          require: ['?^uiGrid', '?^uiGridRenderContainer', 'ngModel'],
	          compile: function () {
	            return {
	              pre: function ($scope, $elm, $attrs) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	                var uiGridCtrl, renderContainerCtrl, ngModel;
	                if (controllers[0]) { uiGridCtrl = controllers[0]; }
	                if (controllers[1]) { renderContainerCtrl = controllers[1]; }
	                if (controllers[2]) { ngModel = controllers[2]; }

	                //set focus at start of edit
	                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function (evt,triggerEvent) {
	                  $timeout(function () {
	                    $elm[0].focus();
	                    //only select text if it is not being replaced below in the cellNav viewPortKeyPress
	                    if ($elm[0].select && $scope.col.colDef.enableCellEditOnFocus || !(uiGridCtrl && uiGridCtrl.grid.api.cellNav)) {
	                      $elm[0].select();
	                    }
	                    else {
	                      //some browsers (Chrome) stupidly, imo, support the w3 standard that number, email, ...
	                      //fields should not allow setSelectionRange.  We ignore the error for those browsers
	                      //https://www.w3.org/Bugs/Public/show_bug.cgi?id=24796
	                      try {
	                        $elm[0].setSelectionRange($elm[0].value.length, $elm[0].value.length);
	                      }
	                      catch (ex) {
	                        //ignore
	                      }
	                    }
	                  });

	                  //set the keystroke that started the edit event
	                  //we must do this because the BeginEdit is done in a different event loop than the intitial
	                  //keydown event
	                  //fire this event for the keypress that is received
	                  if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                    var viewPortKeyDownUnregister = uiGridCtrl.grid.api.cellNav.on.viewPortKeyPress($scope, function (evt, rowCol) {
	                      if (uiGridEditService.isStartEditKey(evt)) {
	                        ngModel.$setViewValue(String.fromCharCode( typeof evt.which === 'number' ? evt.which : evt.keyCode), evt);
	                        ngModel.$render();
	                      }
	                      viewPortKeyDownUnregister();
	                    });
	                  }

	                  $elm.on('blur', function (evt) {
	                    $scope.stopEdit(evt);
	                  });
	                });


	                $scope.deepEdit = false;

	                $scope.stopEdit = function (evt) {
	                  if ($scope.inputForm && !$scope.inputForm.$valid) {
	                    evt.stopPropagation();
	                    $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                  }
	                  else {
	                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                  }
	                  $scope.deepEdit = false;
	                };


	                $elm.on('click', function (evt) {
	                  if ($elm[0].type !== 'checkbox') {
	                    $scope.deepEdit = true;
	                    $timeout(function () {
	                      $scope.grid.disableScrolling = true;
	                    });
	                  }
	                });

	                $elm.on('keydown', function (evt) {
	                  switch (evt.keyCode) {
	                    case uiGridConstants.keymap.ESC:
	                      evt.stopPropagation();
	                      $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                      break;
	                  }

	                  if ($scope.deepEdit &&
	                    (evt.keyCode === uiGridConstants.keymap.LEFT ||
	                     evt.keyCode === uiGridConstants.keymap.RIGHT ||
	                     evt.keyCode === uiGridConstants.keymap.UP ||
	                     evt.keyCode === uiGridConstants.keymap.DOWN)) {
	                    evt.stopPropagation();
	                  }
	                  // Pass the keydown event off to the cellNav service, if it exists
	                  else if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                    evt.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;
	                    if (uiGridCtrl.cellNav.handleKeyDown(evt) !== null) {
	                      $scope.stopEdit(evt);
	                    }
	                  }
	                  else {
	                    //handle enter and tab for editing not using cellNav
	                    switch (evt.keyCode) {
	                      case uiGridConstants.keymap.ENTER: // Enter (Leave Field)
	                      case uiGridConstants.keymap.TAB:
	                        evt.stopPropagation();
	                        evt.preventDefault();
	                        $scope.stopEdit(evt);
	                        break;
	                    }
	                  }

	                  return true;
	                });
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:input
	   *  @element input
	   *  @restrict E
	   *
	   *  @description directive to provide binding between input[date] value and ng-model for angular 1.2
	   *  It is similar to input[date] directive of angular 1.3
	   *
	   *  Supported date format for input is 'yyyy-MM-dd'
	   *  The directive will set the $valid property of input element and the enclosing form to false if
	   *  model is invalid date or value of input is entered wrong.
	   *
	   */
	    module.directive('uiGridEditor', ['$filter', function ($filter) {
	      function parseDateString(dateString) {
	        if (typeof(dateString) === 'undefined' || dateString === '') {
	          return null;
	        }
	        var parts = dateString.split('-');
	        if (parts.length !== 3) {
	          return null;
	        }
	        var year = parseInt(parts[0], 10);
	        var month = parseInt(parts[1], 10);
	        var day = parseInt(parts[2], 10);

	        if (month < 1 || year < 1 || day < 1) {
	          return null;
	        }
	        return new Date(year, (month - 1), day);
	      }
	      return {
	        priority: -100, // run after default uiGridEditor directive
	        require: '?ngModel',
	        link: function (scope, element, attrs, ngModel) {

	          if (angular.version.minor === 2 && attrs.type && attrs.type === 'date' && ngModel) {

	            ngModel.$formatters.push(function (modelValue) {
	              ngModel.$setValidity(null,(!modelValue || !isNaN(modelValue.getTime())));
	              return $filter('date')(modelValue, 'yyyy-MM-dd');
	            });

	            ngModel.$parsers.push(function (viewValue) {
	              if (viewValue && viewValue.length > 0) {
	                var dateValue = parseDateString(viewValue);
	                ngModel.$setValidity(null, (dateValue && !isNaN(dateValue.getTime())));
	                return dateValue;
	              }
	              else {
	                ngModel.$setValidity(null, true);
	                return null;
	              }
	            });
	          }
	        }
	      };
	    }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEditDropdown
	   *  @element div
	   *  @restrict A
	   *
	   *  @description dropdown editor for editable fields.
	   *  Provides EndEdit and CancelEdit events
	   *
	   *  Events that end editing:
	   *     blur and enter keydown, and any left/right nav
	   *
	   *  Events that cancel editing:
	   *    - Esc keydown
	   *
	   */
	  module.directive('uiGridEditDropdown',
	    ['uiGridConstants', 'uiGridEditConstants',
	      function (uiGridConstants, uiGridEditConstants) {
	        return {
	          require: ['?^uiGrid', '?^uiGridRenderContainer'],
	          scope: true,
	          compile: function () {
	            return {
	              pre: function ($scope, $elm, $attrs) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	                var uiGridCtrl = controllers[0];
	                var renderContainerCtrl = controllers[1];

	                //set focus at start of edit
	                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
	                  $elm[0].focus();
	                  $elm[0].style.width = ($elm[0].parentElement.offsetWidth - 1) + 'px';
	                  $elm.on('blur', function (evt) {
	                    $scope.stopEdit(evt);
	                  });
	                });


	                $scope.stopEdit = function (evt) {
	                  // no need to validate a dropdown - invalid values shouldn't be
	                  // available in the list
	                  $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                };

	                $elm.on('keydown', function (evt) {
	                  switch (evt.keyCode) {
	                    case uiGridConstants.keymap.ESC:
	                      evt.stopPropagation();
	                      $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                      break;
	                  }
	                  if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
	                    evt.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;
	                    if (uiGridCtrl.cellNav.handleKeyDown(evt) !== null) {
	                      $scope.stopEdit(evt);
	                    }
	                  }
	                  else {
	                    //handle enter and tab for editing not using cellNav
	                    switch (evt.keyCode) {
	                      case uiGridConstants.keymap.ENTER: // Enter (Leave Field)
	                      case uiGridConstants.keymap.TAB:
	                        evt.stopPropagation();
	                        evt.preventDefault();
	                        $scope.stopEdit(evt);
	                        break;
	                    }
	                  }
	                  return true;
	                });
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.edit.directive:uiGridEditFileChooser
	   *  @element div
	   *  @restrict A
	   *
	   *  @description input editor directive for editable fields.
	   *  Provides EndEdit and CancelEdit events
	   *
	   *  Events that end editing:
	   *     blur and enter keydown
	   *
	   *  Events that cancel editing:
	   *    - Esc keydown
	   *
	   */
	  module.directive('uiGridEditFileChooser',
	    ['gridUtil', 'uiGridConstants', 'uiGridEditConstants','$timeout',
	      function (gridUtil, uiGridConstants, uiGridEditConstants, $timeout) {
	        return {
	          scope: true,
	          require: ['?^uiGrid', '?^uiGridRenderContainer'],
	          compile: function () {
	            return {
	              pre: function ($scope, $elm, $attrs) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	                var uiGridCtrl, renderContainerCtrl;
	                if (controllers[0]) { uiGridCtrl = controllers[0]; }
	                if (controllers[1]) { renderContainerCtrl = controllers[1]; }
	                var grid = uiGridCtrl.grid;

	                var handleFileSelect = function( event ){
	                  var target = event.srcElement || event.target;

	                  if (target && target.files && target.files.length > 0) {
	                    /**
	                     *  @ngdoc property
	                     *  @name editFileChooserCallback
	                     *  @propertyOf  ui.grid.edit.api:ColumnDef
	                     *  @description A function that should be called when any files have been chosen
	                     *  by the user.  You should use this to process the files appropriately for your
	                     *  application.
	                     *
	                     *  It passes the gridCol, the gridRow (from which you can get gridRow.entity),
	                     *  and the files.  The files are in the format as returned from the file chooser,
	                     *  an array of files, with each having useful information such as:
	                     *  - `files[0].lastModifiedDate`
	                     *  - `files[0].name`
	                     *  - `files[0].size`  (appears to be in bytes)
	                     *  - `files[0].type`  (MIME type by the looks)
	                     *
	                     *  Typically you would do something with these files - most commonly you would
	                     *  use the filename or read the file itself in.  The example function does both.
	                     *
	                     *  @example
	                     *  <pre>
	                     *  editFileChooserCallBack: function(gridRow, gridCol, files ){
	                     *    // ignore all but the first file, it can only choose one anyway
	                     *    // set the filename into this column
	                     *    gridRow.entity.filename = file[0].name;
	                     *
	                     *    // read the file and set it into a hidden column, which we may do stuff with later
	                     *    var setFile = function(fileContent){
	                     *      gridRow.entity.file = fileContent.currentTarget.result;
	                     *    };
	                     *    var reader = new FileReader();
	                     *    reader.onload = setFile;
	                     *    reader.readAsText( files[0] );
	                     *  }
	                     *  </pre>
	                     */
	                    if ( typeof($scope.col.colDef.editFileChooserCallback) === 'function' ) {
	                      $scope.col.colDef.editFileChooserCallback($scope.row, $scope.col, target.files);
	                    } else {
	                      gridUtil.logError('You need to set colDef.editFileChooserCallback to use the file chooser');
	                    }

	                    target.form.reset();
	                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                  } else {
	                    $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
	                  }
	                };

	                $elm[0].addEventListener('change', handleFileSelect, false);  // TODO: why the false on the end?  Google

	                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
	                  $elm[0].focus();
	                  $elm[0].select();

	                  $elm.on('blur', function (evt) {
	                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
	                  });
	                });
	              }
	            };
	          }
	        };
	      }]);


	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.expandable
	   * @description
	   *
	   * # ui.grid.expandable
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides the ability to create subgrids with the ability to expand a row
	   * to show the subgrid.
	   *
	   * <div doc-module-components="ui.grid.expandable"></div>
	   */
	  var module = angular.module('ui.grid.expandable', ['ui.grid']);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.expandable.service:uiGridExpandableService
	   *
	   *  @description Services for the expandable grid
	   */
	  module.service('uiGridExpandableService', ['gridUtil', '$compile', function (gridUtil, $compile) {
	    var service = {
	      initializeGrid: function (grid) {

	        grid.expandable = {};
	        grid.expandable.expandedAll = false;

	        /**
	         *  @ngdoc object
	         *  @name enableExpandable
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Whether or not to use expandable feature, allows you to turn off expandable on specific grids
	         *  within your application, or in specific modes on _this_ grid. Defaults to true.
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      enableExpandable: false
	         *    }
	         *  </pre>
	         */
	        grid.options.enableExpandable = grid.options.enableExpandable !== false;

	        /**
	         *  @ngdoc object
	         *  @name expandableRowHeight
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Height in pixels of the expanded subgrid.  Defaults to
	         *  150
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      expandableRowHeight: 150
	         *    }
	         *  </pre>
	         */
	        grid.options.expandableRowHeight = grid.options.expandableRowHeight || 150;

	        /**
	         *  @ngdoc object
	         *  @name
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Width in pixels of the expandable column. Defaults to 40
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      expandableRowHeaderWidth: 40
	         *    }
	         *  </pre>
	         */
	        grid.options.expandableRowHeaderWidth = grid.options.expandableRowHeaderWidth || 40;

	        /**
	         *  @ngdoc object
	         *  @name expandableRowTemplate
	         *  @propertyOf  ui.grid.expandable.api:GridOptions
	         *  @description Mandatory. The template for your expanded row
	         *  @example
	         *  <pre>
	         *    $scope.gridOptions = {
	         *      expandableRowTemplate: 'expandableRowTemplate.html'
	         *    }
	         *  </pre>
	         */
	        if ( grid.options.enableExpandable && !grid.options.expandableRowTemplate ){
	          gridUtil.logError( 'You have not set the expandableRowTemplate, disabling expandable module' );
	          grid.options.enableExpandable = false;
	        }

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.expandable.api:PublicApi
	         *
	         *  @description Public Api for expandable feature
	         */
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.expandable.api:GridRow
	         *
	         *  @description Additional properties added to GridRow when using the expandable module
	         */
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.expandable.api:GridOptions
	         *
	         *  @description Options for configuring the expandable feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */
	        var publicApi = {
	          events: {
	            expandable: {
	              /**
	               * @ngdoc event
	               * @name rowExpandedStateChanged
	               * @eventOf  ui.grid.expandable.api:PublicApi
	               * @description raised when cell editing is complete
	               * <pre>
	               *      gridApi.expandable.on.rowExpandedStateChanged(scope,function(row){})
	               * </pre>
	               * @param {GridRow} row the row that was expanded
	               */
	              rowExpandedBeforeStateChanged: function(scope,row){
	              },
	              rowExpandedStateChanged: function (scope, row) {
	              }
	            }
	          },

	          methods: {
	            expandable: {
	              /**
	               * @ngdoc method
	               * @name toggleRowExpansion
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Toggle a specific row
	               * <pre>
	               *      gridApi.expandable.toggleRowExpansion(rowEntity);
	               * </pre>
	               * @param {object} rowEntity the data entity for the row you want to expand
	               */
	              toggleRowExpansion: function (rowEntity) {
	                var row = grid.getRow(rowEntity);
	                if (row !== null) {
	                  service.toggleRowExpansion(grid, row);
	                }
	              },

	              /**
	               * @ngdoc method
	               * @name expandAllRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Expand all subgrids.
	               * <pre>
	               *      gridApi.expandable.expandAllRows();
	               * </pre>
	               */
	              expandAllRows: function() {
	                service.expandAllRows(grid);
	              },

	              /**
	               * @ngdoc method
	               * @name collapseAllRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Collapse all subgrids.
	               * <pre>
	               *      gridApi.expandable.collapseAllRows();
	               * </pre>
	               */
	              collapseAllRows: function() {
	                service.collapseAllRows(grid);
	              },

	              /**
	               * @ngdoc method
	               * @name toggleAllRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Toggle all subgrids.
	               * <pre>
	               *      gridApi.expandable.toggleAllRows();
	               * </pre>
	               */
	              toggleAllRows: function() {
	                service.toggleAllRows(grid);
	              },
	              /**
	               * @ngdoc function
	               * @name expandRow
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Expand the data row
	               * @param {object} rowEntity gridOptions.data[] array instance
	               */
	              expandRow: function (rowEntity) {
	                var row = grid.getRow(rowEntity);
	                if (row !== null && !row.isExpanded) {
	                  service.toggleRowExpansion(grid, row);
	                }
	              },
	              /**
	               * @ngdoc function
	               * @name collapseRow
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description Collapse the data row
	               * @param {object} rowEntity gridOptions.data[] array instance
	               */
	              collapseRow: function (rowEntity) {
	                var row = grid.getRow(rowEntity);
	                if (row !== null && row.isExpanded) {
	                  service.toggleRowExpansion(grid, row);
	                }
	              },
	              /**
	               * @ngdoc function
	               * @name getExpandedRows
	               * @methodOf  ui.grid.expandable.api:PublicApi
	               * @description returns all expandedRow's entity references
	               */
	              getExpandedRows: function () {
	                return service.getExpandedRows(grid).map(function (gridRow) {
	                  return gridRow.entity;
	                });
	              }
	            }
	          }
	        };
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },

	      toggleRowExpansion: function (grid, row) {
	        // trigger the "before change" event. Can change row height dynamically this way.
	        grid.api.expandable.raise.rowExpandedBeforeStateChanged(row);
	        /**
	         *  @ngdoc object
	         *  @name isExpanded
	         *  @propertyOf  ui.grid.expandable.api:GridRow
	         *  @description Whether or not the row is currently expanded.
	         *  @example
	         *  <pre>
	         *    $scope.api.expandable.on.rowExpandedStateChanged($scope, function (row) {
	         *      if (row.isExpanded) {
	         *        //...
	         *      }
	         *    });
	         *  </pre>
	         */
	        row.isExpanded = !row.isExpanded;
	        if (angular.isUndefined(row.expandedRowHeight)){
	          row.expandedRowHeight = grid.options.expandableRowHeight;
	        }

	        if (row.isExpanded) {
	          row.height = row.grid.options.rowHeight + row.expandedRowHeight;
	        }
	        else {
	          row.height = row.grid.options.rowHeight;
	          grid.expandable.expandedAll = false;
	        }
	        grid.api.expandable.raise.rowExpandedStateChanged(row);
	      },

	      expandAllRows: function(grid, $scope) {
	        grid.renderContainers.body.visibleRowCache.forEach( function(row) {
	          if (!row.isExpanded) {
	            service.toggleRowExpansion(grid, row);
	          }
	        });
	        grid.expandable.expandedAll = true;
	        grid.queueGridRefresh();
	      },

	      collapseAllRows: function(grid) {
	        grid.renderContainers.body.visibleRowCache.forEach( function(row) {
	          if (row.isExpanded) {
	            service.toggleRowExpansion(grid, row);
	          }
	        });
	        grid.expandable.expandedAll = false;
	        grid.queueGridRefresh();
	      },

	      toggleAllRows: function(grid) {
	        if (grid.expandable.expandedAll) {
	          service.collapseAllRows(grid);
	        }
	        else {
	          service.expandAllRows(grid);
	        }
	      },

	      getExpandedRows: function (grid) {
	        return grid.rows.filter(function (row) {
	          return row.isExpanded;
	        });
	      }
	    };
	    return service;
	  }]);

	  /**
	   *  @ngdoc object
	   *  @name enableExpandableRowHeader
	   *  @propertyOf  ui.grid.expandable.api:GridOptions
	   *  @description Show a rowHeader to provide the expandable buttons.  If set to false then implies
	   *  you're going to use a custom method for expanding and collapsing the subgrids. Defaults to true.
	   *  @example
	   *  <pre>
	   *    $scope.gridOptions = {
	   *      enableExpandableRowHeader: false
	   *    }
	   *  </pre>
	   */
	  module.directive('uiGridExpandable', ['uiGridExpandableService', '$templateCache',
	    function (uiGridExpandableService, $templateCache) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              uiGridExpandableService.initializeGrid(uiGridCtrl.grid);

	              if (!uiGridCtrl.grid.options.enableExpandable) {
	                return;
	              }

	              if (uiGridCtrl.grid.options.enableExpandableRowHeader !== false ) {
	                var expandableRowHeaderColDef = {
	                  name: 'expandableButtons',
	                  displayName: '',
	                  exporterSuppressExport: true,
	                  enableColumnResizing: false,
	                  enableColumnMenu: false,
	                  width: uiGridCtrl.grid.options.expandableRowHeaderWidth || 40
	                };
	                expandableRowHeaderColDef.cellTemplate = $templateCache.get('ui-grid/expandableRowHeader');
	                expandableRowHeaderColDef.headerCellTemplate = $templateCache.get('ui-grid/expandableTopRowHeader');
	                uiGridCtrl.grid.addRowHeaderColumn(expandableRowHeaderColDef, -90);
	              }

	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGrid
	   *  @description stacks on the uiGrid directive to register child grid with parent row when child is created
	   */
	  module.directive('uiGrid', ['uiGridExpandableService', '$templateCache',
	    function (uiGridExpandableService, $templateCache) {
	      return {
	        replace: true,
	        priority: 599,
	        require: '^uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {

	              uiGridCtrl.grid.api.core.on.renderingComplete($scope, function() {
	                //if a parent grid row is on the scope, then add the parentRow property to this childGrid
	                if ($scope.row && $scope.row.grid && $scope.row.grid.options && $scope.row.grid.options.enableExpandable) {

	                  /**
	                   *  @ngdoc directive
	                   *  @name ui.grid.expandable.class:Grid
	                   *  @description Additional Grid properties added by expandable module
	                   */

	                  /**
	                   *  @ngdoc object
	                   *  @name parentRow
	                   *  @propertyOf ui.grid.expandable.class:Grid
	                   *  @description reference to the expanded parent row that owns this grid
	                   */
	                  uiGridCtrl.grid.parentRow = $scope.row;

	                  //todo: adjust height on parent row when child grid height changes. we need some sort of gridHeightChanged event
	                 // uiGridCtrl.grid.core.on.canvasHeightChanged($scope, function(oldHeight, newHeight) {
	                 //   uiGridCtrl.grid.parentRow = newHeight;
	                 // });
	                }

	              });
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {

	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGridExpandableRow
	   *  @description directive to render the expandable row template
	   */
	  module.directive('uiGridExpandableRow',
	  ['uiGridExpandableService', '$timeout', '$compile', 'uiGridConstants','gridUtil','$interval', '$log',
	    function (uiGridExpandableService, $timeout, $compile, uiGridConstants, gridUtil, $interval, $log) {

	      return {
	        replace: false,
	        priority: 0,
	        scope: false,

	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              gridUtil.getTemplate($scope.grid.options.expandableRowTemplate).then(
	                function (template) {
	                  if ($scope.grid.options.expandableRowScope) {
	                    /**
	                     *  @ngdoc object
	                     *  @name expandableRowScope
	                     *  @propertyOf  ui.grid.expandable.api:GridOptions
	                     *  @description  Variables of object expandableScope will be available in the scope of the expanded subgrid
	                     *  @example
	                     *  <pre>
	                     *    $scope.gridOptions = {
	                     *      expandableRowScope: expandableScope
	                     *    }
	                     *  </pre>
	                     */
	                    var expandableRowScope = $scope.grid.options.expandableRowScope;
	                    for (var property in expandableRowScope) {
	                      if (expandableRowScope.hasOwnProperty(property)) {
	                        $scope[property] = expandableRowScope[property];
	                      }
	                    }
	                  }
	                  var expandedRowElement = $compile(template)($scope);
	                  $elm.append(expandedRowElement);
	                  $scope.row.expandedRendered = true;
	              });
	            },

	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	              $scope.$on('$destroy', function() {
	                $scope.row.expandedRendered = false;
	              });
	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGridRow
	   *  @description stacks on the uiGridRow directive to add support for expandable rows
	   */
	  module.directive('uiGridRow',
	    ['$compile', 'gridUtil', '$templateCache',
	      function ($compile, gridUtil, $templateCache) {
	        return {
	          priority: -200,
	          scope: false,
	          compile: function ($elm, $attrs) {
	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {

	                if (!$scope.grid.options.enableExpandable) {
	                  return;
	                }

	                $scope.expandableRow = {};

	                $scope.expandableRow.shouldRenderExpand = function () {
	                  var ret = $scope.colContainer.name === 'body' &&  $scope.grid.options.enableExpandable !== false && $scope.row.isExpanded && (!$scope.grid.isScrollingVertically || $scope.row.expandedRendered);
	                  return ret;
	                };

	                $scope.expandableRow.shouldRenderFiller = function () {
	                  var ret = $scope.row.isExpanded && ( $scope.colContainer.name !== 'body' || ($scope.grid.isScrollingVertically && !$scope.row.expandedRendered));
	                  return ret;
	                };

	 /*
	  * Commented out @PaulL1.  This has no purpose that I can see, and causes #2964.  If this code needs to be reinstated for some
	  * reason it needs to use drawnWidth, not width, and needs to check column visibility.  It should really use render container
	  * visible column cache also instead of checking column.renderContainer.
	                  function updateRowContainerWidth() {
	                      var grid = $scope.grid;
	                      var colWidth = 0;
	                      grid.columns.forEach( function (column) {
	                          if (column.renderContainer === 'left') {
	                            colWidth += column.width;
	                          }
	                      });
	                      colWidth = Math.floor(colWidth);
	                      return '.grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.colContainer.name + ', .grid' + grid.id +
	                          ' .ui-grid-pinned-container-' + $scope.colContainer.name + ' .ui-grid-render-container-' + $scope.colContainer.name +
	                          ' .ui-grid-viewport .ui-grid-canvas .ui-grid-row { width: ' + colWidth + 'px; }';
	                  }

	                  if ($scope.colContainer.name === 'left') {
	                      $scope.grid.registerStyleComputation({
	                          priority: 15,
	                          func: updateRowContainerWidth
	                      });
	                  }*/

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.expandable.directive:uiGridViewport
	   *  @description stacks on the uiGridViewport directive to append the expandable row html elements to the
	   *  default gridRow template
	   */
	  module.directive('uiGridViewport',
	    ['$compile', 'gridUtil', '$templateCache',
	      function ($compile, gridUtil, $templateCache) {
	        return {
	          priority: -200,
	          scope: false,
	          compile: function ($elm, $attrs) {

	             //todo: this adds ng-if watchers to each row even if the grid is not using expandable directive
	             //      or options.enableExpandable == false
	             //      The alternative is to compile the template and append to each row in a uiGridRow directive

	            var rowRepeatDiv = angular.element($elm.children().children()[0]);
	            var expandedRowFillerElement = $templateCache.get('ui-grid/expandableScrollFiller');
	            var expandedRowElement = $templateCache.get('ui-grid/expandableRow');
	            rowRepeatDiv.append(expandedRowElement);
	            rowRepeatDiv.append(expandedRowFillerElement);
	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {
	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	})();

	/* global console */

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.exporter
	   * @description
	   *
	   * # ui.grid.exporter
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides the ability to export data from the grid.
	   *
	   * Data can be exported in a range of formats, and all data, visible
	   * data, or selected rows can be exported, with all columns or visible
	   * columns.
	   *
	   * No UI is provided, the caller should provide their own UI/buttons
	   * as appropriate, or enable the gridMenu
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.exporter"></div>
	   */

	  var module = angular.module('ui.grid.exporter', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.exporter.constant:uiGridExporterConstants
	   *
	   *  @description constants available in exporter module
	   */
	  /**
	   * @ngdoc property
	   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
	   * @name ALL
	   * @description export all data, including data not visible.  Can
	   * be set for either rowTypes or colTypes
	   */
	  /**
	   * @ngdoc property
	   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
	   * @name VISIBLE
	   * @description export only visible data, including data not visible.  Can
	   * be set for either rowTypes or colTypes
	   */
	  /**
	   * @ngdoc property
	   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
	   * @name SELECTED
	   * @description export all data, including data not visible.  Can
	   * be set only for rowTypes, selection of only some columns is
	   * not supported
	   */
	  module.constant('uiGridExporterConstants', {
	    featureName: 'exporter',
	    ALL: 'all',
	    VISIBLE: 'visible',
	    SELECTED: 'selected',
	    CSV_CONTENT: 'CSV_CONTENT',
	    BUTTON_LABEL: 'BUTTON_LABEL',
	    FILE_NAME: 'FILE_NAME'
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.exporter.service:uiGridExporterService
	   *
	   *  @description Services for exporter feature
	   */
	  module.service('uiGridExporterService', ['$q', 'uiGridExporterConstants', 'gridUtil', '$compile', '$interval', 'i18nService',
	    function ($q, uiGridExporterConstants, gridUtil, $compile, $interval, i18nService) {

	      var service = {

	        delay: 100,

	        initializeGrid: function (grid) {

	          //add feature namespace and any properties to grid for needed state
	          grid.exporter = {};
	          this.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.exporter.api:PublicApi
	           *
	           *  @description Public Api for exporter feature
	           */
	          var publicApi = {
	            events: {
	              exporter: {
	              }
	            },
	            methods: {
	              exporter: {
	                /**
	                 * @ngdoc function
	                 * @name csvExport
	                 * @methodOf  ui.grid.exporter.api:PublicApi
	                 * @description Exports rows from the grid in csv format,
	                 * the data exported is selected based on the provided options
	                 * @param {string} rowTypes which rows to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	                 * uiGridExporterConstants.SELECTED
	                 * @param {string} colTypes which columns to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
	                 */
	                csvExport: function (rowTypes, colTypes) {
	                  service.csvExport(grid, rowTypes, colTypes);
	                },
	                /**
	                 * @ngdoc function
	                 * @name pdfExport
	                 * @methodOf  ui.grid.exporter.api:PublicApi
	                 * @description Exports rows from the grid in pdf format,
	                 * the data exported is selected based on the provided options
	                 * Note that this function has a dependency on pdfMake, all
	                 * going well this has been installed for you.
	                 * The resulting pdf opens in a new browser window.
	                 * @param {string} rowTypes which rows to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	                 * uiGridExporterConstants.SELECTED
	                 * @param {string} colTypes which columns to export, valid values are
	                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
	                 */
	                pdfExport: function (rowTypes, colTypes) {
	                  service.pdfExport(grid, rowTypes, colTypes);
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	          if (grid.api.core.addToGridMenu){
	            service.addToMenu( grid );
	          } else {
	            // order of registration is not guaranteed, register in a little while
	            $interval( function() {
	              if (grid.api.core.addToGridMenu){
	                service.addToMenu( grid );
	              }
	            }, this.delay, 1);
	          }

	        },

	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           * @ngdoc object
	           * @name ui.grid.exporter.api:GridOptions
	           *
	           * @description GridOptions for exporter feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */
	          /**
	           * @ngdoc object
	           * @name ui.grid.exporter.api:ColumnDef
	           * @description ColumnDef settings for exporter
	           */
	          /**
	           * @ngdoc object
	           * @name exporterSuppressMenu
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Don't show the export menu button, implying the user
	           * will roll their own UI for calling the exporter
	           * <br/>Defaults to false
	           */
	          gridOptions.exporterSuppressMenu = gridOptions.exporterSuppressMenu === true;
	          /**
	           * @ngdoc object
	           * @name exporterMenuLabel
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The text to show on the exporter menu button
	           * link
	           * <br/>Defaults to 'Export'
	           */
	          gridOptions.exporterMenuLabel = gridOptions.exporterMenuLabel ? gridOptions.exporterMenuLabel : 'Export';
	          /**
	           * @ngdoc object
	           * @name exporterSuppressColumns
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Columns that should not be exported.  The selectionRowHeader is already automatically
	           * suppressed, but if you had a button column or some other "system" column that shouldn't be shown in the
	           * output then add it in this list.  You should provide an array of column names.
	           * <br/>Defaults to: []
	           * <pre>
	           *   gridOptions.exporterSuppressColumns = [ 'buttons' ];
	           * </pre>
	           */
	          gridOptions.exporterSuppressColumns = gridOptions.exporterSuppressColumns ? gridOptions.exporterSuppressColumns : [];
	          /**
	           * @ngdoc object
	           * @name exporterCsvColumnSeparator
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The character to use as column separator
	           * link
	           * <br/>Defaults to ','
	           */
	          gridOptions.exporterCsvColumnSeparator = gridOptions.exporterCsvColumnSeparator ? gridOptions.exporterCsvColumnSeparator : ',';
	          /**
	           * @ngdoc object
	           * @name exporterCsvFilename
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The default filename to use when saving the downloaded csv.
	           * This will only work in some browsers.
	           * <br/>Defaults to 'download.csv'
	           */
	          gridOptions.exporterCsvFilename = gridOptions.exporterCsvFilename ? gridOptions.exporterCsvFilename : 'download.csv';
	          /**
	           * @ngdoc object
	           * @name exporterPdfFilename
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The default filename to use when saving the downloaded pdf, only used in IE (other browsers open pdfs in a new window)
	           * <br/>Defaults to 'download.pdf'
	           */
	          gridOptions.exporterPdfFilename = gridOptions.exporterPdfFilename ? gridOptions.exporterPdfFilename : 'download.pdf';
	          /**
	           * @ngdoc object
	           * @name exporterOlderExcelCompatibility
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Some versions of excel don't like the utf-16 BOM on the front, and it comes
	           * through as ï»¿ in the first column header.  Setting this option to false will suppress this, at the
	           * expense of proper utf-16 handling in applications that do recognise the BOM
	           * <br/>Defaults to false
	           */
	          gridOptions.exporterOlderExcelCompatibility = gridOptions.exporterOlderExcelCompatibility === true;
	          /**
	           * @ngdoc object
	           * @name exporterPdfDefaultStyle
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The default style in pdfMake format
	           * <br/>Defaults to:
	           * <pre>
	           *   {
	           *     fontSize: 11
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterPdfDefaultStyle = gridOptions.exporterPdfDefaultStyle ? gridOptions.exporterPdfDefaultStyle : { fontSize: 11 };
	          /**
	           * @ngdoc object
	           * @name exporterPdfTableStyle
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The table style in pdfMake format
	           * <br/>Defaults to:
	           * <pre>
	           *   {
	           *     margin: [0, 5, 0, 15]
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterPdfTableStyle = gridOptions.exporterPdfTableStyle ? gridOptions.exporterPdfTableStyle : { margin: [0, 5, 0, 15] };
	          /**
	           * @ngdoc object
	           * @name exporterPdfTableHeaderStyle
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The tableHeader style in pdfMake format
	           * <br/>Defaults to:
	           * <pre>
	           *   {
	           *     bold: true,
	           *     fontSize: 12,
	           *     color: 'black'
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterPdfTableHeaderStyle = gridOptions.exporterPdfTableHeaderStyle ? gridOptions.exporterPdfTableHeaderStyle : { bold: true, fontSize: 12, color: 'black' };
	          /**
	           * @ngdoc object
	           * @name exporterPdfHeader
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The header section for pdf exports.  Can be
	           * simple text:
	           * <pre>
	           *   gridOptions.exporterPdfHeader = 'My Header';
	           * </pre>
	           * Can be a more complex object in pdfMake format:
	           * <pre>
	           *   gridOptions.exporterPdfHeader = {
	           *     columns: [
	           *       'Left part',
	           *       { text: 'Right part', alignment: 'right' }
	           *     ]
	           *   };
	           * </pre>
	           * Or can be a function, allowing page numbers and the like
	           * <pre>
	           *   gridOptions.exporterPdfHeader: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };
	           * </pre>
	           */
	          gridOptions.exporterPdfHeader = gridOptions.exporterPdfHeader ? gridOptions.exporterPdfHeader : null;
	          /**
	           * @ngdoc object
	           * @name exporterPdfFooter
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The header section for pdf exports.  Can be
	           * simple text:
	           * <pre>
	           *   gridOptions.exporterPdfFooter = 'My Footer';
	           * </pre>
	           * Can be a more complex object in pdfMake format:
	           * <pre>
	           *   gridOptions.exporterPdfFooter = {
	           *     columns: [
	           *       'Left part',
	           *       { text: 'Right part', alignment: 'right' }
	           *     ]
	           *   };
	           * </pre>
	           * Or can be a function, allowing page numbers and the like
	           * <pre>
	           *   gridOptions.exporterPdfFooter: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };
	           * </pre>
	           */
	          gridOptions.exporterPdfFooter = gridOptions.exporterPdfFooter ? gridOptions.exporterPdfFooter : null;
	          /**
	           * @ngdoc object
	           * @name exporterPdfOrientation
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The orientation, should be a valid pdfMake value,
	           * 'landscape' or 'portrait'
	           * <br/>Defaults to landscape
	           */
	          gridOptions.exporterPdfOrientation = gridOptions.exporterPdfOrientation ? gridOptions.exporterPdfOrientation : 'landscape';
	          /**
	           * @ngdoc object
	           * @name exporterPdfPageSize
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The orientation, should be a valid pdfMake
	           * paper size, usually 'A4' or 'LETTER'
	           * {@link https://github.com/bpampuch/pdfmake/blob/master/src/standardPageSizes.js pdfMake page sizes}
	           * <br/>Defaults to A4
	           */
	          gridOptions.exporterPdfPageSize = gridOptions.exporterPdfPageSize ? gridOptions.exporterPdfPageSize : 'A4';
	          /**
	           * @ngdoc object
	           * @name exporterPdfMaxGridWidth
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description The maxium grid width - the current grid width
	           * will be scaled to match this, with any fixed width columns
	           * being adjusted accordingly.
	           * <br/>Defaults to 720 (for A4 landscape), use 670 for LETTER
	           */
	          gridOptions.exporterPdfMaxGridWidth = gridOptions.exporterPdfMaxGridWidth ? gridOptions.exporterPdfMaxGridWidth : 720;
	          /**
	           * @ngdoc object
	           * @name exporterPdfTableLayout
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A tableLayout in pdfMake format,
	           * controls gridlines and the like.  We use the default
	           * layout usually.
	           * <br/>Defaults to null, which means no layout
	           */

	          /**
	           * @ngdoc object
	           * @name exporterMenuAllData
	           * @porpertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add export all data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuAllData = gridOptions.exporterMenuAllData !== undefined ? gridOptions.exporterMenuAllData : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuVisibleData
	           * @porpertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add export visible data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuVisibleData = gridOptions.exporterMenuVisibleData !== undefined ? gridOptions.exporterMenuVisibleData : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuSelectedData
	           * @porpertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add export selected data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuSelectedData = gridOptions.exporterMenuSelectedData !== undefined ? gridOptions.exporterMenuSelectedData : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuCsv
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add csv export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuCsv = gridOptions.exporterMenuCsv !== undefined ? gridOptions.exporterMenuCsv : true;

	          /**
	           * @ngdoc object
	           * @name exporterMenuPdf
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Add pdf export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
	           */
	          gridOptions.exporterMenuPdf = gridOptions.exporterMenuPdf !== undefined ? gridOptions.exporterMenuPdf : true;

	          /**
	           * @ngdoc object
	           * @name exporterPdfCustomFormatter
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A custom callback routine that changes the pdf document, adding any
	           * custom styling or content that is supported by pdfMake.  Takes in the complete docDefinition, and
	           * must return an updated docDefinition ready for pdfMake.
	           * @example
	           * In this example we add a style to the style array, so that we can use it in our
	           * footer definition.
	           * <pre>
	           *   gridOptions.exporterPdfCustomFormatter = function ( docDefinition ) {
	           *     docDefinition.styles.footerStyle = { bold: true, fontSize: 10 };
	           *     return docDefinition;
	           *   }
	           *
	           *   gridOptions.exporterPdfFooter = { text: 'My footer', style: 'footerStyle' }
	           * </pre>
	           */
	          gridOptions.exporterPdfCustomFormatter = ( gridOptions.exporterPdfCustomFormatter && typeof( gridOptions.exporterPdfCustomFormatter ) === 'function' ) ? gridOptions.exporterPdfCustomFormatter : function ( docDef ) { return docDef; };

	          /**
	           * @ngdoc object
	           * @name exporterHeaderFilterUseName
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description Defaults to false, which leads to `displayName` being passed into the headerFilter.
	           * If set to true, then will pass `name` instead.
	           *
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterHeaderFilterUseName = true;
	           * </pre>
	           */
	          gridOptions.exporterHeaderFilterUseName = gridOptions.exporterHeaderFilterUseName === true;

	          /**
	           * @ngdoc object
	           * @name exporterHeaderFilter
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A function to apply to the header displayNames before exporting.  Useful for internationalisation,
	           * for example if you were using angular-translate you'd set this to `$translate.instant`.  Note that this
	           * call must be synchronous, it cannot be a call that returns a promise.
	           *
	           * Behaviour can be changed to pass in `name` instead of `displayName` through use of `exporterHeaderFilterUseName: true`.
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterHeaderFilter = function( displayName ){ return 'col: ' + name; };
	           * </pre>
	           * OR
	           * <pre>
	           *   gridOptions.exporterHeaderFilter = $translate.instant;
	           * </pre>
	           */

	          /**
	           * @ngdoc function
	           * @name exporterFieldCallback
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description A function to call for each field before exporting it.  Allows
	           * massaging of raw data into a display format, for example if you have applied
	           * filters to convert codes into decodes, or you require
	           * a specific date format in the exported content.
	           *
	           * The method is called once for each field exported, and provides the grid, the
	           * gridCol and the GridRow for you to use as context in massaging the data.
	           *
	           * @param {Grid} grid provides the grid in case you have need of it
	           * @param {GridRow} row the row from which the data comes
	           * @param {GridCol} col the column from which the data comes
	           * @param {object} value the value for your massaging
	           * @returns {object} you must return the massaged value ready for exporting
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterFieldCallback = function ( grid, row, col, value ){
	           *     if ( col.name === 'status' ){
	           *       value = decodeStatus( value );
	           *     }
	           *     return value;
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterFieldCallback = gridOptions.exporterFieldCallback ? gridOptions.exporterFieldCallback : function( grid, row, col, value ) { return value; };

	          /**
	           * @ngdoc function
	           * @name exporterAllDataFn
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description This promise is needed when exporting all rows,
	           * and the data need to be provided by server side. Default is null.
	           * @returns {Promise} a promise to load all data from server
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterAllDataFn = function () {
	           *     return $http.get('/data/100.json')
	           *   }
	           * </pre>
	           */
	          gridOptions.exporterAllDataFn = gridOptions.exporterAllDataFn ? gridOptions.exporterAllDataFn : null;

	          /**
	           * @ngdoc function
	           * @name exporterAllDataPromise
	           * @propertyOf  ui.grid.exporter.api:GridOptions
	           * @description DEPRECATED - exporterAllDataFn used to be
	           * called this, but it wasn't a promise, it was a function that returned
	           * a promise.  Deprecated, but supported for backward compatibility, use
	           * exporterAllDataFn instead.
	           * @returns {Promise} a promise to load all data from server
	           *
	           * @example
	           * <pre>
	           *   gridOptions.exporterAllDataFn = function () {
	           *     return $http.get('/data/100.json')
	           *   }
	           * </pre>
	           */
	          if ( gridOptions.exporterAllDataFn == null && gridOptions.exporterAllDataPromise ) {
	            gridOptions.exporterAllDataFn = gridOptions.exporterAllDataPromise;
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name addToMenu
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Adds export items to the grid menu,
	         * allowing the user to select export options
	         * @param {Grid} grid the grid from which data should be exported
	         */
	        addToMenu: function ( grid ) {
	          grid.api.core.addToGridMenu( grid, [
	            {
	              title: i18nService.getSafeText('gridMenu.exporterAllAsCsv'),
	              action: function ($event) {
	                this.grid.api.exporter.csvExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuCsv && this.grid.options.exporterMenuAllData;
	              },
	              order: 200
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterVisibleAsCsv'),
	              action: function ($event) {
	                this.grid.api.exporter.csvExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuCsv && this.grid.options.exporterMenuVisibleData;
	              },
	              order: 201
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterSelectedAsCsv'),
	              action: function ($event) {
	                this.grid.api.exporter.csvExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuCsv && this.grid.options.exporterMenuSelectedData &&
	                       ( this.grid.api.selection && this.grid.api.selection.getSelectedRows().length > 0 );
	              },
	              order: 202
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterAllAsPdf'),
	              action: function ($event) {
	                this.grid.api.exporter.pdfExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuPdf && this.grid.options.exporterMenuAllData;
	              },
	              order: 203
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterVisibleAsPdf'),
	              action: function ($event) {
	                this.grid.api.exporter.pdfExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuPdf && this.grid.options.exporterMenuVisibleData;
	              },
	              order: 204
	            },
	            {
	              title: i18nService.getSafeText('gridMenu.exporterSelectedAsPdf'),
	              action: function ($event) {
	                this.grid.api.exporter.pdfExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
	              },
	              shown: function() {
	                return this.grid.options.exporterMenuPdf && this.grid.options.exporterMenuSelectedData &&
	                       ( this.grid.api.selection && this.grid.api.selection.getSelectedRows().length > 0 );
	              },
	              order: 205
	            }
	          ]);
	        },


	        /**
	         * @ngdoc function
	         * @name csvExport
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Exports rows from the grid in csv format,
	         * the data exported is selected based on the provided options
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        csvExport: function (grid, rowTypes, colTypes) {
	          var self = this;
	          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function() {
	            var exportColumnHeaders = grid.options.showHeader ? self.getColumnHeaders(grid, colTypes) : [];
	            var exportData = self.getData(grid, rowTypes, colTypes);
	            var csvContent = self.formatAsCsv(exportColumnHeaders, exportData, grid.options.exporterCsvColumnSeparator);

	            self.downloadFile (grid.options.exporterCsvFilename, csvContent, grid.options.exporterCsvColumnSeparator, grid.options.exporterOlderExcelCompatibility);
	          });
	        },

	        /**
	         * @ngdoc function
	         * @name loadAllDataIfNeeded
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description When using server side pagination, use exporterAllDataFn to
	         * load all data before continuing processing.
	         * When using client side pagination, return a resolved promise so processing
	         * continues immediately
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        loadAllDataIfNeeded: function (grid, rowTypes, colTypes) {
	          if ( rowTypes === uiGridExporterConstants.ALL && grid.rows.length !== grid.options.totalItems && grid.options.exporterAllDataFn) {
	            return grid.options.exporterAllDataFn()
	              .then(function() {
	                grid.modifyRows(grid.options.data);
	              });
	          } else {
	            var deferred = $q.defer();
	            deferred.resolve();
	            return deferred.promise;
	          }
	        },

	        /**
	         * @ngdoc property
	         * @propertyOf ui.grid.exporter.api:ColumnDef
	         * @name exporterSuppressExport
	         * @description Suppresses export for this column.  Used by selection and expandable.
	         */

	        /**
	         * @ngdoc function
	         * @name getColumnHeaders
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Gets the column headers from the grid to use
	         * as a title row for the exported file, all headers have
	         * headerCellFilters applied as appropriate.
	         *
	         * Column headers are an array of objects, each object has
	         * name, displayName, width and align attributes.  Only name is
	         * used for csv, all attributes are used for pdf.
	         *
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        getColumnHeaders: function (grid, colTypes) {
	          var headers = [];
	          var columns;

	          if ( colTypes === uiGridExporterConstants.ALL ){
	            columns = grid.columns;
	          } else {
	            var leftColumns = grid.renderContainers.left ? grid.renderContainers.left.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var bodyColumns = grid.renderContainers.body ? grid.renderContainers.body.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var rightColumns = grid.renderContainers.right ? grid.renderContainers.right.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];

	            columns = leftColumns.concat(bodyColumns,rightColumns);
	          }

	          columns.forEach( function( gridCol, index ) {
	            if ( gridCol.colDef.exporterSuppressExport !== true &&
	                 grid.options.exporterSuppressColumns.indexOf( gridCol.name ) === -1 ){
	              headers.push({
	                name: gridCol.field,
	                displayName: grid.options.exporterHeaderFilter ? ( grid.options.exporterHeaderFilterUseName ? grid.options.exporterHeaderFilter(gridCol.name) : grid.options.exporterHeaderFilter(gridCol.displayName) ) : gridCol.displayName,
	                width: gridCol.drawnWidth ? gridCol.drawnWidth : gridCol.width,
	                align: gridCol.colDef.type === 'number' ? 'right' : 'left'
	              });
	            }
	          });

	          return headers;
	        },


	        /**
	         * @ngdoc property
	         * @propertyOf ui.grid.exporter.api:ColumnDef
	         * @name exporterPdfAlign
	         * @description the alignment you'd like for this specific column when
	         * exported into a pdf.  Can be 'left', 'right', 'center' or any other
	         * valid pdfMake alignment option.
	         */


	        /**
	         * @ngdoc object
	         * @name ui.grid.exporter.api:GridRow
	         * @description GridRow settings for exporter
	         */
	        /**
	         * @ngdoc object
	         * @name exporterEnableExporting
	         * @propertyOf  ui.grid.exporter.api:GridRow
	         * @description If set to false, then don't export this row, notwithstanding visible or
	         * other settings
	         * <br/>Defaults to true
	         */

	        /**
	         * @ngdoc function
	         * @name getData
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Gets data from the grid based on the provided options,
	         * all cells have cellFilters applied as appropriate.  Any rows marked
	         * `exporterEnableExporting: false` will not be exported
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {boolean} applyCellFilters whether or not to get the display value or the raw value of the data
	         */
	        getData: function (grid, rowTypes, colTypes, applyCellFilters) {
	          var data = [];
	          var rows;
	          var columns;

	          switch ( rowTypes ) {
	            case uiGridExporterConstants.ALL:
	              rows = grid.rows;
	              break;
	            case uiGridExporterConstants.VISIBLE:
	              rows = grid.getVisibleRows();
	              break;
	            case uiGridExporterConstants.SELECTED:
	              if ( grid.api.selection ){
	                rows = grid.api.selection.getSelectedGridRows();
	              } else {
	                gridUtil.logError('selection feature must be enabled to allow selected rows to be exported');
	              }
	              break;
	          }

	          if ( colTypes === uiGridExporterConstants.ALL ){
	            columns = grid.columns;
	          } else {
	            var leftColumns = grid.renderContainers.left ? grid.renderContainers.left.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var bodyColumns = grid.renderContainers.body ? grid.renderContainers.body.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];
	            var rightColumns = grid.renderContainers.right ? grid.renderContainers.right.visibleColumnCache.filter( function( column ){ return column.visible; } ) : [];

	            columns = leftColumns.concat(bodyColumns,rightColumns);
	          }

	          rows.forEach( function( row, index ) {

	            if (row.exporterEnableExporting !== false) {
	              var extractedRow = [];


	              columns.forEach( function( gridCol, index ) {
	              if ( (gridCol.visible || colTypes === uiGridExporterConstants.ALL ) &&
	                   gridCol.colDef.exporterSuppressExport !== true &&
	                   grid.options.exporterSuppressColumns.indexOf( gridCol.name ) === -1 ){
	                  var cellValue = applyCellFilters ? grid.getCellDisplayValue( row, gridCol ) : grid.getCellValue( row, gridCol );
	                  var extractedField = { value: grid.options.exporterFieldCallback( grid, row, gridCol, cellValue ) };
	                  if ( gridCol.colDef.exporterPdfAlign ) {
	                    extractedField.alignment = gridCol.colDef.exporterPdfAlign;
	                  }
	                  extractedRow.push(extractedField);
	                }
	              });

	              data.push(extractedRow);
	            }
	          });

	          return data;
	        },


	        /**
	         * @ngdoc function
	         * @name formatAsCSV
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Formats the column headers and data as a CSV,
	         * and sends that data to the user
	         * @param {array} exportColumnHeaders an array of column headers,
	         * where each header is an object with name, width and maybe alignment
	         * @param {array} exportData an array of rows, where each row is
	         * an array of column data
	         * @param {string} separator a string that represents the separator to be used in the csv file
	         * @returns {string} csv the formatted csv as a string
	         */
	        formatAsCsv: function (exportColumnHeaders, exportData, separator) {
	          var self = this;

	          var bareHeaders = exportColumnHeaders.map(function(header){return { value: header.displayName };});

	          var csv = bareHeaders.length > 0 ? (self.formatRowAsCsv(this, separator)(bareHeaders) + '\n') : '';

	          csv += exportData.map(this.formatRowAsCsv(this, separator)).join('\n');

	          return csv;
	        },

	        /**
	         * @ngdoc function
	         * @name formatRowAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a single field as a csv field, including
	         * quotes around the value
	         * @param {exporterService} exporter pass in exporter
	         * @param {array} row the row to be turned into a csv string
	         * @returns {string} a csv-ified version of the row
	         */
	        formatRowAsCsv: function (exporter, separator) {
	          return function (row) {
	            return row.map(exporter.formatFieldAsCsv).join(separator);
	          };
	        },

	        /**
	         * @ngdoc function
	         * @name formatFieldAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a single field as a csv field, including
	         * quotes around the value
	         * @param {field} field the field to be turned into a csv string,
	         * may be of any type
	         * @returns {string} a csv-ified version of the field
	         */
	        formatFieldAsCsv: function (field) {
	          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
	            return '';
	          }
	          if (typeof(field.value) === 'number') {
	            return field.value;
	          }
	          if (typeof(field.value) === 'boolean') {
	            return (field.value ? 'TRUE' : 'FALSE') ;
	          }
	          if (typeof(field.value) === 'string') {
	            return '"' + field.value.replace(/"/g,'""') + '"';
	          }

	          return JSON.stringify(field.value);
	        },


	        /**
	         * @ngdoc function
	         * @name isIE
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Checks whether current browser is IE and returns it's version if it is
	        */
	        isIE: function () {
	          var match = navigator.userAgent.search(/(?:Edge|MSIE|Trident\/.*; rv:)/);
	          var isIE = false;

	          if (match !== -1) {
	            isIE = true;
	          }

	          return isIE;
	        },


	        /**
	         * @ngdoc function
	         * @name downloadFile
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Triggers download of a csv file.  Logic provided
	         * by @cssensei (from his colleagues at https://github.com/ifeelgoods) in issue #2391
	         * @param {string} fileName the filename we'd like our file to be
	         * given
	         * @param {string} csvContent the csv content that we'd like to
	         * download as a file
	         * @param {boolean} exporterOlderExcelCompatibility whether or not we put a utf-16 BOM on the from (\uFEFF)
	         */
	        downloadFile: function (fileName, csvContent, columnSeparator, exporterOlderExcelCompatibility) {
	          var D = document;
	          var a = D.createElement('a');
	          var strMimeType = 'application/octet-stream;charset=utf-8';
	          var rawFile;
	          var ieVersion = this.isIE();

	          // IE10+
	          if (navigator.msSaveBlob) {
	            return navigator.msSaveOrOpenBlob(
	              new Blob(
	                [exporterOlderExcelCompatibility ? "\uFEFF" : '', csvContent],
	                { type: strMimeType } ),
	              fileName
	            );
	          }

	          if (ieVersion) {
	            var frame = D.createElement('iframe');
	            document.body.appendChild(frame);

	            frame.contentWindow.document.open('text/html', 'replace');
	            frame.contentWindow.document.write('sep=' + columnSeparator + '\r\n' + csvContent);
	            frame.contentWindow.document.close();
	            frame.contentWindow.focus();
	            frame.contentWindow.document.execCommand('SaveAs', true, fileName);

	            document.body.removeChild(frame);
	            return true;
	          }

	          //html5 A[download]
	          if ('download' in a) {
	            var blob = new Blob(
	              [exporterOlderExcelCompatibility ? "\uFEFF" : '', csvContent],
	              { type: strMimeType }
	            );
	            rawFile = URL.createObjectURL(blob);
	            a.setAttribute('download', fileName);
	          } else {
	            rawFile = 'data:' + strMimeType + ',' + encodeURIComponent(csvContent);
	            a.setAttribute('target', '_blank');
	          }

	          a.href = rawFile;
	          a.setAttribute('style', 'display:none;');
	          D.body.appendChild(a);
	          setTimeout(function() {
	            if (a.click) {
	              a.click();
	              // Workaround for Safari 5
	            } else if (document.createEvent) {
	              var eventObj = document.createEvent('MouseEvents');
	              eventObj.initEvent('click', true, true);
	              a.dispatchEvent(eventObj);
	            }
	            D.body.removeChild(a);

	          }, this.delay);
	        },

	        /**
	         * @ngdoc function
	         * @name pdfExport
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Exports rows from the grid in pdf format,
	         * the data exported is selected based on the provided options.
	         * Note that this function has a dependency on pdfMake, which must
	         * be installed.  The resulting pdf opens in a new
	         * browser window.
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {string} rowTypes which rows to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         * @param {string} colTypes which columns to export, valid values are
	         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
	         * uiGridExporterConstants.SELECTED
	         */
	        pdfExport: function (grid, rowTypes, colTypes) {
	          var self = this;
	          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function () {
	            var exportColumnHeaders = self.getColumnHeaders(grid, colTypes);
	            var exportData = self.getData(grid, rowTypes, colTypes);
	            var docDefinition = self.prepareAsPdf(grid, exportColumnHeaders, exportData);

	            if (self.isIE() || navigator.appVersion.indexOf("Edge") !== -1) {
	              self.downloadPDF(grid.options.exporterPdfFilename, docDefinition);
	            } else {
	              pdfMake.createPdf(docDefinition).open();
	            }
	          });
	        },


	        /**
	         * @ngdoc function
	         * @name downloadPdf
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Generates and retrieves the pdf as a blob, then downloads
	         * it as a file.  Only used in IE, in all other browsers we use the native
	         * pdfMake.open function to just open the PDF
	         * @param {string} fileName the filename to give to the pdf, can be set
	         * through exporterPdfFilename
	         * @param {object} docDefinition a pdf docDefinition that we can generate
	         * and get a blob from
	         */
	        downloadPDF: function (fileName, docDefinition) {
	          var D = document;
	          var a = D.createElement('a');
	          var strMimeType = 'application/octet-stream;charset=utf-8';
	          var rawFile;
	          var ieVersion;

	          ieVersion = this.isIE(); // This is now a boolean value
	          var doc = pdfMake.createPdf(docDefinition);
	          var blob;

	          doc.getBuffer( function (buffer) {
	            blob = new Blob([buffer]);

	            // IE10+
	            if (navigator.msSaveBlob) {
	              return navigator.msSaveBlob(
	                blob, fileName
	              );
	            }

	            // Previously:  && ieVersion < 10
	            // ieVersion now returns a boolean for the
	            // sake of sanity. We just check `msSaveBlob` first.
	            if (ieVersion) {
	              var frame = D.createElement('iframe');
	              document.body.appendChild(frame);

	              frame.contentWindow.document.open("text/html", "replace");
	              frame.contentWindow.document.write(blob);
	              frame.contentWindow.document.close();
	              frame.contentWindow.focus();
	              frame.contentWindow.document.execCommand('SaveAs', true, fileName);

	              document.body.removeChild(frame);
	              return true;
	            }
	          });
	        },


	        /**
	         * @ngdoc function
	         * @name renderAsPdf
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders the data into a pdf, and opens that pdf.
	         *
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {array} exportColumnHeaders an array of column headers,
	         * where each header is an object with name, width and maybe alignment
	         * @param {array} exportData an array of rows, where each row is
	         * an array of column data
	         * @returns {object} a pdfMake format document definition, ready
	         * for generation
	         */
	        prepareAsPdf: function(grid, exportColumnHeaders, exportData) {
	          var headerWidths = this.calculatePdfHeaderWidths( grid, exportColumnHeaders );

	          var headerColumns = exportColumnHeaders.map( function( header ) {
	            return { text: header.displayName, style: 'tableHeader' };
	          });

	          var stringData = exportData.map(this.formatRowAsPdf(this));

	          var allData = [headerColumns].concat(stringData);

	          var docDefinition = {
	            pageOrientation: grid.options.exporterPdfOrientation,
	            pageSize: grid.options.exporterPdfPageSize,
	            content: [{
	              style: 'tableStyle',
	              table: {
	                headerRows: 1,
	                widths: headerWidths,
	                body: allData
	              }
	            }],
	            styles: {
	              tableStyle: grid.options.exporterPdfTableStyle,
	              tableHeader: grid.options.exporterPdfTableHeaderStyle
	            },
	            defaultStyle: grid.options.exporterPdfDefaultStyle
	          };

	          if ( grid.options.exporterPdfLayout ){
	            docDefinition.layout = grid.options.exporterPdfLayout;
	          }

	          if ( grid.options.exporterPdfHeader ){
	            docDefinition.header = grid.options.exporterPdfHeader;
	          }

	          if ( grid.options.exporterPdfFooter ){
	            docDefinition.footer = grid.options.exporterPdfFooter;
	          }

	          if ( grid.options.exporterPdfCustomFormatter ){
	            docDefinition = grid.options.exporterPdfCustomFormatter( docDefinition );
	          }
	          return docDefinition;

	        },


	        /**
	         * @ngdoc function
	         * @name calculatePdfHeaderWidths
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Determines the column widths base on the
	         * widths we got from the grid.  If the column is drawn
	         * then we have a drawnWidth.  If the column is not visible
	         * then we have '*', 'x%' or a width.  When columns are
	         * not visible they don't contribute to the overall gridWidth,
	         * so we need to adjust to allow for extra columns
	         *
	         * Our basic heuristic is to take the current gridWidth, plus
	         * numeric columns and call this the base gridwidth.
	         *
	         * To that we add 100 for any '*' column, and x% of the base gridWidth
	         * for any column that is a %
	         *
	         * @param {Grid} grid the grid from which data should be exported
	         * @param {array} exportHeaders array of header information
	         * @returns {object} an array of header widths
	         */
	        calculatePdfHeaderWidths: function ( grid, exportHeaders ) {
	          var baseGridWidth = 0;
	          exportHeaders.forEach( function(value){
	            if (typeof(value.width) === 'number'){
	              baseGridWidth += value.width;
	            }
	          });

	          var extraColumns = 0;
	          exportHeaders.forEach( function(value){
	            if (value.width === '*'){
	              extraColumns += 100;
	            }
	            if (typeof(value.width) === 'string' && value.width.match(/(\d)*%/)) {
	              var percent = parseInt(value.width.match(/(\d)*%/)[0]);

	              value.width = baseGridWidth * percent / 100;
	              extraColumns += value.width;
	            }
	          });

	          var gridWidth = baseGridWidth + extraColumns;

	          return exportHeaders.map(function( header ) {
	            return header.width === '*' ? header.width : header.width * grid.options.exporterPdfMaxGridWidth / gridWidth;
	          });

	        },

	        /**
	         * @ngdoc function
	         * @name formatRowAsPdf
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a row in a format consumable by PDF,
	         * mainly meaning casting everything to a string
	         * @param {exporterService} exporter pass in exporter
	         * @param {array} row the row to be turned into a csv string
	         * @returns {string} a csv-ified version of the row
	         */
	        formatRowAsPdf: function ( exporter ) {
	          return function( row ) {
	            return row.map(exporter.formatFieldAsPdfString);
	          };
	        },


	        /**
	         * @ngdoc function
	         * @name formatFieldAsCsv
	         * @methodOf  ui.grid.exporter.service:uiGridExporterService
	         * @description Renders a single field as a pdf-able field, which
	         * is different from a csv field only in that strings don't have quotes
	         * around them
	         * @param {field} field the field to be turned into a pdf string,
	         * may be of any type
	         * @returns {string} a string-ified version of the field
	         */
	        formatFieldAsPdfString: function (field) {
	          var returnVal;
	          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
	            returnVal = '';
	          } else if (typeof(field.value) === 'number') {
	            returnVal = field.value.toString();
	          } else if (typeof(field.value) === 'boolean') {
	            returnVal = (field.value ? 'TRUE' : 'FALSE') ;
	          } else if (typeof(field.value) === 'string') {
	            returnVal = field.value.replace(/"/g,'""');
	          } else {
	            returnVal = JSON.stringify(field.value).replace(/^"/,'').replace(/"$/,'');
	          }

	          if (field.alignment && typeof(field.alignment) === 'string' ){
	            returnVal = { text: returnVal, alignment: field.alignment };
	          }

	          return returnVal;
	        }
	      };

	      return service;

	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.exporter.directive:uiGridExporter
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds exporter features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.exporter']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.gridOptions = {
	        enableGridMenu: true,
	        exporterMenuCsv: false,
	        columnDefs: [
	          {name: 'name', enableCellEdit: true},
	          {name: 'title', enableCellEdit: true}
	        ],
	        data: $scope.data
	      };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-exporter></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridExporter', ['uiGridExporterConstants', 'uiGridExporterService', 'gridUtil', '$compile',
	    function (uiGridExporterConstants, uiGridExporterService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          uiGridExporterService.initializeGrid(uiGridCtrl.grid);
	          uiGridCtrl.grid.exporter.$scope = $scope;
	        }
	      };
	    }
	  ]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.grouping
	   * @description
	   *
	   * # ui.grid.grouping
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides grouping of rows based on the data in them, similar
	   * in concept to excel grouping.  You can group multiple columns, resulting in
	   * nested grouping.
	   *
	   * In concept this feature is similar to sorting + grid footer/aggregation, it
	   * sorts the data based on the grouped columns, then creates group rows that
	   * reflect a break in the data.  Each of those group rows can have aggregations for
	   * the data within that group.
	   *
	   * This feature leverages treeBase to provide the tree functionality itself,
	   * the key thing this feature does therefore is to set treeLevels on the rows
	   * and insert the group headers.
	   *
	   * Design information:
	   * -------------------
	   *
	   * Each column will get new menu items - group by, and aggregate by.  Group by
	   * will cause this column to be sorted (if not already), and will move this column
	   * to the front of the sorted columns (i.e. grouped columns take precedence over
	   * sorted columns).  It will respect the sort order already set if there is one,
	   * and it will allow the sorting logic to change that sort order, it just forces
	   * the column to the front of the sorting.  You can group by multiple columns, the
	   * logic will add this column to the sorting after any already grouped columns.
	   *
	   * Once a grouping is defined, grouping logic is added to the rowsProcessors.  This
	   * will process the rows, identifying a break in the data value, and inserting a grouping row.
	   * Grouping rows have specific attributes on them:
	   *
	   *  - internalRow = true: tells us that this isn't a real row, so we can ignore it
	   *    from any processing that it looking at core data rows.  This is used by the core
	   *    logic (or will be one day), as it's not grouping specific
	   *  - groupHeader = true: tells us this is a groupHeader.  This is used by the grouping logic
	   *    to know if this is a groupHeader row or not
	   *
	   * Since the logic is baked into the rowsProcessors, it should get triggered whenever
	   * row order or filtering or anything like that is changed.  In order to avoid the row instantiation
	   * time, and to preserve state across invocations, we hold a cache of the rows that we created
	   * last time, and we use them again this time if we can.
	   *
	   * By default rows are collapsed, which means all data rows have their visible property
	   * set to false, and only level 0 group rows are set to visible.
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.grouping"></div>
	   */

	  var module = angular.module('ui.grid.grouping', ['ui.grid', 'ui.grid.treeBase']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.grouping.constant:uiGridGroupingConstants
	   *
	   *  @description constants available in grouping module, this includes
	   *  all the constants declared in the treeBase module (these are manually copied
	   *  as there isn't an easy way to include constants in another constants file, and
	   *  we don't want to make users include treeBase)
	   *
	   */
	  module.constant('uiGridGroupingConstants', {
	    featureName: "grouping",
	    rowHeaderColName: 'treeBaseRowHeaderCol',
	    EXPANDED: 'expanded',
	    COLLAPSED: 'collapsed',
	    aggregation: {
	      COUNT: 'count',
	      SUM: 'sum',
	      MAX: 'max',
	      MIN: 'min',
	      AVG: 'avg'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.grouping.service:uiGridGroupingService
	   *
	   *  @description Services for grouping features
	   */
	  module.service('uiGridGroupingService', ['$q', 'uiGridGroupingConstants', 'gridUtil', 'rowSorter', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants', 'uiGridTreeBaseService',
	  function ($q, uiGridGroupingConstants, gridUtil, rowSorter, GridRow, gridClassFactory, i18nService, uiGridConstants, uiGridTreeBaseService) {

	    var service = {

	      initializeGrid: function (grid, $scope) {
	        uiGridTreeBaseService.initializeGrid( grid, $scope );

	        //add feature namespace and any properties to grid for needed
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.grid:grouping
	         *
	         *  @description Grid properties and functions added for grouping
	         */
	        grid.grouping = {};

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.grouping.grid:grouping
	         *  @name groupHeaderCache
	         *
	         *  @description Cache that holds the group header rows we created last time, we'll
	         *  reuse these next time, not least because they hold our expanded states.
	         *
	         *  We need to take care with these that they don't become a memory leak, we
	         *  create a new cache each time using the values from the old cache.  This works
	         *  so long as we're creating group rows for invisible rows as well.
	         *
	         *  The cache is a nested hash, indexed on the value we grouped by.  So if we
	         *  grouped by gender then age, we'd maybe have something like:
	         *  ```
	         *    {
	         *      male: {
	         *        row: <pointer to the old row>,
	         *        children: {
	         *          22: { row: <pointer to the old row> },
	         *          31: { row: <pointer to the old row> }
	         *      },
	         *      female: {
	         *        row: <pointer to the old row>,
	         *        children: {
	         *          28: { row: <pointer to the old row> },
	         *          55: { row: <pointer to the old row> }
	         *      }
	         *    }
	         *  ```
	         *
	         *  We create new rows for any missing rows, this means that they come in as collapsed.
	         *
	         */
	        grid.grouping.groupHeaderCache = {};

	        service.defaultGridOptions(grid.options);

	        grid.registerRowsProcessor(service.groupRows, 400);

	        grid.registerColumnBuilder( service.groupingColumnBuilder);

	        grid.registerColumnsProcessor(service.groupingColumnProcessor, 400);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.api:PublicApi
	         *
	         *  @description Public Api for grouping feature
	         */
	        var publicApi = {
	          events: {
	            grouping: {
	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.grouping.api:PublicApi
	               * @name aggregationChanged
	               * @description raised whenever aggregation is changed, added or removed from a column
	               *
	               * <pre>
	               *      gridApi.grouping.on.aggregationChanged(scope,function(col){})
	               * </pre>
	               * @param {gridCol} col the column which on which aggregation changed. The aggregation
	               * type is available as `col.treeAggregation.type`
	               */
	              aggregationChanged: {},
	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.grouping.api:PublicApi
	               * @name groupingChanged
	               * @description raised whenever the grouped columns changes
	               *
	               * <pre>
	               *      gridApi.grouping.on.groupingChanged(scope,function(col){})
	               * </pre>
	               * @param {gridCol} col the column which on which grouping changed. The new grouping is
	               * available as `col.grouping`
	               */
	              groupingChanged: {}
	            }
	          },
	          methods: {
	            grouping: {
	              /**
	               * @ngdoc function
	               * @name getGrouping
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Get the grouping configuration for this grid,
	               * used by the saveState feature.  Adds expandedState to the information
	               * provided by the internal getGrouping, and removes any aggregations that have a source
	               * of grouping (i.e. will be automatically reapplied when we regroup the column)
	               * Returned grouping is an object
	               *   `{ grouping: groupArray, treeAggregations: aggregateArray, expandedState: hash }`
	               * where grouping contains an array of objects:
	               *   `{ field: column.field, colName: column.name, groupPriority: column.grouping.groupPriority }`
	               * and aggregations contains an array of objects:
	               *   `{ field: column.field, colName: column.name, aggregation: column.grouping.aggregation }`
	               * and expandedState is a hash of the currently expanded nodes
	               *
	               * The groupArray will be sorted by groupPriority.
	               *
	               * @param {boolean} getExpanded whether or not to return the expanded state
	               * @returns {object} grouping configuration
	               */
	              getGrouping: function ( getExpanded ) {
	                var grouping = service.getGrouping(grid);

	                grouping.grouping.forEach( function( group ) {
	                  group.colName = group.col.name;
	                  delete group.col;
	                });

	                grouping.aggregations.forEach( function( aggregation ) {
	                  aggregation.colName = aggregation.col.name;
	                  delete aggregation.col;
	                });

	                grouping.aggregations = grouping.aggregations.filter( function( aggregation ){
	                  return !aggregation.aggregation.source || aggregation.aggregation.source !== 'grouping';
	                });

	                if ( getExpanded ){
	                  grouping.rowExpandedStates = service.getRowExpandedStates( grid.grouping.groupingHeaderCache );
	                }

	                return grouping;
	              },

	              /**
	               * @ngdoc function
	               * @name setGrouping
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Set the grouping configuration for this grid,
	               * used by the saveState feature, but can also be used by any
	               * user to specify a combined grouping and aggregation configuration
	               * @param {object} config the config you want to apply, in the format
	               * provided out by getGrouping
	               */
	              setGrouping: function ( config ) {
	                service.setGrouping(grid, config);
	              },

	              /**
	               * @ngdoc function
	               * @name groupColumn
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Adds this column to the existing grouping, at the end of the priority order.
	               * If the column doesn't have a sort, adds one, by default ASC
	               *
	               * This column will move to the left of any non-group columns, the
	               * move is handled in a columnProcessor, so gets called as part of refresh
	               *
	               * @param {string} columnName the name of the column we want to group
	               */
	              groupColumn: function( columnName ) {
	                var column = grid.getColumn(columnName);
	                service.groupColumn(grid, column);
	              },

	              /**
	               * @ngdoc function
	               * @name ungroupColumn
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Removes the groupPriority from this column.  If the
	               * column was previously aggregated the aggregation will come back.
	               * The sort will remain.
	               *
	               * This column will move to the right of any other group columns, the
	               * move is handled in a columnProcessor, so gets called as part of refresh
	               *
	               * @param {string} columnName the name of the column we want to ungroup
	               */
	              ungroupColumn: function( columnName ) {
	                var column = grid.getColumn(columnName);
	                service.ungroupColumn(grid, column);
	              },

	              /**
	               * @ngdoc function
	               * @name clearGrouping
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Clear any grouped columns and any aggregations.  Doesn't remove sorting,
	               * as we don't know whether that sorting was added by grouping or was there beforehand
	               *
	               */
	              clearGrouping: function() {
	                service.clearGrouping(grid);
	              },

	              /**
	               * @ngdoc function
	               * @name aggregateColumn
	               * @methodOf  ui.grid.grouping.api:PublicApi
	               * @description Sets the aggregation type on a column, if the
	               * column is currently grouped then it removes the grouping first.
	               * If the aggregationDef is null then will result in the aggregation
	               * being removed
	               *
	               * @param {string} columnName the column we want to aggregate
	               * @param {string} or {function} aggregationDef one of the recognised types
	               * from uiGridGroupingConstants or a custom aggregation function.
	               * @param {string} aggregationLabel (optional) The label to use for this aggregation.
	               */
	              aggregateColumn: function( columnName, aggregationDef, aggregationLabel){
	                var column = grid.getColumn(columnName);
	                service.aggregateColumn( grid, column, aggregationDef, aggregationLabel);
	              }

	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);

	        grid.api.registerMethodsFromObject(publicApi.methods);

	        grid.api.core.on.sortChanged( $scope, service.tidyPriorities);

	      },

	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.api:GridOptions
	         *
	         *  @description GridOptions for grouping feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableGrouping
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description Enable row grouping for entire grid.
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableGrouping = gridOptions.enableGrouping !== false;

	        /**
	         *  @ngdoc object
	         *  @name groupingShowCounts
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description shows counts on the groupHeader rows. Not that if you are using a cellFilter or a
	         *  sortingAlgorithm which relies on a specific format or data type, showing counts may cause that
	         *  to break, since the group header rows will always be a string with groupingShowCounts enabled.
	         *  <br/>Defaults to true except on columns of type 'date'
	         */
	        gridOptions.groupingShowCounts = gridOptions.groupingShowCounts !== false;

	        /**
	         *  @ngdoc object
	         *  @name groupingNullLabel
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description The string to use for the grouping header row label on rows which contain a null or undefined value in the grouped column.
	         *  <br/>Defaults to "Null"
	         */
	        gridOptions.groupingNullLabel = typeof(gridOptions.groupingNullLabel) === 'undefined' ? 'Null' : gridOptions.groupingNullLabel;

	        /**
	         *  @ngdoc object
	         *  @name enableGroupHeaderSelection
	         *  @propertyOf  ui.grid.grouping.api:GridOptions
	         *  @description Allows group header rows to be selected.
	         *  <br/>Defaults to false
	         */
	        gridOptions.enableGroupHeaderSelection = gridOptions.enableGroupHeaderSelection === true;
	      },


	      /**
	       * @ngdoc function
	       * @name groupingColumnBuilder
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Sets the grouping defaults based on the columnDefs
	       *
	       * @param {object} colDef columnDef we're basing on
	       * @param {GridCol} col the column we're to update
	       * @param {object} gridOptions the options we should use
	       * @returns {promise} promise for the builder - actually we do it all inline so it's immediately resolved
	       */
	      groupingColumnBuilder: function (colDef, col, gridOptions) {
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.grouping.api:ColumnDef
	         *
	         *  @description ColumnDef for grouping feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableGrouping
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Enable grouping on this column
	         *  <br/>Defaults to true.
	         */
	        if (colDef.enableGrouping === false){
	          return;
	        }

	        /**
	         *  @ngdoc object
	         *  @name grouping
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Set the grouping for a column.  Format is:
	         *  ```
	         *    {
	         *      groupPriority: <number, starts at 0, if less than 0 or undefined then we're aggregating in this column>
	         *    }
	         *  ```
	         *
	         *  **Note that aggregation used to be included in grouping, but is now separately set on the column via treeAggregation
	         *  setting in treeBase**
	         *
	         *  We group in the priority order given, this will also put these columns to the high order of the sort irrespective
	         *  of the sort priority given them.  If there is no sort defined then we sort ascending, if there is a sort defined then
	         *  we use that sort.
	         *
	         *  If the groupPriority is undefined or less than 0, then we expect to be aggregating, and we look at the
	         *  aggregation types to determine what sort of aggregation we can do.  Values are in the constants file, but
	         *  include SUM, COUNT, MAX, MIN
	         *
	         *  groupPriorities should generally be sequential, if they're not then the next time getGrouping is called
	         *  we'll renumber them to be sequential.
	         *  <br/>Defaults to undefined.
	         */

	        if ( typeof(col.grouping) === 'undefined' && typeof(colDef.grouping) !== 'undefined') {
	          col.grouping = angular.copy(colDef.grouping);
	          if ( typeof(col.grouping.groupPriority) !== 'undefined' && col.grouping.groupPriority > -1 ){
	            col.treeAggregationFn = uiGridTreeBaseService.nativeAggregations()[uiGridGroupingConstants.aggregation.COUNT].aggregationFn;
	            col.treeAggregationFinalizerFn = service.groupedFinalizerFn;
	          }
	        } else if (typeof(col.grouping) === 'undefined'){
	          col.grouping = {};
	        }

	        if (typeof(col.grouping) !== 'undefined' && typeof(col.grouping.groupPriority) !== 'undefined' && col.grouping.groupPriority >= 0){
	          col.suppressRemoveSort = true;
	        }

	        var groupColumn = {
	          name: 'ui.grid.grouping.group',
	          title: i18nService.get().grouping.group,
	          icon: 'ui-grid-icon-indent-right',
	          shown: function () {
	            return typeof(this.context.col.grouping) === 'undefined' ||
	                   typeof(this.context.col.grouping.groupPriority) === 'undefined' ||
	                   this.context.col.grouping.groupPriority < 0;
	          },
	          action: function () {
	            service.groupColumn( this.context.col.grid, this.context.col );
	          }
	        };

	        var ungroupColumn = {
	          name: 'ui.grid.grouping.ungroup',
	          title: i18nService.get().grouping.ungroup,
	          icon: 'ui-grid-icon-indent-left',
	          shown: function () {
	            return typeof(this.context.col.grouping) !== 'undefined' &&
	                   typeof(this.context.col.grouping.groupPriority) !== 'undefined' &&
	                   this.context.col.grouping.groupPriority >= 0;
	          },
	          action: function () {
	            service.ungroupColumn( this.context.col.grid, this.context.col );
	          }
	        };

	        var aggregateRemove = {
	          name: 'ui.grid.grouping.aggregateRemove',
	          title: i18nService.get().grouping.aggregate_remove,
	          shown: function () {
	            return typeof(this.context.col.treeAggregationFn) !== 'undefined';
	          },
	          action: function () {
	            service.aggregateColumn( this.context.col.grid, this.context.col, null);
	          }
	        };

	        // generic adder for the aggregation menus, which follow a pattern
	        var addAggregationMenu = function(type, title){
	          title = title || i18nService.get().grouping['aggregate_' + type] || type;
	          var menuItem = {
	            name: 'ui.grid.grouping.aggregate' + type,
	            title: title,
	            shown: function () {
	              return typeof(this.context.col.treeAggregation) === 'undefined' ||
	                     typeof(this.context.col.treeAggregation.type) === 'undefined' ||
	                     this.context.col.treeAggregation.type !== type;
	            },
	            action: function () {
	              service.aggregateColumn( this.context.col.grid, this.context.col, type);
	            }
	          };

	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.aggregate' + type)) {
	            col.menuItems.push(menuItem);
	          }
	        };

	        /**
	         *  @ngdoc object
	         *  @name groupingShowGroupingMenu
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Show the grouping (group and ungroup items) menu on this column
	         *  <br/>Defaults to true.
	         */
	        if ( col.colDef.groupingShowGroupingMenu !== false ){
	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.group')) {
	            col.menuItems.push(groupColumn);
	          }

	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.ungroup')) {
	            col.menuItems.push(ungroupColumn);
	          }
	        }


	        /**
	         *  @ngdoc object
	         *  @name groupingShowAggregationMenu
	         *  @propertyOf  ui.grid.grouping.api:ColumnDef
	         *  @description Show the aggregation menu on this column
	         *  <br/>Defaults to true.
	         */
	        if ( col.colDef.groupingShowAggregationMenu !== false ){
	          angular.forEach(uiGridTreeBaseService.nativeAggregations(), function(aggregationDef, name){
	            addAggregationMenu(name);
	          });
	          angular.forEach(gridOptions.treeCustomAggregations, function(aggregationDef, name){
	            addAggregationMenu(name, aggregationDef.menuTitle);
	          });

	          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.aggregateRemove')) {
	            col.menuItems.push(aggregateRemove);
	          }
	        }
	      },




	      /**
	       * @ngdoc function
	       * @name groupingColumnProcessor
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Moves the columns around based on which are grouped
	       *
	       * @param {array} columns the columns to consider rendering
	       * @param {array} rows the grid rows, which we don't use but are passed to us
	       * @returns {array} updated columns array
	       */
	      groupingColumnProcessor: function( columns, rows ) {
	        var grid = this;

	        columns = service.moveGroupColumns(this, columns, rows);
	        return columns;
	      },

	      /**
	       * @ngdoc function
	       * @name groupedFinalizerFn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Used on group columns to display the rendered value and optionally
	       * display the count of rows.
	       *
	       * @param {aggregation} the aggregation entity for a grouped column
	       */
	      groupedFinalizerFn: function( aggregation ){
	        var col = this;

	        if ( typeof(aggregation.groupVal) !== 'undefined') {
	          aggregation.rendered = aggregation.groupVal;
	          if ( col.grid.options.groupingShowCounts && col.colDef.type !== 'date' ){
	            aggregation.rendered += (' (' + aggregation.value + ')');
	          }
	        } else {
	          aggregation.rendered = null;
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name moveGroupColumns
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Moves the column order so that the grouped columns are lined up
	       * to the left (well, unless you're RTL, then it's the right).  By doing this in
	       * the columnsProcessor, we make it transient - when the column is ungrouped it'll
	       * go back to where it was.
	       *
	       * Does nothing if the option `moveGroupColumns` is set to false.
	       *
	       * @param {Grid} grid grid object
	       * @param {array} columns the columns that we should process/move
	       * @param {array} rows the grid rows
	       * @returns {array} updated columns
	       */
	      moveGroupColumns: function( grid, columns, rows ){
	        if ( grid.options.moveGroupColumns === false){
	          return columns;
	        }

	        columns.forEach( function(column, index){
	          // position used to make stable sort in moveGroupColumns
	          column.groupingPosition = index;
	        });

	        columns.sort(function(a, b){
	          var a_group, b_group;
	          if (a.isRowHeader){
	            a_group = a.headerPriority;
	          }
	          else if ( typeof(a.grouping) === 'undefined' || typeof(a.grouping.groupPriority) === 'undefined' || a.grouping.groupPriority < 0){
	            a_group = null;
	          } else {
	            a_group = a.grouping.groupPriority;
	          }

	          if (b.isRowHeader){
	            b_group = b.headerPriority;
	          }
	          else if ( typeof(b.grouping) === 'undefined' || typeof(b.grouping.groupPriority) === 'undefined' || b.grouping.groupPriority < 0){
	            b_group = null;
	          } else {
	            b_group = b.grouping.groupPriority;
	          }

	          // groups get sorted to the top
	          if ( a_group !== null && b_group === null) { return -1; }
	          if ( b_group !== null && a_group === null) { return 1; }
	          if ( a_group !== null && b_group !== null) {return a_group - b_group; }

	          return a.groupingPosition - b.groupingPosition;
	        });

	        columns.forEach( function(column, index) {
	          delete column.groupingPosition;
	        });

	        return columns;
	      },


	      /**
	       * @ngdoc function
	       * @name groupColumn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Adds this column to the existing grouping, at the end of the priority order.
	       * If the column doesn't have a sort, adds one, by default ASC
	       *
	       * This column will move to the left of any non-group columns, the
	       * move is handled in a columnProcessor, so gets called as part of refresh
	       *
	       * @param {Grid} grid grid object
	       * @param {GridCol} column the column we want to group
	       */
	      groupColumn: function( grid, column){
	        if ( typeof(column.grouping) === 'undefined' ){
	          column.grouping = {};
	        }

	        // set the group priority to the next number in the hierarchy
	        var existingGrouping = service.getGrouping( grid );
	        column.grouping.groupPriority = existingGrouping.grouping.length;

	        // add sort if not present
	        if ( !column.sort ){
	          column.sort = { direction: uiGridConstants.ASC };
	        } else if ( typeof(column.sort.direction) === 'undefined' || column.sort.direction === null ){
	          column.sort.direction = uiGridConstants.ASC;
	        }

	        column.treeAggregation = { type: uiGridGroupingConstants.aggregation.COUNT, source: 'grouping' };
	        column.treeAggregationFn = uiGridTreeBaseService.nativeAggregations()[uiGridGroupingConstants.aggregation.COUNT].aggregationFn;
	        column.treeAggregationFinalizerFn = service.groupedFinalizerFn;

	        grid.api.grouping.raise.groupingChanged(column);
	        // This indirectly calls service.tidyPriorities( grid );
	        grid.api.core.raise.sortChanged(grid, grid.getColumnSorting());

	        grid.queueGridRefresh();
	      },


	       /**
	       * @ngdoc function
	       * @name ungroupColumn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Removes the groupPriority from this column.  If the
	       * column was previously aggregated the aggregation will come back.
	       * The sort will remain.
	       *
	       * This column will move to the right of any other group columns, the
	       * move is handled in a columnProcessor, so gets called as part of refresh
	       *
	       * @param {Grid} grid grid object
	       * @param {GridCol} column the column we want to ungroup
	       */
	      ungroupColumn: function( grid, column){
	        if ( typeof(column.grouping) === 'undefined' ){
	          return;
	        }

	        delete column.grouping.groupPriority;
	        delete column.treeAggregation;
	        delete column.customTreeAggregationFinalizer;

	        service.tidyPriorities( grid );

	        grid.api.grouping.raise.groupingChanged(column);

	        grid.queueGridRefresh();
	      },

	      /**
	       * @ngdoc function
	       * @name aggregateColumn
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Sets the aggregation type on a column, if the
	       * column is currently grouped then it removes the grouping first.
	       *
	       * @param {Grid} grid grid object
	       * @param {GridCol} column the column we want to aggregate
	       * @param {string} one of the recognised types from uiGridGroupingConstants or one of the custom aggregations from gridOptions
	       */
	      aggregateColumn: function( grid, column, aggregationType){

	        if (typeof(column.grouping) !== 'undefined' && typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0){
	          service.ungroupColumn( grid, column );
	        }

	        var aggregationDef = {};
	        if ( typeof(grid.options.treeCustomAggregations[aggregationType]) !== 'undefined' ){
	          aggregationDef = grid.options.treeCustomAggregations[aggregationType];
	        } else if ( typeof(uiGridTreeBaseService.nativeAggregations()[aggregationType]) !== 'undefined' ){
	          aggregationDef = uiGridTreeBaseService.nativeAggregations()[aggregationType];
	        }

	        column.treeAggregation = { type: aggregationType, label:  i18nService.get().aggregation[aggregationDef.label] || aggregationDef.label };
	        column.treeAggregationFn = aggregationDef.aggregationFn;
	        column.treeAggregationFinalizerFn = aggregationDef.finalizerFn;

	        grid.api.grouping.raise.aggregationChanged(column);

	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name setGrouping
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Set the grouping based on a config object, used by the save state feature
	       * (more specifically, by the restore function in that feature )
	       *
	       * @param {Grid} grid grid object
	       * @param {object} config the config we want to set, same format as that returned by getGrouping
	       */
	      setGrouping: function ( grid, config ){
	        if ( typeof(config) === 'undefined' ){
	          return;
	        }

	        // first remove any existing grouping
	        service.clearGrouping(grid);

	        if ( config.grouping && config.grouping.length && config.grouping.length > 0 ){
	          config.grouping.forEach( function( group ) {
	            var col = grid.getColumn(group.colName);

	            if ( col ) {
	              service.groupColumn( grid, col );
	            }
	          });
	        }

	        if ( config.aggregations && config.aggregations.length ){
	          config.aggregations.forEach( function( aggregation ) {
	            var col = grid.getColumn(aggregation.colName);

	            if ( col ) {
	              service.aggregateColumn( grid, col, aggregation.aggregation.type );
	            }
	          });
	        }

	        if ( config.rowExpandedStates ){
	          service.applyRowExpandedStates( grid.grouping.groupingHeaderCache, config.rowExpandedStates );
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name clearGrouping
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Clear any grouped columns and any aggregations.  Doesn't remove sorting,
	       * as we don't know whether that sorting was added by grouping or was there beforehand
	       *
	       * @param {Grid} grid grid object
	       */
	      clearGrouping: function( grid ) {
	        var currentGrouping = service.getGrouping(grid);

	        if ( currentGrouping.grouping.length > 0 ){
	          currentGrouping.grouping.forEach( function( group ) {
	            if (!group.col){
	              // should have a group.colName if there's no col
	              group.col = grid.getColumn(group.colName);
	            }
	            service.ungroupColumn(grid, group.col);
	          });
	        }

	        if ( currentGrouping.aggregations.length > 0 ){
	          currentGrouping.aggregations.forEach( function( aggregation ){
	            if (!aggregation.col){
	              // should have a group.colName if there's no col
	              aggregation.col = grid.getColumn(aggregation.colName);
	            }
	            service.aggregateColumn(grid, aggregation.col, null);
	          });
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name tidyPriorities
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Renumbers groupPriority and sortPriority such that
	       * groupPriority is contiguous, and sortPriority either matches
	       * groupPriority (for group columns), and otherwise is contiguous and
	       * higher than groupPriority.
	       *
	       * @param {Grid} grid grid object
	       */
	      tidyPriorities: function( grid ){
	        // if we're called from sortChanged, grid is in this, not passed as param, the param can be a column or undefined
	        if ( ( typeof(grid) === 'undefined' || typeof(grid.grid) !== 'undefined' ) && typeof(this.grid) !== 'undefined' ) {
	          grid = this.grid;
	        }

	        var groupArray = [];
	        var sortArray = [];

	        grid.columns.forEach( function(column, index){
	          if ( typeof(column.grouping) !== 'undefined' && typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0){
	            groupArray.push(column);
	          } else if ( typeof(column.sort) !== 'undefined' && typeof(column.sort.priority) !== 'undefined' && column.sort.priority >= 0){
	            sortArray.push(column);
	          }
	        });

	        groupArray.sort(function(a, b){ return a.grouping.groupPriority - b.grouping.groupPriority; });
	        groupArray.forEach( function(column, index){
	          column.grouping.groupPriority = index;
	          column.suppressRemoveSort = true;
	          if ( typeof(column.sort) === 'undefined'){
	            column.sort = {};
	          }
	          column.sort.priority = index;
	        });

	        var i = groupArray.length;
	        sortArray.sort(function(a, b){ return a.sort.priority - b.sort.priority; });
	        sortArray.forEach( function(column, index){
	          column.sort.priority = i;
	          column.suppressRemoveSort = column.colDef.suppressRemoveSort;
	          i++;
	        });
	      },


	      /**
	       * @ngdoc function
	       * @name groupRows
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description The rowProcessor that creates the groupHeaders (i.e. does
	       * the actual grouping).
	       *
	       * Assumes it is always called after the sorting processor, guaranteed by the priority setting
	       *
	       * Processes all the rows in order, inserting a groupHeader row whenever there is a change
	       * in value of a grouped row, based on the sortAlgorithm used for the column.  The group header row
	       * is looked up in the groupHeaderCache, and used from there if there is one. The entity is reset
	       * to {} if one is found.
	       *
	       * As it processes it maintains a `processingState` array. This records, for each level of grouping we're
	       * working with, the following information:
	       * ```
	       *   {
	       *     fieldName: name,
	       *     col: col,
	       *     initialised: boolean,
	       *     currentValue: value,
	       *     currentRow: gridRow,
	       *   }
	       * ```
	       * We look for changes in the currentValue at any of the levels.  Where we find a change we:
	       *
	       * - create a new groupHeader row in the array
	       *
	       * @param {array} renderableRows the rows we want to process, usually the output from the previous rowProcessor
	       * @returns {array} the updated rows, including our new group rows
	       */
	      groupRows: function( renderableRows ) {
	        if (renderableRows.length === 0){
	          return renderableRows;
	        }

	        var grid = this;
	        grid.grouping.oldGroupingHeaderCache = grid.grouping.groupingHeaderCache || {};
	        grid.grouping.groupingHeaderCache = {};

	        var processingState = service.initialiseProcessingState( grid );

	        // processes each of the fields we are grouping by, checks if the value has changed and inserts a groupHeader
	        // Broken out as shouldn't create functions in a loop.
	        var updateProcessingState = function( groupFieldState, stateIndex ) {
	          var fieldValue = grid.getCellValue(row, groupFieldState.col);

	          // look for change of value - and insert a header
	          if ( !groupFieldState.initialised || rowSorter.getSortFn(grid, groupFieldState.col, renderableRows)(fieldValue, groupFieldState.currentValue) !== 0 ){
	            service.insertGroupHeader( grid, renderableRows, i, processingState, stateIndex );
	            i++;
	          }
	        };

	        // use a for loop because it's tolerant of the array length changing whilst we go - we can
	        // manipulate the iterator when we insert groupHeader rows
	        for (var i = 0; i < renderableRows.length; i++ ){
	          var row = renderableRows[i];

	          if ( row.visible ){
	            processingState.forEach( updateProcessingState );
	          }
	        }

	        delete grid.grouping.oldGroupingHeaderCache;
	        return renderableRows;
	      },


	      /**
	       * @ngdoc function
	       * @name initialiseProcessingState
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Creates the processing state array that is used
	       * for groupRows.
	       *
	       * @param {Grid} grid grid object
	       * @returns {array} an array in the format described in the groupRows method,
	       * initialised with blank values
	       */
	      initialiseProcessingState: function( grid ){
	        var processingState = [];
	        var columnSettings = service.getGrouping( grid );

	        columnSettings.grouping.forEach( function( groupItem, index){
	          processingState.push({
	            fieldName: groupItem.field,
	            col: groupItem.col,
	            initialised: false,
	            currentValue: null,
	            currentRow: null
	          });
	        });

	        return processingState;
	      },


	      /**
	       * @ngdoc function
	       * @name getGrouping
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Get the grouping settings from the columns.  As a side effect
	       * this always renumbers the grouping starting at 0
	       * @param {Grid} grid grid object
	       * @returns {array} an array of the group fields, in order of priority
	       */
	      getGrouping: function( grid ){
	        var groupArray = [];
	        var aggregateArray = [];

	        // get all the grouping
	        grid.columns.forEach( function(column, columnIndex){
	          if ( column.grouping ){
	            if ( typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0){
	              groupArray.push({ field: column.field, col: column, groupPriority: column.grouping.groupPriority, grouping: column.grouping });
	            }
	          }
	          if ( column.treeAggregation && column.treeAggregation.type ){
	            aggregateArray.push({ field: column.field, col: column, aggregation: column.treeAggregation });
	          }
	        });

	        // sort grouping into priority order
	        groupArray.sort( function(a, b){
	          return a.groupPriority - b.groupPriority;
	        });

	        // renumber the priority in case it was somewhat messed up, then remove the grouping reference
	        groupArray.forEach( function( group, index) {
	          group.grouping.groupPriority = index;
	          group.groupPriority = index;
	          delete group.grouping;
	        });

	        return { grouping: groupArray, aggregations: aggregateArray };
	      },


	      /**
	       * @ngdoc function
	       * @name insertGroupHeader
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Create a group header row, and link it to the various configuration
	       * items that we use.
	       *
	       * Look for the row in the oldGroupingHeaderCache, write the row into the new groupingHeaderCache.
	       *
	       * @param {Grid} grid grid object
	       * @param {array} renderableRows the rows that we are processing
	       * @param {number} rowIndex the row we were up to processing
	       * @param {array} processingState the current processing state
	       * @param {number} stateIndex the processing state item that we were on when we triggered a new group header -
	       * i.e. the column that we want to create a header for
	       */
	      insertGroupHeader: function( grid, renderableRows, rowIndex, processingState, stateIndex ) {
	        // set the value that caused the end of a group into the header row and the processing state
	        var fieldName = processingState[stateIndex].fieldName;
	        var col = processingState[stateIndex].col;

	        var newValue = grid.getCellValue(renderableRows[rowIndex], col);
	        var newDisplayValue = newValue;
	        if ( typeof(newValue) === 'undefined' || newValue === null ) {
	          newDisplayValue = grid.options.groupingNullLabel;
	        }

	        var getKeyAsValueForCacheMap = function(key) {
	          if (angular.isObject(key)) {
	              return JSON.stringify(key);
	          } else {
	              return key;
	          }
	        };

	        var cacheItem = grid.grouping.oldGroupingHeaderCache;
	        for ( var i = 0; i < stateIndex; i++ ){
	          if ( cacheItem && cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)] ){
	            cacheItem = cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)].children;
	          }
	        }

	        var headerRow;
	        if ( cacheItem && cacheItem[getKeyAsValueForCacheMap(newValue)]){
	          headerRow = cacheItem[getKeyAsValueForCacheMap(newValue)].row;
	          headerRow.entity = {};
	        } else {
	          headerRow = new GridRow( {}, null, grid );
	          gridClassFactory.rowTemplateAssigner.call(grid, headerRow);
	        }

	        headerRow.entity['$$' + processingState[stateIndex].col.uid] = { groupVal: newDisplayValue };
	        headerRow.treeLevel = stateIndex;
	        headerRow.groupHeader = true;
	        headerRow.internalRow = true;
	        headerRow.enableCellEdit = false;
	        headerRow.enableSelection = grid.options.enableGroupHeaderSelection;
	        processingState[stateIndex].initialised = true;
	        processingState[stateIndex].currentValue = newValue;
	        processingState[stateIndex].currentRow = headerRow;

	        // set all processing states below this one to not be initialised - change of this state
	        // means all those need to start again
	        service.finaliseProcessingState( processingState, stateIndex + 1);

	        // insert our new header row
	        renderableRows.splice(rowIndex, 0, headerRow);

	        // add our new header row to the cache
	        cacheItem = grid.grouping.groupingHeaderCache;
	        for ( i = 0; i < stateIndex; i++ ){
	          cacheItem = cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)].children;
	        }
	        cacheItem[getKeyAsValueForCacheMap(newValue)] = { row: headerRow, children: {} };
	      },


	      /**
	       * @ngdoc function
	       * @name finaliseProcessingState
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Set all processing states lower than the one that had a break in value to
	       * no longer be initialised.  Render the counts into the entity ready for display.
	       *
	       * @param {Grid} grid grid object
	       * @param {array} processingState the current processing state
	       * @param {number} stateIndex the processing state item that we were on when we triggered a new group header, all
	       * processing states after this need to be finalised
	       */
	      finaliseProcessingState: function( processingState, stateIndex ){
	        for ( var i = stateIndex; i < processingState.length; i++){
	          processingState[i].initialised = false;
	          processingState[i].currentRow = null;
	          processingState[i].currentValue = null;
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name getRowExpandedStates
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Extract the groupHeaderCache hash, pulling out only the states.
	       *
	       * The example below shows a grid that is grouped by gender then age
	       *
	       * <pre>
	       *   {
	       *     male: {
	       *       state: 'expanded',
	       *       children: {
	       *         22: { state: 'expanded' },
	       *         30: { state: 'collapsed' }
	       *       }
	       *     },
	       *     female: {
	       *       state: 'expanded',
	       *       children: {
	       *         28: { state: 'expanded' },
	       *         55: { state: 'collapsed' }
	       *       }
	       *     }
	       *   }
	       * </pre>
	       *
	       * @param {Grid} grid grid object
	       * @returns {hash} the expanded states as a hash
	       */
	      getRowExpandedStates: function(treeChildren){
	        if ( typeof(treeChildren) === 'undefined' ){
	          return {};
	        }

	        var newChildren = {};

	        angular.forEach( treeChildren, function( value, key ){
	          newChildren[key] = { state: value.row.treeNode.state };
	          if ( value.children ){
	            newChildren[key].children = service.getRowExpandedStates( value.children );
	          } else {
	            newChildren[key].children = {};
	          }
	        });

	        return newChildren;
	      },


	      /**
	       * @ngdoc function
	       * @name applyRowExpandedStates
	       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
	       * @description Take a hash in the format as created by getRowExpandedStates,
	       * and apply it to the grid.grouping.groupHeaderCache.
	       *
	       * Takes a treeSubset, and applies to a treeSubset - so can be called
	       * recursively.
	       *
	       * @param {object} currentNode can be grid.grouping.groupHeaderCache, or any of
	       * the children of that hash
	       * @returns {hash} expandedStates can be the full expanded states, or children
	       * of that expanded states (which hopefully matches the subset of the groupHeaderCache)
	       */
	      applyRowExpandedStates: function( currentNode, expandedStates ){
	        if ( typeof(expandedStates) === 'undefined' ){
	          return;
	        }

	        angular.forEach(expandedStates, function( value, key ) {
	          if ( currentNode[key] ){
	            currentNode[key].row.treeNode.state = value.state;

	            if (value.children && currentNode[key].children){
	              service.applyRowExpandedStates( currentNode[key].children, value.children );
	            }
	          }
	        });
	      }


	    };

	    return service;

	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.grouping.directive:uiGridGrouping
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds grouping features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.grouping']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];

	      $scope.gridOptions = { columnDefs: $scope.columnDefs, data: $scope.data };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-grouping></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridGrouping', ['uiGridGroupingConstants', 'uiGridGroupingService', '$templateCache',
	  function (uiGridGroupingConstants, uiGridGroupingService, $templateCache) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            if (uiGridCtrl.grid.options.enableGrouping !== false){
	              uiGridGroupingService.initializeGrid(uiGridCtrl.grid, $scope);
	            }
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.importer
	   * @description
	   *
	   * # ui.grid.importer
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides the ability to import data into the grid. It
	   * uses the column defs to work out which data belongs in which column,
	   * and creates entities from a configured class (typically a $resource).
	   *
	   * If the rowEdit feature is enabled, it also calls save on those newly
	   * created objects, and then displays any errors in the imported data.
	   *
	   * Currently the importer imports only CSV and json files, although provision has been
	   * made to process other file formats, and these can be added over time.
	   *
	   * For json files, the properties within each object in the json must match the column names
	   * (to put it another way, the importer doesn't process the json, it just copies the objects
	   * within the json into a new instance of the specified object type)
	   *
	   * For CSV import, the default column identification relies on each column in the
	   * header row matching a column.name or column.displayName. Optionally, a column identification
	   * callback can be used.  This allows matching using other attributes, which is particularly
	   * useful if your application has internationalised column headings (i.e. the headings that
	   * the user sees don't match the column names).
	   *
	   * The importer makes use of the grid menu as the UI for requesting an
	   * import.
	   *
	   * <div ui-grid-importer></div>
	   */

	  var module = angular.module('ui.grid.importer', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.importer.constant:uiGridImporterConstants
	   *
	   *  @description constants available in importer module
	   */

	  module.constant('uiGridImporterConstants', {
	    featureName: 'importer'
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.importer.service:uiGridImporterService
	   *
	   *  @description Services for importer feature
	   */
	  module.service('uiGridImporterService', ['$q', 'uiGridConstants', 'uiGridImporterConstants', 'gridUtil', '$compile', '$interval', 'i18nService', '$window',
	    function ($q, uiGridConstants, uiGridImporterConstants, gridUtil, $compile, $interval, i18nService, $window) {

	      var service = {

	        initializeGrid: function ($scope, grid) {

	          //add feature namespace and any properties to grid for needed state
	          grid.importer = {
	            $scope: $scope
	          };

	          this.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.importer.api:PublicApi
	           *
	           *  @description Public Api for importer feature
	           */
	          var publicApi = {
	            events: {
	              importer: {
	              }
	            },
	            methods: {
	              importer: {
	                /**
	                 * @ngdoc function
	                 * @name importFile
	                 * @methodOf  ui.grid.importer.api:PublicApi
	                 * @description Imports a file into the grid using the file object
	                 * provided.  Bypasses the grid menu
	                 * @param {File} fileObject the file we want to import, as a javascript
	                 * File object
	                 */
	                importFile: function ( fileObject ) {
	                  service.importThisFile( grid, fileObject );
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	          if ( grid.options.enableImporter && grid.options.importerShowMenu ){
	            if ( grid.api.core.addToGridMenu ){
	              service.addToMenu( grid );
	            } else {
	              // order of registration is not guaranteed, register in a little while
	              $interval( function() {
	                if (grid.api.core.addToGridMenu){
	                  service.addToMenu( grid );
	                }
	              }, 100, 1);
	            }
	          }
	        },


	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           * @ngdoc object
	           * @name ui.grid.importer.api:GridOptions
	           *
	           * @description GridOptions for importer feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           * @ngdoc property
	           * @propertyOf ui.grid.importer.api:GridOptions
	           * @name enableImporter
	           * @description Whether or not importer is enabled.  Automatically set
	           * to false if the user's browser does not support the required fileApi.
	           * Otherwise defaults to true.
	           *
	           */
	          if (gridOptions.enableImporter  || gridOptions.enableImporter === undefined) {
	            if ( !($window.hasOwnProperty('File') && $window.hasOwnProperty('FileReader') && $window.hasOwnProperty('FileList') && $window.hasOwnProperty('Blob')) ) {
	              gridUtil.logError('The File APIs are not fully supported in this browser, grid importer cannot be used.');
	              gridOptions.enableImporter = false;
	            } else {
	              gridOptions.enableImporter = true;
	            }
	          } else {
	            gridOptions.enableImporter = false;
	          }

	          /**
	           * @ngdoc method
	           * @name importerProcessHeaders
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A callback function that will process headers using custom
	           * logic.  Set this callback function if the headers that your user will provide in their
	           * import file don't necessarily match the grid header or field names.  This might commonly
	           * occur where your application is internationalised, and therefore the field names
	           * that the user recognises are in a different language than the field names that
	           * ui-grid knows about.
	           *
	           * Defaults to the internal `processHeaders` method, which seeks to match using both
	           * displayName and column.name.  Any non-matching columns are discarded.
	           *
	           * Your callback routine should respond by processing the header array, and returning an array
	           * of matching column names.  A null value in any given position means "don't import this column"
	           *
	           * <pre>
	           *      gridOptions.importerProcessHeaders: function( headerArray ) {
	           *        var myHeaderColumns = [];
	           *        var thisCol;
	           *        headerArray.forEach( function( value, index ) {
	           *          thisCol = mySpecialLookupFunction( value );
	           *          myHeaderColumns.push( thisCol.name );
	           *        });
	           *
	           *        return myHeaderCols;
	           *      })
	           * </pre>
	           * @param {Grid} grid the grid we're importing into
	           * @param {array} headerArray an array of the text from the first row of the csv file,
	           * which you need to match to column.names
	           * @returns {array} array of matching column names, in the same order as the headerArray
	           *
	           */
	          gridOptions.importerProcessHeaders = gridOptions.importerProcessHeaders || service.processHeaders;

	          /**
	           * @ngdoc method
	           * @name importerHeaderFilter
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A callback function that will filter (usually translate) a single
	           * header.  Used when you want to match the passed in column names to the column
	           * displayName after the header filter.
	           *
	           * Your callback routine needs to return the filtered header value.
	           * <pre>
	           *      gridOptions.importerHeaderFilter: function( displayName ) {
	           *        return $translate.instant( displayName );
	           *      })
	           * </pre>
	           *
	           * or:
	           * <pre>
	           *      gridOptions.importerHeaderFilter: $translate.instant
	           * </pre>
	           * @param {string} displayName the displayName that we'd like to translate
	           * @returns {string} the translated name
	           *
	           */
	          gridOptions.importerHeaderFilter = gridOptions.importerHeaderFilter || function( displayName ) { return displayName; };

	          /**
	           * @ngdoc method
	           * @name importerErrorCallback
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A callback function that provides custom error handling, rather
	           * than the standard grid behaviour of an alert box and a console message.  You
	           * might use this to internationalise the console log messages, or to write to a
	           * custom logging routine that returned errors to the server.
	           *
	           * <pre>
	           *      gridOptions.importerErrorCallback: function( grid, errorKey, consoleMessage, context ) {
	           *        myUserDisplayRoutine( errorKey );
	           *        myLoggingRoutine( consoleMessage, context );
	           *      })
	           * </pre>
	           * @param {Grid} grid the grid we're importing into, may be useful if you're positioning messages
	           * in some way
	           * @param {string} errorKey one of the i18n keys the importer can return - importer.noHeaders,
	           * importer.noObjects, importer.invalidCsv, importer.invalidJson, importer.jsonNotArray
	           * @param {string} consoleMessage the English console message that importer would have written
	           * @param {object} context the context data that importer would have appended to that console message,
	           * often the file content itself or the element that is in error
	           *
	           */
	          if ( !gridOptions.importerErrorCallback ||  typeof(gridOptions.importerErrorCallback) !== 'function' ){
	            delete gridOptions.importerErrorCallback;
	          }

	          /**
	           * @ngdoc method
	           * @name importerDataAddCallback
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @description A mandatory callback function that adds data to the source data array.  The grid
	           * generally doesn't add rows to the source data array, it is tidier to handle this through a user
	           * callback.
	           *
	           * <pre>
	           *      gridOptions.importerDataAddCallback: function( grid, newObjects ) {
	           *        $scope.myData = $scope.myData.concat( newObjects );
	           *      })
	           * </pre>
	           * @param {Grid} grid the grid we're importing into, may be useful in some way
	           * @param {array} newObjects an array of new objects that you should add to your data
	           *
	           */
	          if ( gridOptions.enableImporter === true && !gridOptions.importerDataAddCallback ) {
	            gridUtil.logError("You have not set an importerDataAddCallback, importer is disabled");
	            gridOptions.enableImporter = false;
	          }

	          /**
	           * @ngdoc object
	           * @name importerNewObject
	           * @propertyOf  ui.grid.importer.api:GridOptions
	           * @description An object on which we call `new` to create each new row before inserting it into
	           * the data array.  Typically this would be a $resource entity, which means that if you're using
	           * the rowEdit feature, you can directly call save on this entity when the save event is triggered.
	           *
	           * Defaults to a vanilla javascript object
	           *
	           * @example
	           * <pre>
	           *   gridOptions.importerNewObject = MyRes;
	           * </pre>
	           *
	           */

	          /**
	           * @ngdoc property
	           * @propertyOf ui.grid.importer.api:GridOptions
	           * @name importerShowMenu
	           * @description Whether or not to show an item in the grid menu.  Defaults to true.
	           *
	           */
	          gridOptions.importerShowMenu = gridOptions.importerShowMenu !== false;

	          /**
	           * @ngdoc method
	           * @methodOf ui.grid.importer.api:GridOptions
	           * @name importerObjectCallback
	           * @description A callback that massages the data for each object.  For example,
	           * you might have data stored as a code value, but display the decode.  This callback
	           * can be used to change the decoded value back into a code.  Defaults to doing nothing.
	           * @param {Grid} grid in case you need it
	           * @param {object} newObject the new object as importer has created it, modify it
	           * then return the modified version
	           * @returns {object} the modified object
	           * @example
	           * <pre>
	           *   gridOptions.importerObjectCallback = function ( grid, newObject ) {
	           *     switch newObject.status {
	           *       case 'Active':
	           *         newObject.status = 1;
	           *         break;
	           *       case 'Inactive':
	           *         newObject.status = 2;
	           *         break;
	           *     }
	           *     return newObject;
	           *   };
	           * </pre>
	           */
	          gridOptions.importerObjectCallback = gridOptions.importerObjectCallback || function( grid, newObject ) { return newObject; };
	        },


	        /**
	         * @ngdoc function
	         * @name addToMenu
	         * @methodOf  ui.grid.importer.service:uiGridImporterService
	         * @description Adds import menu item to the grid menu,
	         * allowing the user to request import of a file
	         * @param {Grid} grid the grid into which data should be imported
	         */
	        addToMenu: function ( grid ) {
	          grid.api.core.addToGridMenu( grid, [
	            {
	              title: i18nService.getSafeText('gridMenu.importerTitle'),
	              order: 150
	            },
	            {
	              templateUrl: 'ui-grid/importerMenuItemContainer',
	              action: function ($event) {
	                this.grid.api.importer.importAFile( grid );
	              },
	              order: 151
	            }
	          ]);
	        },


	        /**
	         * @ngdoc function
	         * @name importThisFile
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Imports the provided file into the grid using the file object
	         * provided.  Bypasses the grid menu
	         * @param {Grid} grid the grid we're importing into
	         * @param {File} fileObject the file we want to import, as returned from the File
	         * javascript object
	         */
	        importThisFile: function ( grid, fileObject ) {
	          if (!fileObject){
	            gridUtil.logError( 'No file object provided to importThisFile, should be impossible, aborting');
	            return;
	          }

	          var reader = new FileReader();

	          switch ( fileObject.type ){
	            case 'application/json':
	              reader.onload = service.importJsonClosure( grid );
	              break;
	            default:
	              reader.onload = service.importCsvClosure( grid );
	              break;
	          }

	          reader.readAsText( fileObject );
	        },


	        /**
	         * @ngdoc function
	         * @name importJson
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Creates a function that imports a json file into the grid.
	         * The json data is imported into new objects of type `gridOptions.importerNewObject`,
	         * and if the rowEdit feature is enabled the rows are marked as dirty
	         * @param {Grid} grid the grid we want to import into
	         * @param {FileObject} importFile the file that we want to import, as
	         * a FileObject
	         */
	        importJsonClosure: function( grid ) {
	          return function( importFile ){
	            var newObjects = [];
	            var newObject;

	            var importArray = service.parseJson( grid, importFile );
	            if (importArray === null){
	              return;
	            }
	            importArray.forEach(  function( value, index ) {
	              newObject = service.newObject( grid );
	              angular.extend( newObject, value );
	              newObject = grid.options.importerObjectCallback( grid, newObject );
	              newObjects.push( newObject );
	            });

	            service.addObjects( grid, newObjects );

	          };
	        },


	        /**
	         * @ngdoc function
	         * @name parseJson
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Parses a json file, returns the parsed data.
	         * Displays an error if file doesn't parse
	         * @param {Grid} grid the grid that we want to import into
	         * @param {FileObject} importFile the file that we want to import, as
	         * a FileObject
	         * @returns {array} array of objects from the imported json
	         */
	        parseJson: function( grid, importFile ){
	          var loadedObjects;
	          try {
	            loadedObjects = JSON.parse( importFile.target.result );
	          } catch (e) {
	            service.alertError( grid, 'importer.invalidJson', 'File could not be processed, is it valid json? Content was: ', importFile.target.result );
	            return;
	          }

	          if ( !Array.isArray( loadedObjects ) ){
	            service.alertError( grid, 'importer.jsonNotarray', 'Import failed, file is not an array, file was: ', importFile.target.result );
	            return [];
	          } else {
	            return loadedObjects;
	          }
	        },



	        /**
	         * @ngdoc function
	         * @name importCsvClosure
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Creates a function that imports a csv file into the grid
	         * (allowing it to be used in the reader.onload event)
	         * @param {Grid} grid the grid that we want to import into
	         * @param {FileObject} importFile the file that we want to import, as
	         * a file object
	         */
	        importCsvClosure: function( grid ) {
	          return function( importFile ){
	            var importArray = service.parseCsv( importFile );
	            if ( !importArray || importArray.length < 1 ){
	              service.alertError( grid, 'importer.invalidCsv', 'File could not be processed, is it valid csv? Content was: ', importFile.target.result );
	              return;
	            }

	            var newObjects = service.createCsvObjects( grid, importArray );
	            if ( !newObjects || newObjects.length === 0 ){
	              service.alertError( grid, 'importer.noObjects', 'Objects were not able to be derived, content was: ', importFile.target.result );
	              return;
	            }

	            service.addObjects( grid, newObjects );
	          };
	        },


	        /**
	         * @ngdoc function
	         * @name parseCsv
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Parses a csv file into an array of arrays, with the first
	         * array being the headers, and the remaining arrays being the data.
	         * The logic for this comes from https://github.com/thetalecrafter/excel.js/blob/master/src/csv.js,
	         * which is noted as being under the MIT license.  The code is modified to pass the jscs yoda condition
	         * checker
	         * @param {FileObject} importFile the file that we want to import, as a
	         * file object
	         */
	        parseCsv: function( importFile ) {
	          var csv = importFile.target.result;

	          // use the CSV-JS library to parse
	          return CSV.parse(csv);
	        },


	        /**
	         * @ngdoc function
	         * @name createCsvObjects
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Converts an array of arrays (representing the csv file)
	         * into a set of objects.  Uses the provided `gridOptions.importerNewObject`
	         * to create the objects, and maps the header row into the individual columns
	         * using either `gridOptions.importerProcessHeaders`, or by using a native method
	         * of matching to either the displayName, column name or column field of
	         * the columns in the column defs.  The resulting objects will have attributes
	         * that are named based on the column.field or column.name, in that order.
	         * @param {Grid} grid the grid that we want to import into
	         * @param {Array} importArray the data that we want to import, as an array
	         */
	        createCsvObjects: function( grid, importArray ){
	          // pull off header row and turn into headers
	          var headerMapping = grid.options.importerProcessHeaders( grid, importArray.shift() );
	          if ( !headerMapping || headerMapping.length === 0 ){
	            service.alertError( grid, 'importer.noHeaders', 'Column names could not be derived, content was: ', importArray );
	            return [];
	          }

	          var newObjects = [];
	          var newObject;
	          importArray.forEach( function( row, index ) {
	            newObject = service.newObject( grid );
	            if ( row !== null ){
	              row.forEach( function( field, index ){
	                if ( headerMapping[index] !== null ){
	                  newObject[ headerMapping[index] ] = field;
	                }
	              });
	            }
	            newObject = grid.options.importerObjectCallback( grid, newObject );
	            newObjects.push( newObject );
	          });

	          return newObjects;
	        },


	        /**
	         * @ngdoc function
	         * @name processHeaders
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Determines the columns that the header row from
	         * a csv (or other) file represents.
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} headerRow the header row that we wish to match against
	         * the column definitions
	         * @returns {array} an array of the attribute names that should be used
	         * for that column, based on matching the headers or creating the headers
	         *
	         */
	        processHeaders: function( grid, headerRow ) {
	          var headers = [];
	          if ( !grid.options.columnDefs || grid.options.columnDefs.length === 0 ){
	            // we are going to create new columnDefs for all these columns, so just remove
	            // spaces from the names to create fields
	            headerRow.forEach( function( value, index ) {
	              headers.push( value.replace( /[^0-9a-zA-Z\-_]/g, '_' ) );
	            });
	            return headers;
	          } else {
	            var lookupHash = service.flattenColumnDefs( grid, grid.options.columnDefs );
	            headerRow.forEach(  function( value, index ) {
	              if ( lookupHash[value] ) {
	                headers.push( lookupHash[value] );
	              } else if ( lookupHash[ value.toLowerCase() ] ) {
	                headers.push( lookupHash[ value.toLowerCase() ] );
	              } else {
	                headers.push( null );
	              }
	            });
	            return headers;
	          }
	        },


	        /**
	         * @name flattenColumnDefs
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Runs through the column defs and creates a hash of
	         * the displayName, name and field, and of each of those values forced to lower case,
	         * with each pointing to the field or name
	         * (whichever is present).  Used to lookup column headers and decide what
	         * attribute name to give to the resulting field.
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} columnDefs the columnDefs that we should flatten
	         * @returns {hash} the flattened version of the column def information, allowing
	         * us to look up a value by `flattenedHash[ headerValue ]`
	         */
	        flattenColumnDefs: function( grid, columnDefs ){
	          var flattenedHash = {};
	          columnDefs.forEach(  function( columnDef, index) {
	            if ( columnDef.name ){
	              flattenedHash[ columnDef.name ] = columnDef.field || columnDef.name;
	              flattenedHash[ columnDef.name.toLowerCase() ] = columnDef.field || columnDef.name;
	            }

	            if ( columnDef.field ){
	              flattenedHash[ columnDef.field ] = columnDef.field || columnDef.name;
	              flattenedHash[ columnDef.field.toLowerCase() ] = columnDef.field || columnDef.name;
	            }

	            if ( columnDef.displayName ){
	              flattenedHash[ columnDef.displayName ] = columnDef.field || columnDef.name;
	              flattenedHash[ columnDef.displayName.toLowerCase() ] = columnDef.field || columnDef.name;
	            }

	            if ( columnDef.displayName && grid.options.importerHeaderFilter ){
	              flattenedHash[ grid.options.importerHeaderFilter(columnDef.displayName) ] = columnDef.field || columnDef.name;
	              flattenedHash[ grid.options.importerHeaderFilter(columnDef.displayName).toLowerCase() ] = columnDef.field || columnDef.name;
	            }
	          });

	          return flattenedHash;
	        },


	        /**
	         * @ngdoc function
	         * @name addObjects
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Inserts our new objects into the grid data, and
	         * sets the rows to dirty if the rowEdit feature is being used
	         *
	         * Does this by registering a watch on dataChanges, which essentially
	         * is waiting on the result of the grid data watch, and downstream processing.
	         *
	         * When the callback is called, it deregisters itself - we don't want to run
	         * again next time data is added.
	         *
	         * If we never get called, we deregister on destroy.
	         *
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} newObjects the objects we want to insert into the grid data
	         * @returns {object} the new object
	         */
	        addObjects: function( grid, newObjects, $scope ){
	          if ( grid.api.rowEdit ){
	            var dataChangeDereg = grid.registerDataChangeCallback( function() {
	              grid.api.rowEdit.setRowsDirty( newObjects );
	              dataChangeDereg();
	            }, [uiGridConstants.dataChange.ROW] );

	            grid.importer.$scope.$on( '$destroy', dataChangeDereg );
	          }

	          grid.importer.$scope.$apply( grid.options.importerDataAddCallback( grid, newObjects ) );

	        },


	        /**
	         * @ngdoc function
	         * @name newObject
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Makes a new object based on `gridOptions.importerNewObject`,
	         * or based on an empty object if not present
	         * @param {Grid} grid the grid we're importing into
	         * @returns {object} the new object
	         */
	        newObject: function( grid ){
	          if ( typeof(grid.options) !== "undefined" && typeof(grid.options.importerNewObject) !== "undefined" ){
	            return new grid.options.importerNewObject();
	          } else {
	            return {};
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name alertError
	         * @methodOf ui.grid.importer.service:uiGridImporterService
	         * @description Provides an internationalised user alert for the failure,
	         * and logs a console message including diagnostic content.
	         * Optionally, if the the `gridOptions.importerErrorCallback` routine
	         * is defined, then calls that instead, allowing user specified error routines
	         * @param {Grid} grid the grid we're importing into
	         * @param {array} headerRow the header row that we wish to match against
	         * the column definitions
	         */
	        alertError: function( grid, alertI18nToken, consoleMessage, context ){
	          if ( grid.options.importerErrorCallback ){
	            grid.options.importerErrorCallback( grid, alertI18nToken, consoleMessage, context );
	          } else {
	            $window.alert(i18nService.getSafeText( alertI18nToken ));
	            gridUtil.logError(consoleMessage + context );
	          }
	        }
	      };

	      return service;

	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.importer.directive:uiGridImporter
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds importer features to grid
	   *
	   */
	  module.directive('uiGridImporter', ['uiGridImporterConstants', 'uiGridImporterService', 'gridUtil', '$compile',
	    function (uiGridImporterConstants, uiGridImporterService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          uiGridImporterService.initializeGrid($scope, uiGridCtrl.grid);
	        }
	      };
	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.importer.directive:uiGridImporterMenuItem
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Handles the processing from the importer menu item - once a file is
	   *  selected
	   *
	   */
	  module.directive('uiGridImporterMenuItem', ['uiGridImporterConstants', 'uiGridImporterService', 'gridUtil', '$compile',
	    function (uiGridImporterConstants, uiGridImporterService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        templateUrl: 'ui-grid/importerMenuItem',
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          var handleFileSelect = function( event ){
	            var target = event.srcElement || event.target;

	            if (target && target.files && target.files.length === 1) {
	              var fileObject = target.files[0];
	              uiGridImporterService.importThisFile( grid, fileObject );
	              target.form.reset();
	            }
	          };

	          var fileChooser = $elm[0].querySelectorAll('.ui-grid-importer-file-chooser');
	          var grid = uiGridCtrl.grid;

	          if ( fileChooser.length !== 1 ){
	            gridUtil.logError('Found > 1 or < 1 file choosers within the menu item, error, cannot continue');
	          } else {
	            fileChooser[0].addEventListener('change', handleFileSelect, false);  // TODO: why the false on the end?  Google
	          }
	        }
	      };
	    }
	  ]);
	})();

	(function() {
	  'use strict';
	  /**
	   *  @ngdoc overview
	   *  @name ui.grid.infiniteScroll
	   *
	   *  @description
	   *
	   * #ui.grid.infiniteScroll
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides infinite scroll functionality to ui-grid
	   *
	   */
	  var module = angular.module('ui.grid.infiniteScroll', ['ui.grid']);
	  /**
	   *  @ngdoc service
	   *  @name ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	   *
	   *  @description Service for infinite scroll features
	   */
	  module.service('uiGridInfiniteScrollService', ['gridUtil', '$compile', '$timeout', 'uiGridConstants', 'ScrollEvent', '$q', function (gridUtil, $compile, $timeout, uiGridConstants, ScrollEvent, $q) {

	    var service = {

	      /**
	       * @ngdoc function
	       * @name initializeGrid
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description This method register events and methods into grid public API
	       */

	      initializeGrid: function(grid, $scope) {
	        service.defaultGridOptions(grid.options);

	        if (!grid.options.enableInfiniteScroll){
	          return;
	        }

	        grid.infiniteScroll = { dataLoading: false };
	        service.setScrollDirections( grid, grid.options.infiniteScrollUp, grid.options.infiniteScrollDown );
	          grid.api.core.on.scrollEnd($scope, service.handleScroll);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.infiniteScroll.api:PublicAPI
	         *
	         *  @description Public API for infinite scroll feature
	         */
	        var publicApi = {
	          events: {
	            infiniteScroll: {

	              /**
	               * @ngdoc event
	               * @name needLoadMoreData
	               * @eventOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description This event fires when scroll reaches bottom percentage of grid
	               * and needs to load data
	               */

	              needLoadMoreData: function ($scope, fn) {
	              },

	              /**
	               * @ngdoc event
	               * @name needLoadMoreDataTop
	               * @eventOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description This event fires when scroll reaches top percentage of grid
	               * and needs to load data
	               */

	              needLoadMoreDataTop: function ($scope, fn) {
	              }
	            }
	          },
	          methods: {
	            infiniteScroll: {

	              /**
	               * @ngdoc function
	               * @name dataLoaded
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Call this function when you have loaded the additional data
	               * requested.  You should set scrollUp and scrollDown to indicate
	               * whether there are still more pages in each direction.
	               *
	               * If you call dataLoaded without first calling `saveScrollPercentage` then we will
	               * scroll the user to the start of the newly loaded data, which usually gives a smooth scroll
	               * experience, but can give a jumpy experience with large `infiniteScrollRowsFromEnd` values, and
	               * on variable speed internet connections.  Using `saveScrollPercentage` as demonstrated in the tutorial
	               * should give a smoother scrolling experience for users.
	               *
	               * See infinite_scroll tutorial for example of usage
	               * @param {boolean} scrollUp if set to false flags that there are no more pages upwards, so don't fire
	               * any more infinite scroll events upward
	               * @param {boolean} scrollDown if set to false flags that there are no more pages downwards, so don't
	               * fire any more infinite scroll events downward
	               * @returns {promise} a promise that is resolved when the grid scrolling is fully adjusted.  If you're
	               * planning to remove pages, you should wait on this promise first, or you'll break the scroll positioning
	               */
	              dataLoaded: function( scrollUp, scrollDown ) {
	                service.setScrollDirections(grid, scrollUp, scrollDown);

	                var promise = service.adjustScroll(grid).then(function() {
	                  grid.infiniteScroll.dataLoading = false;
	                });

	                return promise;
	              },

	              /**
	               * @ngdoc function
	               * @name resetScroll
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Call this function when you have taken some action that makes the current
	               * scroll position invalid.  For example, if you're using external sorting and you've resorted
	               * then you might reset the scroll, or if you've otherwise substantially changed the data, perhaps
	               * you've reused an existing grid for a new data set
	               *
	               * You must tell us whether there is data upwards or downwards after the reset
	               *
	               * @param {boolean} scrollUp flag that there are pages upwards, fire
	               * infinite scroll events upward
	               * @param {boolean} scrollDown flag that there are pages downwards, so
	               * fire infinite scroll events downward
	               * @returns {promise} promise that is resolved when the scroll reset is complete
	               */
	              resetScroll: function( scrollUp, scrollDown ) {
	                service.setScrollDirections( grid, scrollUp, scrollDown);

	                return service.adjustInfiniteScrollPosition(grid, 0);
	              },


	              /**
	               * @ngdoc function
	               * @name saveScrollPercentage
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Saves the scroll percentage and number of visible rows before you adjust the data,
	               * used if you're subsequently going to call `dataRemovedTop` or `dataRemovedBottom`
	               */
	              saveScrollPercentage: function() {
	                grid.infiniteScroll.prevScrollTop = grid.renderContainers.body.prevScrollTop;
	                grid.infiniteScroll.previousVisibleRows = grid.getVisibleRowCount();
	              },


	              /**
	               * @ngdoc function
	               * @name dataRemovedTop
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Adjusts the scroll position after you've removed data at the top
	               * @param {boolean} scrollUp flag that there are pages upwards, fire
	               * infinite scroll events upward
	               * @param {boolean} scrollDown flag that there are pages downwards, so
	               * fire infinite scroll events downward
	               */
	              dataRemovedTop: function( scrollUp, scrollDown ) {
	                service.dataRemovedTop( grid, scrollUp, scrollDown );
	              },

	              /**
	               * @ngdoc function
	               * @name dataRemovedBottom
	               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	               * @description Adjusts the scroll position after you've removed data at the bottom
	               * @param {boolean} scrollUp flag that there are pages upwards, fire
	               * infinite scroll events upward
	               * @param {boolean} scrollDown flag that there are pages downwards, so
	               * fire infinite scroll events downward
	               */
	              dataRemovedBottom: function( scrollUp, scrollDown ) {
	                service.dataRemovedBottom( grid, scrollUp, scrollDown );
	              },

	              /**
	               * @ngdoc function
	               * @name setScrollDirections
	               * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	               * @description Sets the scrollUp and scrollDown flags, handling nulls and undefined,
	               * and also sets the grid.suppressParentScroll
	               * @param {boolean} scrollUp whether there are pages available up - defaults to false
	               * @param {boolean} scrollDown whether there are pages available down - defaults to true
	               */
	              setScrollDirections:  function ( scrollUp, scrollDown ) {
	                service.setScrollDirections( grid, scrollUp, scrollDown );
	              }

	            }
	          }
	        };
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },


	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.infiniteScroll.api:GridOptions
	         *
	         *  @description GridOptions for infinite scroll feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableInfiniteScroll
	         *  @propertyOf  ui.grid.infiniteScroll.api:GridOptions
	         *  @description Enable infinite scrolling for this grid
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableInfiniteScroll = gridOptions.enableInfiniteScroll !== false;

	        /**
	         * @ngdoc property
	         * @name infiniteScrollRowsFromEnd
	         * @propertyOf ui.grid.class:GridOptions
	         * @description This setting controls how close to the end of the dataset a user gets before
	         * more data is requested by the infinite scroll, whether scrolling up or down.  This allows you to
	         * 'prefetch' rows before the user actually runs out of scrolling.
	         *
	         * Note that if you set this value too high it may give jumpy scrolling behaviour, if you're getting
	         * this behaviour you could use the `saveScrollPercentageMethod` right before loading your data, and we'll
	         * preserve that scroll position
	         *
	         * <br> Defaults to 20
	         */
	        gridOptions.infiniteScrollRowsFromEnd = gridOptions.infiniteScrollRowsFromEnd || 20;

	        /**
	         * @ngdoc property
	         * @name infiniteScrollUp
	         * @propertyOf ui.grid.class:GridOptions
	         * @description Whether you allow infinite scroll up, implying that the first page of data
	         * you have displayed is in the middle of your data set.  If set to true then we trigger the
	         * needMoreDataTop event when the user hits the top of the scrollbar.
	         * <br> Defaults to false
	         */
	        gridOptions.infiniteScrollUp = gridOptions.infiniteScrollUp === true;

	        /**
	         * @ngdoc property
	         * @name infiniteScrollDown
	         * @propertyOf ui.grid.class:GridOptions
	         * @description Whether you allow infinite scroll down, implying that the first page of data
	         * you have displayed is in the middle of your data set.  If set to true then we trigger the
	         * needMoreData event when the user hits the bottom of the scrollbar.
	         * <br> Defaults to true
	         */
	        gridOptions.infiniteScrollDown = gridOptions.infiniteScrollDown !== false;
	      },


	      /**
	       * @ngdoc function
	       * @name setScrollDirections
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description Sets the scrollUp and scrollDown flags, handling nulls and undefined,
	       * and also sets the grid.suppressParentScroll
	       * @param {grid} grid the grid we're operating on
	       * @param {boolean} scrollUp whether there are pages available up - defaults to false
	       * @param {boolean} scrollDown whether there are pages available down - defaults to true
	       */
	      setScrollDirections:  function ( grid, scrollUp, scrollDown ) {
	        grid.infiniteScroll.scrollUp = ( scrollUp === true );
	        grid.suppressParentScrollUp = ( scrollUp === true );

	        grid.infiniteScroll.scrollDown = ( scrollDown !== false);
	        grid.suppressParentScrollDown = ( scrollDown !== false);
	      },


	      /**
	       * @ngdoc function
	       * @name handleScroll
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description Called whenever the grid scrolls, determines whether the scroll should
	       * trigger an infinite scroll request for more data
	       * @param {object} args the args from the event
	       */
	      handleScroll:  function (args) {
	        // don't request data if already waiting for data, or if source is coming from ui.grid.adjustInfiniteScrollPosition() function
	        if ( args.grid.infiniteScroll && args.grid.infiniteScroll.dataLoading || args.source === 'ui.grid.adjustInfiniteScrollPosition' ){
	          return;
	        }

	        if (args.y) {

	          // If the user is scrolling very quickly all the way to the top/bottom, the scroll handler can get confused
	          // about the direction. First we check if they've gone all the way, and data always is loaded in this case.
	          if (args.y.percentage === 0) {
	            args.grid.scrollDirection = uiGridConstants.scrollDirection.UP;
	            service.loadData(args.grid);
	          } else if (args.y.percentage === 1) {
	            args.grid.scrollDirection = uiGridConstants.scrollDirection.DOWN;
	            service.loadData(args.grid);
	          } else { // Scroll position is somewhere in between top/bottom, so determine whether it's far enough to load more data.
	            var percentage;
	            var targetPercentage = args.grid.options.infiniteScrollRowsFromEnd / args.grid.renderContainers.body.visibleRowCache.length;
	            if (args.grid.scrollDirection === uiGridConstants.scrollDirection.UP ) {
	              percentage = args.y.percentage;
	              if (percentage <= targetPercentage){
	                service.loadData(args.grid);
	              }
	            } else if (args.grid.scrollDirection === uiGridConstants.scrollDirection.DOWN) {
	              percentage = 1 - args.y.percentage;
	              if (percentage <= targetPercentage){
	                service.loadData(args.grid);
	              }
	            }
	          }
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name loadData
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection
	       * and whether there are more pages upwards or downwards.  It also stores the number of rows that we had previously,
	       * and clears out any saved scroll position so that we know whether or not the user calls `saveScrollPercentage`
	       * @param {Grid} grid the grid we're working on
	       */
	      loadData: function (grid) {
	        // save number of currently visible rows to calculate new scroll position later - we know that we want
	        // to be at approximately the row we're currently at
	        grid.infiniteScroll.previousVisibleRows = grid.renderContainers.body.visibleRowCache.length;
	        grid.infiniteScroll.direction = grid.scrollDirection;
	        delete grid.infiniteScroll.prevScrollTop;

	        if (grid.scrollDirection === uiGridConstants.scrollDirection.UP && grid.infiniteScroll.scrollUp ) {
	          grid.infiniteScroll.dataLoading = true;
	          grid.api.infiniteScroll.raise.needLoadMoreDataTop();
	        } else if (grid.scrollDirection === uiGridConstants.scrollDirection.DOWN && grid.infiniteScroll.scrollDown ) {
	          grid.infiniteScroll.dataLoading = true;
	          grid.api.infiniteScroll.raise.needLoadMoreData();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name adjustScroll
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description Once we are informed that data has been loaded, adjust the scroll position to account for that
	       * addition and to make things look clean.
	       *
	       * If we're scrolling up we scroll to the first row of the old data set -
	       * so we're assuming that you would have gotten to the top of the grid (from the 20% need more data trigger) by
	       * the time the data comes back.  If we're scrolling down we scoll to the last row of the old data set - so we're
	       * assuming that you would have gotten to the bottom of the grid (from the 80% need more data trigger) by the time
	       * the data comes back.
	       *
	       * Neither of these are good assumptions, but making this a smoother experience really requires
	       * that trigger to not be a percentage, and to be much closer to the end of the data (say, 5 rows off the end).  Even then
	       * it'd be better still to actually run into the end.  But if the data takes a while to come back, they may have scrolled
	       * somewhere else in the mean-time, in which case they'll get a jump back to the new data.  Anyway, this will do for
	       * now, until someone wants to do better.
	       * @param {Grid} grid the grid we're working on
	       * @returns {promise} a promise that is resolved when scrolling has finished
	       */
	      adjustScroll: function(grid){
	        var promise = $q.defer();
	        $timeout(function () {
	          var newPercentage, viewportHeight, rowHeight, newVisibleRows, oldTop, newTop;

	          viewportHeight = grid.getViewportHeight() + grid.headerHeight - grid.renderContainers.body.headerHeight - grid.scrollbarHeight;
	          rowHeight = grid.options.rowHeight;

	          if ( grid.infiniteScroll.direction === undefined ){
	            // called from initialize, tweak our scroll up a little
	            service.adjustInfiniteScrollPosition(grid, 0);
	          }

	          newVisibleRows = grid.getVisibleRowCount();

	          // in case not enough data is loaded to enable scroller - load more data
	          var canvasHeight = rowHeight * newVisibleRows;
	          if (grid.infiniteScroll.scrollDown && (viewportHeight > canvasHeight)) {
	            grid.api.infiniteScroll.raise.needLoadMoreData();
	          }

	          if ( grid.infiniteScroll.direction === uiGridConstants.scrollDirection.UP ){
	            oldTop = grid.infiniteScroll.prevScrollTop || 0;
	            newTop = oldTop + (newVisibleRows - grid.infiniteScroll.previousVisibleRows)*rowHeight;
	            service.adjustInfiniteScrollPosition(grid, newTop);
	            $timeout( function() {
	              promise.resolve();
	            });
	          }

	          if ( grid.infiniteScroll.direction === uiGridConstants.scrollDirection.DOWN ){
	            newTop = grid.infiniteScroll.prevScrollTop || (grid.infiniteScroll.previousVisibleRows*rowHeight - viewportHeight);
	            service.adjustInfiniteScrollPosition(grid, newTop);
	            $timeout( function() {
	              promise.resolve();
	            });
	          }
	        }, 0);

	        return promise.promise;
	      },


	      /**
	       * @ngdoc function
	       * @name adjustInfiniteScrollPosition
	       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
	       * @description This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection
	       * @param {Grid} grid the grid we're working on
	       * @param {number} scrollTop the position through the grid that we want to scroll to
	       * @returns {promise} a promise that is resolved when the scrolling finishes
	       */
	      adjustInfiniteScrollPosition: function (grid, scrollTop) {
	        var scrollEvent = new ScrollEvent(grid, null, null, 'ui.grid.adjustInfiniteScrollPosition'),
	          visibleRows = grid.getVisibleRowCount(),
	          viewportHeight = grid.getViewportHeight() + grid.headerHeight - grid.renderContainers.body.headerHeight - grid.scrollbarHeight,
	          rowHeight = grid.options.rowHeight,
	          scrollHeight = visibleRows*rowHeight-viewportHeight;

	        //for infinite scroll, if there are pages upwards then never allow it to be at the zero position so the up button can be active
	        if (scrollTop === 0 && grid.infiniteScroll.scrollUp) {
	          // using pixels results in a relative scroll, hence we have to use percentage
	          scrollEvent.y = {percentage: 1/scrollHeight};
	        }
	        else {
	          scrollEvent.y = {percentage: scrollTop/scrollHeight};
	        }
	        grid.scrollContainers('', scrollEvent);
	      },


	      /**
	       * @ngdoc function
	       * @name dataRemovedTop
	       * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	       * @description Adjusts the scroll position after you've removed data at the top. You should
	       * have called `saveScrollPercentage` before you remove the data, and if you're doing this in
	       * response to a `needMoreData` you should wait until the promise from `loadData` has resolved
	       * before you start removing data
	       * @param {Grid} grid the grid we're working on
	       * @param {boolean} scrollUp flag that there are pages upwards, fire
	       * infinite scroll events upward
	       * @param {boolean} scrollDown flag that there are pages downwards, so
	       * fire infinite scroll events downward
	       * @returns {promise} a promise that is resolved when the scrolling finishes
	       */
	      dataRemovedTop: function( grid, scrollUp, scrollDown ) {
	        var newVisibleRows, oldTop, newTop, rowHeight;
	        service.setScrollDirections( grid, scrollUp, scrollDown );

	        newVisibleRows = grid.renderContainers.body.visibleRowCache.length;
	        oldTop = grid.infiniteScroll.prevScrollTop;
	        rowHeight = grid.options.rowHeight;

	        // since we removed from the top, our new scroll row will be the old scroll row less the number
	        // of rows removed
	        newTop = oldTop - ( grid.infiniteScroll.previousVisibleRows - newVisibleRows )*rowHeight;

	        return service.adjustInfiniteScrollPosition( grid, newTop );
	      },

	      /**
	       * @ngdoc function
	       * @name dataRemovedBottom
	       * @methodOf ui.grid.infiniteScroll.api:PublicAPI
	       * @description Adjusts the scroll position after you've removed data at the bottom.  You should
	       * have called `saveScrollPercentage` before you remove the data, and if you're doing this in
	       * response to a `needMoreData` you should wait until the promise from `loadData` has resolved
	       * before you start removing data
	       * @param {Grid} grid the grid we're working on
	       * @param {boolean} scrollUp flag that there are pages upwards, fire
	       * infinite scroll events upward
	       * @param {boolean} scrollDown flag that there are pages downwards, so
	       * fire infinite scroll events downward
	       */
	      dataRemovedBottom: function( grid, scrollUp, scrollDown ) {
	        var newTop;
	        service.setScrollDirections( grid, scrollUp, scrollDown );

	        newTop = grid.infiniteScroll.prevScrollTop;

	        return service.adjustInfiniteScrollPosition( grid, newTop );
	      }
	    };
	    return service;
	  }]);
	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.infiniteScroll.directive:uiGridInfiniteScroll
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds infinite scroll features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.infiniteScroll']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Alex', car: 'Toyota' },
	            { name: 'Sam', car: 'Lexus' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name'},
	        {name: 'car'}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-infinite-scroll="20"></div>
	   </div>
	   </file>
	   </example>
	   */

	  module.directive('uiGridInfiniteScroll', ['uiGridInfiniteScrollService',
	    function (uiGridInfiniteScrollService) {
	      return {
	        priority: -200,
	        scope: false,
	        require: '^uiGrid',
	        compile: function($scope, $elm, $attr){
	          return {
	            pre: function($scope, $elm, $attr, uiGridCtrl) {
	              uiGridInfiniteScrollService.initializeGrid(uiGridCtrl.grid, $scope);
	            },
	            post: function($scope, $elm, $attr) {
	            }
	          };
	        }
	      };
	    }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.moveColumns
	   * @description
	   *
	   * # ui.grid.moveColumns
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides column moving capability to ui.grid. It enables to change the position of columns.
	   * <div doc-module-components="ui.grid.moveColumns"></div>
	   */
	  var module = angular.module('ui.grid.moveColumns', ['ui.grid']);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.moveColumns.service:uiGridMoveColumnService
	   *  @description Service for column moving feature.
	   */
	  module.service('uiGridMoveColumnService', ['$q', '$timeout', '$log', 'ScrollEvent', 'uiGridConstants', 'gridUtil', function ($q, $timeout, $log, ScrollEvent, uiGridConstants, gridUtil) {

	    var service = {
	      initializeGrid: function (grid) {
	        var self = this;
	        this.registerPublicApi(grid);
	        this.defaultGridOptions(grid.options);
	        grid.moveColumns = {orderCache: []}; // Used to cache the order before columns are rebuilt
	        grid.registerColumnBuilder(self.movableColumnBuilder);
	        grid.registerDataChangeCallback(self.verifyColumnOrder, [uiGridConstants.dataChange.COLUMN]);
	      },
	      registerPublicApi: function (grid) {
	        var self = this;
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.moveColumns.api:PublicApi
	         *  @description Public Api for column moving feature.
	         */
	        var publicApi = {
	          events: {
	            /**
	             * @ngdoc event
	             * @name columnPositionChanged
	             * @eventOf  ui.grid.moveColumns.api:PublicApi
	             * @description raised when column is moved
	             * <pre>
	             *      gridApi.colMovable.on.columnPositionChanged(scope,function(colDef, originalPosition, newPosition){})
	             * </pre>
	             * @param {object} colDef the column that was moved
	             * @param {integer} originalPosition of the column
	             * @param {integer} finalPosition of the column
	             */
	            colMovable: {
	              columnPositionChanged: function (colDef, originalPosition, newPosition) {
	              }
	            }
	          },
	          methods: {
	            /**
	             * @ngdoc method
	             * @name moveColumn
	             * @methodOf  ui.grid.moveColumns.api:PublicApi
	             * @description Method can be used to change column position.
	             * <pre>
	             *      gridApi.colMovable.moveColumn(oldPosition, newPosition)
	             * </pre>
	             * @param {integer} originalPosition of the column
	             * @param {integer} finalPosition of the column
	             */
	            colMovable: {
	              moveColumn: function (originalPosition, finalPosition) {
	                var columns = grid.columns;
	                if (!angular.isNumber(originalPosition) || !angular.isNumber(finalPosition)) {
	                  gridUtil.logError('MoveColumn: Please provide valid values for originalPosition and finalPosition');
	                  return;
	                }
	                var nonMovableColumns = 0;
	                for (var i = 0; i < columns.length; i++) {
	                  if ((angular.isDefined(columns[i].colDef.visible) && columns[i].colDef.visible === false) || columns[i].isRowHeader === true) {
	                    nonMovableColumns++;
	                  }
	                }
	                if (originalPosition >= (columns.length - nonMovableColumns) || finalPosition >= (columns.length - nonMovableColumns)) {
	                  gridUtil.logError('MoveColumn: Invalid values for originalPosition, finalPosition');
	                  return;
	                }
	                var findPositionForRenderIndex = function (index) {
	                  var position = index;
	                  for (var i = 0; i <= position; i++) {
	                    if (angular.isDefined(columns[i]) && ((angular.isDefined(columns[i].colDef.visible) && columns[i].colDef.visible === false) || columns[i].isRowHeader === true)) {
	                      position++;
	                    }
	                  }
	                  return position;
	                };
	                self.redrawColumnAtPosition(grid, findPositionForRenderIndex(originalPosition), findPositionForRenderIndex(finalPosition));
	              }
	            }
	          }
	        };
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },
	      defaultGridOptions: function (gridOptions) {
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.moveColumns.api:GridOptions
	         *
	         *  @description Options for configuring the move column feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */
	        /**
	         *  @ngdoc object
	         *  @name enableColumnMoving
	         *  @propertyOf  ui.grid.moveColumns.api:GridOptions
	         *  @description If defined, sets the default value for the colMovable flag on each individual colDefs
	         *  if their individual enableColumnMoving configuration is not defined. Defaults to true.
	         */
	        gridOptions.enableColumnMoving = gridOptions.enableColumnMoving !== false;
	      },
	      movableColumnBuilder: function (colDef, col, gridOptions) {
	        var promises = [];
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.moveColumns.api:ColumnDef
	         *
	         *  @description Column Definition for move column feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	         */
	        /**
	         *  @ngdoc object
	         *  @name enableColumnMoving
	         *  @propertyOf  ui.grid.moveColumns.api:ColumnDef
	         *  @description Enable column moving for the column.
	         */
	        colDef.enableColumnMoving = colDef.enableColumnMoving === undefined ? gridOptions.enableColumnMoving
	          : colDef.enableColumnMoving;
	        return $q.all(promises);
	      },
	      /**
	       * @ngdoc method
	       * @name updateColumnCache
	       * @methodOf  ui.grid.moveColumns
	       * @description Cache the current order of columns, so we can restore them after new columnDefs are defined
	       */
	      updateColumnCache: function(grid){
	        grid.moveColumns.orderCache = grid.getOnlyDataColumns();
	      },
	      /**
	       * @ngdoc method
	       * @name verifyColumnOrder
	       * @methodOf  ui.grid.moveColumns
	       * @description dataChangeCallback which uses the cached column order to restore the column order
	       * when it is reset by altering the columnDefs array.
	       */
	      verifyColumnOrder: function(grid){
	        var headerRowOffset = grid.rowHeaderColumns.length;
	        var newIndex;

	        angular.forEach(grid.moveColumns.orderCache, function(cacheCol, cacheIndex){
	          newIndex = grid.columns.indexOf(cacheCol);
	          if ( newIndex !== -1 && newIndex - headerRowOffset !== cacheIndex ){
	            var column = grid.columns.splice(newIndex, 1)[0];
	            grid.columns.splice(cacheIndex + headerRowOffset, 0, column);
	          }
	        });
	      },
	      redrawColumnAtPosition: function (grid, originalPosition, newPosition) {
	        var columns = grid.columns;

	        if (originalPosition === newPosition) {
	          return;
	        }

	        //check columns in between move-range to make sure they are visible columns
	        var i0 = Math.min(originalPosition, newPosition);
	        for (i0; i0 < Math.max(originalPosition, newPosition);i0++) {
	          if (columns[i0].visible) {
	            break;
	          }
	        }
	        if (i0 === Math.max(originalPosition, newPosition)) {
	          //no visible column found, column did not visibly move
	          return;
	        }

	        var originalColumn = columns[originalPosition];
	        if (originalColumn.colDef.enableColumnMoving) {
	          if (originalPosition > newPosition) {
	            for (var i1 = originalPosition; i1 > newPosition; i1--) {
	              columns[i1] = columns[i1 - 1];
	            }
	          }
	          else if (newPosition > originalPosition) {
	            for (var i2 = originalPosition; i2 < newPosition; i2++) {
	              columns[i2] = columns[i2 + 1];
	            }
	          }
	          columns[newPosition] = originalColumn;
	          service.updateColumnCache(grid);
	          grid.queueGridRefresh();
	          $timeout(function () {
	            grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
	            grid.api.colMovable.raise.columnPositionChanged(originalColumn.colDef, originalPosition, newPosition);
	          });
	        }
	      }
	    };
	    return service;
	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.moveColumns.directive:uiGridMoveColumns
	   *  @element div
	   *  @restrict A
	   *  @description Adds column moving features to the ui-grid directive.
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.moveColumns']);
	   app.controller('MainCtrl', ['$scope', function ($scope) {
	        $scope.data = [
	          { name: 'Bob', title: 'CEO', age: 45 },
	          { name: 'Frank', title: 'Lowly Developer', age: 25 },
	          { name: 'Jenny', title: 'Highly Developer', age: 35 }
	        ];
	        $scope.columnDefs = [
	          {name: 'name'},
	          {name: 'title'},
	          {name: 'age'}
	        ];
	      }]);
	   </file>
	   <file name="main.css">
	   .grid {
	      width: 100%;
	      height: 150px;
	    }
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div class="grid" ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-move-columns></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridMoveColumns', ['uiGridMoveColumnService', function (uiGridMoveColumnService) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridMoveColumnService.initializeGrid(uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.moveColumns.directive:uiGridHeaderCell
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Stacks on top of ui.grid.uiGridHeaderCell to provide capability to be able to move it to reposition column.
	   *
	   *  On receiving mouseDown event headerCell is cloned, now as the mouse moves the cloned header cell also moved in the grid.
	   *  In case the moving cloned header cell reaches the left or right extreme of grid, grid scrolling is triggered (if horizontal scroll exists).
	   *  On mouseUp event column is repositioned at position where mouse is released and cloned header cell is removed.
	   *
	   *  Events that invoke cloning of header cell:
	   *    - mousedown
	   *
	   *  Events that invoke movement of cloned header cell:
	   *    - mousemove
	   *
	   *  Events that invoke repositioning of column:
	   *    - mouseup
	   */
	  module.directive('uiGridHeaderCell', ['$q', 'gridUtil', 'uiGridMoveColumnService', '$document', '$log', 'uiGridConstants', 'ScrollEvent',
	    function ($q, gridUtil, uiGridMoveColumnService, $document, $log, uiGridConstants, ScrollEvent) {
	      return {
	        priority: -10,
	        require: '^uiGrid',
	        compile: function () {
	          return {
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {

	              if ($scope.col.colDef.enableColumnMoving) {

	                /*
	                 * Our general approach to column move is that we listen to a touchstart or mousedown
	                 * event over the column header.  When we hear one, then we wait for a move of the same type
	                 * - if we are a touchstart then we listen for a touchmove, if we are a mousedown we listen for
	                 * a mousemove (i.e. a drag) before we decide that there's a move underway.  If there's never a move,
	                 * and we instead get a mouseup or a touchend, then we just drop out again and do nothing.
	                 *
	                 */
	                var $contentsElm = angular.element( $elm[0].querySelectorAll('.ui-grid-cell-contents') );

	                var gridLeft;
	                var previousMouseX;
	                var totalMouseMovement;
	                var rightMoveLimit;
	                var elmCloned = false;
	                var movingElm;
	                var reducedWidth;
	                var moveOccurred = false;

	                var downFn = function( event ){
	                  //Setting some variables required for calculations.
	                  gridLeft = $scope.grid.element[0].getBoundingClientRect().left;
	                  if ( $scope.grid.hasLeftContainer() ){
	                    gridLeft += $scope.grid.renderContainers.left.header[0].getBoundingClientRect().width;
	                  }

	                  previousMouseX = event.pageX;
	                  totalMouseMovement = 0;
	                  rightMoveLimit = gridLeft + $scope.grid.getViewportWidth();

	                  if ( event.type === 'mousedown' ){
	                    $document.on('mousemove', moveFn);
	                    $document.on('mouseup', upFn);
	                  } else if ( event.type === 'touchstart' ){
	                    $document.on('touchmove', moveFn);
	                    $document.on('touchend', upFn);
	                  }
	                };

	                var moveFn = function( event ) {
	                  var changeValue = event.pageX - previousMouseX;
	                  if ( changeValue === 0 ){ return; }
	                  //Disable text selection in Chrome during column move
	                  document.onselectstart = function() { return false; };

	                  moveOccurred = true;

	                  if (!elmCloned) {
	                    cloneElement();
	                  }
	                  else if (elmCloned) {
	                    moveElement(changeValue);
	                    previousMouseX = event.pageX;
	                  }
	                };

	                var upFn = function( event ){
	                  //Re-enable text selection after column move
	                  document.onselectstart = null;

	                  //Remove the cloned element on mouse up.
	                  if (movingElm) {
	                    movingElm.remove();
	                    elmCloned = false;
	                  }

	                  offAllEvents();
	                  onDownEvents();

	                  if (!moveOccurred){
	                    return;
	                  }

	                  var columns = $scope.grid.columns;
	                  var columnIndex = 0;
	                  for (var i = 0; i < columns.length; i++) {
	                    if (columns[i].colDef.name !== $scope.col.colDef.name) {
	                      columnIndex++;
	                    }
	                    else {
	                      break;
	                    }
	                  }

	                  var targetIndex;

	                  //Case where column should be moved to a position on its left
	                  if (totalMouseMovement < 0) {
	                    var totalColumnsLeftWidth = 0;
	                    var il;
	                    if ( $scope.grid.isRTL() ){
	                      for (il = columnIndex + 1; il < columns.length; il++) {
	                        if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
	                          totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
	                          if (totalColumnsLeftWidth > Math.abs(totalMouseMovement)) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, il - 1);
	                            break;
	                          }
	                        }
	                      }
	                    }
	                    else {
	                      for (il = columnIndex - 1; il >= 0; il--) {
	                        if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
	                          totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
	                          if (totalColumnsLeftWidth > Math.abs(totalMouseMovement)) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, il + 1);
	                            break;
	                          }
	                        }
	                      }
	                    }

	                    //Case where column should be moved to beginning (or end in RTL) of the grid.
	                    if (totalColumnsLeftWidth < Math.abs(totalMouseMovement)) {
	                      targetIndex = 0;
	                      if ( $scope.grid.isRTL() ){
	                        targetIndex = columns.length - 1;
	                      }
	                      uiGridMoveColumnService.redrawColumnAtPosition
	                      ($scope.grid, columnIndex, targetIndex);
	                    }
	                  }

	                  //Case where column should be moved to a position on its right
	                  else if (totalMouseMovement > 0) {
	                    var totalColumnsRightWidth = 0;
	                    var ir;
	                    if ( $scope.grid.isRTL() ){
	                      for (ir = columnIndex - 1; ir > 0; ir--) {
	                        if (angular.isUndefined(columns[ir].colDef.visible) || columns[ir].colDef.visible === true) {
	                          totalColumnsRightWidth += columns[ir].drawnWidth || columns[ir].width || columns[ir].colDef.width;
	                          if (totalColumnsRightWidth > totalMouseMovement) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, ir);
	                            break;
	                          }
	                        }
	                      }
	                    }
	                    else {
	                      for (ir = columnIndex + 1; ir < columns.length; ir++) {
	                        if (angular.isUndefined(columns[ir].colDef.visible) || columns[ir].colDef.visible === true) {
	                          totalColumnsRightWidth += columns[ir].drawnWidth || columns[ir].width || columns[ir].colDef.width;
	                          if (totalColumnsRightWidth > totalMouseMovement) {
	                            uiGridMoveColumnService.redrawColumnAtPosition
	                            ($scope.grid, columnIndex, ir - 1);
	                            break;
	                          }
	                        }
	                      }
	                    }


	                    //Case where column should be moved to end (or beginning in RTL) of the grid.
	                    if (totalColumnsRightWidth < totalMouseMovement) {
	                      targetIndex = columns.length - 1;
	                      if ( $scope.grid.isRTL() ){
	                        targetIndex = 0;
	                      }
	                      uiGridMoveColumnService.redrawColumnAtPosition
	                      ($scope.grid, columnIndex, targetIndex);
	                    }
	                  }



	                };

	                var onDownEvents = function(){
	                  $contentsElm.on('touchstart', downFn);
	                  $contentsElm.on('mousedown', downFn);
	                };

	                var offAllEvents = function() {
	                  $contentsElm.off('touchstart', downFn);
	                  $contentsElm.off('mousedown', downFn);

	                  $document.off('mousemove', moveFn);
	                  $document.off('touchmove', moveFn);

	                  $document.off('mouseup', upFn);
	                  $document.off('touchend', upFn);
	                };

	                onDownEvents();


	                var cloneElement = function () {
	                  elmCloned = true;

	                  //Cloning header cell and appending to current header cell.
	                  movingElm = $elm.clone();
	                  $elm.parent().append(movingElm);

	                  //Left of cloned element should be aligned to original header cell.
	                  movingElm.addClass('movingColumn');
	                  var movingElementStyles = {};
	                  movingElementStyles.left = $elm[0].offsetLeft + 'px';
	                  var gridRight = $scope.grid.element[0].getBoundingClientRect().right;
	                  var elmRight = $elm[0].getBoundingClientRect().right;
	                  if (elmRight > gridRight) {
	                    reducedWidth = $scope.col.drawnWidth + (gridRight - elmRight);
	                    movingElementStyles.width = reducedWidth + 'px';
	                  }
	                  movingElm.css(movingElementStyles);
	                };

	                var moveElement = function (changeValue) {
	                  //Calculate total column width
	                  var columns = $scope.grid.columns;
	                  var totalColumnWidth = 0;
	                  for (var i = 0; i < columns.length; i++) {
	                    if (angular.isUndefined(columns[i].colDef.visible) || columns[i].colDef.visible === true) {
	                      totalColumnWidth += columns[i].drawnWidth || columns[i].width || columns[i].colDef.width;
	                    }
	                  }

	                  //Calculate new position of left of column
	                  var currentElmLeft = movingElm[0].getBoundingClientRect().left - 1;
	                  var currentElmRight = movingElm[0].getBoundingClientRect().right;
	                  var newElementLeft;

	                  newElementLeft = currentElmLeft - gridLeft + changeValue;
	                  newElementLeft = newElementLeft < rightMoveLimit ? newElementLeft : rightMoveLimit;

	                  //Update css of moving column to adjust to new left value or fire scroll in case column has reached edge of grid
	                  if ((currentElmLeft >= gridLeft || changeValue > 0) && (currentElmRight <= rightMoveLimit || changeValue < 0)) {
	                    movingElm.css({visibility: 'visible', 'left': (movingElm[0].offsetLeft +
	                    (newElementLeft < rightMoveLimit ? changeValue : (rightMoveLimit - currentElmLeft))) + 'px'});
	                  }
	                  else if (totalColumnWidth > Math.ceil(uiGridCtrl.grid.gridWidth)) {
	                    changeValue *= 8;
	                    var scrollEvent = new ScrollEvent($scope.col.grid, null, null, 'uiGridHeaderCell.moveElement');
	                    scrollEvent.x = {pixels: changeValue};
	                    scrollEvent.grid.scrollContainers('',scrollEvent);
	                  }

	                  //Calculate total width of columns on the left of the moving column and the mouse movement
	                  var totalColumnsLeftWidth = 0;
	                  for (var il = 0; il < columns.length; il++) {
	                    if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
	                      if (columns[il].colDef.name !== $scope.col.colDef.name) {
	                        totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
	                      }
	                      else {
	                        break;
	                      }
	                    }
	                  }
	                  if ($scope.newScrollLeft === undefined) {
	                    totalMouseMovement += changeValue;
	                  }
	                  else {
	                    totalMouseMovement = $scope.newScrollLeft + newElementLeft - totalColumnsLeftWidth;
	                  }

	                  //Increase width of moving column, in case the rightmost column was moved and its width was
	                  //decreased because of overflow
	                  if (reducedWidth < $scope.col.drawnWidth) {
	                    reducedWidth += Math.abs(changeValue);
	                    movingElm.css({'width': reducedWidth + 'px'});
	                  }
	                };
	              }
	            }
	          };
	        }
	      };
	    }]);
	})();

	(function() {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.pagination
	   *
	   * @description
	   *
	   * # ui.grid.pagination
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides pagination support to ui-grid
	   */
	  var module = angular.module('ui.grid.pagination', ['ng', 'ui.grid']);

	  /**
	   * @ngdoc service
	   * @name ui.grid.pagination.service:uiGridPaginationService
	   *
	   * @description Service for the pagination feature
	   */
	  module.service('uiGridPaginationService', ['gridUtil',
	    function (gridUtil) {
	      var service = {
	        /**
	         * @ngdoc method
	         * @name initializeGrid
	         * @methodOf ui.grid.pagination.service:uiGridPaginationService
	         * @description Attaches the service to a certain grid
	         * @param {Grid} grid The grid we want to work with
	         */
	        initializeGrid: function (grid) {
	          service.defaultGridOptions(grid.options);

	          /**
	          * @ngdoc object
	          * @name ui.grid.pagination.api:PublicAPI
	          *
	          * @description Public API for the pagination feature
	          */
	          var publicApi = {
	            events: {
	              pagination: {
	              /**
	               * @ngdoc event
	               * @name paginationChanged
	               * @eventOf ui.grid.pagination.api:PublicAPI
	               * @description This event fires when the pageSize or currentPage changes
	               * @param {int} currentPage requested page number
	               * @param {int} pageSize requested page size
	               */
	                paginationChanged: function (currentPage, pageSize) { }
	              }
	            },
	            methods: {
	              pagination: {
	                /**
	                 * @ngdoc method
	                 * @name getPage
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Returns the number of the current page
	                 */
	                getPage: function () {
	                  return grid.options.enablePagination ? grid.options.paginationCurrentPage : null;
	                },
	                /**
	                 * @ngdoc method
	                 * @name getTotalPages
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Returns the total number of pages
	                 */
	                getTotalPages: function () {
	                  if (!grid.options.enablePagination) {
	                    return null;
	                  }

	                  return (grid.options.totalItems === 0) ? 1 : Math.ceil(grid.options.totalItems / grid.options.paginationPageSize);
	                },
	                /**
	                 * @ngdoc method
	                 * @name nextPage
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Moves to the next page, if possible
	                 */
	                nextPage: function () {
	                  if (!grid.options.enablePagination) {
	                    return;
	                  }

	                  if (grid.options.totalItems > 0) {
	                    grid.options.paginationCurrentPage = Math.min(
	                      grid.options.paginationCurrentPage + 1,
	                      publicApi.methods.pagination.getTotalPages()
	                    );
	                  } else {
	                    grid.options.paginationCurrentPage++;
	                  }
	                },
	                /**
	                 * @ngdoc method
	                 * @name previousPage
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Moves to the previous page, if we're not on the first page
	                 */
	                previousPage: function () {
	                  if (!grid.options.enablePagination) {
	                    return;
	                  }

	                  grid.options.paginationCurrentPage = Math.max(grid.options.paginationCurrentPage - 1, 1);
	                },
	                /**
	                 * @ngdoc method
	                 * @name seek
	                 * @methodOf ui.grid.pagination.api:PublicAPI
	                 * @description Moves to the requested page
	                 * @param {int} page The number of the page that should be displayed
	                 */
	                seek: function (page) {
	                  if (!grid.options.enablePagination) {
	                    return;
	                  }
	                  if (!angular.isNumber(page) || page < 1) {
	                    throw 'Invalid page number: ' + page;
	                  }

	                  grid.options.paginationCurrentPage = Math.min(page, publicApi.methods.pagination.getTotalPages());
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);
	          grid.api.registerMethodsFromObject(publicApi.methods);

	          var processPagination = function( renderableRows ){
	            if (grid.options.useExternalPagination || !grid.options.enablePagination) {
	              return renderableRows;
	            }
	            //client side pagination
	            var pageSize = parseInt(grid.options.paginationPageSize, 10);
	            var currentPage = parseInt(grid.options.paginationCurrentPage, 10);

	            var visibleRows = renderableRows.filter(function (row) { return row.visible; });
	            grid.options.totalItems = visibleRows.length;

	            var firstRow = (currentPage - 1) * pageSize;
	            if (firstRow > visibleRows.length) {
	              currentPage = grid.options.paginationCurrentPage = 1;
	              firstRow = (currentPage - 1) * pageSize;
	            }
	            return visibleRows.slice(firstRow, firstRow + pageSize);
	          };

	          grid.registerRowsProcessor(processPagination, 900 );

	        },
	        defaultGridOptions: function (gridOptions) {
	          /**
	           * @ngdoc object
	           * @name ui.grid.pagination.api:GridOptions
	           *
	           * @description GridOptions for the pagination feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           * @ngdoc property
	           * @name enablePagination
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Enables pagination.  Defaults to true.
	           */
	          gridOptions.enablePagination = gridOptions.enablePagination !== false;
	          /**
	           * @ngdoc property
	           * @name enablePaginationControls
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Enables the paginator at the bottom of the grid. Turn this off if you want to implement your
	           *              own controls outside the grid.
	           */
	          gridOptions.enablePaginationControls = gridOptions.enablePaginationControls !== false;
	          /**
	           * @ngdoc property
	           * @name useExternalPagination
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Disables client side pagination. When true, handle the paginationChanged event and set data
	           *              and totalItems.  Defaults to `false`
	           */
	          gridOptions.useExternalPagination = gridOptions.useExternalPagination === true;
	          /**
	           * @ngdoc property
	           * @name totalItems
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Total number of items, set automatically when using client side pagination, but needs set by user
	           *              for server side pagination
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.totalItems)) {
	            gridOptions.totalItems = 0;
	          }
	          /**
	           * @ngdoc property
	           * @name paginationPageSizes
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Array of page sizes, defaults to `[250, 500, 1000]`
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationPageSizes)) {
	            gridOptions.paginationPageSizes = [250, 500, 1000];
	          }
	          /**
	           * @ngdoc property
	           * @name paginationPageSize
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Page size, defaults to the first item in paginationPageSizes, or 0 if paginationPageSizes is empty
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationPageSize)) {
	            if (gridOptions.paginationPageSizes.length > 0) {
	              gridOptions.paginationPageSize = gridOptions.paginationPageSizes[0];
	            } else {
	              gridOptions.paginationPageSize = 0;
	            }
	          }
	          /**
	           * @ngdoc property
	           * @name paginationCurrentPage
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description Current page number, defaults to 1
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationCurrentPage)) {
	            gridOptions.paginationCurrentPage = 1;
	          }

	          /**
	           * @ngdoc property
	           * @name paginationTemplate
	           * @propertyOf ui.grid.pagination.api:GridOptions
	           * @description A custom template for the pager, defaults to `ui-grid/pagination`
	           */
	          if (gridUtil.isNullOrUndefined(gridOptions.paginationTemplate)) {
	            gridOptions.paginationTemplate = 'ui-grid/pagination';
	          }
	        },
	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.pagination.service:uiGridPaginationService
	         * @name uiGridPaginationService
	         * @description  Raises paginationChanged and calls refresh for client side pagination
	         * @param {Grid} grid the grid for which the pagination changed
	         * @param {int} currentPage requested page number
	         * @param {int} pageSize requested page size
	         */
	        onPaginationChanged: function (grid, currentPage, pageSize) {
	            grid.api.pagination.raise.paginationChanged(currentPage, pageSize);
	            if (!grid.options.useExternalPagination) {
	              grid.queueGridRefresh(); //client side pagination
	            }
	        }
	      };

	      return service;
	    }
	  ]);
	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.pagination.directive:uiGridPagination
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds pagination features to grid
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.pagination']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Alex', car: 'Toyota' },
	        { name: 'Sam', car: 'Lexus' },
	        { name: 'Joe', car: 'Dodge' },
	        { name: 'Bob', car: 'Buick' },
	        { name: 'Cindy', car: 'Ford' },
	        { name: 'Brian', car: 'Audi' },
	        { name: 'Malcom', car: 'Mercedes Benz' },
	        { name: 'Dave', car: 'Ford' },
	        { name: 'Stacey', car: 'Audi' },
	        { name: 'Amy', car: 'Acura' },
	        { name: 'Scott', car: 'Toyota' },
	        { name: 'Ryan', car: 'BMW' },
	      ];

	      $scope.gridOptions = {
	        data: 'data',
	        paginationPageSizes: [5, 10, 25],
	        paginationPageSize: 5,
	        columnDefs: [
	          {name: 'name'},
	          {name: 'car'}
	        ]
	       }
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-pagination></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridPagination', ['gridUtil', 'uiGridPaginationService',
	    function (gridUtil, uiGridPaginationService) {
	      return {
	        priority: -200,
	        scope: false,
	        require: 'uiGrid',
	        link: {
	          pre: function ($scope, $elm, $attr, uiGridCtrl) {
	            uiGridPaginationService.initializeGrid(uiGridCtrl.grid);

	            gridUtil.getTemplate(uiGridCtrl.grid.options.paginationTemplate)
	              .then(function (contents) {
	                var template = angular.element(contents);
	                $elm.append(template);
	                uiGridCtrl.innerCompile(template);
	              });
	          }
	        }
	      };
	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.pagination.directive:uiGridPager
	   *  @element div
	   *
	   *  @description Panel for handling pagination
	   */
	  module.directive('uiGridPager', ['uiGridPaginationService', 'uiGridConstants', 'gridUtil', 'i18nService',
	    function (uiGridPaginationService, uiGridConstants, gridUtil, i18nService) {
	      return {
	        priority: -200,
	        scope: true,
	        require: '^uiGrid',
	        link: function ($scope, $elm, $attr, uiGridCtrl) {
	          var defaultFocusElementSelector = '.ui-grid-pager-control-input';
	          $scope.aria = i18nService.getSafeText('pagination.aria'); //Returns an object with all of the aria labels

	          $scope.paginationApi = uiGridCtrl.grid.api.pagination;
	          $scope.sizesLabel = i18nService.getSafeText('pagination.sizes');
	          $scope.totalItemsLabel = i18nService.getSafeText('pagination.totalItems');
	          $scope.paginationOf = i18nService.getSafeText('pagination.of');
	          $scope.paginationThrough = i18nService.getSafeText('pagination.through');

	          var options = uiGridCtrl.grid.options;

	          uiGridCtrl.grid.renderContainers.body.registerViewportAdjuster(function (adjustment) {
	            adjustment.height = adjustment.height - gridUtil.elementHeight($elm, "padding");
	            return adjustment;
	          });

	          var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback(function (grid) {
	            if (!grid.options.useExternalPagination) {
	              grid.options.totalItems = grid.rows.length;
	            }
	          }, [uiGridConstants.dataChange.ROW]);

	          $scope.$on('$destroy', dataChangeDereg);

	          var setShowing = function () {
	            $scope.showingLow = ((options.paginationCurrentPage - 1) * options.paginationPageSize) + 1;
	            $scope.showingHigh = Math.min(options.paginationCurrentPage * options.paginationPageSize, options.totalItems);
	          };

	          var deregT = $scope.$watch('grid.options.totalItems + grid.options.paginationPageSize', setShowing);

	          var deregP = $scope.$watch('grid.options.paginationCurrentPage + grid.options.paginationPageSize', function (newValues, oldValues) {
	              if (newValues === oldValues || oldValues === undefined) {
	                return;
	              }

	              if (!angular.isNumber(options.paginationCurrentPage) || options.paginationCurrentPage < 1) {
	                options.paginationCurrentPage = 1;
	                return;
	              }

	              if (options.totalItems > 0 && options.paginationCurrentPage > $scope.paginationApi.getTotalPages()) {
	                options.paginationCurrentPage = $scope.paginationApi.getTotalPages();
	                return;
	              }

	              setShowing();
	              uiGridPaginationService.onPaginationChanged($scope.grid, options.paginationCurrentPage, options.paginationPageSize);
	            }
	          );

	          $scope.$on('$destroy', function() {
	            deregT();
	            deregP();
	          });

	          $scope.cantPageForward = function () {
	            if (options.totalItems > 0) {
	              return options.paginationCurrentPage >= $scope.paginationApi.getTotalPages();
	            } else {
	              return options.data.length < 1;
	            }
	          };

	          $scope.cantPageToLast = function () {
	            if (options.totalItems > 0) {
	              return $scope.cantPageForward();
	            } else {
	              return true;
	            }
	          };

	          $scope.cantPageBackward = function () {
	            return options.paginationCurrentPage <= 1;
	          };

	          var focusToInputIf = function(condition){
	            if (condition){
	              gridUtil.focus.bySelector($elm, defaultFocusElementSelector);
	            }
	          };

	          //Takes care of setting focus to the middle element when focus is lost
	          $scope.pageFirstPageClick = function () {
	            $scope.paginationApi.seek(1);
	            focusToInputIf($scope.cantPageBackward());
	          };

	          $scope.pagePreviousPageClick = function () {
	            $scope.paginationApi.previousPage();
	            focusToInputIf($scope.cantPageBackward());
	          };

	          $scope.pageNextPageClick = function () {
	            $scope.paginationApi.nextPage();
	            focusToInputIf($scope.cantPageForward());
	          };

	          $scope.pageLastPageClick = function () {
	            $scope.paginationApi.seek($scope.paginationApi.getTotalPages());
	            focusToInputIf($scope.cantPageToLast());
	          };

	        }
	      };
	    }
	  ]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.pinning
	   * @description
	   *
	   * # ui.grid.pinning
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides column pinning to the end user via menu options in the column header
	   *
	   * <div doc-module-components="ui.grid.pinning"></div>
	   */

	  var module = angular.module('ui.grid.pinning', ['ui.grid']);

	  module.constant('uiGridPinningConstants', {
	    container: {
	      LEFT: 'left',
	      RIGHT: 'right',
	      NONE: ''
	    }
	  });

	  module.service('uiGridPinningService', ['gridUtil', 'GridRenderContainer', 'i18nService', 'uiGridPinningConstants', function (gridUtil, GridRenderContainer, i18nService, uiGridPinningConstants) {
	    var service = {

	      initializeGrid: function (grid) {
	        service.defaultGridOptions(grid.options);

	        // Register a column builder to add new menu items for pinning left and right
	        grid.registerColumnBuilder(service.pinningColumnBuilder);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.pinning.api:PublicApi
	         *
	         *  @description Public Api for pinning feature
	         */
	        var publicApi = {
	          events: {
	            pinning: {
	              /**
	               * @ngdoc event
	               * @name columnPin
	               * @eventOf ui.grid.pinning.api:PublicApi
	               * @description raised when column pin state has changed
	               * <pre>
	               *   gridApi.pinning.on.columnPinned(scope, function(colDef){})
	               * </pre>
	               * @param {object} colDef the column that was changed
	               * @param {string} container the render container the column is in ('left', 'right', '')
	               */
	              columnPinned: function(colDef, container) {
	              }
	            }
	          },
	          methods: {
	            pinning: {
	              /**
	               * @ngdoc function
	               * @name pinColumn
	               * @methodOf ui.grid.pinning.api:PublicApi
	               * @description pin column left, right, or none
	               * <pre>
	               *   gridApi.pinning.pinColumn(col, uiGridPinningConstants.container.LEFT)
	               * </pre>
	               * @param {gridColumn} col the column being pinned
	               * @param {string} container one of the recognised types
	               * from uiGridPinningConstants
	               */
	              pinColumn: function(col, container) {
	                service.pinColumn(grid, col, container);
	              }
	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },

	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.pinning.api:GridOptions
	         *
	         *  @description GridOptions for pinning feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enablePinning
	         *  @propertyOf  ui.grid.pinning.api:GridOptions
	         *  @description Enable pinning for the entire grid.
	         *  <br/>Defaults to true
	         */
	        gridOptions.enablePinning = gridOptions.enablePinning !== false;

	      },

	      pinningColumnBuilder: function (colDef, col, gridOptions) {
	        //default to true unless gridOptions or colDef is explicitly false

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.pinning.api:ColumnDef
	         *
	         *  @description ColumnDef for pinning feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	         */

	        /**
	         *  @ngdoc object
	         *  @name enablePinning
	         *  @propertyOf  ui.grid.pinning.api:ColumnDef
	         *  @description Enable pinning for the individual column.
	         *  <br/>Defaults to true
	         */
	        colDef.enablePinning = colDef.enablePinning === undefined ? gridOptions.enablePinning : colDef.enablePinning;


	        /**
	         *  @ngdoc object
	         *  @name pinnedLeft
	         *  @propertyOf  ui.grid.pinning.api:ColumnDef
	         *  @description Column is pinned left when grid is rendered
	         *  <br/>Defaults to false
	         */

	        /**
	         *  @ngdoc object
	         *  @name pinnedRight
	         *  @propertyOf  ui.grid.pinning.api:ColumnDef
	         *  @description Column is pinned right when grid is rendered
	         *  <br/>Defaults to false
	         */
	        if (colDef.pinnedLeft) {
	          col.renderContainer = 'left';
	          col.grid.createLeftContainer();
	        }
	        else if (colDef.pinnedRight) {
	          col.renderContainer = 'right';
	          col.grid.createRightContainer();
	        }

	        if (!colDef.enablePinning) {
	          return;
	        }

	        var pinColumnLeftAction = {
	          name: 'ui.grid.pinning.pinLeft',
	          title: i18nService.get().pinning.pinLeft,
	          icon: 'ui-grid-icon-left-open',
	          shown: function () {
	            return typeof(this.context.col.renderContainer) === 'undefined' || !this.context.col.renderContainer || this.context.col.renderContainer !== 'left';
	          },
	          action: function () {
	            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.LEFT);
	          }
	        };

	        var pinColumnRightAction = {
	          name: 'ui.grid.pinning.pinRight',
	          title: i18nService.get().pinning.pinRight,
	          icon: 'ui-grid-icon-right-open',
	          shown: function () {
	            return typeof(this.context.col.renderContainer) === 'undefined' || !this.context.col.renderContainer || this.context.col.renderContainer !== 'right';
	          },
	          action: function () {
	            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.RIGHT);
	          }
	        };

	        var removePinAction = {
	          name: 'ui.grid.pinning.unpin',
	          title: i18nService.get().pinning.unpin,
	          icon: 'ui-grid-icon-cancel',
	          shown: function () {
	            return typeof(this.context.col.renderContainer) !== 'undefined' && this.context.col.renderContainer !== null && this.context.col.renderContainer !== 'body';
	          },
	          action: function () {
	            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.NONE);
	          }
	        };

	        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.pinLeft')) {
	          col.menuItems.push(pinColumnLeftAction);
	        }
	        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.pinRight')) {
	          col.menuItems.push(pinColumnRightAction);
	        }
	        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.unpin')) {
	          col.menuItems.push(removePinAction);
	        }
	      },

	      pinColumn: function(grid, col, container) {
	        if (container === uiGridPinningConstants.container.NONE) {
	          col.renderContainer = null;
	          col.colDef.pinnedLeft = col.colDef.pinnedRight = false;
	        }
	        else {
	          col.renderContainer = container;
	          if (container === uiGridPinningConstants.container.LEFT) {
	            grid.createLeftContainer();
	          }
	          else if (container === uiGridPinningConstants.container.RIGHT) {
	            grid.createRightContainer();
	          }
	        }

	        grid.refresh()
	        .then(function() {
	          grid.api.pinning.raise.columnPinned( col.colDef, container );
	        });
	      }
	    };

	    return service;
	  }]);

	  module.directive('uiGridPinning', ['gridUtil', 'uiGridPinningService',
	    function (gridUtil, uiGridPinningService) {
	      return {
	        require: 'uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              uiGridPinningService.initializeGrid(uiGridCtrl.grid);
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            }
	          };
	        }
	      };
	    }]);


	})();

	(function(){
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.resizeColumns
	   * @description
	   *
	   * # ui.grid.resizeColumns
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module allows columns to be resized.
	   */
	  var module = angular.module('ui.grid.resizeColumns', ['ui.grid']);

	  module.service('uiGridResizeColumnsService', ['gridUtil', '$q', '$timeout',
	    function (gridUtil, $q, $timeout) {

	      var service = {
	        defaultGridOptions: function(gridOptions){
	          //default option to true unless it was explicitly set to false
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.resizeColumns.api:GridOptions
	           *
	           *  @description GridOptions for resizeColumns feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableColumnResizing
	           *  @propertyOf  ui.grid.resizeColumns.api:GridOptions
	           *  @description Enable column resizing on the entire grid
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableColumnResizing = gridOptions.enableColumnResizing !== false;

	          //legacy support
	          //use old name if it is explicitly false
	          if (gridOptions.enableColumnResize === false){
	            gridOptions.enableColumnResizing = false;
	          }
	        },

	        colResizerColumnBuilder: function (colDef, col, gridOptions) {

	          var promises = [];
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.resizeColumns.api:ColumnDef
	           *
	           *  @description ColumnDef for resizeColumns feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableColumnResizing
	           *  @propertyOf  ui.grid.resizeColumns.api:ColumnDef
	           *  @description Enable column resizing on an individual column
	           *  <br/>Defaults to GridOptions.enableColumnResizing
	           */
	          //default to true unless gridOptions or colDef is explicitly false
	          colDef.enableColumnResizing = colDef.enableColumnResizing === undefined ? gridOptions.enableColumnResizing : colDef.enableColumnResizing;


	          //legacy support of old option name
	          if (colDef.enableColumnResize === false){
	            colDef.enableColumnResizing = false;
	          }

	          return $q.all(promises);
	        },

	        registerPublicApi: function (grid) {
	            /**
	             *  @ngdoc object
	             *  @name ui.grid.resizeColumns.api:PublicApi
	             *  @description Public Api for column resize feature.
	             */
	            var publicApi = {
	              events: {
	                /**
	                 * @ngdoc event
	                 * @name columnSizeChanged
	                 * @eventOf  ui.grid.resizeColumns.api:PublicApi
	                 * @description raised when column is resized
	                 * <pre>
	                 *      gridApi.colResizable.on.columnSizeChanged(scope,function(colDef, deltaChange){})
	                 * </pre>
	                 * @param {object} colDef the column that was resized
	                 * @param {integer} delta of the column size change
	                 */
	                colResizable: {
	                  columnSizeChanged: function (colDef, deltaChange) {
	                  }
	                }
	              }
	            };
	            grid.api.registerEventsFromObject(publicApi.events);
	        },

	        fireColumnSizeChanged: function (grid, colDef, deltaChange) {
	          $timeout(function () {
	            if ( grid.api.colResizable ){
	              grid.api.colResizable.raise.columnSizeChanged(colDef, deltaChange);
	            } else {
	              gridUtil.logError("The resizeable api is not registered, this may indicate that you've included the module but not added the 'ui-grid-resize-columns' directive to your grid definition.  Cannot raise any events.");
	            }
	          });
	        },

	        // get either this column, or the column next to this column, to resize,
	        // returns the column we're going to resize
	        findTargetCol: function(col, position, rtlMultiplier){
	          var renderContainer = col.getRenderContainer();

	          if (position === 'left') {
	            // Get the column to the left of this one
	            var colIndex = renderContainer.visibleColumnCache.indexOf(col);
	            return renderContainer.visibleColumnCache[colIndex - 1 * rtlMultiplier];
	          } else {
	            return col;
	          }
	        }

	      };

	      return service;

	    }]);


	  /**
	   * @ngdoc directive
	   * @name ui.grid.resizeColumns.directive:uiGridResizeColumns
	   * @element div
	   * @restrict A
	   * @description
	   * Enables resizing for all columns on the grid. If, for some reason, you want to use the ui-grid-resize-columns directive, but not allow column resizing, you can explicitly set the
	   * option to false. This prevents resizing for the entire grid, regardless of individual columnDef options.
	   *
	   * @example
	   <doc:example module="app">
	   <doc:source>
	   <script>
	   var app = angular.module('app', ['ui.grid', 'ui.grid.resizeColumns']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.gridOpts = {
	            data: [
	              { "name": "Ethel Price", "gender": "female", "company": "Enersol" },
	              { "name": "Claudine Neal", "gender": "female", "company": "Sealoud" },
	              { "name": "Beryl Rice", "gender": "female", "company": "Velity" },
	              { "name": "Wilder Gonzales", "gender": "male", "company": "Geekko" }
	            ]
	          };
	        }]);
	   </script>

	   <div ng-controller="MainCtrl">
	   <div class="testGrid" ui-grid="gridOpts" ui-grid-resize-columns ></div>
	   </div>
	   </doc:source>
	   <doc:scenario>

	   </doc:scenario>
	   </doc:example>
	   */
	  module.directive('uiGridResizeColumns', ['gridUtil', 'uiGridResizeColumnsService', function (gridUtil, uiGridResizeColumnsService) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridResizeColumnsService.defaultGridOptions(uiGridCtrl.grid.options);
	            uiGridCtrl.grid.registerColumnBuilder( uiGridResizeColumnsService.colResizerColumnBuilder);
	            uiGridResizeColumnsService.registerPublicApi(uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);

	  // Extend the uiGridHeaderCell directive
	  module.directive('uiGridHeaderCell', ['gridUtil', '$templateCache', '$compile', '$q', 'uiGridResizeColumnsService', 'uiGridConstants', '$timeout', function (gridUtil, $templateCache, $compile, $q, uiGridResizeColumnsService, uiGridConstants, $timeout) {
	    return {
	      // Run after the original uiGridHeaderCell
	      priority: -10,
	      require: '^uiGrid',
	      // scope: false,
	      compile: function() {
	        return {
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	            var grid = uiGridCtrl.grid;

	            if (grid.options.enableColumnResizing) {
	              var columnResizerElm = $templateCache.get('ui-grid/columnResizer');

	              var rtlMultiplier = 1;
	              //when in RTL mode reverse the direction using the rtlMultiplier and change the position to left
	              if (grid.isRTL()) {
	                $scope.position = 'left';
	                rtlMultiplier = -1;
	              }

	              var displayResizers = function(){

	                // remove any existing resizers.
	                var resizers = $elm[0].getElementsByClassName('ui-grid-column-resizer');
	                for ( var i = 0; i < resizers.length; i++ ){
	                  angular.element(resizers[i]).remove();
	                }

	                // get the target column for the left resizer
	                var otherCol = uiGridResizeColumnsService.findTargetCol($scope.col, 'left', rtlMultiplier);
	                var renderContainer = $scope.col.getRenderContainer();

	                // Don't append the left resizer if this is the first column or the column to the left of this one has resizing disabled
	                if (otherCol && renderContainer.visibleColumnCache.indexOf($scope.col) !== 0 && otherCol.colDef.enableColumnResizing !== false) {
	                  var resizerLeft = angular.element(columnResizerElm).clone();
	                  resizerLeft.attr('position', 'left');

	                  $elm.prepend(resizerLeft);
	                  $compile(resizerLeft)($scope);
	                }

	                // Don't append the right resizer if this column has resizing disabled
	                if ($scope.col.colDef.enableColumnResizing !== false) {
	                  var resizerRight = angular.element(columnResizerElm).clone();
	                  resizerRight.attr('position', 'right');

	                  $elm.append(resizerRight);
	                  $compile(resizerRight)($scope);
	                }
	              };

	              displayResizers();

	              var waitDisplay = function(){
	                $timeout(displayResizers);
	              };

	              var dataChangeDereg = grid.registerDataChangeCallback( waitDisplay, [uiGridConstants.dataChange.COLUMN] );

	              $scope.$on( '$destroy', dataChangeDereg );
	            }
	          }
	        };
	      }
	    };
	  }]);



	  /**
	   * @ngdoc directive
	   * @name ui.grid.resizeColumns.directive:uiGridColumnResizer
	   * @element div
	   * @restrict A
	   *
	   * @description
	   * Draggable handle that controls column resizing.
	   *
	   * @example
	   <doc:example module="app">
	     <doc:source>
	       <script>
	        var app = angular.module('app', ['ui.grid', 'ui.grid.resizeColumns']);

	        app.controller('MainCtrl', ['$scope', function ($scope) {
	          $scope.gridOpts = {
	            enableColumnResizing: true,
	            data: [
	              { "name": "Ethel Price", "gender": "female", "company": "Enersol" },
	              { "name": "Claudine Neal", "gender": "female", "company": "Sealoud" },
	              { "name": "Beryl Rice", "gender": "female", "company": "Velity" },
	              { "name": "Wilder Gonzales", "gender": "male", "company": "Geekko" }
	            ]
	          };
	        }]);
	       </script>

	       <div ng-controller="MainCtrl">
	        <div class="testGrid" ui-grid="gridOpts"></div>
	       </div>
	     </doc:source>
	     <doc:scenario>
	      // TODO: e2e specs?

	      // TODO: post-resize a horizontal scroll event should be fired
	     </doc:scenario>
	   </doc:example>
	   */
	  module.directive('uiGridColumnResizer', ['$document', 'gridUtil', 'uiGridConstants', 'uiGridResizeColumnsService', function ($document, gridUtil, uiGridConstants, uiGridResizeColumnsService) {
	    var resizeOverlay = angular.element('<div class="ui-grid-resize-overlay"></div>');

	    var resizer = {
	      priority: 0,
	      scope: {
	        col: '=',
	        position: '@',
	        renderIndex: '='
	      },
	      require: '?^uiGrid',
	      link: function ($scope, $elm, $attrs, uiGridCtrl) {
	        var startX = 0,
	            x = 0,
	            gridLeft = 0,
	            rtlMultiplier = 1;

	        //when in RTL mode reverse the direction using the rtlMultiplier and change the position to left
	        if (uiGridCtrl.grid.isRTL()) {
	          $scope.position = 'left';
	          rtlMultiplier = -1;
	        }

	        if ($scope.position === 'left') {
	          $elm.addClass('left');
	        }
	        else if ($scope.position === 'right') {
	          $elm.addClass('right');
	        }

	        // Refresh the grid canvas
	        //   takes an argument representing the diff along the X-axis that the resize had
	        function refreshCanvas(xDiff) {
	          // Then refresh the grid canvas, rebuilding the styles so that the scrollbar updates its size
	          uiGridCtrl.grid.refreshCanvas(true).then( function() {
	            uiGridCtrl.grid.queueGridRefresh();
	          });
	        }

	        // Check that the requested width isn't wider than the maxWidth, or narrower than the minWidth
	        // Returns the new recommended with, after constraints applied
	        function constrainWidth(col, width){
	          var newWidth = width;

	          // If the new width would be less than the column's allowably minimum width, don't allow it
	          if (col.minWidth && newWidth < col.minWidth) {
	            newWidth = col.minWidth;
	          }
	          else if (col.maxWidth && newWidth > col.maxWidth) {
	            newWidth = col.maxWidth;
	          }

	          return newWidth;
	        }


	        /*
	         * Our approach to event handling aims to deal with both touch devices and mouse devices
	         * We register down handlers on both touch and mouse.  When a touchstart or mousedown event
	         * occurs, we register the corresponding touchmove/touchend, or mousemove/mouseend events.
	         *
	         * This way we can listen for both without worrying about the fact many touch devices also emulate
	         * mouse events - basically whichever one we hear first is what we'll go with.
	         */
	        function moveFunction(event, args) {
	          if (event.originalEvent) { event = event.originalEvent; }
	          event.preventDefault();

	          x = (event.targetTouches ? event.targetTouches[0] : event).clientX - gridLeft;

	          if (x < 0) { x = 0; }
	          else if (x > uiGridCtrl.grid.gridWidth) { x = uiGridCtrl.grid.gridWidth; }

	          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

	          // Don't resize if it's disabled on this column
	          if (col.colDef.enableColumnResizing === false) {
	            return;
	          }

	          if (!uiGridCtrl.grid.element.hasClass('column-resizing')) {
	            uiGridCtrl.grid.element.addClass('column-resizing');
	          }

	          // Get the diff along the X axis
	          var xDiff = x - startX;

	          // Get the width that this mouse would give the column
	          var newWidth = parseInt(col.drawnWidth + xDiff * rtlMultiplier, 10);

	          // check we're not outside the allowable bounds for this column
	          x = x + ( constrainWidth(col, newWidth) - newWidth ) * rtlMultiplier;

	          resizeOverlay.css({ left: x + 'px' });

	          uiGridCtrl.fireEvent(uiGridConstants.events.ITEM_DRAGGING);
	        }


	        function upFunction(event, args) {
	          if (event.originalEvent) { event = event.originalEvent; }
	          event.preventDefault();

	          uiGridCtrl.grid.element.removeClass('column-resizing');

	          resizeOverlay.remove();

	          // Resize the column
	          x = (event.changedTouches ? event.changedTouches[0] : event).clientX - gridLeft;
	          var xDiff = x - startX;

	          if (xDiff === 0) {
	            // no movement, so just reset event handlers, including turning back on both
	            // down events - we turned one off when this event started
	            offAllEvents();
	            onDownEvents();
	            return;
	          }

	          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

	          // Don't resize if it's disabled on this column
	          if (col.colDef.enableColumnResizing === false) {
	            return;
	          }

	          // Get the new width
	          var newWidth = parseInt(col.drawnWidth + xDiff * rtlMultiplier, 10);

	          // check we're not outside the allowable bounds for this column
	          col.width = constrainWidth(col, newWidth);
	          col.hasCustomWidth = true;

	          refreshCanvas(xDiff);

	          uiGridResizeColumnsService.fireColumnSizeChanged(uiGridCtrl.grid, col.colDef, xDiff);

	          // stop listening of up and move events - wait for next down
	          // reset the down events - we will have turned one off when this event started
	          offAllEvents();
	          onDownEvents();
	        }


	        var downFunction = function(event, args) {
	          if (event.originalEvent) { event = event.originalEvent; }
	          event.stopPropagation();

	          // Get the left offset of the grid
	          // gridLeft = uiGridCtrl.grid.element[0].offsetLeft;
	          gridLeft = uiGridCtrl.grid.element[0].getBoundingClientRect().left;

	          // Get the starting X position, which is the X coordinate of the click minus the grid's offset
	          startX = (event.targetTouches ? event.targetTouches[0] : event).clientX - gridLeft;

	          // Append the resizer overlay
	          uiGridCtrl.grid.element.append(resizeOverlay);

	          // Place the resizer overlay at the start position
	          resizeOverlay.css({ left: startX });

	          // Add handlers for move and up events - if we were mousedown then we listen for mousemove and mouseup, if
	          // we were touchdown then we listen for touchmove and touchup.  Also remove the handler for the equivalent
	          // down event - so if we're touchdown, then remove the mousedown handler until this event is over, if we're
	          // mousedown then remove the touchdown handler until this event is over, this avoids processing duplicate events
	          if ( event.type === 'touchstart' ){
	            $document.on('touchend', upFunction);
	            $document.on('touchmove', moveFunction);
	            $elm.off('mousedown', downFunction);
	          } else {
	            $document.on('mouseup', upFunction);
	            $document.on('mousemove', moveFunction);
	            $elm.off('touchstart', downFunction);
	          }
	        };

	        var onDownEvents = function() {
	          $elm.on('mousedown', downFunction);
	          $elm.on('touchstart', downFunction);
	        };

	        var offAllEvents = function() {
	          $document.off('mouseup', upFunction);
	          $document.off('touchend', upFunction);
	          $document.off('mousemove', moveFunction);
	          $document.off('touchmove', moveFunction);
	          $elm.off('mousedown', downFunction);
	          $elm.off('touchstart', downFunction);
	        };

	        onDownEvents();


	        // On doubleclick, resize to fit all rendered cells
	        var dblClickFn = function(event, args){
	          event.stopPropagation();

	          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

	          // Don't resize if it's disabled on this column
	          if (col.colDef.enableColumnResizing === false) {
	            return;
	          }

	          // Go through the rendered rows and find out the max size for the data in this column
	          var maxWidth = 0;
	          var xDiff = 0;

	          // Get the parent render container element
	          var renderContainerElm = gridUtil.closestElm($elm, '.ui-grid-render-container');

	          // Get the cell contents so we measure correctly. For the header cell we have to account for the sort icon and the menu buttons, if present
	          var cells = renderContainerElm.querySelectorAll('.' + uiGridConstants.COL_CLASS_PREFIX + col.uid + ' .ui-grid-cell-contents');
	          Array.prototype.forEach.call(cells, function (cell) {
	              // Get the cell width
	              // gridUtil.logDebug('width', gridUtil.elementWidth(cell));

	              // Account for the menu button if it exists
	              var menuButton;
	              if (angular.element(cell).parent().hasClass('ui-grid-header-cell')) {
	                menuButton = angular.element(cell).parent()[0].querySelectorAll('.ui-grid-column-menu-button');
	              }

	              gridUtil.fakeElement(cell, {}, function(newElm) {
	                // Make the element float since it's a div and can expand to fill its container
	                var e = angular.element(newElm);
	                e.attr('style', 'float: left');

	                var width = gridUtil.elementWidth(e);

	                if (menuButton) {
	                  var menuButtonWidth = gridUtil.elementWidth(menuButton);
	                  width = width + menuButtonWidth;
	                }

	                if (width > maxWidth) {
	                  maxWidth = width;
	                  xDiff = maxWidth - width;
	                }
	              });
	            });

	          // check we're not outside the allowable bounds for this column
	          col.width = constrainWidth(col, maxWidth);
	          col.hasCustomWidth = true;

	          refreshCanvas(xDiff);

	          uiGridResizeColumnsService.fireColumnSizeChanged(uiGridCtrl.grid, col.colDef, xDiff);        };
	        $elm.on('dblclick', dblClickFn);

	        $elm.on('$destroy', function() {
	          $elm.off('dblclick', dblClickFn);
	          offAllEvents();
	        });
	      }
	    };

	    return resizer;
	  }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.rowEdit
	   * @description
	   *
	   * # ui.grid.rowEdit
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module extends the edit feature to provide tracking and saving of rows
	   * of data.  The tutorial provides more information on how this feature is best
	   * used {@link tutorial/205_row_editable here}.
	   * <br/>
	   * This feature depends on usage of the ui-grid-edit feature, and also benefits
	   * from use of ui-grid-cellNav to provide the full spreadsheet-like editing
	   * experience
	   *
	   */

	  var module = angular.module('ui.grid.rowEdit', ['ui.grid', 'ui.grid.edit', 'ui.grid.cellNav']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.rowEdit.constant:uiGridRowEditConstants
	   *
	   *  @description constants available in row edit module
	   */
	  module.constant('uiGridRowEditConstants', {
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.rowEdit.service:uiGridRowEditService
	   *
	   *  @description Services for row editing features
	   */
	  module.service('uiGridRowEditService', ['$interval', '$q', 'uiGridConstants', 'uiGridRowEditConstants', 'gridUtil',
	    function ($interval, $q, uiGridConstants, uiGridRowEditConstants, gridUtil) {

	      var service = {

	        initializeGrid: function (scope, grid) {
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.rowEdit.api:PublicApi
	           *
	           *  @description Public Api for rowEdit feature
	           */

	          grid.rowEdit = {};

	          var publicApi = {
	            events: {
	              rowEdit: {
	                /**
	                 * @ngdoc event
	                 * @eventOf ui.grid.rowEdit.api:PublicApi
	                 * @name saveRow
	                 * @description raised when a row is ready for saving.  Once your
	                 * row has saved you may need to use angular.extend to update the
	                 * data entity with any changed data from your save (for example,
	                 * lock version information if you're using optimistic locking,
	                 * or last update time/user information).
	                 *
	                 * Your method should call setSavePromise somewhere in the body before
	                 * returning control.  The feature will then wait, with the gridRow greyed out
	                 * whilst this promise is being resolved.
	                 *
	                 * <pre>
	                 *      gridApi.rowEdit.on.saveRow(scope,function(rowEntity){})
	                 * </pre>
	                 * and somewhere within the event handler:
	                 * <pre>
	                 *      gridApi.rowEdit.setSavePromise( rowEntity, savePromise)
	                 * </pre>
	                 * @param {object} rowEntity the options.data element that was edited
	                 * @returns {promise} Your saveRow method should return a promise, the
	                 * promise should either be resolved (implying successful save), or
	                 * rejected (implying an error).
	                 */
	                saveRow: function (rowEntity) {
	                }
	              }
	            },
	            methods: {
	              rowEdit: {
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name setSavePromise
	                 * @description Sets the promise associated with the row save, mandatory that
	                 * the saveRow event handler calls this method somewhere before returning.
	                 * <pre>
	                 *      gridApi.rowEdit.setSavePromise(rowEntity, savePromise)
	                 * </pre>
	                 * @param {object} rowEntity a data row from the grid for which a save has
	                 * been initiated
	                 * @param {promise} savePromise the promise that will be resolved when the
	                 * save is successful, or rejected if the save fails
	                 *
	                 */
	                setSavePromise: function ( rowEntity, savePromise) {
	                  service.setSavePromise(grid, rowEntity, savePromise);
	                },
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name getDirtyRows
	                 * @description Returns all currently dirty rows
	                 * <pre>
	                 *      gridApi.rowEdit.getDirtyRows(grid)
	                 * </pre>
	                 * @returns {array} An array of gridRows that are currently dirty
	                 *
	                 */
	                getDirtyRows: function () {
	                  return grid.rowEdit.dirtyRows ? grid.rowEdit.dirtyRows : [];
	                },
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name getErrorRows
	                 * @description Returns all currently errored rows
	                 * <pre>
	                 *      gridApi.rowEdit.getErrorRows(grid)
	                 * </pre>
	                 * @returns {array} An array of gridRows that are currently in error
	                 *
	                 */
	                getErrorRows: function () {
	                  return grid.rowEdit.errorRows ? grid.rowEdit.errorRows : [];
	                },
	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name flushDirtyRows
	                 * @description Triggers a save event for all currently dirty rows, could
	                 * be used where user presses a save button or navigates away from the page
	                 * <pre>
	                 *      gridApi.rowEdit.flushDirtyRows(grid)
	                 * </pre>
	                 * @returns {promise} a promise that represents the aggregate of all
	                 * of the individual save promises - i.e. it will be resolved when all
	                 * the individual save promises have been resolved.
	                 *
	                 */
	                flushDirtyRows: function () {
	                  return service.flushDirtyRows(grid);
	                },

	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name setRowsDirty
	                 * @description Sets each of the rows passed in dataRows
	                 * to be dirty.  note that if you have only just inserted the
	                 * rows into your data you will need to wait for a $digest cycle
	                 * before the gridRows are present - so often you would wrap this
	                 * call in a $interval or $timeout
	                 * <pre>
	                 *      $interval( function() {
	                 *        gridApi.rowEdit.setRowsDirty(myDataRows);
	                 *      }, 0, 1);
	                 * </pre>
	                 * @param {array} dataRows the data entities for which the gridRows
	                 * should be set dirty.
	                 *
	                 */
	                setRowsDirty: function ( dataRows) {
	                  service.setRowsDirty(grid, dataRows);
	                },

	                /**
	                 * @ngdoc method
	                 * @methodOf ui.grid.rowEdit.api:PublicApi
	                 * @name setRowsClean
	                 * @description Sets each of the rows passed in dataRows
	                 * to be clean, removing them from the dirty cache and the error cache,
	                 * and clearing the error flag and the dirty flag
	                 * <pre>
	                 *      var gridRows = $scope.gridApi.rowEdit.getDirtyRows();
	                 *      var dataRows = gridRows.map( function( gridRow ) { return gridRow.entity; });
	                 *      $scope.gridApi.rowEdit.setRowsClean( dataRows );
	                 * </pre>
	                 * @param {array} dataRows the data entities for which the gridRows
	                 * should be set clean.
	                 *
	                 */
	                setRowsClean: function ( dataRows) {
	                  service.setRowsClean(grid, dataRows);
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);
	          grid.api.registerMethodsFromObject(publicApi.methods);

	          grid.api.core.on.renderingComplete( scope, function ( gridApi ) {
	            grid.api.edit.on.afterCellEdit( scope, service.endEditCell );
	            grid.api.edit.on.beginCellEdit( scope, service.beginEditCell );
	            grid.api.edit.on.cancelCellEdit( scope, service.cancelEditCell );

	            if ( grid.api.cellNav ) {
	              grid.api.cellNav.on.navigate( scope, service.navigate );
	            }
	          });

	        },

	        defaultGridOptions: function (gridOptions) {

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.rowEdit.api:GridOptions
	           *
	           *  @description Options for configuring the rowEdit feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name saveRow
	         * @description  Returns a function that saves the specified row from the grid,
	         * and returns a promise
	         * @param {object} grid the grid for which dirty rows should be flushed
	         * @param {GridRow} gridRow the row that should be saved
	         * @returns {function} the saveRow function returns a function.  That function
	         * in turn, when called, returns a promise relating to the save callback
	         */
	        saveRow: function ( grid, gridRow ) {
	          var self = this;

	          return function() {
	            gridRow.isSaving = true;

	            if ( gridRow.rowEditSavePromise ){
	              // don't save the row again if it's already saving - that causes stale object exceptions
	              return gridRow.rowEditSavePromise;
	            }

	            var promise = grid.api.rowEdit.raise.saveRow( gridRow.entity );

	            if ( gridRow.rowEditSavePromise ){
	              gridRow.rowEditSavePromise.then( self.processSuccessPromise( grid, gridRow ), self.processErrorPromise( grid, gridRow ));
	            } else {
	              gridUtil.logError( 'A promise was not returned when saveRow event was raised, either nobody is listening to event, or event handler did not return a promise' );
	            }
	            return promise;
	          };
	        },


	        /**
	         * @ngdoc method
	         * @methodOf  ui.grid.rowEdit.service:uiGridRowEditService
	         * @name setSavePromise
	         * @description Sets the promise associated with the row save, mandatory that
	         * the saveRow event handler calls this method somewhere before returning.
	         * <pre>
	         *      gridApi.rowEdit.setSavePromise(grid, rowEntity)
	         * </pre>
	         * @param {object} grid the grid for which dirty rows should be returned
	         * @param {object} rowEntity a data row from the grid for which a save has
	         * been initiated
	         * @param {promise} savePromise the promise that will be resolved when the
	         * save is successful, or rejected if the save fails
	         *
	         */
	        setSavePromise: function (grid, rowEntity, savePromise) {
	          var gridRow = grid.getRow( rowEntity );
	          gridRow.rowEditSavePromise = savePromise;
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name processSuccessPromise
	         * @description  Returns a function that processes the successful
	         * resolution of a save promise
	         * @param {object} grid the grid for which the promise should be processed
	         * @param {GridRow} gridRow the row that has been saved
	         * @returns {function} the success handling function
	         */
	        processSuccessPromise: function ( grid, gridRow ) {
	          var self = this;

	          return function() {
	            delete gridRow.isSaving;
	            delete gridRow.isDirty;
	            delete gridRow.isError;
	            delete gridRow.rowEditSaveTimer;
	            delete gridRow.rowEditSavePromise;
	            self.removeRow( grid.rowEdit.errorRows, gridRow );
	            self.removeRow( grid.rowEdit.dirtyRows, gridRow );
	          };
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name processErrorPromise
	         * @description  Returns a function that processes the failed
	         * resolution of a save promise
	         * @param {object} grid the grid for which the promise should be processed
	         * @param {GridRow} gridRow the row that is now in error
	         * @returns {function} the error handling function
	         */
	        processErrorPromise: function ( grid, gridRow ) {
	          return function() {
	            delete gridRow.isSaving;
	            delete gridRow.rowEditSaveTimer;
	            delete gridRow.rowEditSavePromise;

	            gridRow.isError = true;

	            if (!grid.rowEdit.errorRows){
	              grid.rowEdit.errorRows = [];
	            }
	            if (!service.isRowPresent( grid.rowEdit.errorRows, gridRow ) ){
	              grid.rowEdit.errorRows.push( gridRow );
	            }
	          };
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name removeRow
	         * @description  Removes a row from a cache of rows - either
	         * grid.rowEdit.errorRows or grid.rowEdit.dirtyRows.  If the row
	         * is not present silently does nothing.
	         * @param {array} rowArray the array from which to remove the row
	         * @param {GridRow} gridRow the row that should be removed
	         */
	        removeRow: function( rowArray, removeGridRow ){
	          if (typeof(rowArray) === 'undefined' || rowArray === null){
	            return;
	          }

	          rowArray.forEach( function( gridRow, index ){
	            if ( gridRow.uid === removeGridRow.uid ){
	              rowArray.splice( index, 1);
	            }
	          });
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name isRowPresent
	         * @description  Checks whether a row is already present
	         * in the given array
	         * @param {array} rowArray the array in which to look for the row
	         * @param {GridRow} gridRow the row that should be looked for
	         */
	        isRowPresent: function( rowArray, removeGridRow ){
	          var present = false;
	          rowArray.forEach( function( gridRow, index ){
	            if ( gridRow.uid === removeGridRow.uid ){
	              present = true;
	            }
	          });
	          return present;
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name flushDirtyRows
	         * @description Triggers a save event for all currently dirty rows, could
	         * be used where user presses a save button or navigates away from the page
	         * <pre>
	         *      gridApi.rowEdit.flushDirtyRows(grid)
	         * </pre>
	         * @param {object} grid the grid for which dirty rows should be flushed
	         * @returns {promise} a promise that represents the aggregate of all
	         * of the individual save promises - i.e. it will be resolved when all
	         * the individual save promises have been resolved.
	         *
	         */
	        flushDirtyRows: function(grid){
	          var promises = [];
	          grid.api.rowEdit.getDirtyRows().forEach( function( gridRow ){
	            service.saveRow( grid, gridRow )();
	            promises.push( gridRow.rowEditSavePromise );
	          });

	          return $q.all( promises );
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name endEditCell
	         * @description Receives an afterCellEdit event from the edit function,
	         * and sets flags as appropriate.  Only the rowEntity parameter
	         * is processed, although other params are available.  Grid
	         * is automatically provided by the gridApi.
	         * @param {object} rowEntity the data entity for which the cell
	         * was edited
	         */
	        endEditCell: function( rowEntity, colDef, newValue, previousValue ){
	          var grid = this.grid;
	          var gridRow = grid.getRow( rowEntity );
	          if ( !gridRow ){ gridUtil.logError( 'Unable to find rowEntity in grid data, dirty flag cannot be set' ); return; }

	          if ( newValue !== previousValue || gridRow.isDirty ){
	            if ( !grid.rowEdit.dirtyRows ){
	              grid.rowEdit.dirtyRows = [];
	            }

	            if ( !gridRow.isDirty ){
	              gridRow.isDirty = true;
	              grid.rowEdit.dirtyRows.push( gridRow );
	            }

	            delete gridRow.isError;

	            service.considerSetTimer( grid, gridRow );
	          }
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name beginEditCell
	         * @description Receives a beginCellEdit event from the edit function,
	         * and cancels any rowEditSaveTimers if present, as the user is still editing
	         * this row.  Only the rowEntity parameter
	         * is processed, although other params are available.  Grid
	         * is automatically provided by the gridApi.
	         * @param {object} rowEntity the data entity for which the cell
	         * editing has commenced
	         */
	        beginEditCell: function( rowEntity, colDef ){
	          var grid = this.grid;
	          var gridRow = grid.getRow( rowEntity );
	          if ( !gridRow ){ gridUtil.logError( 'Unable to find rowEntity in grid data, timer cannot be cancelled' ); return; }

	          service.cancelTimer( grid, gridRow );
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name cancelEditCell
	         * @description Receives a cancelCellEdit event from the edit function,
	         * and if the row was already dirty, restarts the save timer.  If the row
	         * was not already dirty, then it's not dirty now either and does nothing.
	         *
	         * Only the rowEntity parameter
	         * is processed, although other params are available.  Grid
	         * is automatically provided by the gridApi.
	         *
	         * @param {object} rowEntity the data entity for which the cell
	         * editing was cancelled
	         */
	        cancelEditCell: function( rowEntity, colDef ){
	          var grid = this.grid;
	          var gridRow = grid.getRow( rowEntity );
	          if ( !gridRow ){ gridUtil.logError( 'Unable to find rowEntity in grid data, timer cannot be set' ); return; }

	          service.considerSetTimer( grid, gridRow );
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name navigate
	         * @description cellNav tells us that the selected cell has changed.  If
	         * the new row had a timer running, then stop it similar to in a beginCellEdit
	         * call.  If the old row is dirty and not the same as the new row, then
	         * start a timer on it.
	         * @param {object} newRowCol the row and column that were selected
	         * @param {object} oldRowCol the row and column that was left
	         *
	         */
	        navigate: function( newRowCol, oldRowCol ){
	          var grid = this.grid;
	          if ( newRowCol.row.rowEditSaveTimer ){
	            service.cancelTimer( grid, newRowCol.row );
	          }

	          if ( oldRowCol && oldRowCol.row && oldRowCol.row !== newRowCol.row ){
	            service.considerSetTimer( grid, oldRowCol.row );
	          }
	        },


	        /**
	         * @ngdoc property
	         * @propertyOf ui.grid.rowEdit.api:GridOptions
	         * @name rowEditWaitInterval
	         * @description How long the grid should wait for another change on this row
	         * before triggering a save (in milliseconds).  If set to -1, then saves are
	         * never triggered by timer (implying that the user will call flushDirtyRows()
	         * manually)
	         *
	         * @example
	         * Setting the wait interval to 4 seconds
	         * <pre>
	         *   $scope.gridOptions = { rowEditWaitInterval: 4000 }
	         * </pre>
	         *
	         */
	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name considerSetTimer
	         * @description Consider setting a timer on this row (if it is dirty).  if there is a timer running
	         * on the row and the row isn't currently saving, cancel it, using cancelTimer, then if the row is
	         * dirty and not currently saving then set a new timer
	         * @param {object} grid the grid for which we are processing
	         * @param {GridRow} gridRow the row for which the timer should be adjusted
	         *
	         */
	        considerSetTimer: function( grid, gridRow ){
	          service.cancelTimer( grid, gridRow );

	          if ( gridRow.isDirty && !gridRow.isSaving ){
	            if ( grid.options.rowEditWaitInterval !== -1 ){
	              var waitTime = grid.options.rowEditWaitInterval ? grid.options.rowEditWaitInterval : 2000;
	              gridRow.rowEditSaveTimer = $interval( service.saveRow( grid, gridRow ), waitTime, 1);
	            }
	          }
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name cancelTimer
	         * @description cancel the $interval for any timer running on this row
	         * then delete the timer itself
	         * @param {object} grid the grid for which we are processing
	         * @param {GridRow} gridRow the row for which the timer should be adjusted
	         *
	         */
	        cancelTimer: function( grid, gridRow ){
	          if ( gridRow.rowEditSaveTimer && !gridRow.isSaving ){
	            $interval.cancel(gridRow.rowEditSaveTimer);
	            delete gridRow.rowEditSaveTimer;
	          }
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name setRowsDirty
	         * @description Sets each of the rows passed in dataRows
	         * to be dirty.  note that if you have only just inserted the
	         * rows into your data you will need to wait for a $digest cycle
	         * before the gridRows are present - so often you would wrap this
	         * call in a $interval or $timeout
	         * <pre>
	         *      $interval( function() {
	         *        gridApi.rowEdit.setRowsDirty( myDataRows);
	         *      }, 0, 1);
	         * </pre>
	         * @param {object} grid the grid for which rows should be set dirty
	         * @param {array} dataRows the data entities for which the gridRows
	         * should be set dirty.
	         *
	         */
	        setRowsDirty: function( grid, myDataRows ) {
	          var gridRow;
	          myDataRows.forEach( function( value, index ){
	            gridRow = grid.getRow( value );
	            if ( gridRow ){
	              if ( !grid.rowEdit.dirtyRows ){
	                grid.rowEdit.dirtyRows = [];
	              }

	              if ( !gridRow.isDirty ){
	                gridRow.isDirty = true;
	                grid.rowEdit.dirtyRows.push( gridRow );
	              }

	              delete gridRow.isError;

	              service.considerSetTimer( grid, gridRow );
	            } else {
	              gridUtil.logError( "requested row not found in rowEdit.setRowsDirty, row was: " + value );
	            }
	          });
	        },


	        /**
	         * @ngdoc method
	         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
	         * @name setRowsClean
	         * @description Sets each of the rows passed in dataRows
	         * to be clean, clearing the dirty flag and the error flag, and removing
	         * the rows from the dirty and error caches.
	         * @param {object} grid the grid for which rows should be set clean
	         * @param {array} dataRows the data entities for which the gridRows
	         * should be set clean.
	         *
	         */
	        setRowsClean: function( grid, myDataRows ) {
	          var gridRow;

	          myDataRows.forEach( function( value, index ){
	            gridRow = grid.getRow( value );
	            if ( gridRow ){
	              delete gridRow.isDirty;
	              service.removeRow( grid.rowEdit.dirtyRows, gridRow );
	              service.cancelTimer( grid, gridRow );

	              delete gridRow.isError;
	              service.removeRow( grid.rowEdit.errorRows, gridRow );
	            } else {
	              gridUtil.logError( "requested row not found in rowEdit.setRowsClean, row was: " + value );
	            }
	          });
	        }

	      };

	      return service;

	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.rowEdit.directive:uiGridEdit
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds row editing features to the ui-grid-edit directive.
	   *
	   */
	  module.directive('uiGridRowEdit', ['gridUtil', 'uiGridRowEditService', 'uiGridEditConstants',
	  function (gridUtil, uiGridRowEditService, uiGridEditConstants) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridRowEditService.initializeGrid($scope, uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.rowEdit.directive:uiGridViewport
	   *  @element div
	   *
	   *  @description Stacks on top of ui.grid.uiGridViewport to alter the attributes used
	   *  for the grid row to allow coloring of saving and error rows
	   */
	  module.directive('uiGridViewport',
	    ['$compile', 'uiGridConstants', 'gridUtil', '$parse',
	      function ($compile, uiGridConstants, gridUtil, $parse) {
	        return {
	          priority: -200, // run after default  directive
	          scope: false,
	          compile: function ($elm, $attrs) {
	            var rowRepeatDiv = angular.element($elm.children().children()[0]);

	            var existingNgClass = rowRepeatDiv.attr("ng-class");
	            var newNgClass = '';
	            if ( existingNgClass ) {
	              newNgClass = existingNgClass.slice(0, -1) + ", 'ui-grid-row-dirty': row.isDirty, 'ui-grid-row-saving': row.isSaving, 'ui-grid-row-error': row.isError}";
	            } else {
	              newNgClass = "{'ui-grid-row-dirty': row.isDirty, 'ui-grid-row-saving': row.isSaving, 'ui-grid-row-error': row.isError}";
	            }
	            rowRepeatDiv.attr("ng-class", newNgClass);

	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.saveState
	   * @description
	   *
	   * # ui.grid.saveState
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * This module provides the ability to save the grid state, and restore
	   * it when the user returns to the page.
	   *
	   * No UI is provided, the caller should provide their own UI/buttons
	   * as appropriate. Usually the navigate events would be used to save
	   * the grid state and restore it.
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.save-state"></div>
	   */

	  var module = angular.module('ui.grid.saveState', ['ui.grid', 'ui.grid.selection', 'ui.grid.cellNav', 'ui.grid.grouping', 'ui.grid.pinning', 'ui.grid.treeView']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.saveState.constant:uiGridSaveStateConstants
	   *
	   *  @description constants available in save state module
	   */

	  module.constant('uiGridSaveStateConstants', {
	    featureName: 'saveState'
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.saveState.service:uiGridSaveStateService
	   *
	   *  @description Services for saveState feature
	   */
	  module.service('uiGridSaveStateService', ['$q', 'uiGridSaveStateConstants', 'gridUtil', '$compile', '$interval', 'uiGridConstants',
	    function ($q, uiGridSaveStateConstants, gridUtil, $compile, $interval, uiGridConstants ) {

	      var service = {

	        initializeGrid: function (grid) {

	          //add feature namespace and any properties to grid for needed state
	          grid.saveState = {};
	          this.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.saveState.api:PublicApi
	           *
	           *  @description Public Api for saveState feature
	           */
	          var publicApi = {
	            events: {
	              saveState: {
	              }
	            },
	            methods: {
	              saveState: {
	                /**
	                 * @ngdoc function
	                 * @name save
	                 * @methodOf  ui.grid.saveState.api:PublicApi
	                 * @description Packages the current state of the grid into
	                 * an object, and provides it to the user for saving
	                 * @returns {object} the state as a javascript object that can be saved
	                 */
	                save: function () {
	                  return service.save(grid);
	                },
	                /**
	                 * @ngdoc function
	                 * @name restore
	                 * @methodOf  ui.grid.saveState.api:PublicApi
	                 * @description Restores the provided state into the grid
	                 * @param {scope} $scope a scope that we can broadcast on
	                 * @param {object} state the state that should be restored into the grid
	                 */
	                restore: function ( $scope, state) {
	                  service.restore(grid, $scope, state);
	                }
	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           * @ngdoc object
	           * @name ui.grid.saveState.api:GridOptions
	           *
	           * @description GridOptions for saveState feature, these are available to be
	           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */
	          /**
	           * @ngdoc object
	           * @name saveWidths
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current column widths.  Note that unless
	           * you've provided the user with some way to resize their columns (say
	           * the resize columns feature), then this makes little sense.
	           * <br/>Defaults to true
	           */
	          gridOptions.saveWidths = gridOptions.saveWidths !== false;
	          /**
	           * @ngdoc object
	           * @name saveOrder
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Restore the current column order.  Note that unless
	           * you've provided the user with some way to reorder their columns (for
	           * example the move columns feature), this makes little sense.
	           * <br/>Defaults to true
	           */
	          gridOptions.saveOrder = gridOptions.saveOrder !== false;
	          /**
	           * @ngdoc object
	           * @name saveScroll
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current scroll position.  Note that this
	           * is saved as the percentage of the grid scrolled - so if your
	           * user returns to a grid with a significantly different number of
	           * rows (perhaps some data has been deleted) then the scroll won't
	           * actually show the same rows as before.  If you want to scroll to
	           * a specific row then you should instead use the saveFocus option, which
	           * is the default.
	           *
	           * Note that this element will only be saved if the cellNav feature is
	           * enabled
	           * <br/>Defaults to false
	           */
	          gridOptions.saveScroll = gridOptions.saveScroll === true;
	          /**
	           * @ngdoc object
	           * @name saveFocus
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current focused cell.  On returning
	           * to this focused cell we'll also scroll.  This option is
	           * preferred to the saveScroll option, so is set to true by
	           * default.  If saveScroll is set to true then this option will
	           * be disabled.
	           *
	           * By default this option saves the current row number and column
	           * number, and returns to that row and column.  However, if you define
	           * a saveRowIdentity function, then it will return you to the currently
	           * selected column within that row (in a business sense - so if some
	           * rows have been deleted, it will still find the same data, presuming it
	           * still exists in the list.  If it isn't in the list then it will instead
	           * return to the same row number - i.e. scroll percentage)
	           *
	           * Note that this option will do nothing if the cellNav
	           * feature is not enabled.
	           *
	           * <br/>Defaults to true (unless saveScroll is true)
	           */
	          gridOptions.saveFocus = gridOptions.saveScroll !== true && gridOptions.saveFocus !== false;
	          /**
	           * @ngdoc object
	           * @name saveRowIdentity
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description A function that can be called, passing in a rowEntity,
	           * and that will return a unique id for that row.  This might simply
	           * return the `id` field from that row (if you have one), or it might
	           * concatenate some fields within the row to make a unique value.
	           *
	           * This value will be used to find the same row again and set the focus
	           * to it, if it exists when we return.
	           *
	           * <br/>Defaults to undefined
	           */
	          /**
	           * @ngdoc object
	           * @name saveVisible
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save whether or not columns are visible.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveVisible = gridOptions.saveVisible !== false;
	          /**
	           * @ngdoc object
	           * @name saveSort
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current sort state for each column
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveSort = gridOptions.saveSort !== false;
	          /**
	           * @ngdoc object
	           * @name saveFilter
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the current filter state for each column
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveFilter = gridOptions.saveFilter !== false;
	          /**
	           * @ngdoc object
	           * @name saveSelection
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the currently selected rows.  If the `saveRowIdentity` callback
	           * is defined, then it will save the id of the row and select that.  If not, then
	           * it will attempt to select the rows by row number, which will give the wrong results
	           * if the data set has changed in the mean-time.
	           *
	           * Note that this option only does anything
	           * if the selection feature is enabled.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveSelection = gridOptions.saveSelection !== false;
	          /**
	           * @ngdoc object
	           * @name saveGrouping
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the grouping configuration.  If set to true and the
	           * grouping feature is not enabled then does nothing.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveGrouping = gridOptions.saveGrouping !== false;
	          /**
	           * @ngdoc object
	           * @name saveGroupingExpandedStates
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the grouping row expanded states.  If set to true and the
	           * grouping feature is not enabled then does nothing.
	           *
	           * This can be quite a bit of data, in many cases you wouldn't want to save this
	           * information.
	           *
	           * <br/>Defaults to false
	           */
	          gridOptions.saveGroupingExpandedStates = gridOptions.saveGroupingExpandedStates === true;
	          /**
	           * @ngdoc object
	           * @name savePinning
	           * @propertyOf ui.grid.saveState.api:GridOptions
	           * @description Save pinning state for columns.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.savePinning = gridOptions.savePinning !== false;
	          /**
	           * @ngdoc object
	           * @name saveTreeView
	           * @propertyOf  ui.grid.saveState.api:GridOptions
	           * @description Save the treeView configuration.  If set to true and the
	           * treeView feature is not enabled then does nothing.
	           *
	           * <br/>Defaults to true
	           */
	          gridOptions.saveTreeView = gridOptions.saveTreeView !== false;
	        },



	        /**
	         * @ngdoc function
	         * @name save
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the current grid state into an object, and
	         * passes that object back to the caller
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the state ready to be saved
	         */
	        save: function (grid) {
	          var savedState = {};

	          savedState.columns = service.saveColumns( grid );
	          savedState.scrollFocus = service.saveScrollFocus( grid );
	          savedState.selection = service.saveSelection( grid );
	          savedState.grouping = service.saveGrouping( grid );
	          savedState.treeView = service.saveTreeView( grid );
	          savedState.pagination = service.savePagination( grid );

	          return savedState;
	        },


	        /**
	         * @ngdoc function
	         * @name restore
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Applies the provided state to the grid
	         *
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {scope} $scope a scope that we can broadcast on
	         * @param {object} state the state we'd like to restore
	         */
	        restore: function( grid, $scope, state ){
	          if ( state.columns ) {
	            service.restoreColumns( grid, state.columns );
	          }

	          if ( state.scrollFocus ){
	            service.restoreScrollFocus( grid, $scope, state.scrollFocus );
	          }

	          if ( state.selection ){
	            service.restoreSelection( grid, state.selection );
	          }

	          if ( state.grouping ){
	            service.restoreGrouping( grid, state.grouping );
	          }

	          if ( state.treeView ){
	            service.restoreTreeView( grid, state.treeView );
	          }

	          if ( state.pagination ){
	            service.restorePagination( grid, state.pagination );
	          }

	          grid.refresh();
	        },


	        /**
	         * @ngdoc function
	         * @name saveColumns
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the column setup, including sort, filters, ordering,
	         * pinning and column widths.
	         *
	         * Works through the current columns, storing them in order.  Stores the
	         * column name, then the visible flag, width, sort and filters for each column.
	         *
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {array} the columns state ready to be saved
	         */
	        saveColumns: function( grid ) {
	          var columns = [];
	          grid.getOnlyDataColumns().forEach( function( column ) {
	            var savedColumn = {};
	            savedColumn.name = column.name;

	            if ( grid.options.saveVisible ){
	              savedColumn.visible = column.visible;
	            }

	            if ( grid.options.saveWidths ){
	              savedColumn.width = column.width;
	            }

	            // these two must be copied, not just pointed too - otherwise our saved state is pointing to the same object as current state
	            if ( grid.options.saveSort ){
	              savedColumn.sort = angular.copy( column.sort );
	            }

	            if ( grid.options.saveFilter ){
	              savedColumn.filters = [];
	              column.filters.forEach( function( filter ){
	                var copiedFilter = {};
	                angular.forEach( filter, function( value, key) {
	                  if ( key !== 'condition' && key !== '$$hashKey' && key !== 'placeholder'){
	                    copiedFilter[key] = value;
	                  }
	                });
	                savedColumn.filters.push(copiedFilter);
	              });
	            }

	            if ( !!grid.api.pinning && grid.options.savePinning ){
	              savedColumn.pinned = column.renderContainer ? column.renderContainer : '';
	            }

	            columns.push( savedColumn );
	          });

	          return columns;
	        },


	        /**
	         * @ngdoc function
	         * @name saveScrollFocus
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the currently scroll or focus.
	         *
	         * If cellNav isn't present then does nothing - we can't return
	         * to the scroll position without cellNav anyway.
	         *
	         * If the cellNav module is present, and saveFocus is true, then
	         * it saves the currently focused cell.  If rowIdentity is present
	         * then saves using rowIdentity, otherwise saves visibleRowNum.
	         *
	         * If the cellNav module is not present, and saveScroll is true, then
	         * it approximates the current scroll row and column, and saves that.
	         *
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the selection state ready to be saved
	         */
	        saveScrollFocus: function( grid ){
	          if ( !grid.api.cellNav ){
	            return {};
	          }

	          var scrollFocus = {};
	          if ( grid.options.saveFocus ){
	            scrollFocus.focus = true;
	            var rowCol = grid.api.cellNav.getFocusedCell();
	            if ( rowCol !== null ) {
	              if ( rowCol.col !== null ){
	                scrollFocus.colName = rowCol.col.colDef.name;
	              }
	              if ( rowCol.row !== null ){
	                scrollFocus.rowVal = service.getRowVal( grid, rowCol.row );
	              }
	            }
	          }

	          if ( grid.options.saveScroll || grid.options.saveFocus && !scrollFocus.colName && !scrollFocus.rowVal ) {
	            scrollFocus.focus = false;
	            if ( grid.renderContainers.body.prevRowScrollIndex ){
	              scrollFocus.rowVal = service.getRowVal( grid, grid.renderContainers.body.visibleRowCache[ grid.renderContainers.body.prevRowScrollIndex ]);
	            }

	            if ( grid.renderContainers.body.prevColScrollIndex ){
	              scrollFocus.colName = grid.renderContainers.body.visibleColumnCache[ grid.renderContainers.body.prevColScrollIndex ].name;
	            }
	          }

	          return scrollFocus;
	        },


	        /**
	         * @ngdoc function
	         * @name saveSelection
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the currently selected rows, if the selection feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {array} the selection state ready to be saved
	         */
	        saveSelection: function( grid ){
	          if ( !grid.api.selection || !grid.options.saveSelection ){
	            return [];
	          }

	          var selection = grid.api.selection.getSelectedGridRows().map( function( gridRow ) {
	            return service.getRowVal( grid, gridRow );
	          });

	          return selection;
	        },


	        /**
	         * @ngdoc function
	         * @name saveGrouping
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the grouping state, if the grouping feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the grouping state ready to be saved
	         */
	        saveGrouping: function( grid ){
	          if ( !grid.api.grouping || !grid.options.saveGrouping ){
	            return {};
	          }

	          return grid.api.grouping.getGrouping( grid.options.saveGroupingExpandedStates );
	        },


	        /**
	         * @ngdoc function
	         * @name savePagination
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the pagination state, if the pagination feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the pagination state ready to be saved
	         */
	        savePagination: function( grid ) {
	          if ( !grid.api.pagination || !grid.options.paginationPageSize ){
	            return {};
	          }

	          return {
	            paginationCurrentPage: grid.options.paginationCurrentPage,
	            paginationPageSize: grid.options.paginationPageSize
	          };
	        },


	        /**
	         * @ngdoc function
	         * @name saveTreeView
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Saves the tree view state, if the tree feature is enabled
	         * @param {Grid} grid the grid whose state we'd like to save
	         * @returns {object} the tree view state ready to be saved
	         */
	        saveTreeView: function( grid ){
	          if ( !grid.api.treeView || !grid.options.saveTreeView ){
	            return {};
	          }

	          return grid.api.treeView.getTreeView();
	        },


	        /**
	         * @ngdoc function
	         * @name getRowVal
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Helper function that gets either the rowNum or
	         * the saveRowIdentity, given a gridRow
	         * @param {Grid} grid the grid the row is in
	         * @param {GridRow} gridRow the row we want the rowNum for
	         * @returns {object} an object containing { identity: true/false, row: rowNumber/rowIdentity }
	         *
	         */
	        getRowVal: function( grid, gridRow ){
	          if ( !gridRow ) {
	            return null;
	          }

	          var rowVal = {};
	          if ( grid.options.saveRowIdentity ){
	            rowVal.identity = true;
	            rowVal.row = grid.options.saveRowIdentity( gridRow.entity );
	          } else {
	            rowVal.identity = false;
	            rowVal.row = grid.renderContainers.body.visibleRowCache.indexOf( gridRow );
	          }
	          return rowVal;
	        },


	        /**
	         * @ngdoc function
	         * @name restoreColumns
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the columns, including order, visible, width,
	         * pinning, sort and filters.
	         *
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} columnsState the list of columns we had before, with their state
	         */
	        restoreColumns: function( grid, columnsState ){
	          var isSortChanged = false;

	          columnsState.forEach( function( columnState, index ) {
	            var currentCol = grid.getColumn( columnState.name );

	            if ( currentCol && !grid.isRowHeaderColumn(currentCol) ){
	              if ( grid.options.saveVisible &&
	                   ( currentCol.visible !== columnState.visible ||
	                     currentCol.colDef.visible !== columnState.visible ) ){
	                currentCol.visible = columnState.visible;
	                currentCol.colDef.visible = columnState.visible;
	                grid.api.core.raise.columnVisibilityChanged(currentCol);
	              }

	              if ( grid.options.saveWidths && currentCol.width !== columnState.width){
	                currentCol.width = columnState.width;
	                currentCol.hasCustomWidth = true;
	              }

	              if ( grid.options.saveSort &&
	                   !angular.equals(currentCol.sort, columnState.sort) &&
	                   !( currentCol.sort === undefined && angular.isEmpty(columnState.sort) ) ){
	                currentCol.sort = angular.copy( columnState.sort );
	                isSortChanged = true;
	              }

	              if ( grid.options.saveFilter &&
	                   !angular.equals(currentCol.filters, columnState.filters ) ){
	                columnState.filters.forEach( function( filter, index ){
	                  angular.extend( currentCol.filters[index], filter );
	                  if ( typeof(filter.term) === 'undefined' || filter.term === null ){
	                    delete currentCol.filters[index].term;
	                  }
	                });
	                grid.api.core.raise.filterChanged();
	              }

	              if ( !!grid.api.pinning && grid.options.savePinning && currentCol.renderContainer !== columnState.pinned ){
	                grid.api.pinning.pinColumn(currentCol, columnState.pinned);
	              }

	              var currentIndex = grid.getOnlyDataColumns().indexOf( currentCol );
	              if (currentIndex !== -1) {
	                if (grid.options.saveOrder && currentIndex !== index) {
	                  var column = grid.columns.splice(currentIndex + grid.rowHeaderColumns.length, 1)[0];
	                  grid.columns.splice(index + grid.rowHeaderColumns.length, 0, column);
	                }
	              }
	            }
	          });

	          if ( isSortChanged ) {
	            grid.api.core.raise.sortChanged( grid, grid.getColumnSorting() );
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name restoreScrollFocus
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Scrolls to the position that was saved.  If focus is true, then
	         * sets focus to the specified row/col.  If focus is false, then scrolls to the
	         * specified row/col.
	         *
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {scope} $scope a scope that we can broadcast on
	         * @param {object} scrollFocusState the scroll/focus state ready to be restored
	         */
	        restoreScrollFocus: function( grid, $scope, scrollFocusState ){
	          if ( !grid.api.cellNav ){
	            return;
	          }

	          var colDef, row;
	          if ( scrollFocusState.colName ){
	            var colDefs = grid.options.columnDefs.filter( function( colDef ) { return colDef.name === scrollFocusState.colName; });
	            if ( colDefs.length > 0 ){
	              colDef = colDefs[0];
	            }
	          }

	          if ( scrollFocusState.rowVal && scrollFocusState.rowVal.row ){
	            if ( scrollFocusState.rowVal.identity ){
	              row = service.findRowByIdentity( grid, scrollFocusState.rowVal );
	            } else {
	              row = grid.renderContainers.body.visibleRowCache[ scrollFocusState.rowVal.row ];
	            }
	          }

	          var entity = row && row.entity ? row.entity : null ;

	          if ( colDef || entity ) {
	            if (scrollFocusState.focus ){
	              grid.api.cellNav.scrollToFocus( entity, colDef );
	            } else {
	              grid.scrollTo( entity, colDef );
	            }
	          }
	        },


	        /**
	         * @ngdoc function
	         * @name restoreSelection
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Selects the rows that are provided in the selection
	         * state.  If you are using `saveRowIdentity` and more than one row matches the identity
	         * function then only the first is selected.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} selectionState the selection state ready to be restored
	         */
	        restoreSelection: function( grid, selectionState ){
	          if ( !grid.api.selection ){
	            return;
	          }

	          grid.api.selection.clearSelectedRows();

	          selectionState.forEach(  function( rowVal ) {
	            if ( rowVal.identity ){
	              var foundRow = service.findRowByIdentity( grid, rowVal );

	              if ( foundRow ){
	                grid.api.selection.selectRow( foundRow.entity );
	              }

	            } else {
	              grid.api.selection.selectRowByVisibleIndex( rowVal.row );
	            }
	          });
	        },


	        /**
	         * @ngdoc function
	         * @name restoreGrouping
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the grouping configuration, if the grouping feature
	         * is enabled.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} groupingState the grouping state ready to be restored
	         */
	        restoreGrouping: function( grid, groupingState ){
	          if ( !grid.api.grouping || typeof(groupingState) === 'undefined' || groupingState === null || angular.equals(groupingState, {}) ){
	            return;
	          }

	          grid.api.grouping.setGrouping( groupingState );
	        },

	        /**
	         * @ngdoc function
	         * @name restoreTreeView
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the tree view configuration, if the tree view feature
	         * is enabled.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} treeViewState the tree view state ready to be restored
	         */
	        restoreTreeView: function( grid, treeViewState ){
	          if ( !grid.api.treeView || typeof(treeViewState) === 'undefined' || treeViewState === null || angular.equals(treeViewState, {}) ){
	            return;
	          }

	          grid.api.treeView.setTreeView( treeViewState );
	        },

	        /**
	         * @ngdoc function
	         * @name restorePagination
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Restores the pagination information, if pagination is enabled.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} pagination the pagination object to be restored
	         * @param {number} pagination.paginationCurrentPage the page number to restore
	         * @param {number} pagination.paginationPageSize the number of items displayed per page
	         */
	        restorePagination: function( grid, pagination ){
	          if ( !grid.api.pagination || !grid.options.paginationPageSize ){
	            return;
	          }

	          grid.options.paginationCurrentPage = pagination.paginationCurrentPage;
	          grid.options.paginationPageSize = pagination.paginationPageSize;
	        },

	        /**
	         * @ngdoc function
	         * @name findRowByIdentity
	         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
	         * @description Finds a row given it's identity value, returns the first found row
	         * if any are found, otherwise returns null if no rows are found.
	         * @param {Grid} grid the grid whose state we'd like to restore
	         * @param {object} rowVal the row we'd like to find
	         * @returns {gridRow} the found row, or null if none found
	         */
	        findRowByIdentity: function( grid, rowVal ){
	          if ( !grid.options.saveRowIdentity ){
	            return null;
	          }

	          var filteredRows = grid.rows.filter( function( gridRow ) {
	            if ( grid.options.saveRowIdentity( gridRow.entity ) === rowVal.row ){
	              return true;
	            } else {
	              return false;
	            }
	          });

	          if ( filteredRows.length > 0 ){
	            return filteredRows[0];
	          } else {
	            return null;
	          }
	        }
	      };

	      return service;

	    }
	  ]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.saveState.directive:uiGridSaveState
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds saveState features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.saveState']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	        { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.gridOptions = {
	        columnDefs: [
	          {name: 'name'},
	          {name: 'title', enableCellEdit: true}
	        ],
	        data: $scope.data
	      };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-save-state></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridSaveState', ['uiGridSaveStateConstants', 'uiGridSaveStateService', 'gridUtil', '$compile',
	    function (uiGridSaveStateConstants, uiGridSaveStateService, gridUtil, $compile) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        link: function ($scope, $elm, $attrs, uiGridCtrl) {
	          uiGridSaveStateService.initializeGrid(uiGridCtrl.grid);
	        }
	      };
	    }
	  ]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.selection
	   * @description
	   *
	   * # ui.grid.selection
	   * This module provides row selection
	   *
	   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
	   *
	   * <div doc-module-components="ui.grid.selection"></div>
	   */

	  var module = angular.module('ui.grid.selection', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.selection.constant:uiGridSelectionConstants
	   *
	   *  @description constants available in selection module
	   */
	  module.constant('uiGridSelectionConstants', {
	    featureName: "selection",
	    selectionRowHeaderColName: 'selectionRowHeaderCol'
	  });

	  //add methods to GridRow
	  angular.module('ui.grid').config(['$provide', function($provide) {
	    $provide.decorator('GridRow', ['$delegate', function($delegate) {

	      /**
	       *  @ngdoc object
	       *  @name ui.grid.selection.api:GridRow
	       *
	       *  @description GridRow prototype functions added for selection
	       */

	      /**
	       *  @ngdoc object
	       *  @name enableSelection
	       *  @propertyOf  ui.grid.selection.api:GridRow
	       *  @description Enable row selection for this row, only settable by internal code.
	       *
	       *  The grouping feature, for example, might set group header rows to not be selectable.
	       *  <br/>Defaults to true
	       */

	      /**
	       *  @ngdoc object
	       *  @name isSelected
	       *  @propertyOf  ui.grid.selection.api:GridRow
	       *  @description Selected state of row.  Should be readonly. Make any changes to selected state using setSelected().
	       *  <br/>Defaults to false
	       */


	        /**
	         * @ngdoc function
	         * @name setSelected
	         * @methodOf ui.grid.selection.api:GridRow
	         * @description Sets the isSelected property and updates the selectedCount
	         * Changes to isSelected state should only be made via this function
	         * @param {bool} selected value to set
	         */
	        $delegate.prototype.setSelected = function(selected) {
	          this.isSelected = selected;
	          if (selected) {
	            this.grid.selection.selectedCount++;
	          }
	          else {
	            this.grid.selection.selectedCount--;
	          }
	        };

	      return $delegate;
	    }]);
	  }]);

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.selection.service:uiGridSelectionService
	   *
	   *  @description Services for selection features
	   */
	  module.service('uiGridSelectionService', ['$q', '$templateCache', 'uiGridSelectionConstants', 'gridUtil',
	    function ($q, $templateCache, uiGridSelectionConstants, gridUtil) {

	      var service = {

	        initializeGrid: function (grid) {

	          //add feature namespace and any properties to grid for needed
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.selection.grid:selection
	           *
	           *  @description Grid properties and functions added for selection
	           */
	          grid.selection = {};
	          grid.selection.lastSelectedRow = null;
	          grid.selection.selectAll = false;


	          /**
	           *  @ngdoc object
	           *  @name selectedCount
	           *  @propertyOf  ui.grid.selection.grid:selection
	           *  @description Current count of selected rows
	           *  @example
	           *  var count = grid.selection.selectedCount
	           */
	          grid.selection.selectedCount = 0;

	          service.defaultGridOptions(grid.options);

	          /**
	           *  @ngdoc object
	           *  @name ui.grid.selection.api:PublicApi
	           *
	           *  @description Public Api for selection feature
	           */
	          var publicApi = {
	            events: {
	              selection: {
	                /**
	                 * @ngdoc event
	                 * @name rowSelectionChanged
	                 * @eventOf  ui.grid.selection.api:PublicApi
	                 * @description  is raised after the row.isSelected state is changed
	                 * @param {GridRow} row the row that was selected/deselected
	                 * @param {Event} event object if raised from an event
	                 */
	                rowSelectionChanged: function (scope, row, evt) {
	                },
	                /**
	                 * @ngdoc event
	                 * @name rowSelectionChangedBatch
	                 * @eventOf  ui.grid.selection.api:PublicApi
	                 * @description  is raised after the row.isSelected state is changed
	                 * in bulk, if the `enableSelectionBatchEvent` option is set to true
	                 * (which it is by default).  This allows more efficient processing
	                 * of bulk events.
	                 * @param {array} rows the rows that were selected/deselected
	                 * @param {Event} event object if raised from an event
	                 */
	                rowSelectionChangedBatch: function (scope, rows, evt) {
	                }
	              }
	            },
	            methods: {
	              selection: {
	                /**
	                 * @ngdoc function
	                 * @name toggleRowSelection
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Toggles data row as selected or unselected
	                 * @param {object} rowEntity gridOptions.data[] array instance
	                 * @param {Event} event object if raised from an event
	                 */
	                toggleRowSelection: function (rowEntity, evt) {
	                  var row = grid.getRow(rowEntity);
	                  if (row !== null) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectRow
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Select the data row
	                 * @param {object} rowEntity gridOptions.data[] array instance
	                 * @param {Event} event object if raised from an event
	                 */
	                selectRow: function (rowEntity, evt) {
	                  var row = grid.getRow(rowEntity);
	                  if (row !== null && !row.isSelected) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectRowByVisibleIndex
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Select the specified row by visible index (i.e. if you
	                 * specify row 0 you'll get the first visible row selected).  In this context
	                 * visible means of those rows that are theoretically visible (i.e. not filtered),
	                 * rather than rows currently rendered on the screen.
	                 * @param {number} index index within the rowsVisible array
	                 * @param {Event} event object if raised from an event
	                 */
	                selectRowByVisibleIndex: function ( rowNum, evt ) {
	                  var row = grid.renderContainers.body.visibleRowCache[rowNum];
	                  if (row !== null && typeof(row) !== 'undefined' && !row.isSelected) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name unSelectRow
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description UnSelect the data row
	                 * @param {object} rowEntity gridOptions.data[] array instance
	                 * @param {Event} event object if raised from an event
	                 */
	                unSelectRow: function (rowEntity, evt) {
	                  var row = grid.getRow(rowEntity);
	                  if (row !== null && row.isSelected) {
	                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
	                  }
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectAllRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Selects all rows.  Does nothing if multiSelect = false
	                 * @param {Event} event object if raised from an event
	                 */
	                selectAllRows: function (evt) {
	                  if (grid.options.multiSelect === false) {
	                    return;
	                  }

	                  var changedRows = [];
	                  grid.rows.forEach(function (row) {
	                    if ( !row.isSelected && row.enableSelection !== false ){
	                      row.setSelected(true);
	                      service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	                    }
	                  });
	                  service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	                  grid.selection.selectAll = true;
	                },
	                /**
	                 * @ngdoc function
	                 * @name selectAllVisibleRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Selects all visible rows.  Does nothing if multiSelect = false
	                 * @param {Event} event object if raised from an event
	                 */
	                selectAllVisibleRows: function (evt) {
	                  if (grid.options.multiSelect === false) {
	                    return;
	                  }

	                  var changedRows = [];
	                  grid.rows.forEach(function (row) {
	                    if (row.visible) {
	                      if (!row.isSelected && row.enableSelection !== false){
	                        row.setSelected(true);
	                        service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	                      }
	                    } else {
	                      if (row.isSelected){
	                        row.setSelected(false);
	                        service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	                      }
	                    }
	                  });
	                  service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	                  grid.selection.selectAll = true;
	                },
	                /**
	                 * @ngdoc function
	                 * @name clearSelectedRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Unselects all rows
	                 * @param {Event} event object if raised from an event
	                 */
	                clearSelectedRows: function (evt) {
	                  service.clearSelectedRows(grid, evt);
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectedRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description returns all selectedRow's entity references
	                 */
	                getSelectedRows: function () {
	                  return service.getSelectedRows(grid).map(function (gridRow) {
	                    return gridRow.entity;
	                  });
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectedGridRows
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description returns all selectedRow's as gridRows
	                 */
	                getSelectedGridRows: function () {
	                  return service.getSelectedRows(grid);
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectedCount
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description returns the number of rows selected
	                 */
	                getSelectedCount: function () {
	                  return grid.selection.selectedCount;
	                },
	                /**
	                 * @ngdoc function
	                 * @name setMultiSelect
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Sets the current gridOption.multiSelect to true or false
	                 * @param {bool} multiSelect true to allow multiple rows
	                 */
	                setMultiSelect: function (multiSelect) {
	                  grid.options.multiSelect = multiSelect;
	                },
	                /**
	                 * @ngdoc function
	                 * @name setModifierKeysToMultiSelect
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Sets the current gridOption.modifierKeysToMultiSelect to true or false
	                 * @param {bool} modifierKeysToMultiSelect true to only allow multiple rows when using ctrlKey or shiftKey is used
	                 */
	                setModifierKeysToMultiSelect: function (modifierKeysToMultiSelect) {
	                  grid.options.modifierKeysToMultiSelect = modifierKeysToMultiSelect;
	                },
	                /**
	                 * @ngdoc function
	                 * @name getSelectAllState
	                 * @methodOf  ui.grid.selection.api:PublicApi
	                 * @description Returns whether or not the selectAll checkbox is currently ticked.  The
	                 * grid doesn't automatically select rows when you add extra data - so when you add data
	                 * you need to explicitly check whether the selectAll is set, and then call setVisible rows
	                 * if it is
	                 */
	                getSelectAllState: function () {
	                  return grid.selection.selectAll;
	                }

	              }
	            }
	          };

	          grid.api.registerEventsFromObject(publicApi.events);

	          grid.api.registerMethodsFromObject(publicApi.methods);

	        },

	        defaultGridOptions: function (gridOptions) {
	          //default option to true unless it was explicitly set to false
	          /**
	           *  @ngdoc object
	           *  @name ui.grid.selection.api:GridOptions
	           *
	           *  @description GridOptions for selection feature, these are available to be
	           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	           */

	          /**
	           *  @ngdoc object
	           *  @name enableRowSelection
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable row selection for entire grid.
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableRowSelection = gridOptions.enableRowSelection !== false;
	          /**
	           *  @ngdoc object
	           *  @name multiSelect
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable multiple row selection for entire grid
	           *  <br/>Defaults to true
	           */
	          gridOptions.multiSelect = gridOptions.multiSelect !== false;
	          /**
	           *  @ngdoc object
	           *  @name noUnselect
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Prevent a row from being unselected.  Works in conjunction
	           *  with `multiselect = false` and `gridApi.selection.selectRow()` to allow
	           *  you to create a single selection only grid - a row is always selected, you
	           *  can only select different rows, you can't unselect the row.
	           *  <br/>Defaults to false
	           */
	          gridOptions.noUnselect = gridOptions.noUnselect === true;
	          /**
	           *  @ngdoc object
	           *  @name modifierKeysToMultiSelect
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable multiple row selection only when using the ctrlKey or shiftKey. Requires multiSelect to be true.
	           *  <br/>Defaults to false
	           */
	          gridOptions.modifierKeysToMultiSelect = gridOptions.modifierKeysToMultiSelect === true;
	          /**
	           *  @ngdoc object
	           *  @name enableRowHeaderSelection
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable a row header to be used for selection
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableRowHeaderSelection = gridOptions.enableRowHeaderSelection !== false;
	          /**
	           *  @ngdoc object
	           *  @name enableFullRowSelection
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable selection by clicking anywhere on the row.  Defaults to
	           *  false if `enableRowHeaderSelection` is true, otherwise defaults to false.
	           */
	          if ( typeof(gridOptions.enableFullRowSelection) === 'undefined' ){
	            gridOptions.enableFullRowSelection = !gridOptions.enableRowHeaderSelection;
	          }
	          /**
	           *  @ngdoc object
	           *  @name enableSelectAll
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Enable the select all checkbox at the top of the selectionRowHeader
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableSelectAll = gridOptions.enableSelectAll !== false;
	          /**
	           *  @ngdoc object
	           *  @name enableSelectionBatchEvent
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description If selected rows are changed in bulk, either via the API or
	           *  via the selectAll checkbox, then a separate event is fired.  Setting this
	           *  option to false will cause the rowSelectionChanged event to be called multiple times
	           *  instead
	           *  <br/>Defaults to true
	           */
	          gridOptions.enableSelectionBatchEvent = gridOptions.enableSelectionBatchEvent !== false;
	          /**
	           *  @ngdoc object
	           *  @name selectionRowHeaderWidth
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description can be used to set a custom width for the row header selection column
	           *  <br/>Defaults to 30px
	           */
	          gridOptions.selectionRowHeaderWidth = angular.isDefined(gridOptions.selectionRowHeaderWidth) ? gridOptions.selectionRowHeaderWidth : 30;

	          /**
	           *  @ngdoc object
	           *  @name enableFooterTotalSelected
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Shows the total number of selected items in footer if true.
	           *  <br/>Defaults to true.
	           *  <br/>GridOptions.showGridFooter must also be set to true.
	           */
	          gridOptions.enableFooterTotalSelected = gridOptions.enableFooterTotalSelected !== false;

	          /**
	           *  @ngdoc object
	           *  @name isRowSelectable
	           *  @propertyOf  ui.grid.selection.api:GridOptions
	           *  @description Makes it possible to specify a method that evaluates for each row and sets its "enableSelection" property.
	           */

	          gridOptions.isRowSelectable = angular.isDefined(gridOptions.isRowSelectable) ? gridOptions.isRowSelectable : angular.noop;
	        },

	        /**
	         * @ngdoc function
	         * @name toggleRowSelection
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Toggles row as selected or unselected
	         * @param {Grid} grid grid object
	         * @param {GridRow} row row to select or deselect
	         * @param {Event} event object if resulting from event
	         * @param {bool} multiSelect if false, only one row at time can be selected
	         * @param {bool} noUnselect if true then rows cannot be unselected
	         */
	        toggleRowSelection: function (grid, row, evt, multiSelect, noUnselect) {
	          var selected = row.isSelected;

	          if ( row.enableSelection === false && !selected ){
	            return;
	          }

	          var selectedRows;
	          if (!multiSelect && !selected) {
	            service.clearSelectedRows(grid, evt);
	          } else if (!multiSelect && selected) {
	            selectedRows = service.getSelectedRows(grid);
	            if (selectedRows.length > 1) {
	              selected = false; // Enable reselect of the row
	              service.clearSelectedRows(grid, evt);
	            }
	          }

	          if (selected && noUnselect){
	            // don't deselect the row
	          } else {
	            row.setSelected(!selected);
	            if (row.isSelected === true) {
	              grid.selection.lastSelectedRow = row;
	            }

	            selectedRows = service.getSelectedRows(grid);
	            grid.selection.selectAll = grid.rows.length === selectedRows.length;

	            grid.api.selection.raise.rowSelectionChanged(row, evt);
	          }
	        },
	        /**
	         * @ngdoc function
	         * @name shiftSelect
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description selects a group of rows from the last selected row using the shift key
	         * @param {Grid} grid grid object
	         * @param {GridRow} clicked row
	         * @param {Event} event object if raised from an event
	         * @param {bool} multiSelect if false, does nothing this is for multiSelect only
	         */
	        shiftSelect: function (grid, row, evt, multiSelect) {
	          if (!multiSelect) {
	            return;
	          }
	          var selectedRows = service.getSelectedRows(grid);
	          var fromRow = selectedRows.length > 0 ? grid.renderContainers.body.visibleRowCache.indexOf(grid.selection.lastSelectedRow) : 0;
	          var toRow = grid.renderContainers.body.visibleRowCache.indexOf(row);
	          //reverse select direction
	          if (fromRow > toRow) {
	            var tmp = fromRow;
	            fromRow = toRow;
	            toRow = tmp;
	          }

	          var changedRows = [];
	          for (var i = fromRow; i <= toRow; i++) {
	            var rowToSelect = grid.renderContainers.body.visibleRowCache[i];
	            if (rowToSelect) {
	              if ( !rowToSelect.isSelected && rowToSelect.enableSelection !== false ){
	                rowToSelect.setSelected(true);
	                grid.selection.lastSelectedRow = rowToSelect;
	                service.decideRaiseSelectionEvent( grid, rowToSelect, changedRows, evt );
	              }
	            }
	          }
	          service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	        },
	        /**
	         * @ngdoc function
	         * @name getSelectedRows
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Returns all the selected rows
	         * @param {Grid} grid grid object
	         */
	        getSelectedRows: function (grid) {
	          return grid.rows.filter(function (row) {
	            return row.isSelected;
	          });
	        },

	        /**
	         * @ngdoc function
	         * @name clearSelectedRows
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Clears all selected rows
	         * @param {Grid} grid grid object
	         * @param {Event} event object if raised from an event
	         */
	        clearSelectedRows: function (grid, evt) {
	          var changedRows = [];
	          service.getSelectedRows(grid).forEach(function (row) {
	            if ( row.isSelected ){
	              row.setSelected(false);
	              service.decideRaiseSelectionEvent( grid, row, changedRows, evt );
	            }
	          });
	          service.decideRaiseSelectionBatchEvent( grid, changedRows, evt );
	          grid.selection.selectAll = false;
	          grid.selection.selectedCount = 0;
	        },

	        /**
	         * @ngdoc function
	         * @name decideRaiseSelectionEvent
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Decides whether to raise a single event or a batch event
	         * @param {Grid} grid grid object
	         * @param {GridRow} row row that has changed
	         * @param {array} changedRows an array to which we can append the changed
	         * @param {Event} event object if raised from an event
	         * row if we're doing batch events
	         */
	        decideRaiseSelectionEvent: function( grid, row, changedRows, evt ){
	          if ( !grid.options.enableSelectionBatchEvent ){
	            grid.api.selection.raise.rowSelectionChanged(row, evt);
	          } else {
	            changedRows.push(row);
	          }
	        },

	        /**
	         * @ngdoc function
	         * @name raiseSelectionEvent
	         * @methodOf  ui.grid.selection.service:uiGridSelectionService
	         * @description Decides whether we need to raise a batch event, and
	         * raises it if we do.
	         * @param {Grid} grid grid object
	         * @param {array} changedRows an array of changed rows, only populated
	         * @param {Event} event object if raised from an event
	         * if we're doing batch events
	         */
	        decideRaiseSelectionBatchEvent: function( grid, changedRows, evt ){
	          if ( changedRows.length > 0 ){
	            grid.api.selection.raise.rowSelectionChangedBatch(changedRows, evt);
	          }
	        }
	      };

	      return service;

	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.selection.directive:uiGridSelection
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds selection features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.selection']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-selection></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridSelection', ['uiGridSelectionConstants', 'uiGridSelectionService', '$templateCache', 'uiGridConstants',
	    function (uiGridSelectionConstants, uiGridSelectionService, $templateCache, uiGridConstants) {
	      return {
	        replace: true,
	        priority: 0,
	        require: '^uiGrid',
	        scope: false,
	        compile: function () {
	          return {
	            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	              uiGridSelectionService.initializeGrid(uiGridCtrl.grid);
	              if (uiGridCtrl.grid.options.enableRowHeaderSelection) {
	                var selectionRowHeaderDef = {
	                  name: uiGridSelectionConstants.selectionRowHeaderColName,
	                  displayName: '',
	                  width:  uiGridCtrl.grid.options.selectionRowHeaderWidth,
	                  minWidth: 10,
	                  cellTemplate: 'ui-grid/selectionRowHeader',
	                  headerCellTemplate: 'ui-grid/selectionHeaderCell',
	                  enableColumnResizing: false,
	                  enableColumnMenu: false,
	                  exporterSuppressExport: true,
	                  allowCellFocus: true
	                };

	                uiGridCtrl.grid.addRowHeaderColumn(selectionRowHeaderDef, 0);
	              }

	              var processorSet = false;

	              var processSelectableRows = function( rows ){
	                rows.forEach(function(row){
	                  row.enableSelection = uiGridCtrl.grid.options.isRowSelectable(row);
	                });
	                return rows;
	              };

	              var updateOptions = function(){
	                if (uiGridCtrl.grid.options.isRowSelectable !== angular.noop && processorSet !== true) {
	                  uiGridCtrl.grid.registerRowsProcessor(processSelectableRows, 500);
	                  processorSet = true;
	                }
	              };

	              updateOptions();

	              var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback( updateOptions, [uiGridConstants.dataChange.OPTIONS] );

	              $scope.$on( '$destroy', dataChangeDereg);
	            },
	            post: function ($scope, $elm, $attrs, uiGridCtrl) {

	            }
	          };
	        }
	      };
	    }]);

	  module.directive('uiGridSelectionRowHeaderButtons', ['$templateCache', 'uiGridSelectionService', 'gridUtil',
	    function ($templateCache, uiGridSelectionService, gridUtil) {
	      return {
	        replace: true,
	        restrict: 'E',
	        template: $templateCache.get('ui-grid/selectionRowHeaderButtons'),
	        scope: true,
	        require: '^uiGrid',
	        link: function($scope, $elm, $attrs, uiGridCtrl) {
	          var self = uiGridCtrl.grid;
	          $scope.selectButtonClick = selectButtonClick;

	          // On IE, prevent mousedowns on the select button from starting a selection.
	          //   If this is not done and you shift+click on another row, the browser will select a big chunk of text
	          if (gridUtil.detectBrowser() === 'ie') {
	            $elm.on('mousedown', selectButtonMouseDown);
	          }


	          function selectButtonClick(row, evt) {
	            evt.stopPropagation();

	            if (evt.shiftKey) {
	              uiGridSelectionService.shiftSelect(self, row, evt, self.options.multiSelect);
	            }
	            else if (evt.ctrlKey || evt.metaKey) {
	              uiGridSelectionService.toggleRowSelection(self, row, evt, self.options.multiSelect, self.options.noUnselect);
	            }
	            else {
	              uiGridSelectionService.toggleRowSelection(self, row, evt, (self.options.multiSelect && !self.options.modifierKeysToMultiSelect), self.options.noUnselect);
	            }
	          }

	          function selectButtonMouseDown(evt) {
	            if (evt.ctrlKey || evt.shiftKey) {
	              evt.target.onselectstart = function () { return false; };
	              window.setTimeout(function () { evt.target.onselectstart = null; }, 0);
	            }
	          }
	        }
	      };
	    }]);

	  module.directive('uiGridSelectionSelectAllButtons', ['$templateCache', 'uiGridSelectionService',
	    function ($templateCache, uiGridSelectionService) {
	      return {
	        replace: true,
	        restrict: 'E',
	        template: $templateCache.get('ui-grid/selectionSelectAllButtons'),
	        scope: false,
	        link: function($scope, $elm, $attrs, uiGridCtrl) {
	          var self = $scope.col.grid;

	          $scope.headerButtonClick = function(row, evt) {
	            if ( self.selection.selectAll ){
	              uiGridSelectionService.clearSelectedRows(self, evt);
	              if ( self.options.noUnselect ){
	                self.api.selection.selectRowByVisibleIndex(0, evt);
	              }
	              self.selection.selectAll = false;
	            } else {
	              if ( self.options.multiSelect ){
	                self.api.selection.selectAllVisibleRows(evt);
	                self.selection.selectAll = true;
	              }
	            }
	          };
	        }
	      };
	    }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.selection.directive:uiGridViewport
	   *  @element div
	   *
	   *  @description Stacks on top of ui.grid.uiGridViewport to alter the attributes used
	   *  for the grid row
	   */
	  module.directive('uiGridViewport',
	    ['$compile', 'uiGridConstants', 'uiGridSelectionConstants', 'gridUtil', '$parse', 'uiGridSelectionService',
	      function ($compile, uiGridConstants, uiGridSelectionConstants, gridUtil, $parse, uiGridSelectionService) {
	        return {
	          priority: -200, // run after default  directive
	          scope: false,
	          compile: function ($elm, $attrs) {
	            var rowRepeatDiv = angular.element($elm.children().children()[0]);

	            var existingNgClass = rowRepeatDiv.attr("ng-class");
	            var newNgClass = '';
	            if ( existingNgClass ) {
	              newNgClass = existingNgClass.slice(0, -1) + ",'ui-grid-row-selected': row.isSelected}";
	            } else {
	              newNgClass = "{'ui-grid-row-selected': row.isSelected}";
	            }
	            rowRepeatDiv.attr("ng-class", newNgClass);

	            return {
	              pre: function ($scope, $elm, $attrs, controllers) {

	              },
	              post: function ($scope, $elm, $attrs, controllers) {
	              }
	            };
	          }
	        };
	      }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.selection.directive:uiGridCell
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Stacks on top of ui.grid.uiGridCell to provide selection feature
	   */
	  module.directive('uiGridCell',
	    ['$compile', 'uiGridConstants', 'uiGridSelectionConstants', 'gridUtil', '$parse', 'uiGridSelectionService', '$timeout',
	      function ($compile, uiGridConstants, uiGridSelectionConstants, gridUtil, $parse, uiGridSelectionService, $timeout) {
	        return {
	          priority: -200, // run after default uiGridCell directive
	          restrict: 'A',
	          require: '?^uiGrid',
	          scope: false,
	          link: function ($scope, $elm, $attrs, uiGridCtrl) {

	            var touchStartTime = 0;
	            var touchTimeout = 300;

	            // Bind to keydown events in the render container
	            if (uiGridCtrl.grid.api.cellNav) {

	              uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown($scope, function (evt, rowCol) {
	                if (rowCol === null ||
	                  rowCol.row !== $scope.row ||
	                  rowCol.col !== $scope.col) {
	                  return;
	                }

	                if (evt.keyCode === 32 && $scope.col.colDef.name === "selectionRowHeaderCol") {
	                  uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect), $scope.grid.options.noUnselect);
	                  $scope.$apply();
	                }

	              //  uiGridCellNavService.scrollToIfNecessary(uiGridCtrl.grid, rowCol.row, rowCol.col);
	              });
	            }

	            //$elm.bind('keydown', function (evt) {
	            //  if (evt.keyCode === 32 && $scope.col.colDef.name === "selectionRowHeaderCol") {
	            //    uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect), $scope.grid.options.noUnselect);
	            //    $scope.$apply();
	            //  }
	            //});

	            var selectCells = function(evt){
	              // if we get a click, then stop listening for touchend
	              $elm.off('touchend', touchEnd);

	              if (evt.shiftKey) {
	                uiGridSelectionService.shiftSelect($scope.grid, $scope.row, evt, $scope.grid.options.multiSelect);
	              }
	              else if (evt.ctrlKey || evt.metaKey) {
	                uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, $scope.grid.options.multiSelect, $scope.grid.options.noUnselect);
	              }
	              else {
	                uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt, ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect), $scope.grid.options.noUnselect);
	              }
	              $scope.$apply();

	              // don't re-enable the touchend handler for a little while - some devices generate both, and it will
	              // take a little while to move your hand from the mouse to the screen if you have both modes of input
	              $timeout(function() {
	                $elm.on('touchend', touchEnd);
	              }, touchTimeout);
	            };

	            var touchStart = function(evt){
	              touchStartTime = (new Date()).getTime();

	              // if we get a touch event, then stop listening for click
	              $elm.off('click', selectCells);
	            };

	            var touchEnd = function(evt) {
	              var touchEndTime = (new Date()).getTime();
	              var touchTime = touchEndTime - touchStartTime;

	              if (touchTime < touchTimeout ) {
	                // short touch
	                selectCells(evt);
	              }

	              // don't re-enable the click handler for a little while - some devices generate both, and it will
	              // take a little while to move your hand from the screen to the mouse if you have both modes of input
	              $timeout(function() {
	                $elm.on('click', selectCells);
	              }, touchTimeout);
	            };

	            function registerRowSelectionEvents() {
	              if ($scope.grid.options.enableRowSelection && $scope.grid.options.enableFullRowSelection) {
	                $elm.addClass('ui-grid-disable-selection');
	                $elm.on('touchstart', touchStart);
	                $elm.on('touchend', touchEnd);
	                $elm.on('click', selectCells);

	                $scope.registered = true;
	              }
	            }

	            function deregisterRowSelectionEvents() {
	              if ($scope.registered){
	                $elm.removeClass('ui-grid-disable-selection');

	                $elm.off('touchstart', touchStart);
	                $elm.off('touchend', touchEnd);
	                $elm.off('click', selectCells);

	                $scope.registered = false;
	              }
	            }

	            registerRowSelectionEvents();
	            // register a dataChange callback so that we can change the selection configuration dynamically
	            // if the user changes the options
	            var dataChangeDereg = $scope.grid.registerDataChangeCallback( function() {
	              if ( $scope.grid.options.enableRowSelection && $scope.grid.options.enableFullRowSelection &&
	                !$scope.registered ){
	                registerRowSelectionEvents();
	              } else if ( ( !$scope.grid.options.enableRowSelection || !$scope.grid.options.enableFullRowSelection ) &&
	                $scope.registered ){
	                deregisterRowSelectionEvents();
	              }
	            }, [uiGridConstants.dataChange.OPTIONS] );

	            $elm.on( '$destroy', dataChangeDereg);
	          }
	        };
	      }]);

	  module.directive('uiGridGridFooter', ['$compile', 'uiGridConstants', 'gridUtil', function ($compile, uiGridConstants, gridUtil) {
	    return {
	      restrict: 'EA',
	      replace: true,
	      priority: -1000,
	      require: '^uiGrid',
	      scope: true,
	      compile: function ($elm, $attrs) {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {

	            if (!uiGridCtrl.grid.options.showGridFooter) {
	              return;
	            }


	            gridUtil.getTemplate('ui-grid/gridFooterSelectedItems')
	              .then(function (contents) {
	                var template = angular.element(contents);

	                var newElm = $compile(template)($scope);

	                angular.element($elm[0].getElementsByClassName('ui-grid-grid-footer')[0]).append(newElm);
	              });
	          },

	          post: function ($scope, $elm, $attrs, controllers) {

	          }
	        };
	      }
	    };
	  }]);

	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.treeBase
	   * @description
	   *
	   * # ui.grid.treeBase
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides base tree handling functions that are shared by other features, notably grouping
	   * and treeView.  It provides a tree view of the data, with nodes in that
	   * tree and leaves.
	   *
	   * Design information:
	   * -------------------
	   *
	   * The raw data that is provided must come with a $$treeLevel on any non-leaf node.  Grouping will create
	   * these on all the group header rows, treeView will expect these to be set in the raw data by the user.
	   * TreeBase will run a rowsProcessor that:
	   *  - builds `treeBase.tree` out of the provided rows
	   *  - permits a recursive sort of the tree
	   *  - maintains the expand/collapse state of each node
	   *  - provides the expand/collapse all button and the expand/collapse buttons
	   *  - maintains the count of children for each node
	   *
	   * Each row is updated with a link to the tree node that represents it.  Refer {@link ui.grid.treeBase.grid:treeBase.tree tree documentation}
	   * for information.
	   *
	   *  TreeBase adds information to the rows
	   *  - treeLevel: if present and > -1 tells us the level (level 0 is the top level)
	   *  - treeNode: pointer to the node in the grid.treeBase.tree that refers
	   *    to this row, allowing us to manipulate the state
	   *
	   * Since the logic is baked into the rowsProcessors, it should get triggered whenever
	   * row order or filtering or anything like that is changed.  We recall the expanded state
	   * across invocations of the rowsProcessors by the reference to the treeNode on the individual
	   * rows.  We rebuild the tree itself quite frequently, when we do this we use the saved treeNodes to
	   * get the state, but we overwrite the other data in that treeNode.
	   *
	   * By default rows are collapsed, which means all data rows have their visible property
	   * set to false, and only level 0 group rows are set to visible.
	   *
	   * We rely on the rowsProcessors to do the actual expanding and collapsing, so we set the flags we want into
	   * grid.treeBase.tree, then call refresh.  This is because we can't easily change the visible
	   * row cache without calling the processors, and once we've built the logic into the rowProcessors we may as
	   * well use it all the time.
	   *
	   * Tree base provides sorting (on non-grouped columns).
	   *
	   * Sorting works in two passes.  The standard sorting is performed for any columns that are important to building
	   * the tree (for example, any grouped columns).  Then after the tree is built, a recursive tree sort is performed
	   * for the remaining sort columns (including the original sort) - these columns are sorted within each tree level
	   * (so all the level 1 nodes are sorted, then all the level 2 nodes within each level 1 node etc).
	   *
	   * To achieve this we make use of the `ignoreSort` property on the sort configuration.  The parent feature (treeView or grouping)
	   * must provide a rowsProcessor that runs with very low priority (typically in the 60-65 range), and that sets
	   * the `ignoreSort`on any sort that it wants to run on the tree.  TreeBase will clear the ignoreSort on all sorts - so it
	   * will turn on any sorts that haven't run.  It will then call a recursive sort on the tree.
	   *
	   * Tree base provides treeAggregation.  It checks the treeAggregation configuration on each column, and aggregates based on
	   * the logic provided as it builds the tree. Footer aggregation from the uiGrid core should not be used with treeBase aggregation,
	   * since it operates on all visible rows, as opposed to to leaf nodes only. Setting `showColumnFooter: true` will show the
	   * treeAggregations in the column footer.  Aggregation information will be collected in the format:
	   *
	   * ```
	   *   {
	   *     type: 'count',
	   *     value: 4,
	   *     label: 'count: ',
	   *     rendered: 'count: 4'
	   *   }
	   * ```
	   *
	   * A callback is provided to format the value once it is finalised (aka a valueFilter).
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.treeBase"></div>
	   */

	  var module = angular.module('ui.grid.treeBase', ['ui.grid']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.treeBase.constant:uiGridTreeBaseConstants
	   *
	   *  @description constants available in treeBase module.
	   *
	   *  These constants are manually copied into grouping and treeView,
	   *  as I haven't found a way to simply include them, and it's not worth
	   *  investing time in for something that changes very infrequently.
	   *
	   */
	  module.constant('uiGridTreeBaseConstants', {
	    featureName: "treeBase",
	    rowHeaderColName: 'treeBaseRowHeaderCol',
	    EXPANDED: 'expanded',
	    COLLAPSED: 'collapsed',
	    aggregation: {
	      COUNT: 'count',
	      SUM: 'sum',
	      MAX: 'max',
	      MIN: 'min',
	      AVG: 'avg'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.treeBase.service:uiGridTreeBaseService
	   *
	   *  @description Services for treeBase feature
	   */
	  /**
	   *  @ngdoc object
	   *  @name ui.grid.treeBase.api:ColumnDef
	   *
	   *  @description ColumnDef for tree feature, these are available to be
	   *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
	   */

	  module.service('uiGridTreeBaseService', ['$q', 'uiGridTreeBaseConstants', 'gridUtil', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants', 'rowSorter',
	  function ($q, uiGridTreeBaseConstants, gridUtil, GridRow, gridClassFactory, i18nService, uiGridConstants, rowSorter) {

	    var service = {

	      initializeGrid: function (grid, $scope) {

	        //add feature namespace and any properties to grid for needed
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeBase.grid:treeBase
	         *
	         *  @description Grid properties and functions added for treeBase
	         */
	        grid.treeBase = {};

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.treeBase.grid:treeBase
	         *  @name numberLevels
	         *
	         *  @description Total number of tree levels currently used, calculated by the rowsProcessor by
	         *  retaining the highest tree level it sees
	         */
	        grid.treeBase.numberLevels = 0;

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.treeBase.grid:treeBase
	         *  @name expandAll
	         *
	         *  @description Whether or not the expandAll box is selected
	         */
	        grid.treeBase.expandAll = false;

	        /**
	         *  @ngdoc property
	         *  @propertyOf ui.grid.treeBase.grid:treeBase
	         *  @name tree
	         *
	         *  @description Tree represented as a nested array that holds the state of each node, along with a
	         *  pointer to the row.  The array order is material - we will display the children in the order
	         *  they are stored in the array
	         *
	         *  Each node stores:
	         *
	         *    - the state of this node
	         *    - an array of children of this node
	         *    - a pointer to the parent of this node (reverse pointer, allowing us to walk up the tree)
	         *    - the number of children of this node
	         *    - aggregation information calculated from the nodes
	         *
	         *  ```
	         *    [{
	         *      state: 'expanded',
	         *      row: <reference to row>,
	         *      parentRow: null,
	         *      aggregations: [{
	         *        type: 'count',
	         *        col: <gridCol>,
	         *        value: 2,
	         *        label: 'count: ',
	         *        rendered: 'count: 2'
	         *      }],
	         *      children: [
	         *        {
	         *          state: 'expanded',
	         *          row: <reference to row>,
	         *          parentRow: <reference to row>,
	         *          aggregations: [{
	         *            type: 'count',
	         *            col: '<gridCol>,
	         *            value: 4,
	         *            label: 'count: ',
	         *            rendered: 'count: 4'
	         *          }],
	         *          children: [
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> }
	         *          ]
	         *        },
	         *        {
	         *          state: 'collapsed',
	         *          row: <reference to row>,
	         *          parentRow: <reference to row>,
	         *          aggregations: [{
	         *            type: 'count',
	         *            col: <gridCol>,
	         *            value: 3,
	         *            label: 'count: ',
	         *            rendered: 'count: 3'
	         *          }],
	         *          children: [
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },
	         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> }
	         *          ]
	         *        }
	         *      ]
	         *    }, {<another level 0 node maybe>} ]
	         *  ```
	         *  Missing state values are false - meaning they aren't expanded.
	         *
	         *  This is used because the rowProcessors run every time the grid is refreshed, so
	         *  we'd lose the expanded state every time the grid was refreshed.  This instead gives
	         *  us a reliable lookup that persists across rowProcessors.
	         *
	         *  This tree is rebuilt every time we run the rowsProcessors.  Since each row holds a pointer
	         *  to it's tree node we can persist expand/collapse state across calls to rowsProcessor, we discard
	         *  all transient information on the tree (children, childCount) and recalculate it
	         *
	         */
	        grid.treeBase.tree = [];

	        service.defaultGridOptions(grid.options);

	        grid.registerRowsProcessor(service.treeRows, 410);

	        grid.registerColumnBuilder( service.treeBaseColumnBuilder );

	        service.createRowHeader( grid );

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeBase.api:PublicApi
	         *
	         *  @description Public Api for treeBase feature
	         */
	        var publicApi = {
	          events: {
	            treeBase: {
	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.treeBase.api:PublicApi
	               * @name rowExpanded
	               * @description raised whenever a row is expanded.  If you are dynamically
	               * rendering your tree you can listen to this event, and then retrieve
	               * the children of this row and load them into the grid data.
	               *
	               * When the data is loaded the grid will automatically refresh to show these new rows
	               *
	               * <pre>
	               *      gridApi.treeBase.on.rowExpanded(scope,function(row){})
	               * </pre>
	               * @param {gridRow} row the row that was expanded.  You can also
	               * retrieve the grid from this row with row.grid
	               */
	              rowExpanded: {},

	              /**
	               * @ngdoc event
	               * @eventOf ui.grid.treeBase.api:PublicApi
	               * @name rowCollapsed
	               * @description raised whenever a row is collapsed.  Doesn't really have
	               * a purpose at the moment, included for symmetry
	               *
	               * <pre>
	               *      gridApi.treeBase.on.rowCollapsed(scope,function(row){})
	               * </pre>
	               * @param {gridRow} row the row that was collapsed.  You can also
	               * retrieve the grid from this row with row.grid
	               */
	              rowCollapsed: {}
	            }
	          },

	          methods: {
	            treeBase: {
	              /**
	               * @ngdoc function
	               * @name expandAllRows
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Expands all tree rows
	               */
	              expandAllRows: function () {
	                service.expandAllRows(grid);
	              },

	              /**
	               * @ngdoc function
	               * @name collapseAllRows
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description collapse all tree rows
	               */
	              collapseAllRows: function () {
	                service.collapseAllRows(grid);
	              },

	              /**
	               * @ngdoc function
	               * @name toggleRowTreeState
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description  call expand if the row is collapsed, collapse if it is expanded
	               * @param {gridRow} row the row you wish to toggle
	               */
	              toggleRowTreeState: function (row) {
	                service.toggleRowTreeState(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name expandRow
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description expand the immediate children of the specified row
	               * @param {gridRow} row the row you wish to expand
	               */
	              expandRow: function (row) {
	                service.expandRow(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name expandRowChildren
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description expand all children of the specified row
	               * @param {gridRow} row the row you wish to expand
	               */
	              expandRowChildren: function (row) {
	                service.expandRowChildren(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name collapseRow
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description collapse  the specified row.  When
	               * you expand the row again, all grandchildren will retain their state
	               * @param {gridRow} row the row you wish to collapse
	               */
	              collapseRow: function ( row ) {
	                service.collapseRow(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name collapseRowChildren
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description collapse all children of the specified row.  When
	               * you expand the row again, all grandchildren will be collapsed
	               * @param {gridRow} row the row you wish to collapse children for
	               */
	              collapseRowChildren: function ( row ) {
	                service.collapseRowChildren(grid, row);
	              },

	              /**
	               * @ngdoc function
	               * @name getTreeState
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Get the tree state for this grid,
	               * used by the saveState feature
	               * Returned treeState as an object
	               *   `{ expandedState: { uid: 'expanded', uid: 'collapsed' } }`
	               * where expandedState is a hash of row uid and the current expanded state
	               *
	               * @returns {object} tree state
	               *
	               * TODO - this needs work - we need an identifier that persists across instantiations,
	               * not uid.  This really means we need a row identity defined, but that won't work for
	               * grouping.  Perhaps this needs to be moved up to treeView and grouping, rather than
	               * being in base.
	               */
	              getTreeExpandedState: function () {
	                return { expandedState: service.getTreeState(grid) };
	              },

	              /**
	               * @ngdoc function
	               * @name setTreeState
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Set the expanded states of the tree
	               * @param {object} config the config you want to apply, in the format
	               * provided by getTreeState
	               */
	              setTreeState: function ( config ) {
	                service.setTreeState( grid, config );
	              },

	              /**
	               * @ngdoc function
	               * @name getRowChildren
	               * @methodOf  ui.grid.treeBase.api:PublicApi
	               * @description Get the children of the specified row
	               * @param {GridRow} row the row you want the children of
	               * @returns {Array} array of children of this row, the children
	               * are all gridRows
	               */
	              getRowChildren: function ( row ){
	                return row.treeNode.children.map( function( childNode ){
	                  return childNode.row;
	                });
	              }
	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);

	        grid.api.registerMethodsFromObject(publicApi.methods);
	      },


	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeBase.api:GridOptions
	         *
	         *  @description GridOptions for treeBase feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         */

	        /**
	         *  @ngdoc object
	         *  @name treeRowHeaderBaseWidth
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Base width of the tree header, provides for a single level of tree.  This
	         *  is incremented by `treeIndent` for each extra level
	         *  <br/>Defaults to 30
	         */
	        gridOptions.treeRowHeaderBaseWidth = gridOptions.treeRowHeaderBaseWidth || 30;

	        /**
	         *  @ngdoc object
	         *  @name treeIndent
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Number of pixels of indent for the icon at each tree level, wider indents are visually more pleasing,
	         *  but will make the tree row header wider
	         *  <br/>Defaults to 10
	         */
	        gridOptions.treeIndent = gridOptions.treeIndent || 10;

	        /**
	         *  @ngdoc object
	         *  @name showTreeRowHeader
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description If set to false, don't create the row header.  You'll need to programmatically control the expand
	         *  states
	         *  <br/>Defaults to true
	         */
	        gridOptions.showTreeRowHeader = gridOptions.showTreeRowHeader !== false;

	        /**
	         *  @ngdoc object
	         *  @name showTreeExpandNoChildren
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description If set to true, show the expand/collapse button even if there are no
	         *  children of a node.  You'd use this if you're planning to dynamically load the children
	         *
	         *  <br/>Defaults to true, grouping overrides to false
	         */
	        gridOptions.showTreeExpandNoChildren = gridOptions.showTreeExpandNoChildren !== false;

	        /**
	         *  @ngdoc object
	         *  @name treeRowHeaderAlwaysVisible
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description If set to true, row header even if there are no tree nodes
	         *
	         *  <br/>Defaults to true
	         */
	        gridOptions.treeRowHeaderAlwaysVisible = gridOptions.treeRowHeaderAlwaysVisible !== false;

	        /**
	         *  @ngdoc object
	         *  @name treeCustomAggregations
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Define custom aggregation functions. The properties of this object will be
	         *  aggregation types available for use on columnDef with {@link ui.grid.treeBase.api:ColumnDef treeAggregationType} or through the column menu.
	         *  If a function defined here uses the same name as one of the native aggregations, this one will take precedence.
	         *  The object format is:
	         *
	         *  <pre>
	         *    {
	         *      aggregationName: {
	         *        label: (optional) string,
	         *        aggregationFn: function( aggregation, fieldValue, numValue, row ){...},
	         *        finalizerFn: (optional) function( aggregation ){...}
	       *        },
	         *      mean: {
	         *        label: 'mean',
	         *        aggregationFn: function( aggregation, fieldValue, numValue ){
	       *            aggregation.count = (aggregation.count || 1) + 1;
	         *          aggregation.sum = (aggregation.sum || 0) + numValue;
	         *        },
	         *        finalizerFn: function( aggregation ){
	         *          aggregation.value = aggregation.sum / aggregation.count
	         *        }
	         *      }
	         *    }
	         *  </pre>
	         *
	         *  <br/>The `finalizerFn` may be used to manipulate the value before rendering, or to
	         *  apply a custom rendered value. If `aggregation.rendered` is left undefined, the value will be
	         *  rendered. Note that the native aggregation functions use an `finalizerFn` to concatenate
	         *  the label and the value.
	         *
	         *  <br/>Defaults to {}
	         */
	        gridOptions.treeCustomAggregations = gridOptions.treeCustomAggregations || {};

	        /**
	         *  @ngdoc object
	         *  @name enableExpandAll
	         *  @propertyOf  ui.grid.treeBase.api:GridOptions
	         *  @description Enable the expand all button at the top of the row header
	         *
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableExpandAll = gridOptions.enableExpandAll !== false;
	      },


	      /**
	       * @ngdoc function
	       * @name treeBaseColumnBuilder
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Sets the tree defaults based on the columnDefs
	       *
	       * @param {object} colDef columnDef we're basing on
	       * @param {GridCol} col the column we're to update
	       * @param {object} gridOptions the options we should use
	       * @returns {promise} promise for the builder - actually we do it all inline so it's immediately resolved
	       */
	      treeBaseColumnBuilder: function (colDef, col, gridOptions) {


	        /**
	         *  @ngdoc object
	         *  @name customTreeAggregationFn
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description A custom function that aggregates rows into some form of
	         *  total.  Aggregations run row-by-row, the function needs to be capable of
	         *  creating a running total.
	         *
	         *  The function will be provided the aggregation item (in which you can store running
	         *  totals), the row value that is to be aggregated, and that same row value converted to
	         *  a number (most aggregations work on numbers)
	         *  @example
	         *  <pre>
	         *    customTreeAggregationFn = function ( aggregation, fieldValue, numValue, row ){
	         *      // calculates the average of the squares of the values
	         *      if ( typeof(aggregation.count) === 'undefined' ){
	         *        aggregation.count = 0;
	         *      }
	         *      aggregation.count++;
	         *
	         *      if ( !isNaN(numValue) ){
	         *        if ( typeof(aggregation.total) === 'undefined' ){
	         *          aggregation.total = 0;
	         *        }
	         *        aggregation.total = aggregation.total + numValue * numValue;
	         *      }
	         *
	         *      aggregation.value = aggregation.total / aggregation.count;
	         *    }
	         *  </pre>
	         *  <br/>Defaults to undefined. May be overwritten by treeAggregationType, the two options should not be used together.
	         */
	        if ( typeof(colDef.customTreeAggregationFn) !== 'undefined' ){
	          col.treeAggregationFn = colDef.customTreeAggregationFn;
	        }

	        /**
	         *  @ngdoc object
	         *  @name treeAggregationType
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description Use one of the native or grid-level aggregation methods for calculating aggregations on this column.
	         *  Native method are in the constants file and include: SUM, COUNT, MIN, MAX, AVG. This may also be the property the
	         *  name of an aggregation function defined with {@link ui.grid.treeBase.api:GridOptions treeCustomAggregations}.
	         *
	         *  <pre>
	         *      treeAggregationType = uiGridTreeBaseConstants.aggregation.SUM,
	         *    }
	         *  </pre>
	         *
	         *  If you are using aggregations you should either:
	         *
	         *   - also use grouping, in which case the aggregations are displayed in the group header, OR
	         *   - use treeView, in which case you can set `treeAggregationUpdateEntity: true` in the colDef, and
	         *     treeBase will store the aggregation information in the entity, or you can set `treeAggregationUpdateEntity: false`
	         *     in the colDef, and you need to manual retrieve the calculated aggregations from the row.treeNode.aggregations
	         *
	         *  <br/>Takes precendence over a treeAggregationFn, the two options should not be used together.
	         *  <br/>Defaults to undefined.
	         */
	        if ( typeof(colDef.treeAggregationType) !== 'undefined' ){
	          col.treeAggregation = { type: colDef.treeAggregationType };
	          if ( typeof(gridOptions.treeCustomAggregations[colDef.treeAggregationType]) !== 'undefined' ){
	            col.treeAggregationFn = gridOptions.treeCustomAggregations[colDef.treeAggregationType].aggregationFn;
	            col.treeAggregationFinalizerFn = gridOptions.treeCustomAggregations[colDef.treeAggregationType].finalizerFn;
	            col.treeAggregation.label = gridOptions.treeCustomAggregations[colDef.treeAggregationType].label;
	          } else if ( typeof(service.nativeAggregations()[colDef.treeAggregationType]) !== 'undefined' ){
	            col.treeAggregationFn = service.nativeAggregations()[colDef.treeAggregationType].aggregationFn;
	            col.treeAggregation.label = service.nativeAggregations()[colDef.treeAggregationType].label;
	          }
	        }

	         /**
	         *  @ngdoc object
	         *  @name treeAggregationLabel
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description A custom label to use for this aggregation. If provided we don't use native i18n.
	         */
	        if ( typeof(colDef.treeAggregationLabel) !== 'undefined' ){
	          if (typeof(col.treeAggregation) === 'undefined' ){
	            col.treeAggregation = {};
	          }
	          col.treeAggregation.label = colDef.treeAggregationLabel;
	        }

	        /**
	         *  @ngdoc object
	         *  @name treeAggregationUpdateEntity
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description Store calculated aggregations into the entity, allowing them
	         *  to be displayed in the grid using a standard cellTemplate.  This defaults to true,
	         *  if you are using grouping then you shouldn't set it to false, as then the aggregations won't
	         *  display.
	         *
	         *  If you are using treeView in most cases you'll want to set this to true.  This will result in
	         *  getCellValue returning the aggregation rather than whatever was stored in the cell attribute on
	         *  the entity.  If you want to render the underlying entity value (and do something else with the aggregation)
	         *  then you could use a custom cellTemplate to display `row.entity.myAttribute`, rather than using getCellValue.
	         *
	         *  <br/>Defaults to true
	         *
	         *  @example
	         *  <pre>
	         *    gridOptions.columns = [{
	         *      name: 'myCol',
	         *      treeAggregation: { type: uiGridTreeBaseConstants.aggregation.SUM },
	         *      treeAggregationUpdateEntity: true
	         *      cellTemplate: '<div>{{row.entity.myCol + " " + row.treeNode.aggregations[0].rendered}}</div>'
	         *    }];
	         * </pre>
	         */
	        col.treeAggregationUpdateEntity = colDef.treeAggregationUpdateEntity !== false;

	        /**
	         *  @ngdoc object
	         *  @name customTreeAggregationFinalizerFn
	         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
	         *  @description A custom function that populates aggregation.rendered, this is called when
	         *  a particular aggregation has been fully calculated, and we want to render the value.
	         *
	         *  With the native aggregation options we just concatenate `aggregation.label` and
	         *  `aggregation.value`, but if you wanted to apply a filter or otherwise manipulate the label
	         *  or the value, you can do so with this function. This function will be called after the
	         *  the default `finalizerFn`.
	         *
	         *  @example
	         *  <pre>
	         *    customTreeAggregationFinalizerFn = function ( aggregation ){
	         *      aggregation.rendered = aggregation.label + aggregation.value / 100 + '%';
	         *    }
	         *  </pre>
	         *  <br/>Defaults to undefined.
	         */
	        if ( typeof(col.customTreeAggregationFinalizerFn) === 'undefined' ){
	          col.customTreeAggregationFinalizerFn = colDef.customTreeAggregationFinalizerFn;
	        }

	      },


	      /**
	       * @ngdoc function
	       * @name createRowHeader
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Create the rowHeader.  If treeRowHeaderAlwaysVisible then
	       * set it to visible, otherwise set it to invisible
	       *
	       * @param {Grid} grid grid object
	       */
	      createRowHeader: function( grid ){
	        var rowHeaderColumnDef = {
	          name: uiGridTreeBaseConstants.rowHeaderColName,
	          displayName: '',
	          width:  grid.options.treeRowHeaderBaseWidth,
	          minWidth: 10,
	          cellTemplate: 'ui-grid/treeBaseRowHeader',
	          headerCellTemplate: 'ui-grid/treeBaseHeaderCell',
	          enableColumnResizing: false,
	          enableColumnMenu: false,
	          exporterSuppressExport: true,
	          allowCellFocus: true
	        };

	        rowHeaderColumnDef.visible = grid.options.treeRowHeaderAlwaysVisible;
	        grid.addRowHeaderColumn( rowHeaderColumnDef, -100 );
	      },


	      /**
	       * @ngdoc function
	       * @name expandAllRows
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Expands all nodes in the tree
	       *
	       * @param {Grid} grid grid object
	       */
	      expandAllRows: function (grid) {
	        grid.treeBase.tree.forEach( function( node ) {
	          service.setAllNodes( grid, node, uiGridTreeBaseConstants.EXPANDED);
	        });
	        grid.treeBase.expandAll = true;
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name collapseAllRows
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Collapses all nodes in the tree
	       *
	       * @param {Grid} grid grid object
	       */
	      collapseAllRows: function (grid) {
	        grid.treeBase.tree.forEach( function( node ) {
	          service.setAllNodes( grid, node, uiGridTreeBaseConstants.COLLAPSED);
	        });
	        grid.treeBase.expandAll = false;
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name setAllNodes
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Works through a subset of grid.treeBase.rowExpandedStates, setting
	       * all child nodes (and their descendents) of the provided node to the given state.
	       *
	       * Calls itself recursively on all nodes so as to achieve this.
	       *
	       * @param {Grid} grid the grid we're operating on (so we can raise events)
	       * @param {object} treeNode a node in the tree that we want to update
	       * @param {string} targetState the state we want to set it to
	       */
	      setAllNodes: function (grid, treeNode, targetState) {
	        if ( typeof(treeNode.state) !== 'undefined' && treeNode.state !== targetState ){
	          treeNode.state = targetState;

	          if ( targetState === uiGridTreeBaseConstants.EXPANDED ){
	            grid.api.treeBase.raise.rowExpanded(treeNode.row);
	          } else {
	            grid.api.treeBase.raise.rowCollapsed(treeNode.row);
	          }
	        }

	        // set all child nodes
	        if ( treeNode.children ){
	          treeNode.children.forEach(function( childNode ){
	            service.setAllNodes(grid, childNode, targetState);
	          });
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name toggleRowTreeState
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Toggles the expand or collapse state of this grouped row, if
	       * it's a parent row
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to toggle
	       */
	      toggleRowTreeState: function ( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        if (row.treeNode.state === uiGridTreeBaseConstants.EXPANDED){
	          service.collapseRow(grid, row);
	        } else {
	          service.expandRow(grid, row);
	        }

	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name expandRow
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Expands this specific row, showing only immediate children.
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to expand
	       */
	      expandRow: function ( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        if ( row.treeNode.state !== uiGridTreeBaseConstants.EXPANDED ){
	          row.treeNode.state = uiGridTreeBaseConstants.EXPANDED;
	          grid.api.treeBase.raise.rowExpanded(row);
	          grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
	          grid.queueGridRefresh();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name expandRowChildren
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Expands this specific row, showing all children.
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to expand
	       */
	      expandRowChildren: function ( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        service.setAllNodes(grid, row.treeNode, uiGridTreeBaseConstants.EXPANDED);
	        grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name collapseRow
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Collapses this specific row
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to collapse
	       */
	      collapseRow: function( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        if ( row.treeNode.state !== uiGridTreeBaseConstants.COLLAPSED ){
	          row.treeNode.state = uiGridTreeBaseConstants.COLLAPSED;
	          grid.treeBase.expandAll = false;
	          grid.api.treeBase.raise.rowCollapsed(row);
	          grid.queueGridRefresh();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name collapseRowChildren
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Collapses this specific row and all children
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to collapse
	       */
	      collapseRowChildren: function( grid, row ){
	        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ){
	          return;
	        }

	        service.setAllNodes(grid, row.treeNode, uiGridTreeBaseConstants.COLLAPSED);
	        grid.treeBase.expandAll = false;
	        grid.queueGridRefresh();
	      },


	      /**
	       * @ngdoc function
	       * @name allExpanded
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Returns true if all rows are expanded, false
	       * if they're not.  Walks the tree to determine this.  Used
	       * to set the expandAll state.
	       *
	       * If the node has no children, then return true (it's immaterial
	       * whether it is expanded).  If the node has children, then return
	       * false if this node is collapsed, or if any child node is not all expanded
	       *
	       * @param {object} tree the grid to check
	       * @returns {boolean} whether or not the tree is all expanded
	       */
	      allExpanded: function( tree ){
	        var allExpanded = true;
	        tree.forEach( function( node ){
	          if ( !service.allExpandedInternal( node ) ){
	            allExpanded = false;
	          }
	        });
	        return allExpanded;
	      },

	      allExpandedInternal: function( treeNode ){
	        if ( treeNode.children && treeNode.children.length > 0 ){
	          if ( treeNode.state === uiGridTreeBaseConstants.COLLAPSED ){
	            return false;
	          }
	          var allExpanded = true;
	          treeNode.children.forEach( function( node ){
	            if ( !service.allExpandedInternal( node ) ){
	              allExpanded = false;
	            }
	          });
	          return allExpanded;
	        } else {
	          return true;
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name treeRows
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description The rowProcessor that adds the nodes to the tree, and sets the visible
	       * state of each row based on it's parent state
	       *
	       * Assumes it is always called after the sorting processor, and the grouping processor if there is one.
	       * Performs any tree sorts itself after having built the tree
	       *
	       * Processes all the rows in order, setting the group level based on the $$treeLevel in the associated
	       * entity, and setting the visible state based on the parent's state.
	       *
	       * Calculates the deepest level of tree whilst it goes, and updates that so that the header column can be correctly
	       * sized.
	       *
	       * Aggregates if necessary along the way.
	       *
	       * @param {array} renderableRows the rows we want to process, usually the output from the previous rowProcessor
	       * @returns {array} the updated rows
	       */
	      treeRows: function( renderableRows ) {
	        if (renderableRows.length === 0){
	          return renderableRows;
	        }

	        var grid = this;
	        var currentLevel = 0;
	        var currentState = uiGridTreeBaseConstants.EXPANDED;
	        var parents = [];

	        grid.treeBase.tree = service.createTree( grid, renderableRows );
	        service.updateRowHeaderWidth( grid );

	        service.sortTree( grid );
	        service.fixFilter( grid );

	        return service.renderTree( grid.treeBase.tree );
	      },


	      /**
	       * @ngdoc function
	       * @name createOrUpdateRowHeaderWidth
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Calculates the rowHeader width.
	       *
	       * If rowHeader is always present, updates the width.
	       *
	       * If rowHeader is only sometimes present (`treeRowHeaderAlwaysVisible: false`), determines whether there
	       * should be one, then creates or removes it as appropriate, with the created rowHeader having the
	       * right width.
	       *
	       * If there's never a rowHeader then never creates one: `showTreeRowHeader: false`
	       *
	       * @param {Grid} grid the grid we want to set the row header on
	       */
	      updateRowHeaderWidth: function( grid ){
	        var rowHeader = grid.getColumn(uiGridTreeBaseConstants.rowHeaderColName);

	        var newWidth = grid.options.treeRowHeaderBaseWidth + grid.options.treeIndent * Math.max(grid.treeBase.numberLevels - 1, 0);
	        if ( rowHeader && newWidth !== rowHeader.width ){
	          rowHeader.width = newWidth;
	          grid.queueRefresh();
	        }

	        var newVisibility = true;
	        if ( grid.options.showTreeRowHeader === false ){
	          newVisibility = false;
	        }
	        if ( grid.options.treeRowHeaderAlwaysVisible === false && grid.treeBase.numberLevels <= 0 ){
	          newVisibility = false;
	        }
	        if ( rowHeader.visible !== newVisibility ) {
	          rowHeader.visible = newVisibility;
	          rowHeader.colDef.visible = newVisibility;
	          grid.queueGridRefresh();
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name renderTree
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Creates an array of rows based on the tree, exporting only
	       * the visible nodes and leaves
	       *
	       * @param {array} nodeList the list of nodes - can be grid.treeBase.tree, or can be node.children when
	       * we're calling recursively
	       * @returns {array} renderable rows
	       */
	      renderTree: function( nodeList ){
	        var renderableRows = [];

	        nodeList.forEach( function ( node ){
	          if ( node.row.visible ){
	            renderableRows.push( node.row );
	          }
	          if ( node.state === uiGridTreeBaseConstants.EXPANDED && node.children && node.children.length > 0 ){
	            renderableRows = renderableRows.concat( service.renderTree( node.children ) );
	          }
	        });
	        return renderableRows;
	      },


	      /**
	       * @ngdoc function
	       * @name createTree
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Creates a tree from the renderableRows
	       *
	       * @param {Grid} grid the grid
	       * @param {array} renderableRows the rows we want to create a tree from
	       * @returns {object} the tree we've build
	       */
	      createTree: function( grid, renderableRows ) {
	        var currentLevel = -1;
	        var parents = [];
	        var currentState;
	        grid.treeBase.tree = [];
	        grid.treeBase.numberLevels = 0;
	        var aggregations = service.getAggregations( grid );

	        var createNode = function( row ){
	          if ( typeof(row.entity.$$treeLevel) !== 'undefined' && row.treeLevel !== row.entity.$$treeLevel ){
	            row.treeLevel = row.entity.$$treeLevel;
	          }

	          if ( row.treeLevel <= currentLevel ){
	            // pop any levels that aren't parents of this level, formatting the aggregation at the same time
	            while ( row.treeLevel <= currentLevel ){
	              var lastParent = parents.pop();
	              service.finaliseAggregations( lastParent );
	              currentLevel--;
	            }

	            // reset our current state based on the new parent, set to expanded if this is a level 0 node
	            if ( parents.length > 0 ){
	              currentState = service.setCurrentState(parents);
	            } else {
	              currentState = uiGridTreeBaseConstants.EXPANDED;
	            }
	          }

	          // aggregate if this is a leaf node
	          if ( ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) && row.visible  ){
	            service.aggregate( grid, row, parents );
	          }

	          // add this node to the tree
	          service.addOrUseNode(grid, row, parents, aggregations);

	          if ( typeof(row.treeLevel) !== 'undefined' && row.treeLevel !== null && row.treeLevel >= 0 ){
	            parents.push(row);
	            currentLevel++;
	            currentState = service.setCurrentState(parents);
	          }

	          // update the tree number of levels, so we can set header width if we need to
	          if ( grid.treeBase.numberLevels < row.treeLevel + 1){
	            grid.treeBase.numberLevels = row.treeLevel + 1;
	          }
	        };

	        renderableRows.forEach( createNode );

	        // finalise remaining aggregations
	        while ( parents.length > 0 ){
	          var lastParent = parents.pop();
	          service.finaliseAggregations( lastParent );
	        }

	        return grid.treeBase.tree;
	      },


	      /**
	       * @ngdoc function
	       * @name addOrUseNode
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Creates a tree node for this row.  If this row already has a treeNode
	       * recorded against it, preserves the state, but otherwise overwrites the data.
	       *
	       * @param {grid} grid the grid we're operating on
	       * @param {gridRow} row the row we want to set
	       * @param {array} parents an array of the parents this row should have
	       * @param {array} aggregationBase empty aggregation information
	       * @returns {undefined} updates the parents array, updates the row to have a treeNode, and updates the
	       * grid.treeBase.tree
	       */
	      addOrUseNode: function( grid, row, parents, aggregationBase ){
	        var newAggregations = [];
	        aggregationBase.forEach( function(aggregation){
	          newAggregations.push(service.buildAggregationObject(aggregation.col));
	        });

	        var newNode = { state: uiGridTreeBaseConstants.COLLAPSED, row: row, parentRow: null, aggregations: newAggregations, children: [] };
	        if ( row.treeNode ){
	          newNode.state = row.treeNode.state;
	        }
	        if ( parents.length > 0 ){
	          newNode.parentRow = parents[parents.length - 1];
	        }
	        row.treeNode = newNode;

	        if ( parents.length === 0 ){
	          grid.treeBase.tree.push( newNode );
	        } else {
	          parents[parents.length - 1].treeNode.children.push( newNode );
	        }
	      },


	      /**
	       * @ngdoc function
	       * @name setCurrentState
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Looks at the parents array to determine our current state.
	       * If any node in the hierarchy is collapsed, then return collapsed, otherwise return
	       * expanded.
	       *
	       * @param {array} parents an array of the parents this row should have
	       * @returns {string} the state we should be setting to any nodes we see
	       */
	      setCurrentState: function( parents ){
	        var currentState = uiGridTreeBaseConstants.EXPANDED;
	        parents.forEach( function(parent){
	          if ( parent.treeNode.state === uiGridTreeBaseConstants.COLLAPSED ){
	            currentState = uiGridTreeBaseConstants.COLLAPSED;
	          }
	        });
	        return currentState;
	      },


	      /**
	       * @ngdoc function
	       * @name sortTree
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Performs a recursive sort on the tree nodes, sorting the
	       * children of each node and putting them back into the children array.
	       *
	       * Before doing this it turns back on all the sortIgnore - things that were previously
	       * ignored we process now.  Since we're sorting within the nodes, presumably anything
	       * that was already sorted is how we derived the nodes, we can keep those sorts too.
	       *
	       * We only sort tree nodes that are expanded - no point in wasting effort sorting collapsed
	       * nodes
	       *
	       * @param {Grid} grid the grid to get the aggregation information from
	       * @returns {array} the aggregation information
	       */
	      sortTree: function( grid ){
	        grid.columns.forEach( function( column ) {
	          if ( column.sort && column.sort.ignoreSort ){
	            delete column.sort.ignoreSort;
	          }
	        });

	        grid.treeBase.tree = service.sortInternal( grid, grid.treeBase.tree );
	      },

	      sortInternal: function( grid, treeList ){
	        var rows = treeList.map( function( node ){
	          return node.row;
	        });

	        rows = rowSorter.sort( grid, rows, grid.columns );

	        var treeNodes = rows.map( function( row ){
	          return row.treeNode;
	        });

	        treeNodes.forEach( function( node ){
	          if ( node.state === uiGridTreeBaseConstants.EXPANDED && node.children && node.children.length > 0 ){
	            node.children = service.sortInternal( grid, node.children );
	          }
	        });

	        return treeNodes;
	      },

	      /**
	       * @ngdoc function
	       * @name fixFilter
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description After filtering has run, we need to go back through the tree
	       * and make sure the parent rows are always visible if any of the child rows
	       * are visible (filtering may make a child visible, but the parent may not
	       * match the filter criteria)
	       *
	       * This has a risk of being computationally expensive, we do it by walking
	       * the tree and remembering whether there are any invisible nodes on the
	       * way down.
	       *
	       * @param {Grid} grid the grid to fix filters on
	       */
	      fixFilter: function( grid ){
	        var parentsVisible;

	        grid.treeBase.tree.forEach( function( node ){
	          if ( node.children && node.children.length > 0 ){
	            parentsVisible = node.row.visible;
	            service.fixFilterInternal( node.children, parentsVisible );
	          }
	        });
	      },

	      fixFilterInternal: function( nodes, parentsVisible) {
	        nodes.forEach( function( node ){
	          if ( node.row.visible && !parentsVisible ){
	            service.setParentsVisible( node );
	            parentsVisible = true;
	          }

	          if ( node.children && node.children.length > 0 ){
	            if ( service.fixFilterInternal( node.children, ( parentsVisible && node.row.visible ) ) ) {
	              parentsVisible = true;
	            }
	          }
	        });

	        return parentsVisible;
	      },

	      setParentsVisible: function( node ){
	        while ( node.parentRow ){
	          node.parentRow.visible = true;
	          node = node.parentRow.treeNode;
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name buildAggregationObject
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Build the object which is stored on the column for holding meta-data about the aggregation.
	       * This method should only be called with columns which have an aggregation.
	       *
	       * @param {Column} the column which this object relates to
	       * @returns {object} {col: Column object, label: string, type: string (optional)}
	       */
	      buildAggregationObject: function( column ){
	        var newAggregation = { col: column };

	        if ( column.treeAggregation && column.treeAggregation.type ){
	          newAggregation.type = column.treeAggregation.type;
	        }

	        if ( column.treeAggregation && column.treeAggregation.label ){
	          newAggregation.label = column.treeAggregation.label;
	        }

	        return newAggregation;
	      },

	      /**
	       * @ngdoc function
	       * @name getAggregations
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Looks through the grid columns to find those with aggregations,
	       * and collates the aggregation information into an array, returns that array
	       *
	       * @param {Grid} grid the grid to get the aggregation information from
	       * @returns {array} the aggregation information
	       */
	      getAggregations: function( grid ){
	        var aggregateArray = [];

	        grid.columns.forEach( function(column){
	          if ( typeof(column.treeAggregationFn) !== 'undefined' ){
	            aggregateArray.push( service.buildAggregationObject(column) );

	            if ( grid.options.showColumnFooter && typeof(column.colDef.aggregationType) === 'undefined' && column.treeAggregation ){
	              // Add aggregation object for footer
	              column.treeFooterAggregation = service.buildAggregationObject(column);
	              column.aggregationType = service.treeFooterAggregationType;
	            }
	          }
	        });
	        return aggregateArray;
	      },


	      /**
	       * @ngdoc function
	       * @name aggregate
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Accumulate the data from this row onto the aggregations for each parent
	       *
	       * Iterate over the parents, then iterate over the aggregations for each of those parents,
	       * and perform the aggregation for each individual aggregation
	       *
	       * @param {Grid} grid grid object
	       * @param {GridRow} row the row we want to set grouping visibility on
	       * @param {array} parents the parents that we would want to aggregate onto
	       */
	      aggregate: function( grid, row, parents ){
	        if ( parents.length === 0 && row.treeNode && row.treeNode.aggregations ){
	          row.treeNode.aggregations.forEach(function(aggregation){
	            // Calculate aggregations for footer even if there are no grouped rows
	            if ( typeof(aggregation.col.treeFooterAggregation) !== 'undefined' ) {
	              var fieldValue = grid.getCellValue(row, aggregation.col);
	              var numValue = Number(fieldValue);
	              aggregation.col.treeAggregationFn(aggregation.col.treeFooterAggregation, fieldValue, numValue, row);
	            }
	          });
	        }

	        parents.forEach( function( parent, index ){
	          if ( parent.treeNode.aggregations ){
	            parent.treeNode.aggregations.forEach( function( aggregation ){
	              var fieldValue = grid.getCellValue(row, aggregation.col);
	              var numValue = Number(fieldValue);
	              aggregation.col.treeAggregationFn(aggregation, fieldValue, numValue, row);

	              if ( index === 0 && typeof(aggregation.col.treeFooterAggregation) !== 'undefined' ){
	                aggregation.col.treeAggregationFn(aggregation.col.treeFooterAggregation, fieldValue, numValue, row);
	              }
	            });
	          }
	        });
	      },


	      // Aggregation routines - no doco needed as self evident
	      nativeAggregations: function() {
	        var nativeAggregations = {
	          count: {
	            label: i18nService.get().aggregation.count,
	            menuTitle: i18nService.get().grouping.aggregate_count,
	            aggregationFn: function (aggregation, fieldValue, numValue) {
	              if (typeof(aggregation.value) === 'undefined') {
	                aggregation.value = 1;
	              } else {
	                aggregation.value++;
	              }
	            }
	          },

	          sum: {
	            label: i18nService.get().aggregation.sum,
	            menuTitle: i18nService.get().grouping.aggregate_sum,
	            aggregationFn: function( aggregation, fieldValue, numValue ) {
	              if (!isNaN(numValue)) {
	                if (typeof(aggregation.value) === 'undefined') {
	                  aggregation.value = numValue;
	                } else {
	                  aggregation.value += numValue;
	                }
	              }
	            }
	          },

	          min: {
	            label: i18nService.get().aggregation.min,
	            menuTitle: i18nService.get().grouping.aggregate_min,
	            aggregationFn: function( aggregation, fieldValue, numValue ) {
	              if (typeof(aggregation.value) === 'undefined') {
	                aggregation.value = fieldValue;
	              } else {
	                if (typeof(fieldValue) !== 'undefined' && fieldValue !== null && (fieldValue < aggregation.value || aggregation.value === null)) {
	                  aggregation.value = fieldValue;
	                }
	              }
	            }
	          },

	          max: {
	            label: i18nService.get().aggregation.max,
	            menuTitle: i18nService.get().grouping.aggregate_max,
	            aggregationFn: function( aggregation, fieldValue, numValue ){
	              if ( typeof(aggregation.value) === 'undefined' ){
	                aggregation.value = fieldValue;
	              } else {
	                if ( typeof(fieldValue) !== 'undefined' && fieldValue !== null && (fieldValue > aggregation.value || aggregation.value === null)){
	                  aggregation.value = fieldValue;
	                }
	              }
	            }
	          },

	          avg: {
	            label: i18nService.get().aggregation.avg,
	            menuTitle: i18nService.get().grouping.aggregate_avg,
	            aggregationFn: function( aggregation, fieldValue, numValue ){
	              if ( typeof(aggregation.count) === 'undefined' ){
	                aggregation.count = 1;
	              } else {
	                aggregation.count++;
	              }

	              if ( isNaN(numValue) ){
	                return;
	              }

	              if ( typeof(aggregation.value) === 'undefined' || typeof(aggregation.sum) === 'undefined' ){
	                aggregation.value = numValue;
	                aggregation.sum = numValue;
	              } else {
	                aggregation.sum += numValue;
	                aggregation.value = aggregation.sum / aggregation.count;
	              }
	            }
	          }
	        };
	        return nativeAggregations;
	      },

	      /**
	       * @ngdoc function
	       * @name finaliseAggregation
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Helper function used to finalize aggregation nodes and footer cells
	       *
	       * @param {gridRow} row the parent we're finalising
	       * @param {aggregation} the aggregation object manipulated by the aggregationFn
	       */
	      finaliseAggregation: function(row, aggregation){
	        if ( aggregation.col.treeAggregationUpdateEntity && typeof(row) !== 'undefined' && typeof(row.entity[ '$$' + aggregation.col.uid ]) !== 'undefined' ){
	          angular.extend( aggregation, row.entity[ '$$' + aggregation.col.uid ]);
	        }

	        if ( typeof(aggregation.col.treeAggregationFinalizerFn) === 'function' ){
	          aggregation.col.treeAggregationFinalizerFn( aggregation );
	        }
	        if ( typeof(aggregation.col.customTreeAggregationFinalizerFn) === 'function' ){
	          aggregation.col.customTreeAggregationFinalizerFn( aggregation );
	        }
	        if ( typeof(aggregation.rendered) === 'undefined' ){
	          aggregation.rendered = aggregation.label ? aggregation.label + aggregation.value : aggregation.value;
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name finaliseAggregations
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Format the data from the aggregation into the rendered text
	       * e.g. if we had label: 'sum: ' and value: 25, we'd create 'sum: 25'.
	       *
	       * As part of this we call any formatting callback routines we've been provided.
	       *
	       * We write our aggregation out to the row.entity if treeAggregationUpdateEntity is
	       * set on the column - we don't overwrite any information that's already there, we append
	       * to it so that grouping can have set the groupVal beforehand without us overwriting it.
	       *
	       * We need to copy the data from the row.entity first before we finalise the aggregation,
	       * we need that information for the finaliserFn
	       *
	       * @param {gridRow} row the parent we're finalising
	       */
	      finaliseAggregations: function( row ){
	        if ( row == null || typeof(row.treeNode.aggregations) === 'undefined' ){
	          return;
	        }

	        row.treeNode.aggregations.forEach( function( aggregation ) {
	          service.finaliseAggregation(row, aggregation);

	          if ( aggregation.col.treeAggregationUpdateEntity ){
	            var aggregationCopy = {};
	            angular.forEach( aggregation, function( value, key ){
	              if ( aggregation.hasOwnProperty(key) && key !== 'col' ){
	                aggregationCopy[key] = value;
	              }
	            });

	            row.entity[ '$$' + aggregation.col.uid ] = aggregationCopy;
	          }
	        });
	      },

	      /**
	       * @ngdoc function
	       * @name treeFooterAggregationType
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Uses the tree aggregation functions and finalizers to set the
	       * column footer aggregations.
	       *
	       * @param {rows} visible rows. not used, but accepted to match signature of GridColumn.aggregationType
	       * @param {gridColumn} the column we are finalizing
	       */
	      treeFooterAggregationType: function( rows, column ) {
	        service.finaliseAggregation(undefined, column.treeFooterAggregation);
	        if ( typeof(column.treeFooterAggregation.value) === 'undefined' || column.treeFooterAggregation.rendered === null ){
	          // The was apparently no aggregation performed (perhaps this is a grouped column
	          return '';
	        }
	        return column.treeFooterAggregation.rendered;
	      }
	    };

	    return service;

	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeBase.directive:uiGridTreeRowHeaderButtons
	   *  @element div
	   *
	   *  @description Provides the expand/collapse button on rows
	   */
	  module.directive('uiGridTreeBaseRowHeaderButtons', ['$templateCache', 'uiGridTreeBaseService',
	  function ($templateCache, uiGridTreeBaseService) {
	    return {
	      replace: true,
	      restrict: 'E',
	      template: $templateCache.get('ui-grid/treeBaseRowHeaderButtons'),
	      scope: true,
	      require: '^uiGrid',
	      link: function($scope, $elm, $attrs, uiGridCtrl) {
	        var self = uiGridCtrl.grid;
	        $scope.treeButtonClick = function(row, evt) {
	          uiGridTreeBaseService.toggleRowTreeState(self, row, evt);
	        };
	      }
	    };
	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeBase.directive:uiGridTreeBaseExpandAllButtons
	   *  @element div
	   *
	   *  @description Provides the expand/collapse all button
	   */
	  module.directive('uiGridTreeBaseExpandAllButtons', ['$templateCache', 'uiGridTreeBaseService',
	  function ($templateCache, uiGridTreeBaseService) {
	    return {
	      replace: true,
	      restrict: 'E',
	      template: $templateCache.get('ui-grid/treeBaseExpandAllButtons'),
	      scope: false,
	      link: function($scope, $elm, $attrs, uiGridCtrl) {
	        var self = $scope.col.grid;

	        $scope.headerButtonClick = function(row, evt) {
	          if ( self.treeBase.expandAll ){
	            uiGridTreeBaseService.collapseAllRows(self, evt);
	          } else {
	            uiGridTreeBaseService.expandAllRows(self, evt);
	          }
	        };
	      }
	    };
	  }]);


	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeBase.directive:uiGridViewport
	   *  @element div
	   *
	   *  @description Stacks on top of ui.grid.uiGridViewport to set formatting on a tree header row
	   */
	  module.directive('uiGridViewport',
	  ['$compile', 'uiGridConstants', 'gridUtil', '$parse',
	    function ($compile, uiGridConstants, gridUtil, $parse) {
	      return {
	        priority: -200, // run after default  directive
	        scope: false,
	        compile: function ($elm, $attrs) {
	          var rowRepeatDiv = angular.element($elm.children().children()[0]);

	          var existingNgClass = rowRepeatDiv.attr("ng-class");
	          var newNgClass = '';
	          if ( existingNgClass ) {
	            newNgClass = existingNgClass.slice(0, -1) + ",'ui-grid-tree-header-row': row.treeLevel > -1}";
	          } else {
	            newNgClass = "{'ui-grid-tree-header-row': row.treeLevel > -1}";
	          }
	          rowRepeatDiv.attr("ng-class", newNgClass);

	          return {
	            pre: function ($scope, $elm, $attrs, controllers) {

	            },
	            post: function ($scope, $elm, $attrs, controllers) {
	            }
	          };
	        }
	      };
	    }]);
	})();

	(function () {
	  'use strict';

	  /**
	   * @ngdoc overview
	   * @name ui.grid.treeView
	   * @description
	   *
	   * # ui.grid.treeView
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
	   *
	   * This module provides a tree view of the data that it is provided, with nodes in that
	   * tree and leaves.  Unlike grouping, the tree is an inherent property of the data and must
	   * be provided with your data array.
	   *
	   * Design information:
	   * -------------------
	   *
	   * TreeView uses treeBase for the underlying functionality, and is a very thin wrapper around
	   * that logic.  Most of the design information has now moved to treebase.
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.treeView"></div>
	   */

	  var module = angular.module('ui.grid.treeView', ['ui.grid', 'ui.grid.treeBase']);

	  /**
	   *  @ngdoc object
	   *  @name ui.grid.treeView.constant:uiGridTreeViewConstants
	   *
	   *  @description constants available in treeView module, this includes
	   *  all the constants declared in the treeBase module (these are manually copied
	   *  as there isn't an easy way to include constants in another constants file, and
	   *  we don't want to make users include treeBase)
	   *
	   */
	  module.constant('uiGridTreeViewConstants', {
	    featureName: "treeView",
	    rowHeaderColName: 'treeBaseRowHeaderCol',
	    EXPANDED: 'expanded',
	    COLLAPSED: 'collapsed',
	    aggregation: {
	      COUNT: 'count',
	      SUM: 'sum',
	      MAX: 'max',
	      MIN: 'min',
	      AVG: 'avg'
	    }
	  });

	  /**
	   *  @ngdoc service
	   *  @name ui.grid.treeView.service:uiGridTreeViewService
	   *
	   *  @description Services for treeView features
	   */
	  module.service('uiGridTreeViewService', ['$q', 'uiGridTreeViewConstants', 'uiGridTreeBaseConstants', 'uiGridTreeBaseService', 'gridUtil', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants',
	  function ($q, uiGridTreeViewConstants, uiGridTreeBaseConstants, uiGridTreeBaseService, gridUtil, GridRow, gridClassFactory, i18nService, uiGridConstants) {

	    var service = {

	      initializeGrid: function (grid, $scope) {
	        uiGridTreeBaseService.initializeGrid( grid, $scope );

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeView.grid:treeView
	         *
	         *  @description Grid properties and functions added for treeView
	         */
	        grid.treeView = {};

	        grid.registerRowsProcessor(service.adjustSorting, 60);

	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeView.api:PublicApi
	         *
	         *  @description Public Api for treeView feature
	         */
	        var publicApi = {
	          events: {
	            treeView: {
	            }
	          },
	          methods: {
	            treeView: {
	            }
	          }
	        };

	        grid.api.registerEventsFromObject(publicApi.events);

	        grid.api.registerMethodsFromObject(publicApi.methods);

	      },

	      defaultGridOptions: function (gridOptions) {
	        //default option to true unless it was explicitly set to false
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.treeView.api:GridOptions
	         *
	         *  @description GridOptions for treeView feature, these are available to be
	         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
	         *
	         *  Many tree options are set on treeBase, make sure to look at that feature in
	         *  conjunction with these options.
	         */

	        /**
	         *  @ngdoc object
	         *  @name enableTreeView
	         *  @propertyOf  ui.grid.treeView.api:GridOptions
	         *  @description Enable row tree view for entire grid.
	         *  <br/>Defaults to true
	         */
	        gridOptions.enableTreeView = gridOptions.enableTreeView !== false;

	      },


	      /**
	       * @ngdoc function
	       * @name adjustSorting
	       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
	       * @description Trees cannot be sorted the same as flat lists of rows -
	       * trees are sorted recursively within each level - so the children of each
	       * node are sorted, but not the full set of rows.
	       *
	       * To achieve this, we suppress the normal sorting by setting ignoreSort on
	       * each of the sort columns.  When the treeBase rowsProcessor runs it will then
	       * unignore these, and will perform a recursive sort against the tree that it builds.
	       *
	       * @param {array} renderableRows the rows that we need to pass on through
	       * @returns {array} renderableRows that we passed on through
	       */
	      adjustSorting: function( renderableRows ) {
	        var grid = this;

	        grid.columns.forEach( function( column ){
	          if ( column.sort ){
	            column.sort.ignoreSort = true;
	          }
	        });

	        return renderableRows;
	      }

	    };

	    return service;

	  }]);

	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.treeView.directive:uiGridTreeView
	   *  @element div
	   *  @restrict A
	   *
	   *  @description Adds treeView features to grid
	   *
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.treeView']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true},
	        {name: 'title', enableCellEdit: true}
	      ];

	      $scope.gridOptions = { columnDefs: $scope.columnDefs, data: $scope.data };
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="gridOptions" ui-grid-tree-view></div>
	   </div>
	   </file>
	   </example>
	   */
	  module.directive('uiGridTreeView', ['uiGridTreeViewConstants', 'uiGridTreeViewService', '$templateCache',
	  function (uiGridTreeViewConstants, uiGridTreeViewService, $templateCache) {
	    return {
	      replace: true,
	      priority: 0,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            if (uiGridCtrl.grid.options.enableTreeView !== false){
	              uiGridTreeViewService.initializeGrid(uiGridCtrl.grid, $scope);
	            }
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {

	          }
	        };
	      }
	    };
	  }]);
	})();

	(function () {
	  'use strict';
	  
	  /**
	   * @ngdoc overview
	   * @name ui.grid.validate
	   * @description
	   *
	   * # ui.grid.validate
	   *
	   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
	   *
	   * This module provides the ability to validate cells upon change.
	   *
	   * Design information:
	   * -------------------
	   *
	   * Validation is not based on angularjs validation, since it would work only when editing the field.
	   * 
	   * Instead it adds custom properties to any field considered as invalid.
	   *
	   * <br/>
	   * <br/>
	   *
	   * <div doc-module-components="ui.grid.expandable"></div>
	   */

	  var module = angular.module('ui.grid.validate', ['ui.grid']);
	  
	  
	  /**
	   *  @ngdoc service
	   *  @name ui.grid.validate.service:uiGridValidateService
	   *
	   *  @description Services for validation features
	   */
	  module.service('uiGridValidateService', ['$sce', '$q', '$http', 'i18nService', 'uiGridConstants', function ($sce, $q, $http, i18nService, uiGridConstants) {

	    var service = {
	      
	      /**
	       *  @ngdoc object
	       *  @name validatorFactories
	       *  @propertyOf ui.grid.validate.service:uiGridValidateService
	       *  @description object containing all the factories used to validate data.<br/>
	       *  These factories will be in the form <br/>
	       *  ```
	       *  {
	       *    validatorFactory: function(argument) {
	       *                        return function(newValue, oldValue, rowEntity, colDef) {
	       *                          return true || false || promise
	       *                        }
	       *                      },
	       *    messageFunction: function(argument) {
	       *                       return string
	       *                     }
	       *  }
	       *  ```
	       *
	       * Promises should return true or false as result according to the result of validation.
	       */
	      validatorFactories: {},

	      
	      /**
	       * @ngdoc service
	       * @name setExternalFactoryFunction
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Adds a way to retrieve validators from an external service
	       * <p>Validators from this external service have a higher priority than default
	       * ones
	       * @param {function} externalFactoryFunction a function that accepts name and argument to pass to a
	       * validator factory and that returns an object with the same properties as 
	       * you can see in {@link ui.grid.validate.service:uiGridValidateService#properties_validatorFactories validatorFactories}
	       */
	      setExternalFactoryFunction: function(externalFactoryFunction) {
	        service.externalFactoryFunction = externalFactoryFunction;
	      },
	      
	      /**
	       * @ngdoc service
	       * @name clearExternalFactory
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Removes any link to external factory from this service
	       */
	      clearExternalFactory: function() {
	        delete service.externalFactoryFunction;
	      },

	      /**
	       * @ngdoc service
	       * @name getValidatorFromExternalFactory
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Retrieves a validator by executing a validatorFactory
	       * stored in an external service.
	       * @param {string} name the name of the validator to retrieve
	       * @param {object} argument an argument to pass to the validator factory
	       */
	      getValidatorFromExternalFactory: function(name, argument) {
	        return service.externalFactoryFunction(name, argument).validatorFactory(argument);
	      },
	      
	      /**
	       * @ngdoc service
	       * @name getMessageFromExternalFactory
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Retrieves a message stored in an external service.
	       * @param {string} name the name of the validator
	       * @param {object} argument an argument to pass to the message function
	       */
	      getMessageFromExternalFactory: function(name, argument) {
	        return service.externalFactoryFunction(name, argument).messageFunction(argument);
	      },
	      
	      /**
	       * @ngdoc service
	       * @name setValidator
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description  Adds a new validator to the service
	       * @param {string} name the name of the validator, must be unique
	       * @param {function} validatorFactory a factory that return a validatorFunction
	       * @param {function} messageFunction a function that return the error message
	       */
	      setValidator: function(name, validatorFactory, messageFunction) {
	        service.validatorFactories[name] = {
	          validatorFactory: validatorFactory,
	          messageFunction: messageFunction
	        };
	      },

	      /**
	       * @ngdoc service
	       * @name getValidator
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Returns a validator registered to the service
	       * or retrieved from the external factory
	       * @param {string} name the name of the validator to retrieve
	       * @param {object} argument an argument to pass to the validator factory
	       * @returns {object} the validator function
	       */
	      getValidator: function(name, argument) {
	        if (service.externalFactoryFunction) {
	          var validator = service.getValidatorFromExternalFactory(name, argument);
	          if (validator) {
	            return validator;
	          }
	        }
	        if (!service.validatorFactories[name]) {
	          throw ("Invalid validator name: " + name);
	        }
	        return service.validatorFactories[name].validatorFactory(argument);
	      },

	      /**
	       * @ngdoc service
	       * @name getMessage
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Returns the error message related to the validator 
	       * @param {string} name the name of the validator
	       * @param {object} argument an argument to pass to the message function
	       * @returns {string} the error message related to the validator
	       */
	      getMessage: function(name, argument) {
	        if (service.externalFactoryFunction) {
	          var message = service.getMessageFromExternalFactory(name, argument);
	          if (message) {
	            return message;
	          }
	        }
	        return service.validatorFactories[name].messageFunction(argument);
	      },

	      /**
	       * @ngdoc service
	       * @name isInvalid
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Returns true if the cell (identified by rowEntity, colDef) is invalid 
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       * @returns {boolean} true if the cell is invalid
	       */
	      isInvalid: function (rowEntity, colDef) {
	        return rowEntity['$$invalid'+colDef.name];
	      },

	      /**
	       * @ngdoc service
	       * @name setInvalid
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Makes the cell invalid by adding the proper field to the entity
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       */
	      setInvalid: function (rowEntity, colDef) {
	        rowEntity['$$invalid'+colDef.name] = true;
	      },
	    
	      /**
	       * @ngdoc service
	       * @name setValid
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Makes the cell valid by removing the proper error field from the entity
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       */
	      setValid: function (rowEntity, colDef) {
	        delete rowEntity['$$invalid'+colDef.name];
	      },

	      /**
	       * @ngdoc service
	       * @name setError
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Adds the proper error to the entity errors field
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       * @param {string} validatorName the name of the validator that is failing
	       */
	      setError: function(rowEntity, colDef, validatorName) {
	        if (!rowEntity['$$errors'+colDef.name]) {
	          rowEntity['$$errors'+colDef.name] = {};
	        }
	        rowEntity['$$errors'+colDef.name][validatorName] = true;
	      },

	      /**
	       * @ngdoc service
	       * @name clearError
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Removes the proper error from the entity errors field
	       * @param {object} rowEntity the row entity of the cell
	       * @param {object} colDef the colDef of the cell
	       * @param {string} validatorName the name of the validator that is failing
	       */
	      clearError: function(rowEntity, colDef, validatorName) {
	        if (!rowEntity['$$errors'+colDef.name]) {
	          return;
	        }
	        if (validatorName in rowEntity['$$errors'+colDef.name]) {
	            delete rowEntity['$$errors'+colDef.name][validatorName];
	        }
	      },
	      
	      /**
	       * @ngdoc function
	       * @name getErrorMessages
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description returns an array of i18n-ed error messages.
	       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	       * @param {object} colDef the column whose errors we are looking for
	       * @returns {array} An array of strings containing all the error messages for the cell
	       */
	      getErrorMessages: function(rowEntity, colDef) {
	        var errors = [];

	        if (!rowEntity['$$errors'+colDef.name] || Object.keys(rowEntity['$$errors'+colDef.name]).length === 0) {
	          return errors;
	        }

	        Object.keys(rowEntity['$$errors'+colDef.name]).sort().forEach(function(validatorName) {
	          errors.push(service.getMessage(validatorName, colDef.validators[validatorName]));
	        });
	        
	        return errors;
	      },
	      
	      /**
	       * @ngdoc function
	       * @name getFormattedErrors
	       * @methodOf  ui.grid.validate.service:uiGridValidateService
	       * @description returns the error i18n-ed and formatted in html to be shown inside the page.
	       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	       * @param {object} colDef the column whose errors we are looking for
	       * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	       * message inside the page (i.e. inside a div)
	       */
	      getFormattedErrors: function(rowEntity, colDef) {

	        var msgString = "";

	        var errors = service.getErrorMessages(rowEntity, colDef);
	        
	        if (!errors.length) {
	          return;
	        }
	        
	        errors.forEach(function(errorMsg) {
	          msgString += errorMsg + "<br/>";
	        });

	        return $sce.trustAsHtml('<p><b>' + i18nService.getSafeText('validate.error') + '</b></p>' + msgString );
	      },

	      /**
	       * @ngdoc function
	       * @name getTitleFormattedErrors
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description returns the error i18n-ed and formatted in javaScript to be shown inside an html 
	       * title attribute.
	       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	       * @param {object} colDef the column whose errors we are looking for
	       * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	       * message inside an html title attribute
	       */
	      getTitleFormattedErrors: function(rowEntity, colDef) {

	        var newLine = "\n";

	        var msgString = "";
	        
	        var errors = service.getErrorMessages(rowEntity, colDef);
	        
	        if (!errors.length) {
	          return;
	        }
	        
	        errors.forEach(function(errorMsg) {
	          msgString += errorMsg + newLine;
	        });

	        return $sce.trustAsHtml(i18nService.getSafeText('validate.error') + newLine + msgString);
	      },

	      /**
	       * @ngdoc function
	       * @name getTitleFormattedErrors
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description Executes all validators on a cell (identified by row entity and column definition) and sets or clears errors
	       * @param {object} rowEntity the row entity of the cell we want to run the validators on
	       * @param {object} colDef the column definition of the cell we want to run the validators on
	       * @param {object} newValue the value the user just entered
	       * @param {object} oldValue the value the field had before
	       */
	      runValidators: function(rowEntity, colDef, newValue, oldValue, grid) {
	        
	        if (newValue === oldValue) {
	          // If the value has not changed we perform no validation
	          return;
	        }
	        
	        if (typeof(colDef.name) === 'undefined' || !colDef.name) {
	          throw new Error('colDef.name is required to perform validation');
	        }
	        
	        service.setValid(rowEntity, colDef);
	        
	        var validateClosureFactory = function(rowEntity, colDef, validatorName) {
	          return function(value) {
	            if (!value) {
	              service.setInvalid(rowEntity, colDef);
	              service.setError(rowEntity, colDef, validatorName);
	              if (grid) {
	                grid.api.validate.raise.validationFailed(rowEntity, colDef, newValue, oldValue);
	              }
	            }
	          };
	        };

	        for (var validatorName in colDef.validators) {
	          service.clearError(rowEntity, colDef, validatorName);
	          var msg;
	          var validatorFunction = service.getValidator(validatorName, colDef.validators[validatorName]);
	          // We pass the arguments as oldValue, newValue so they are in the same order 
	          // as ng-model validators (modelValue, viewValue)
	          $q.when(validatorFunction(oldValue, newValue, rowEntity, colDef))
	            .then(validateClosureFactory(rowEntity, colDef, validatorName)
	          );
	        }
	      },

	      /**
	       * @ngdoc function
	       * @name createDefaultValidators
	       * @methodOf ui.grid.validate.service:uiGridValidateService
	       * @description adds the basic validators to the list of service validators
	       */
	      createDefaultValidators: function() {
	        service.setValidator('minLength',
	                             function (argument) {
	                               return function (oldValue, newValue, rowEntity, colDef) {
	                                 if (newValue === undefined || newValue === null || newValue === '') {
	                                   return true;
	                                 }
	                                 return newValue.length >= argument;
	                               };
	                             },
	                               function(argument) {
	                                 return i18nService.getSafeText('validate.minLength').replace('THRESHOLD', argument);
	                               });
	        
	        service.setValidator('maxLength',
	                             function (argument) {
	                               return function (oldValue, newValue, rowEntity, colDef) {
	                                 if (newValue === undefined || newValue === null || newValue === '') {
	                                   return true;
	                                 }
	                                 return newValue.length <= argument;
	                               };
	                             },
	                             function(threshold) {
	                               return i18nService.getSafeText('validate.maxLength').replace('THRESHOLD', threshold);
	                             });
	        
	        service.setValidator('required',
	                             function (argument) {
	                               return function (oldValue, newValue, rowEntity, colDef) {
	                                 if (argument) {
	                                   return !(newValue === undefined || newValue === null || newValue === '');
	                                 }
	                                 return true;
	                               };
	                             },
	                             function(argument) {
	                               return i18nService.getSafeText('validate.required');
	                             });
	      },

	      initializeGrid: function (scope, grid) {
	        grid.validate = {
	        
	          isInvalid: service.isInvalid,

	          getFormattedErrors: service.getFormattedErrors,
	         
	          getTitleFormattedErrors: service.getTitleFormattedErrors,

	          runValidators: service.runValidators
	        };
	        
	        /**
	         *  @ngdoc object
	         *  @name ui.grid.validate.api:PublicApi
	         *
	         *  @description Public Api for validation feature
	         */
	        var publicApi = {
	          events: {
	            validate: {
	              /**
	               * @ngdoc event
	               * @name validationFailed
	               * @eventOf  ui.grid.validate.api:PublicApi
	               * @description raised when one or more failure happened during validation 
	               * <pre>
	               *      gridApi.validate.on.validationFailed(scope, function(rowEntity, colDef, newValue, oldValue){...})
	               * </pre>
	               * @param {object} rowEntity the options.data element whose validation failed
	               * @param {object} colDef the column whose validation failed
	               * @param {object} newValue new value
	               * @param {object} oldValue old value
	               */
	              validationFailed: function (rowEntity, colDef, newValue, oldValue) {
	              }
	            }
	          },
	          methods: {
	            validate: {
	              /**
	               * @ngdoc function
	               * @name isInvalid
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description checks if a cell (identified by rowEntity, colDef) is invalid
	               * @param {object} rowEntity gridOptions.data[] array instance we want to check
	               * @param {object} colDef the column whose errors we want to check
	               * @returns {boolean} true if the cell value is not valid
	               */
	              isInvalid: function(rowEntity, colDef) {
	                return grid.validate.isInvalid(rowEntity, colDef);
	              },
	              /**
	               * @ngdoc function
	               * @name getErrorMessages
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description returns an array of i18n-ed error messages.
	               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	               * @param {object} colDef the column whose errors we are looking for
	               * @returns {array} An array of strings containing all the error messages for the cell
	               */
	              getErrorMessages: function (rowEntity, colDef) {
	                return grid.validate.getErrorMessages(rowEntity, colDef);
	              },
	              /**
	               * @ngdoc function
	               * @name getFormattedErrors
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description returns the error i18n-ed and formatted in html to be shown inside the page.
	               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	               * @param {object} colDef the column whose errors we are looking for
	               * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	               * message inside the page (i.e. inside a div)
	               */
	              getFormattedErrors: function (rowEntity, colDef) {
	                return grid.validate.getFormattedErrors(rowEntity, colDef);
	              },
	              /**
	               * @ngdoc function
	               * @name getTitleFormattedErrors
	               * @methodOf  ui.grid.validate.api:PublicApi
	               * @description returns the error i18n-ed and formatted in javaScript to be shown inside an html 
	               * title attribute.
	               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
	               * @param {object} colDef the column whose errors we are looking for
	               * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
	               * message inside an html title attribute
	               */
	              getTitleFormattedErrors: function (rowEntity, colDef) {
	                return grid.validate.getTitleFormattedErrors(rowEntity, colDef);
	              }
	            } 
	          }
	        };
	        
	        grid.api.registerEventsFromObject(publicApi.events);
	        grid.api.registerMethodsFromObject(publicApi.methods);

	        if (grid.edit) {
	          grid.api.edit.on.afterCellEdit(scope, function(rowEntity, colDef, newValue, oldValue) {
	            grid.validate.runValidators(rowEntity, colDef, newValue, oldValue, grid);
	          });
	        }

	        service.createDefaultValidators();
	      }
	      
	    };
	  
	    return service;
	  }]);
	  
	  
	  /**
	   *  @ngdoc directive
	   *  @name ui.grid.validate.directive:uiGridValidate
	   *  @element div
	   *  @restrict A
	   *  @description Adds validating features to the ui-grid directive.
	   *  @example
	   <example module="app">
	   <file name="app.js">
	   var app = angular.module('app', ['ui.grid', 'ui.grid.edit', 'ui.grid.validate']);

	   app.controller('MainCtrl', ['$scope', function ($scope) {
	      $scope.data = [
	        { name: 'Bob', title: 'CEO' },
	            { name: 'Frank', title: 'Lowly Developer' }
	      ];

	      $scope.columnDefs = [
	        {name: 'name', enableCellEdit: true, validators: {minLength: 3, maxLength: 9}, cellTemplate: 'ui-grid/cellTitleValidator'},
	        {name: 'title', enableCellEdit: true, validators: {required: true}, cellTemplate: 'ui-grid/cellTitleValidator'}
	      ];
	    }]);
	   </file>
	   <file name="index.html">
	   <div ng-controller="MainCtrl">
	   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-edit ui-grid-validate></div>
	   </div>
	   </file>
	   </example>
	   */

	  module.directive('uiGridValidate', ['gridUtil', 'uiGridValidateService', function (gridUtil, uiGridValidateService) {
	    return {
	      priority: 0,
	      replace: true,
	      require: '^uiGrid',
	      scope: false,
	      compile: function () {
	        return {
	          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
	            uiGridValidateService.initializeGrid($scope, uiGridCtrl.grid);
	          },
	          post: function ($scope, $elm, $attrs, uiGridCtrl) {
	          }
	        };
	      }
	    };
	  }]);
	})();
	angular.module('ui.grid').run(['$templateCache', function($templateCache) {
	  'use strict';

	  $templateCache.put('ui-grid/ui-grid-filter',
	    "<div class=\"ui-grid-filter-container\" ng-repeat=\"colFilter in col.filters\" ng-class=\"{'ui-grid-filter-cancel-button-hidden' : colFilter.disableCancelFilterButton === true }\"><div ng-if=\"colFilter.type !== 'select'\"><input type=\"text\" class=\"ui-grid-filter-input ui-grid-filter-input-{{$index}}\" ng-model=\"colFilter.term\" ng-attr-placeholder=\"{{colFilter.placeholder || ''}}\" aria-label=\"{{colFilter.ariaLabel || aria.defaultFilterLabel}}\"><div role=\"button\" class=\"ui-grid-filter-button\" ng-click=\"removeFilter(colFilter, $index)\" ng-if=\"!colFilter.disableCancelFilterButton\" ng-disabled=\"colFilter.term === undefined || colFilter.term === null || colFilter.term === ''\" ng-show=\"colFilter.term !== undefined && colFilter.term !== null && colFilter.term !== ''\"><i class=\"ui-grid-icon-cancel\" ui-grid-one-bind-aria-label=\"aria.removeFilter\">&nbsp;</i></div></div><div ng-if=\"colFilter.type === 'select'\"><select class=\"ui-grid-filter-select ui-grid-filter-input-{{$index}}\" ng-model=\"colFilter.term\" ng-attr-placeholder=\"{{colFilter.placeholder || aria.defaultFilterLabel}}\" aria-label=\"{{colFilter.ariaLabel || ''}}\" ng-options=\"option.value as option.label for option in colFilter.selectOptions\"><option value=\"\"></option></select><div role=\"button\" class=\"ui-grid-filter-button-select\" ng-click=\"removeFilter(colFilter, $index)\" ng-if=\"!colFilter.disableCancelFilterButton\" ng-disabled=\"colFilter.term === undefined || colFilter.term === null || colFilter.term === ''\" ng-show=\"colFilter.term !== undefined && colFilter.term != null\"><i class=\"ui-grid-icon-cancel\" ui-grid-one-bind-aria-label=\"aria.removeFilter\">&nbsp;</i></div></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-footer',
	    "<div class=\"ui-grid-footer-panel ui-grid-footer-aggregates-row\"><!-- tfooter --><div class=\"ui-grid-footer ui-grid-footer-viewport\"><div class=\"ui-grid-footer-canvas\"><div class=\"ui-grid-footer-cell-wrapper\" ng-style=\"colContainer.headerCellWrapperStyle()\"><div role=\"row\" class=\"ui-grid-footer-cell-row\"><div ui-grid-footer-cell role=\"gridcell\" ng-repeat=\"col in colContainer.renderedColumns track by col.uid\" col=\"col\" render-index=\"$index\" class=\"ui-grid-footer-cell ui-grid-clearfix\"></div></div></div></div></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-grid-footer',
	    "<div class=\"ui-grid-footer-info ui-grid-grid-footer\"><span>{{'search.totalItems' | t}} {{grid.rows.length}}</span> <span ng-if=\"grid.renderContainers.body.visibleRowCache.length !== grid.rows.length\" class=\"ngLabel\">({{\"search.showingItems\" | t}} {{grid.renderContainers.body.visibleRowCache.length}})</span></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-group-panel',
	    "<div class=\"ui-grid-group-panel\"><div ui-t=\"groupPanel.description\" class=\"description\" ng-show=\"groupings.length == 0\"></div><ul ng-show=\"groupings.length > 0\" class=\"ngGroupList\"><li class=\"ngGroupItem\" ng-repeat=\"group in configGroups\"><span class=\"ngGroupElement\"><span class=\"ngGroupName\">{{group.displayName}} <span ng-click=\"removeGroup($index)\" class=\"ngRemoveGroup\">x</span></span> <span ng-hide=\"$last\" class=\"ngGroupArrow\"></span></span></li></ul></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-header',
	    "<div role=\"rowgroup\" class=\"ui-grid-header\"><!-- theader --><div class=\"ui-grid-top-panel\"><div class=\"ui-grid-header-viewport\"><div class=\"ui-grid-header-canvas\"><div class=\"ui-grid-header-cell-wrapper\" ng-style=\"colContainer.headerCellWrapperStyle()\"><div role=\"row\" class=\"ui-grid-header-cell-row\"><div class=\"ui-grid-header-cell ui-grid-clearfix\" ng-repeat=\"col in colContainer.renderedColumns track by col.uid\" ui-grid-header-cell col=\"col\" render-index=\"$index\"></div></div></div></div></div></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-menu-button',
	    "<div class=\"ui-grid-menu-button\"><div role=\"button\" ui-grid-one-bind-id-grid=\"'grid-menu'\" class=\"ui-grid-icon-container\" ng-click=\"toggleMenu()\" aria-haspopup=\"true\"><i class=\"ui-grid-icon-menu\" ui-grid-one-bind-aria-label=\"i18n.aria.buttonLabel\">&nbsp;</i></div><div ui-grid-menu menu-items=\"menuItems\"></div></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-no-header',
	    "<div class=\"ui-grid-top-panel\"></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid-row',
	    "<div ng-repeat=\"(colRenderIndex, col) in colContainer.renderedColumns track by col.uid\" ui-grid-one-bind-id-grid=\"rowRenderIndex + '-' + col.uid + '-cell'\" class=\"ui-grid-cell\" ng-class=\"{ 'ui-grid-row-header-cell': col.isRowHeader }\" role=\"{{col.isRowHeader ? 'rowheader' : 'gridcell'}}\" ui-grid-cell></div>"
	  );


	  $templateCache.put('ui-grid/ui-grid',
	    "<div ui-i18n=\"en\" class=\"ui-grid\"><!-- TODO (c0bra): add \"scoped\" attr here, eventually? --><style ui-grid-style>.grid{{ grid.id }} {\n" +
	    "      /* Styles for the grid */\n" +
	    "    }\n" +
	    "\n" +
	    "    .grid{{ grid.id }} .ui-grid-row, .grid{{ grid.id }} .ui-grid-cell, .grid{{ grid.id }} .ui-grid-cell .ui-grid-vertical-bar {\n" +
	    "      height: {{ grid.options.rowHeight }}px;\n" +
	    "    }\n" +
	    "\n" +
	    "    .grid{{ grid.id }} .ui-grid-row:last-child .ui-grid-cell {\n" +
	    "      border-bottom-width: {{ ((grid.getTotalRowHeight() < grid.getViewportHeight()) && '1') || '0' }}px;\n" +
	    "    }\n" +
	    "\n" +
	    "    {{ grid.verticalScrollbarStyles }}\n" +
	    "    {{ grid.horizontalScrollbarStyles }}\n" +
	    "\n" +
	    "    /*\n" +
	    "    .ui-grid[dir=rtl] .ui-grid-viewport {\n" +
	    "      padding-left: {{ grid.verticalScrollbarWidth }}px;\n" +
	    "    }\n" +
	    "    */\n" +
	    "\n" +
	    "    {{ grid.customStyles }}</style><div class=\"ui-grid-contents-wrapper\"><div ui-grid-menu-button ng-if=\"grid.options.enableGridMenu\"></div><div ng-if=\"grid.hasLeftContainer()\" style=\"width: 0\" ui-grid-pinned-container=\"'left'\"></div><div ui-grid-render-container container-id=\"'body'\" col-container-name=\"'body'\" row-container-name=\"'body'\" bind-scroll-horizontal=\"true\" bind-scroll-vertical=\"true\" enable-horizontal-scrollbar=\"grid.options.enableHorizontalScrollbar\" enable-vertical-scrollbar=\"grid.options.enableVerticalScrollbar\"></div><div ng-if=\"grid.hasRightContainer()\" style=\"width: 0\" ui-grid-pinned-container=\"'right'\"></div><div ui-grid-grid-footer ng-if=\"grid.options.showGridFooter\"></div><div ui-grid-column-menu ng-if=\"grid.options.enableColumnMenus\"></div><div ng-transclude></div></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridCell',
	    "<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
	  );


	  $templateCache.put('ui-grid/uiGridColumnMenu',
	    "<div class=\"ui-grid-column-menu\"><div ui-grid-menu menu-items=\"menuItems\"><!-- <div class=\"ui-grid-column-menu\">\n" +
	    "    <div class=\"inner\" ng-show=\"menuShown\">\n" +
	    "      <ul>\n" +
	    "        <div ng-show=\"grid.options.enableSorting\">\n" +
	    "          <li ng-click=\"sortColumn($event, asc)\" ng-class=\"{ 'selected' : col.sort.direction == asc }\"><i class=\"ui-grid-icon-sort-alt-up\"></i> Sort Ascending</li>\n" +
	    "          <li ng-click=\"sortColumn($event, desc)\" ng-class=\"{ 'selected' : col.sort.direction == desc }\"><i class=\"ui-grid-icon-sort-alt-down\"></i> Sort Descending</li>\n" +
	    "          <li ng-show=\"col.sort.direction\" ng-click=\"unsortColumn()\"><i class=\"ui-grid-icon-cancel\"></i> Remove Sort</li>\n" +
	    "        </div>\n" +
	    "      </ul>\n" +
	    "    </div>\n" +
	    "  </div> --></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridFooterCell',
	    "<div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><div>{{ col.getAggregationText() + ( col.getAggregationValue() CUSTOM_FILTERS ) }}</div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridHeaderCell',
	    "<div role=\"columnheader\" ng-class=\"{ 'sortable': sortable }\" ui-grid-one-bind-aria-labelledby-grid=\"col.uid + '-header-text ' + col.uid + '-sortdir-text'\" aria-sort=\"{{col.sort.direction == asc ? 'ascending' : ( col.sort.direction == desc ? 'descending' : (!col.sort.direction ? 'none' : 'other'))}}\"><div role=\"button\" tabindex=\"0\" class=\"ui-grid-cell-contents ui-grid-header-cell-primary-focus\" col-index=\"renderIndex\" title=\"TOOLTIP\"><span class=\"ui-grid-header-cell-label\" ui-grid-one-bind-id-grid=\"col.uid + '-header-text'\">{{ col.displayName CUSTOM_FILTERS }}</span> <span ui-grid-one-bind-id-grid=\"col.uid + '-sortdir-text'\" ui-grid-visible=\"col.sort.direction\" aria-label=\"{{getSortDirectionAriaLabel()}}\"><i ng-class=\"{ 'ui-grid-icon-up-dir': col.sort.direction == asc, 'ui-grid-icon-down-dir': col.sort.direction == desc, 'ui-grid-icon-blank': !col.sort.direction }\" title=\"{{isSortPriorityVisible() ? i18n.headerCell.priority + ' ' + ( col.sort.priority + 1 )  : null}}\" aria-hidden=\"true\"></i> <sub ui-grid-visible=\"isSortPriorityVisible()\" class=\"ui-grid-sort-priority-number\">{{col.sort.priority + 1}}</sub></span></div><div role=\"button\" tabindex=\"0\" ui-grid-one-bind-id-grid=\"col.uid + '-menu-button'\" class=\"ui-grid-column-menu-button\" ng-if=\"grid.options.enableColumnMenus && !col.isRowHeader  && col.colDef.enableColumnMenu !== false\" ng-click=\"toggleMenu($event)\" ng-class=\"{'ui-grid-column-menu-button-last-col': isLastCol}\" ui-grid-one-bind-aria-label=\"i18n.headerCell.aria.columnMenuButtonLabel\" aria-haspopup=\"true\"><i class=\"ui-grid-icon-angle-down\" aria-hidden=\"true\">&nbsp;</i></div><div ui-grid-filter></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridMenu',
	    "<div class=\"ui-grid-menu\" ng-if=\"shown\"><style ui-grid-style>{{dynamicStyles}}</style><div class=\"ui-grid-menu-mid\" ng-show=\"shownMid\"><div class=\"ui-grid-menu-inner\"><ul role=\"menu\" class=\"ui-grid-menu-items\"><li ng-repeat=\"item in menuItems\" role=\"menuitem\" ui-grid-menu-item ui-grid-one-bind-id=\"'menuitem-'+$index\" action=\"item.action\" name=\"item.title\" active=\"item.active\" icon=\"item.icon\" shown=\"item.shown\" context=\"item.context\" template-url=\"item.templateUrl\" leave-open=\"item.leaveOpen\" screen-reader-only=\"item.screenReaderOnly\"></li></ul></div></div></div>"
	  );


	  $templateCache.put('ui-grid/uiGridMenuItem',
	    "<button type=\"button\" class=\"ui-grid-menu-item\" ng-click=\"itemAction($event, title)\" ng-show=\"itemShown()\" ng-class=\"{ 'ui-grid-menu-item-active': active(), 'ui-grid-sr-only': (!focus && screenReaderOnly) }\" aria-pressed=\"{{active()}}\" tabindex=\"0\" ng-focus=\"focus=true\" ng-blur=\"focus=false\"><i ng-class=\"icon\" aria-hidden=\"true\">&nbsp;</i> {{ name }}</button>"
	  );


	  $templateCache.put('ui-grid/uiGridRenderContainer',
	    "<div role=\"grid\" ui-grid-one-bind-id-grid=\"'grid-container'\" class=\"ui-grid-render-container\" ng-style=\"{ 'margin-left': colContainer.getMargin('left') + 'px', 'margin-right': colContainer.getMargin('right') + 'px' }\"><!-- All of these dom elements are replaced in place --><div ui-grid-header></div><div ui-grid-viewport></div><div ng-if=\"colContainer.needsHScrollbarPlaceholder()\" class=\"ui-grid-scrollbar-placeholder\" ng-style=\"{height:colContainer.grid.scrollbarHeight + 'px'}\"></div><ui-grid-footer ng-if=\"grid.options.showColumnFooter\"></ui-grid-footer></div>"
	  );


	  $templateCache.put('ui-grid/uiGridViewport',
	    "<div role=\"rowgroup\" class=\"ui-grid-viewport\" ng-style=\"colContainer.getViewportStyle()\"><!-- tbody --><div class=\"ui-grid-canvas\"><div ng-repeat=\"(rowRenderIndex, row) in rowContainer.renderedRows track by $index\" class=\"ui-grid-row\" ng-style=\"Viewport.rowStyle(rowRenderIndex)\"><div role=\"row\" ui-grid-row=\"row\" row-render-index=\"rowRenderIndex\"></div></div></div></div>"
	  );


	  $templateCache.put('ui-grid/cellEditor',
	    "<div><form name=\"inputForm\"><input type=\"INPUT_TYPE\" ng-class=\"'colt' + col.uid\" ui-grid-editor ng-model=\"MODEL_COL_FIELD\"></form></div>"
	  );


	  $templateCache.put('ui-grid/dropdownEditor',
	    "<div><form name=\"inputForm\"><select ng-class=\"'colt' + col.uid\" ui-grid-edit-dropdown ng-model=\"MODEL_COL_FIELD\" ng-options=\"field[editDropdownIdLabel] as field[editDropdownValueLabel] CUSTOM_FILTERS for field in editDropdownOptionsArray\"></select></form></div>"
	  );


	  $templateCache.put('ui-grid/fileChooserEditor',
	    "<div><form name=\"inputForm\"><input ng-class=\"'colt' + col.uid\" ui-grid-edit-file-chooser type=\"file\" id=\"files\" name=\"files[]\" ng-model=\"MODEL_COL_FIELD\"></form></div>"
	  );


	  $templateCache.put('ui-grid/expandableRow',
	    "<div ui-grid-expandable-row ng-if=\"expandableRow.shouldRenderExpand()\" class=\"expandableRow\" style=\"float:left; margin-top: 1px; margin-bottom: 1px\" ng-style=\"{width: (grid.renderContainers.body.getCanvasWidth()) + 'px', height: row.expandedRowHeight + 'px'}\"></div>"
	  );


	  $templateCache.put('ui-grid/expandableRowHeader',
	    "<div class=\"ui-grid-row-header-cell ui-grid-expandable-buttons-cell\"><div class=\"ui-grid-cell-contents\"><i ng-if=\"!row.groupHeader==true\" ng-class=\"{ 'ui-grid-icon-plus-squared' : !row.isExpanded, 'ui-grid-icon-minus-squared' : row.isExpanded }\" ng-click=\"grid.api.expandable.toggleRowExpansion(row.entity)\"></i></div></div>"
	  );


	  $templateCache.put('ui-grid/expandableScrollFiller',
	    "<div ng-if=\"expandableRow.shouldRenderFiller()\" ng-class=\"{scrollFiller:true, scrollFillerClass:(colContainer.name === 'body')}\" ng-style=\"{ width: (grid.getViewportWidth()) + 'px', height: row.expandedRowHeight + 2 + 'px', 'margin-left': grid.options.rowHeader.rowHeaderWidth + 'px' }\"><i class=\"ui-grid-icon-spin5 ui-grid-animate-spin\" ng-style=\"{'margin-top': ( row.expandedRowHeight/2 - 5) + 'px', 'margin-left' : ((grid.getViewportWidth() - grid.options.rowHeader.rowHeaderWidth)/2 - 5) + 'px'}\"></i></div>"
	  );


	  $templateCache.put('ui-grid/expandableTopRowHeader',
	    "<div class=\"ui-grid-row-header-cell ui-grid-expandable-buttons-cell\"><div class=\"ui-grid-cell-contents\"><i ng-class=\"{ 'ui-grid-icon-plus-squared' : !grid.expandable.expandedAll, 'ui-grid-icon-minus-squared' : grid.expandable.expandedAll }\" ng-click=\"grid.api.expandable.toggleAllRows()\"></i></div></div>"
	  );


	  $templateCache.put('ui-grid/csvLink',
	    "<span class=\"ui-grid-exporter-csv-link-span\"><a href=\"data:text/csv;charset=UTF-8,CSV_CONTENT\" download=\"FILE_NAME\">LINK_LABEL</a></span>"
	  );


	  $templateCache.put('ui-grid/importerMenuItem',
	    "<li class=\"ui-grid-menu-item\"><form><input class=\"ui-grid-importer-file-chooser\" type=\"file\" id=\"files\" name=\"files[]\"></form></li>"
	  );


	  $templateCache.put('ui-grid/importerMenuItemContainer',
	    "<div ui-grid-importer-menu-item></div>"
	  );


	  $templateCache.put('ui-grid/pagination',
	    "<div role=\"contentinfo\" class=\"ui-grid-pager-panel\" ui-grid-pager ng-show=\"grid.options.enablePaginationControls\"><div role=\"navigation\" class=\"ui-grid-pager-container\"><div role=\"menubar\" class=\"ui-grid-pager-control\"><button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-first\" ui-grid-one-bind-title=\"aria.pageToFirst\" ui-grid-one-bind-aria-label=\"aria.pageToFirst\" ng-click=\"pageFirstPageClick()\" ng-disabled=\"cantPageBackward()\"><div ng-class=\"grid.isRTL() ? 'last-triangle' : 'first-triangle'\"><div ng-class=\"grid.isRTL() ? 'last-bar-rtl' : 'first-bar'\"></div></div></button> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-previous\" ui-grid-one-bind-title=\"aria.pageBack\" ui-grid-one-bind-aria-label=\"aria.pageBack\" ng-click=\"pagePreviousPageClick()\" ng-disabled=\"cantPageBackward()\"><div ng-class=\"grid.isRTL() ? 'last-triangle prev-triangle' : 'first-triangle prev-triangle'\"></div></button> <input type=\"number\" ui-grid-one-bind-title=\"aria.pageSelected\" ui-grid-one-bind-aria-label=\"aria.pageSelected\" class=\"ui-grid-pager-control-input\" ng-model=\"grid.options.paginationCurrentPage\" min=\"1\" max=\"{{ paginationApi.getTotalPages() }}\" required> <span class=\"ui-grid-pager-max-pages-number\" ng-show=\"paginationApi.getTotalPages() > 0\"><abbr ui-grid-one-bind-title=\"paginationOf\">/</abbr> {{ paginationApi.getTotalPages() }}</span> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-next\" ui-grid-one-bind-title=\"aria.pageForward\" ui-grid-one-bind-aria-label=\"aria.pageForward\" ng-click=\"pageNextPageClick()\" ng-disabled=\"cantPageForward()\"><div ng-class=\"grid.isRTL() ? 'first-triangle next-triangle' : 'last-triangle next-triangle'\"></div></button> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-last\" ui-grid-one-bind-title=\"aria.pageToLast\" ui-grid-one-bind-aria-label=\"aria.pageToLast\" ng-click=\"pageLastPageClick()\" ng-disabled=\"cantPageToLast()\"><div ng-class=\"grid.isRTL() ? 'first-triangle' : 'last-triangle'\"><div ng-class=\"grid.isRTL() ? 'first-bar-rtl' : 'last-bar'\"></div></div></button></div><div class=\"ui-grid-pager-row-count-picker\" ng-if=\"grid.options.paginationPageSizes.length > 1\"><select ui-grid-one-bind-aria-labelledby-grid=\"'items-per-page-label'\" ng-model=\"grid.options.paginationPageSize\" ng-options=\"o as o for o in grid.options.paginationPageSizes\"></select><span ui-grid-one-bind-id-grid=\"'items-per-page-label'\" class=\"ui-grid-pager-row-count-label\">&nbsp;{{sizesLabel}}</span></div><span ng-if=\"grid.options.paginationPageSizes.length <= 1\" class=\"ui-grid-pager-row-count-label\">{{grid.options.paginationPageSize}}&nbsp;{{sizesLabel}}</span></div><div class=\"ui-grid-pager-count-container\"><div class=\"ui-grid-pager-count\"><span ng-show=\"grid.options.totalItems > 0\">{{showingLow}} <abbr ui-grid-one-bind-title=\"paginationThrough\">-</abbr> {{showingHigh}} {{paginationOf}} {{grid.options.totalItems}} {{totalItemsLabel}}</span></div></div></div>"
	  );


	  $templateCache.put('ui-grid/columnResizer',
	    "<div ui-grid-column-resizer ng-if=\"grid.options.enableColumnResizing\" class=\"ui-grid-column-resizer\" col=\"col\" position=\"right\" render-index=\"renderIndex\" unselectable=\"on\"></div>"
	  );


	  $templateCache.put('ui-grid/gridFooterSelectedItems',
	    "<span ng-if=\"grid.selection.selectedCount !== 0 && grid.options.enableFooterTotalSelected\">({{\"search.selectedItems\" | t}} {{grid.selection.selectedCount}})</span>"
	  );


	  $templateCache.put('ui-grid/selectionHeaderCell',
	    "<div><!-- <div class=\"ui-grid-vertical-bar\">&nbsp;</div> --><div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><ui-grid-selection-select-all-buttons ng-if=\"grid.options.enableSelectAll\"></ui-grid-selection-select-all-buttons></div></div>"
	  );


	  $templateCache.put('ui-grid/selectionRowHeader',
	    "<div class=\"ui-grid-disable-selection\"><div class=\"ui-grid-cell-contents\"><ui-grid-selection-row-header-buttons></ui-grid-selection-row-header-buttons></div></div>"
	  );


	  $templateCache.put('ui-grid/selectionRowHeaderButtons',
	    "<div class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok\" ng-class=\"{'ui-grid-row-selected': row.isSelected}\" ng-click=\"selectButtonClick(row, $event)\">&nbsp;</div>"
	  );


	  $templateCache.put('ui-grid/selectionSelectAllButtons',
	    "<div class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok\" ng-class=\"{'ui-grid-all-selected': grid.selection.selectAll}\" ng-click=\"headerButtonClick($event)\"></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseExpandAllButtons',
	    "<div class=\"ui-grid-tree-base-row-header-buttons\" ng-class=\"{'ui-grid-icon-minus-squared': grid.treeBase.numberLevels > 0 && grid.treeBase.expandAll, 'ui-grid-icon-plus-squared': grid.treeBase.numberLevels > 0 && !grid.treeBase.expandAll}\" ng-click=\"headerButtonClick($event)\"></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseHeaderCell',
	    "<div><div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><ui-grid-tree-base-expand-all-buttons ng-if=\"grid.options.enableExpandAll\"></ui-grid-tree-base-expand-all-buttons></div></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseRowHeader',
	    "<div class=\"ui-grid-cell-contents\"><ui-grid-tree-base-row-header-buttons></ui-grid-tree-base-row-header-buttons></div>"
	  );


	  $templateCache.put('ui-grid/treeBaseRowHeaderButtons',
	    "<div class=\"ui-grid-tree-base-row-header-buttons\" ng-class=\"{'ui-grid-tree-base-header': row.treeLevel > -1 }\" ng-click=\"treeButtonClick(row, $event)\"><i ng-class=\"{'ui-grid-icon-minus-squared': ( ( grid.options.showTreeExpandNoChildren && row.treeLevel > -1 ) || ( row.treeNode.children && row.treeNode.children.length > 0 ) ) && row.treeNode.state === 'expanded', 'ui-grid-icon-plus-squared': ( ( grid.options.showTreeExpandNoChildren && row.treeLevel > -1 ) || ( row.treeNode.children && row.treeNode.children.length > 0 ) ) && row.treeNode.state === 'collapsed'}\" ng-style=\"{'padding-left': grid.options.treeIndent * row.treeLevel + 'px'}\"></i> &nbsp;</div>"
	  );


	  $templateCache.put('ui-grid/cellTitleValidator',
	    "<div class=\"ui-grid-cell-contents\" ng-class=\"{invalid:grid.validate.isInvalid(row.entity,col.colDef)}\" title=\"{{grid.validate.getTitleFormattedErrors(row.entity,col.colDef)}}\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
	  );


	  $templateCache.put('ui-grid/cellTooltipValidator',
	    "<div class=\"ui-grid-cell-contents\" ng-class=\"{invalid:grid.validate.isInvalid(row.entity,col.colDef)}\" tooltip-html-unsafe=\"{{grid.validate.getFormattedErrors(row.entity,col.colDef)}}\" tooltip-enable=\"grid.validate.isInvalid(row.entity,col.colDef)\" tooltip-append-to-body=\"true\" tooltip-placement=\"top\" title=\"TOOLTIP\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
	  );

	}]);


/***/ },
/* 13 */
/***/ function(module, exports) {

	/*! angular-google-maps 2.3.3 2016-05-13
	 *  AngularJS directives for Google Maps
	 *  git: https://github.com/angular-ui/angular-google-maps.git
	 */
	;
	(function( window, angular, undefined ){
	  'use strict';
	/*
	!
	The MIT License

	Copyright (c) 2010-2013 Google, Inc. http://angularjs.org

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the 'Software'), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	angular-google-maps
	https://github.com/angular-ui/angular-google-maps

	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps.providers', ['nemLogging']);

	  angular.module('uiGmapgoogle-maps.wrapped', []);

	  angular.module('uiGmapgoogle-maps.extensions', ['uiGmapgoogle-maps.wrapped', 'uiGmapgoogle-maps.providers']);

	  angular.module('uiGmapgoogle-maps.directives.api.utils', ['uiGmapgoogle-maps.extensions']);

	  angular.module('uiGmapgoogle-maps.directives.api.managers', []);

	  angular.module('uiGmapgoogle-maps.directives.api.options', ['uiGmapgoogle-maps.directives.api.utils']);

	  angular.module('uiGmapgoogle-maps.directives.api.options.builders', []);

	  angular.module('uiGmapgoogle-maps.directives.api.models.child', ['uiGmapgoogle-maps.directives.api.utils', 'uiGmapgoogle-maps.directives.api.options', 'uiGmapgoogle-maps.directives.api.options.builders']);

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent', ['uiGmapgoogle-maps.directives.api.managers', 'uiGmapgoogle-maps.directives.api.models.child', 'uiGmapgoogle-maps.providers']);

	  angular.module('uiGmapgoogle-maps.directives.api', ['uiGmapgoogle-maps.directives.api.models.parent']);

	  angular.module('uiGmapgoogle-maps', ['uiGmapgoogle-maps.directives.api', 'uiGmapgoogle-maps.providers']);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.providers').factory('uiGmapMapScriptLoader', [
	    '$q', 'uiGmapuuid', function($q, uuid) {
	      var getScriptUrl, includeScript, isGoogleMapsLoaded, scriptId, usedConfiguration;
	      scriptId = void 0;
	      usedConfiguration = void 0;
	      getScriptUrl = function(options) {
	        if (options.china) {
	          return 'http://maps.google.cn/maps/api/js?';
	        } else {
	          if (options.transport === 'auto') {
	            return '//maps.googleapis.com/maps/api/js?';
	          } else {
	            return options.transport + '://maps.googleapis.com/maps/api/js?';
	          }
	        }
	      };
	      includeScript = function(options) {
	        var omitOptions, query, script, scriptElem;
	        omitOptions = ['transport', 'isGoogleMapsForWork', 'china', 'preventLoad'];
	        if (options.isGoogleMapsForWork) {
	          omitOptions.push('key');
	        }
	        query = _.map(_.omit(options, omitOptions), function(v, k) {
	          return k + '=' + v;
	        });
	        if (scriptId) {
	          scriptElem = document.getElementById(scriptId);
	          scriptElem.parentNode.removeChild(scriptElem);
	        }
	        query = query.join('&');
	        script = document.createElement('script');
	        script.id = scriptId = "ui_gmap_map_load_" + (uuid.generate());
	        script.type = 'text/javascript';
	        script.src = getScriptUrl(options) + query;
	        return document.body.appendChild(script);
	      };
	      isGoogleMapsLoaded = function() {
	        return angular.isDefined(window.google) && angular.isDefined(window.google.maps);
	      };
	      return {
	        load: function(options) {
	          var deferred, randomizedFunctionName;
	          deferred = $q.defer();
	          if (isGoogleMapsLoaded()) {
	            deferred.resolve(window.google.maps);
	            return deferred.promise;
	          }
	          randomizedFunctionName = options.callback = 'onGoogleMapsReady' + Math.round(Math.random() * 1000);
	          window[randomizedFunctionName] = function() {
	            window[randomizedFunctionName] = null;
	            deferred.resolve(window.google.maps);
	          };
	          if (window.navigator.connection && window.Connection && window.navigator.connection.type === window.Connection.NONE && !options.preventLoad) {
	            document.addEventListener('online', function() {
	              if (!isGoogleMapsLoaded()) {
	                return includeScript(options);
	              }
	            });
	          } else if (!options.preventLoad) {
	            includeScript(options);
	          }
	          usedConfiguration = options;
	          usedConfiguration.randomizedFunctionName = randomizedFunctionName;
	          return deferred.promise;
	        },
	        manualLoad: function() {
	          var config;
	          config = usedConfiguration;
	          if (!isGoogleMapsLoaded()) {
	            return includeScript(config);
	          } else {
	            if (window[config.randomizedFunctionName]) {
	              return window[config.randomizedFunctionName]();
	            }
	          }
	        }
	      };
	    }
	  ]).provider('uiGmapGoogleMapApi', function() {
	    this.options = {
	      transport: 'https',
	      isGoogleMapsForWork: false,
	      china: false,
	      v: '3',
	      libraries: '',
	      language: 'en',
	      preventLoad: false
	    };
	    this.configure = function(options) {
	      angular.extend(this.options, options);
	    };
	    this.$get = [
	      'uiGmapMapScriptLoader', (function(_this) {
	        return function(loader) {
	          return loader.load(_this.options);
	        };
	      })(this)
	    ];
	    return this;
	  }).service('uiGmapGoogleMapApiManualLoader', [
	    'uiGmapMapScriptLoader', function(loader) {
	      return {
	        load: function() {
	          loader.manualLoad();
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.extensions').service('uiGmapExtendGWin', function() {
	    return {
	      init: _.once(function() {
	        var uiGmapInfoBox;
	        if (!(google || (typeof google !== "undefined" && google !== null ? google.maps : void 0) || (google.maps.InfoWindow != null))) {
	          return;
	        }
	        google.maps.InfoWindow.prototype._open = google.maps.InfoWindow.prototype.open;
	        google.maps.InfoWindow.prototype._close = google.maps.InfoWindow.prototype.close;
	        google.maps.InfoWindow.prototype._isOpen = false;
	        google.maps.InfoWindow.prototype.open = function(map, anchor, recurse) {
	          if (recurse != null) {
	            return;
	          }
	          this._isOpen = true;
	          this._open(map, anchor, true);
	        };
	        google.maps.InfoWindow.prototype.close = function(recurse) {
	          if (recurse != null) {
	            return;
	          }
	          this._isOpen = false;
	          this._close(true);
	        };
	        google.maps.InfoWindow.prototype.isOpen = function(val) {
	          if (val == null) {
	            val = void 0;
	          }
	          if (val == null) {
	            return this._isOpen;
	          } else {
	            return this._isOpen = val;
	          }
	        };

	        /*
	        Do the same for InfoBox
	        TODO: Clean this up so the logic is defined once, wait until develop becomes master as this will be easier
	         */
	        if (window.InfoBox) {
	          window.InfoBox.prototype._open = window.InfoBox.prototype.open;
	          window.InfoBox.prototype._close = window.InfoBox.prototype.close;
	          window.InfoBox.prototype._isOpen = false;
	          window.InfoBox.prototype.open = function(map, anchor) {
	            this._isOpen = true;
	            this._open(map, anchor);
	          };
	          window.InfoBox.prototype.close = function() {
	            this._isOpen = false;
	            this._close();
	          };
	          window.InfoBox.prototype.isOpen = function(val) {
	            if (val == null) {
	              val = void 0;
	            }
	            if (val == null) {
	              return this._isOpen;
	            } else {
	              return this._isOpen = val;
	            }
	          };
	          uiGmapInfoBox = (function(superClass) {
	            extend(uiGmapInfoBox, superClass);

	            function uiGmapInfoBox(opts) {
	              this.getOrigCloseBoxImg_ = bind(this.getOrigCloseBoxImg_, this);
	              this.getCloseBoxDiv_ = bind(this.getCloseBoxDiv_, this);
	              var box;
	              box = new window.InfoBox(opts);
	              _.extend(this, box);
	              if (opts.closeBoxDiv != null) {
	                this.closeBoxDiv_ = opts.closeBoxDiv;
	              }
	            }

	            uiGmapInfoBox.prototype.getCloseBoxDiv_ = function() {
	              return this.closeBoxDiv_;
	            };

	            uiGmapInfoBox.prototype.getCloseBoxImg_ = function() {
	              var div, img;
	              div = this.getCloseBoxDiv_();
	              img = this.getOrigCloseBoxImg_();
	              return div || img;
	            };

	            uiGmapInfoBox.prototype.getOrigCloseBoxImg_ = function() {
	              var img;
	              img = "";
	              if (this.closeBoxURL_ !== "") {
	                img = "<img";
	                img += " src='" + this.closeBoxURL_ + "'";
	                img += " align=right";
	                img += " style='";
	                img += " position: relative;";
	                img += " cursor: pointer;";
	                img += " margin: " + this.closeBoxMargin_ + ";";
	                img += "'>";
	              }
	              return img;
	            };

	            return uiGmapInfoBox;

	          })(window.InfoBox);
	          window.uiGmapInfoBox = uiGmapInfoBox;
	        }
	        if (window.MarkerLabel_) {
	          return window.MarkerLabel_.prototype.setContent = function() {
	            var content;
	            content = this.marker_.get('labelContent');
	            if (!content || _.isEqual(this.oldContent, content)) {
	              return;
	            }
	            if (typeof (content != null ? content.nodeType : void 0) === 'undefined') {
	              this.labelDiv_.innerHTML = content;
	              this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
	              this.oldContent = content;
	            } else {
	              this.labelDiv_.innerHTML = '';
	              this.labelDiv_.appendChild(content);
	              content = content.cloneNode(true);
	              this.labelDiv_.innerHTML = '';
	              this.eventDiv_.appendChild(content);
	              this.oldContent = content;
	            }
	          };
	        }
	      })
	    };
	  });

	}).call(this);
	;
	/*global _:true, angular:true */

	(function() {
	  angular.module('uiGmapgoogle-maps.extensions').service('uiGmapLodash', function() {
	    var baseGet, baseToString, fixLodash, get, reEscapeChar, rePropName, toObject, toPath;
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
	    reEscapeChar = /\\(\\)?/g;

	    /*
	        For Lodash 4 compatibility (some aliases are removed)
	     */
	    fixLodash = function(arg) {
	      var isProto, missingName, swapName;
	      missingName = arg.missingName, swapName = arg.swapName, isProto = arg.isProto;
	      if (_[missingName] == null) {
	        _[missingName] = _[swapName];
	        if (isProto) {
	          return _.prototype[missingName] = _[swapName];
	        }
	      }
	    };
	    [
	      {
	        missingName: 'contains',
	        swapName: 'includes',
	        isProto: true
	      }, {
	        missingName: 'includes',
	        swapName: 'contains',
	        isProto: true
	      }, {
	        missingName: 'object',
	        swapName: 'zipObject'
	      }, {
	        missingName: 'zipObject',
	        swapName: 'object'
	      }, {
	        missingName: 'all',
	        swapName: 'every'
	      }, {
	        missingName: 'every',
	        swapName: 'all'
	      }, {
	        missingName: 'any',
	        swapName: 'some'
	      }, {
	        missingName: 'some',
	        swapName: 'any'
	      }, {
	        missingName: 'first',
	        swapName: 'head'
	      }, {
	        missingName: 'head',
	        swapName: 'first'
	      }
	    ].forEach(function(toMonkeyPatch) {
	      return fixLodash(toMonkeyPatch);
	    });
	    if (_.get == null) {

	      /**
	       * Converts `value` to an object if it's not one.
	       *
	       * @private
	       * @param {*} value The value to process.
	       * @returns {Object} Returns the object.
	       */
	      toObject = function(value) {
	        if (_.isObject(value)) {
	          return value;
	        } else {
	          return Object(value);
	        }
	      };

	      /**
	       * Converts `value` to a string if it's not one. An empty string is returned
	       * for `null` or `undefined` values.
	       *
	       * @private
	       * @param {*} value The value to process.
	       * @returns {string} Returns the string.
	       */
	      baseToString = function(value) {
	        if (value === null) {
	          return '';
	        } else {
	          return value + '';
	        }
	      };

	      /**
	       * Converts `value` to property path array if it's not one.
	       *
	       * @private
	       * @param {*} value The value to process.
	       * @returns {Array} Returns the property path array.
	       */
	      toPath = function(value) {
	        var result;
	        if (_.isArray(value)) {
	          return value;
	        }
	        result = [];
	        baseToString(value).replace(rePropName, function(match, number, quote, string) {
	          result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
	        });
	        return result;
	      };

	      /**
	       * The base implementation of `get` without support for string paths
	       * and default values.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {Array} path The path of the property to get.
	       * @param {string} [pathKey] The key representation of path.
	       * @returns {*} Returns the resolved value.
	       */
	      baseGet = function(object, path, pathKey) {
	        var index, length;
	        if (object === null) {
	          return;
	        }
	        if (pathKey !== void 0 && pathKey in toObject(object)) {
	          path = [pathKey];
	        }
	        index = 0;
	        length = path.length;
	        while (!_.isUndefined(object) && index < length) {
	          object = object[path[index++]];
	        }
	        if (index && index === length) {
	          return object;
	        } else {
	          return void 0;
	        }
	      };

	      /**
	       * Gets the property value at `path` of `object`. If the resolved value is
	       * `undefined` the `defaultValue` is used in its place.
	       *
	       * @static
	       * @memberOf _
	       * @category Object
	       * @param {Object} object The object to query.
	       * @param {Array|string} path The path of the property to get.
	       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	       * @returns {*} Returns the resolved value.
	       * @example
	       *
	       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	       *
	       * _.get(object, 'a[0].b.c');
	       * // => 3
	       *
	       * _.get(object, ['a', '0', 'b', 'c']);
	       * // => 3
	       *
	       * _.get(object, 'a.b.c', 'default');
	       * // => 'default'
	       */
	      get = function(object, path, defaultValue) {
	        var result;
	        result = object === null ? void 0 : baseGet(object, toPath(path), path + '');
	        if (result === void 0) {
	          return defaultValue;
	        } else {
	          return result;
	        }
	      };
	      _.get = get;
	    }

	    /*
	        Author Nick McCready
	        Intersection of Objects if the arrays have something in common each intersecting object will be returned
	        in an new array.
	     */
	    this.intersectionObjects = function(array1, array2, comparison) {
	      var res;
	      if (comparison == null) {
	        comparison = void 0;
	      }
	      res = _.map(array1, function(obj1) {
	        return _.find(array2, function(obj2) {
	          if (comparison != null) {
	            return comparison(obj1, obj2);
	          } else {
	            return _.isEqual(obj1, obj2);
	          }
	        });
	      });
	      return _.filter(res, function(o) {
	        return o != null;
	      });
	    };
	    this.containsObject = _.includeObject = function(obj, target, comparison) {
	      if (comparison == null) {
	        comparison = void 0;
	      }
	      if (obj === null) {
	        return false;
	      }
	      return _.some(obj, function(value) {
	        if (comparison != null) {
	          return comparison(value, target);
	        } else {
	          return _.isEqual(value, target);
	        }
	      });
	    };
	    this.differenceObjects = function(array1, array2, comparison) {
	      if (comparison == null) {
	        comparison = void 0;
	      }
	      return _.filter(array1, (function(_this) {
	        return function(value) {
	          return !_this.containsObject(array2, value, comparison);
	        };
	      })(this));
	    };
	    this.withoutObjects = this.differenceObjects;
	    this.indexOfObject = function(array, item, comparison, isSorted) {
	      var i, length;
	      if (array == null) {
	        return -1;
	      }
	      i = 0;
	      length = array.length;
	      if (isSorted) {
	        if (typeof isSorted === "number") {
	          i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
	        } else {
	          i = _.sortedIndex(array, item);
	          return (array[i] === item ? i : -1);
	        }
	      }
	      while (i < length) {
	        if (comparison != null) {
	          if (comparison(array[i], item)) {
	            return i;
	          }
	        } else {
	          if (_.isEqual(array[i], item)) {
	            return i;
	          }
	        }
	        i++;
	      }
	      return -1;
	    };
	    this.isNullOrUndefined = function(thing) {
	      return _.isNull(thing || _.isUndefined(thing));
	    };
	    return this;
	  });

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.extensions').factory('uiGmapString', function() {
	    return function(str) {
	      this.contains = function(value, fromIndex) {
	        return str.indexOf(value, fromIndex) !== -1;
	      };
	      return this;
	    };
	  });

	}).call(this);
	;
	/*global _:true,angular:true, */

	(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmap_sync', [
	    function() {
	      return {
	        fakePromise: function() {
	          var _cb;
	          _cb = void 0;
	          return {
	            then: function(cb) {
	              return _cb = cb;
	            },
	            resolve: function() {
	              return _cb.apply(void 0, arguments);
	            }
	          };
	        }
	      };
	    }
	  ]).service('uiGmap_async', [
	    '$timeout', 'uiGmapPromise', 'uiGmapLogger', '$q', 'uiGmapDataStructures', 'uiGmapGmapUtil', function($timeout, uiGmapPromise, $log, $q, uiGmapDataStructures, uiGmapGmapUtil) {
	      var ExposedPromise, PromiseQueueManager, SniffedPromise, _getIterateeValue, _ignoreFields, defaultChunkSize, doChunk, doSkippPromise, each, errorObject, getArrayAndKeys, isInProgress, kickPromise, logTryCatch, managePromiseQueue, map, maybeCancelPromises, promiseStatus, promiseTypes, tryCatch;
	      promiseTypes = uiGmapPromise.promiseTypes;
	      isInProgress = uiGmapPromise.isInProgress;
	      promiseStatus = uiGmapPromise.promiseStatus;
	      ExposedPromise = uiGmapPromise.ExposedPromise;
	      SniffedPromise = uiGmapPromise.SniffedPromise;
	      kickPromise = function(sniffedPromise, cancelCb) {
	        var promise;
	        promise = sniffedPromise.promise();
	        promise.promiseType = sniffedPromise.promiseType;
	        if (promise.$$state) {
	          $log.debug("promiseType: " + promise.promiseType + ", state: " + (promiseStatus(promise.$$state.status)));
	        }
	        promise.cancelCb = cancelCb;
	        return promise;
	      };
	      doSkippPromise = function(sniffedPromise, lastPromise) {
	        if (sniffedPromise.promiseType === promiseTypes.create && lastPromise.promiseType !== promiseTypes["delete"] && lastPromise.promiseType !== promiseTypes.init) {
	          $log.debug("lastPromise.promiseType " + lastPromise.promiseType + ", newPromiseType: " + sniffedPromise.promiseType + ", SKIPPED MUST COME AFTER DELETE ONLY");
	          return true;
	        }
	        return false;
	      };
	      maybeCancelPromises = function(queue, sniffedPromise, lastPromise) {
	        var first;
	        if (sniffedPromise.promiseType === promiseTypes["delete"] && lastPromise.promiseType !== promiseTypes["delete"]) {
	          if ((lastPromise.cancelCb != null) && _.isFunction(lastPromise.cancelCb) && isInProgress(lastPromise)) {
	            $log.debug("promiseType: " + sniffedPromise.promiseType + ", CANCELING LAST PROMISE type: " + lastPromise.promiseType);
	            lastPromise.cancelCb('cancel safe');
	            first = queue.peek();
	            if ((first != null) && isInProgress(first)) {
	              if (first.hasOwnProperty("cancelCb") && _.isFunction(first.cancelCb)) {
	                $log.debug("promiseType: " + first.promiseType + ", CANCELING FIRST PROMISE type: " + first.promiseType);
	                return first.cancelCb('cancel safe');
	              } else {
	                return $log.warn('first promise was not cancelable');
	              }
	            }
	          }
	        }
	      };

	      /*
	      From a High Level:
	        This is a SniffedPromiseQueueManager (looking to rename) where the queue is existingPiecesObj.existingPieces.
	        This is a function and should not be considered a class.
	        So it is run to manage the state (cancel, skip, link) as needed.
	      Purpose:
	      The whole point is to check if there is existing async work going on. If so we wait on it.
	      
	      arguments:
	      - existingPiecesObj =  Queue<Promises>
	      - sniffedPromise = object wrapper holding a function to a pending (function) promise (promise: fnPromise)
	      with its intended type.
	      - cancelCb = callback which accepts a string, this string is intended to be returned at the end of _async.each iterator
	      
	        Where the cancelCb passed msg is 'cancel safe' _async.each will drop out and fall through. Thus canceling the promise
	        gracefully without messing up state.
	      
	      Synopsis:
	      
	       - Promises have been broken down to 4 states create, update,delete (3 main) and init. (Helps boil down problems in ordering)
	        where (init) is special to indicate that it is one of the first or to allow a create promise to work beyond being after a delete
	      
	       - Every Promise that comes in is enqueued and linked to the last promise in the queue.
	      
	       - A promise can be skipped or canceled to save cycles.
	      
	      Saved Cycles:
	        - Skipped - This will only happen if async work comes in out of order. Where a pending create promise (un-executed) comes in
	          after a delete promise.
	        - Canceled - Where an incoming promise (un-executed promise) is of type delete and the any lastPromise is not a delete type.
	      
	      
	      NOTE:
	      - You should not muck with existingPieces as its state is dependent on this functional loop.
	      - PromiseQueueManager should not be thought of as a class that has a life expectancy (it has none). It's sole
	      purpose is to link, skip, and kill promises. It also manages the promise queue existingPieces.
	       */
	      PromiseQueueManager = function(existingPiecesObj, sniffedPromise, cancelCb) {
	        var lastPromise, newPromise;
	        if (!existingPiecesObj.existingPieces) {
	          existingPiecesObj.existingPieces = new uiGmapDataStructures.Queue();
	          return existingPiecesObj.existingPieces.enqueue(kickPromise(sniffedPromise, cancelCb));
	        } else {
	          lastPromise = _.last(existingPiecesObj.existingPieces._content);
	          if (doSkippPromise(sniffedPromise, lastPromise)) {
	            return;
	          }
	          maybeCancelPromises(existingPiecesObj.existingPieces, sniffedPromise, lastPromise);
	          newPromise = ExposedPromise(lastPromise["finally"](function() {
	            return kickPromise(sniffedPromise, cancelCb);
	          }));
	          newPromise.cancelCb = cancelCb;
	          newPromise.promiseType = sniffedPromise.promiseType;
	          existingPiecesObj.existingPieces.enqueue(newPromise);
	          return lastPromise["finally"](function() {
	            return existingPiecesObj.existingPieces.dequeue();
	          });
	        }
	      };
	      managePromiseQueue = function(objectToLock, promiseType, msg, cancelCb, fnPromise) {
	        var cancelLogger;
	        if (msg == null) {
	          msg = '';
	        }
	        cancelLogger = function(msg) {
	          $log.debug(msg + ": " + msg);
	          if ((cancelCb != null) && _.isFunction(cancelCb)) {
	            return cancelCb(msg);
	          }
	        };
	        return PromiseQueueManager(objectToLock, SniffedPromise(fnPromise, promiseType), cancelLogger);
	      };
	      defaultChunkSize = 80;
	      errorObject = {
	        value: null
	      };
	      tryCatch = function(fn, ctx, args) {
	        var e, error1;
	        try {
	          return fn.apply(ctx, args);
	        } catch (error1) {
	          e = error1;
	          errorObject.value = e;
	          return errorObject;
	        }
	      };
	      logTryCatch = function(fn, ctx, deferred, args) {
	        var msg, result;
	        result = tryCatch(fn, ctx, args);
	        if (result === errorObject) {
	          msg = "error within chunking iterator: " + errorObject.value;
	          $log.error(msg);
	          deferred.reject(msg);
	        }
	        if (result === 'cancel safe') {
	          return false;
	        }
	        return true;
	      };
	      _getIterateeValue = function(collection, array, index) {
	        var _isArray, valOrKey;
	        _isArray = collection === array;
	        valOrKey = array[index];
	        if (_isArray) {
	          return valOrKey;
	        }
	        return collection[valOrKey];
	      };
	      _ignoreFields = ['length', 'forEach', 'map'];
	      getArrayAndKeys = function(collection, keys, bailOutCb, cb) {
	        var array, propName, val;
	        if (angular.isArray(collection)) {
	          array = collection;
	        } else {
	          if (keys) {
	            array = keys;
	          } else {
	            array = [];
	            for (propName in collection) {
	              val = collection[propName];
	              if (collection.hasOwnProperty(propName) && !_.includes(_ignoreFields, propName)) {
	                array.push(propName);
	              }
	            }
	          }
	        }
	        if (cb == null) {
	          cb = bailOutCb;
	        }
	        if (angular.isArray(array) && !(array != null ? array.length : void 0)) {
	          if (cb !== bailOutCb) {
	            return bailOutCb();
	          }
	        }
	        return cb(array, keys);
	      };

	      /*
	        Author: Nicholas McCready & jfriend00
	        _async handles things asynchronous-like :), to allow the UI to be free'd to do other things
	        Code taken from http://stackoverflow.com/questions/10344498/best-way-to-iterate-over-an-array-without-blocking-the-ui
	      
	        The design of any functionality of _async is to be like lodash/underscore and replicate it but call things
	        asynchronously underneath. Each should be sufficient for most things to be derived from.
	      
	        Optional Asynchronous Chunking via promises.
	       */
	      doChunk = function(collection, chunkSizeOrDontChunk, pauseMilli, chunkCb, pauseCb, overallD, index, _keys) {
	        return getArrayAndKeys(collection, _keys, function(array, keys) {
	          var cnt, i, keepGoing, val;
	          if (chunkSizeOrDontChunk && chunkSizeOrDontChunk < array.length) {
	            cnt = chunkSizeOrDontChunk;
	          } else {
	            cnt = array.length;
	          }
	          i = index;
	          keepGoing = true;
	          while (keepGoing && cnt-- && i < (array ? array.length : i + 1)) {
	            val = _getIterateeValue(collection, array, i);
	            keepGoing = angular.isFunction(val) ? true : logTryCatch(chunkCb, void 0, overallD, [val, i]);
	            ++i;
	          }
	          if (array) {
	            if (keepGoing && i < array.length) {
	              index = i;
	              if (chunkSizeOrDontChunk) {
	                if ((pauseCb != null) && _.isFunction(pauseCb)) {
	                  logTryCatch(pauseCb, void 0, overallD, []);
	                }
	                return $timeout(function() {
	                  return doChunk(collection, chunkSizeOrDontChunk, pauseMilli, chunkCb, pauseCb, overallD, index, keys);
	                }, pauseMilli, false);
	              }
	            } else {
	              return overallD.resolve();
	            }
	          }
	        });
	      };
	      each = function(collection, chunk, chunkSizeOrDontChunk, pauseCb, index, pauseMilli, _keys) {
	        var error, overallD, ret;
	        if (chunkSizeOrDontChunk == null) {
	          chunkSizeOrDontChunk = defaultChunkSize;
	        }
	        if (index == null) {
	          index = 0;
	        }
	        if (pauseMilli == null) {
	          pauseMilli = 1;
	        }
	        ret = void 0;
	        overallD = uiGmapPromise.defer();
	        ret = overallD.promise;
	        if (!pauseMilli) {
	          error = 'pause (delay) must be set from _async!';
	          $log.error(error);
	          overallD.reject(error);
	          return ret;
	        }
	        return getArrayAndKeys(collection, _keys, function() {
	          overallD.resolve();
	          return ret;
	        }, function(array, keys) {
	          doChunk(collection, chunkSizeOrDontChunk, pauseMilli, chunk, pauseCb, overallD, index, keys);
	          return ret;
	        });
	      };
	      map = function(collection, iterator, chunkSizeOrDontChunk, pauseCb, index, pauseMilli, _keys) {
	        var results;
	        results = [];
	        return getArrayAndKeys(collection, _keys, function() {
	          return uiGmapPromise.resolve(results);
	        }, function(array, keys) {
	          return each(collection, function(o) {
	            return results.push(iterator(o));
	          }, chunkSizeOrDontChunk, pauseCb, index, pauseMilli, keys).then(function() {
	            return results;
	          });
	        });
	      };
	      return {
	        each: each,
	        map: map,
	        managePromiseQueue: managePromiseQueue,
	        promiseLock: managePromiseQueue,
	        defaultChunkSize: defaultChunkSize,
	        getArrayAndKeys: getArrayAndKeys,
	        chunkSizeFrom: function(fromSize, ret) {
	          if (ret == null) {
	            ret = void 0;
	          }
	          if (_.isNumber(fromSize)) {
	            ret = fromSize;
	          }
	          if (uiGmapGmapUtil.isFalse(fromSize) || fromSize === false) {
	            ret = false;
	          }
	          return ret;
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	  angular.module('uiGmapgoogle-maps.directives.api.utils').factory('uiGmapBaseObject', function() {
	    var BaseObject, baseObjectKeywords;
	    baseObjectKeywords = ['extended', 'included'];
	    BaseObject = (function() {
	      function BaseObject() {}

	      BaseObject.extend = function(obj) {
	        var key, ref, value;
	        for (key in obj) {
	          value = obj[key];
	          if (indexOf.call(baseObjectKeywords, key) < 0) {
	            this[key] = value;
	          }
	        }
	        if ((ref = obj.extended) != null) {
	          ref.apply(this);
	        }
	        return this;
	      };

	      BaseObject.include = function(obj) {
	        var key, ref, value;
	        for (key in obj) {
	          value = obj[key];
	          if (indexOf.call(baseObjectKeywords, key) < 0) {
	            this.prototype[key] = value;
	          }
	        }
	        if ((ref = obj.included) != null) {
	          ref.apply(this);
	        }
	        return this;
	      };

	      return BaseObject;

	    })();
	    return BaseObject;
	  });

	}).call(this);
	;
	/*
	    Useful function callbacks that should be defined at later time.
	    Mainly to be used for specs to verify creation / linking.

	    This is to lead a common design in notifying child stuff.
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').factory('uiGmapChildEvents', function() {
	    return {
	      onChildCreation: function(child) {}
	    };
	  });

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmapCtrlHandle', [
	    '$q', function($q) {
	      var CtrlHandle;
	      return CtrlHandle = {
	        handle: function($scope, $element) {
	          $scope.$on('$destroy', function() {
	            return CtrlHandle.handle($scope);
	          });
	          $scope.deferred = $q.defer();
	          return {
	            getScope: function() {
	              return $scope;
	            }
	          };
	        },
	        mapPromise: function(scope, ctrl) {
	          var mapScope;
	          mapScope = ctrl.getScope();
	          mapScope.deferred.promise.then(function(map) {
	            return scope.map = map;
	          });
	          return mapScope.deferred.promise;
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapEventsHelper", [
	    "uiGmapLogger", function($log) {
	      var _getEventsObj, _hasEvents;
	      _hasEvents = function(obj) {
	        return angular.isDefined(obj.events) && (obj.events != null) && angular.isObject(obj.events);
	      };
	      _getEventsObj = function(scope, model) {
	        if (_hasEvents(scope)) {
	          return scope;
	        }
	        if (_hasEvents(model)) {
	          return model;
	        }
	      };
	      return {
	        setEvents: function(gObject, scope, model, ignores) {
	          var eventObj;
	          eventObj = _getEventsObj(scope, model);
	          if (eventObj != null) {
	            return _.compact(_.map(eventObj.events, function(eventHandler, eventName) {
	              var doIgnore;
	              if (ignores) {
	                doIgnore = _(ignores).includes(eventName);
	              }
	              if (eventObj.events.hasOwnProperty(eventName) && angular.isFunction(eventObj.events[eventName]) && !doIgnore) {
	                return google.maps.event.addListener(gObject, eventName, function() {
	                  if (!scope.$evalAsync) {
	                    scope.$evalAsync = function() {};
	                  }
	                  return scope.$evalAsync(eventHandler.apply(scope, [gObject, eventName, model, arguments]));
	                });
	              }
	            }));
	          }
	        },
	        removeEvents: function(listeners) {
	          var key, l;
	          if (!listeners) {
	            return;
	          }
	          for (key in listeners) {
	            l = listeners[key];
	            if (l && listeners.hasOwnProperty(key)) {
	              google.maps.event.removeListener(l);
	            }
	          }
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmapFitHelper', [
	    'uiGmapLogger', '$timeout', function($log, $timeout) {
	      return {
	        fit: function(markersOrPoints, gMap) {
	          var bounds, everSet, key, markerOrPoint, point;
	          if (gMap && (markersOrPoints != null ? markersOrPoints.length : void 0)) {
	            bounds = new google.maps.LatLngBounds();
	            everSet = false;
	            for (key in markersOrPoints) {
	              markerOrPoint = markersOrPoints[key];
	              if (markerOrPoint) {
	                if (!everSet) {
	                  everSet = true;
	                }
	                point = _.isFunction(markerOrPoint.getPosition) ? markerOrPoint.getPosition() : markerOrPoint;
	              }
	              bounds.extend(point);
	            }
	            if (everSet) {
	              return $timeout(function() {
	                return gMap.fitBounds(bounds);
	              });
	            }
	          }
	        }
	      };
	    }
	  ]);

	}).call(this);
	;
	/*global _:true, angular:true, google:true */

	(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmapGmapUtil', [
	    'uiGmapLogger', '$compile', function(Logger, $compile) {
	      var _isFalse, _isTruthy, getCoords, getLatitude, getLongitude, validateCoords;
	      _isTruthy = function(value, bool, optionsArray) {
	        return value === bool || optionsArray.indexOf(value) !== -1;
	      };
	      _isFalse = function(value) {
	        return _isTruthy(value, false, ['false', 'FALSE', 0, 'n', 'N', 'no', 'NO']);
	      };
	      getLatitude = function(value) {
	        if (Array.isArray(value) && value.length === 2) {
	          return value[1];
	        } else if (angular.isDefined(value.type) && value.type === 'Point') {
	          return value.coordinates[1];
	        } else {
	          return value.latitude;
	        }
	      };
	      getLongitude = function(value) {
	        if (Array.isArray(value) && value.length === 2) {
	          return value[0];
	        } else if (angular.isDefined(value.type) && value.type === 'Point') {
	          return value.coordinates[0];
	        } else {
	          return value.longitude;
	        }
	      };
	      getCoords = function(value) {
	        if (!value) {
	          return;
	        }
	        if (value instanceof google.maps.LatLng) {
	          return value;
	        } else if (Array.isArray(value) && value.length === 2) {
	          return new google.maps.LatLng(value[1], value[0]);
	        } else if (angular.isDefined(value.type) && value.type === 'Point') {
	          return new google.maps.LatLng(value.coordinates[1], value.coordinates[0]);
	        } else {
	          return new google.maps.LatLng(value.latitude, value.longitude);
	        }
	      };
	      validateCoords = function(coords) {
	        if (angular.isUndefined(coords)) {
	          return false;
	        }
	        if (_.isArray(coords)) {
	          if (coords.length === 2) {
	            return true;
	          }
	        } else if ((coords != null) && (coords != null ? coords.type : void 0)) {
	          if (coords.type === 'Point' && _.isArray(coords.coordinates) && coords.coordinates.length === 2) {
	            return true;
	          }
	        }
	        if (coords && angular.isDefined((coords != null ? coords.latitude : void 0) && angular.isDefined(coords != null ? coords.longitude : void 0))) {
	          return true;
	        }
	        return false;
	      };
	      return {
	        setCoordsFromEvent: function(prevValue, newLatLon) {
	          if (!prevValue) {
	            return;
	          }
	          if (Array.isArray(prevValue) && prevValue.length === 2) {
	            prevValue[1] = newLatLon.lat();
	            prevValue[0] = newLatLon.lng();
	          } else if (angular.isDefined(prevValue.type) && prevValue.type === 'Point') {
	            prevValue.coordinates[1] = newLatLon.lat();
	            prevValue.coordinates[0] = newLatLon.lng();
	          } else {
	            prevValue.latitude = newLatLon.lat();
	            prevValue.longitude = newLatLon.lng();
	          }
	          return prevValue;
	        },
	        getLabelPositionPoint: function(anchor) {
	          var xPos, yPos;
	          if (anchor === void 0) {
	            return void 0;
	          }
	          anchor = /^([-\d\.]+)\s([-\d\.]+)$/.exec(anchor);
	          xPos = parseFloat(anchor[1]);
	          yPos = parseFloat(anchor[2]);
	          if ((xPos != null) && (yPos != null)) {
	            return new google.maps.Point(xPos, yPos);
	          }
	        },
	        createWindowOptions: function(gMarker, scope, content, defaults) {
	          var options;
	          if ((content != null) && (defaults != null) && ($compile != null)) {
	            options = angular.extend({}, defaults, {
	              content: this.buildContent(scope, defaults, content),
	              position: defaults.position != null ? defaults.position : angular.isObject(gMarker) ? gMarker.getPosition() : getCoords(scope.coords)
	            });
	            if ((gMarker != null) && ((options != null ? options.pixelOffset : void 0) == null)) {
	              if (options.boxClass == null) {

	              } else {
	                options.pixelOffset = {
	                  height: 0,
	                  width: -2
	                };
	              }
	            }
	            return options;
	          } else {
	            if (!defaults) {
	              Logger.error('infoWindow defaults not defined');
	              if (!content) {
	                return Logger.error('infoWindow content not defined');
	              }
	            } else {
	              return defaults;
	            }
	          }
	        },
	        buildContent: function(scope, defaults, content) {
	          var parsed, ret;
	          if (defaults.content != null) {
	            ret = defaults.content;
	          } else {
	            if ($compile != null) {
	              content = content.replace(/^\s+|\s+$/g, '');
	              parsed = content === '' ? '' : $compile(content)(scope);
	              if (parsed.length > 0) {
	                ret = parsed[0];
	              }
	            } else {
	              ret = content;
	            }
	          }
	          return ret;
	        },
	        defaultDelay: 50,
	        isTrue: function(value) {
	          return _isTruthy(value, true, ['true', 'TRUE', 1, 'y', 'Y', 'yes', 'YES']);
	        },
	        isFalse: _isFalse,
	        isFalsy: function(value) {
	          return _isTruthy(value, false, [void 0, null]) || _isFalse(value);
	        },
	        getCoords: getCoords,
	        validateCoords: validateCoords,
	        equalCoords: function(coord1, coord2) {
	          return getLatitude(coord1) === getLatitude(coord2) && getLongitude(coord1) === getLongitude(coord2);
	        },
	        validatePath: function(path) {
	          var array, i, polygon, trackMaxVertices;
	          i = 0;
	          if (angular.isUndefined(path.type)) {
	            if (!Array.isArray(path) || path.length < 2) {
	              return false;
	            }
	            while (i < path.length) {
	              if (!((angular.isDefined(path[i].latitude) && angular.isDefined(path[i].longitude)) || (typeof path[i].lat === 'function' && typeof path[i].lng === 'function'))) {
	                return false;
	              }
	              i++;
	            }
	            return true;
	          } else {
	            if (angular.isUndefined(path.coordinates)) {
	              return false;
	            }
	            if (path.type === 'Polygon') {
	              if (path.coordinates[0].length < 4) {
	                return false;
	              }
	              array = path.coordinates[0];
	            } else if (path.type === 'MultiPolygon') {
	              trackMaxVertices = {
	                max: 0,
	                index: 0
	              };
	              _.forEach(path.coordinates, function(polygon, index) {
	                if (polygon[0].length > this.max) {
	                  this.max = polygon[0].length;
	                  return this.index = index;
	                }
	              }, trackMaxVertices);
	              polygon = path.coordinates[trackMaxVertices.index];
	              array = polygon[0];
	              if (array.length < 4) {
	                return false;
	              }
	            } else if (path.type === 'LineString') {
	              if (path.coordinates.length < 2) {
	                return false;
	              }
	              array = path.coordinates;
	            } else {
	              return false;
	            }
	            while (i < array.length) {
	              if (array[i].length !== 2) {
	                return false;
	              }
	              i++;
	            }
	            return true;
	          }
	        },
	        convertPathPoints: function(path) {
	          var array, i, latlng, result, trackMaxVertices;
	          i = 0;
	          result = new google.maps.MVCArray();
	          if (angular.isUndefined(path.type)) {
	            while (i < path.length) {
	              latlng;
	              if (angular.isDefined(path[i].latitude) && angular.isDefined(path[i].longitude)) {
	                latlng = new google.maps.LatLng(path[i].latitude, path[i].longitude);
	              } else if (typeof path[i].lat === 'function' && typeof path[i].lng === 'function') {
	                latlng = path[i];
	              }
	              result.push(latlng);
	              i++;
	            }
	          } else {
	            array;
	            if (path.type === 'Polygon') {
	              array = path.coordinates[0];
	            } else if (path.type === 'MultiPolygon') {
	              trackMaxVertices = {
	                max: 0,
	                index: 0
	              };
	              _.forEach(path.coordinates, function(polygon, index) {
	                if (polygon[0].length > this.max) {
	                  this.max = polygon[0].length;
	                  return this.index = index;
	                }
	              }, trackMaxVertices);
	              array = path.coordinates[trackMaxVertices.index][0];
	            } else if (path.type === 'LineString') {
	              array = path.coordinates;
	            }
	            while (i < array.length) {
	              result.push(new google.maps.LatLng(array[i][1], array[i][0]));
	              i++;
	            }
	          }
	          return result;
	        },
	        getPath: function(object, key) {
	          var obj;
	          if ((key == null) || !_.isString(key)) {
	            return key;
	          }
	          obj = object;
	          _.each(key.split('.'), function(value) {
	            if (obj) {
	              return obj = obj[value];
	            }
	          });
	          return obj;
	        },
	        validateBoundPoints: function(bounds) {
	          if (angular.isUndefined(bounds.sw.latitude) || angular.isUndefined(bounds.sw.longitude) || angular.isUndefined(bounds.ne.latitude) || angular.isUndefined(bounds.ne.longitude)) {
	            return false;
	          }
	          return true;
	        },
	        convertBoundPoints: function(bounds) {
	          var result;
	          result = new google.maps.LatLngBounds(new google.maps.LatLng(bounds.sw.latitude, bounds.sw.longitude), new google.maps.LatLng(bounds.ne.latitude, bounds.ne.longitude));
	          return result;
	        },
	        fitMapBounds: function(map, bounds) {
	          return map.fitBounds(bounds);
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmapIsReady', [
	    '$q', '$timeout', function($q, $timeout) {
	      var _checkIfReady, _ctr, _promises, _proms;
	      _ctr = 0;
	      _proms = [];
	      _promises = function() {
	        return $q.all(_proms);
	      };
	      _checkIfReady = function(deferred, expectedInstances, retriesLeft) {
	        return $timeout(function() {
	          if (retriesLeft <= 0) {
	            deferred.reject('Your maps are not found we have checked the maximum amount of times. :)');
	            return;
	          }
	          if (_ctr !== expectedInstances) {
	            _checkIfReady(deferred, expectedInstances, retriesLeft - 1);
	          } else {
	            deferred.resolve(_promises());
	          }
	        }, 100);
	      };
	      return {
	        spawn: function() {
	          var d;
	          d = $q.defer();
	          _proms.push(d.promise);
	          _ctr += 1;
	          return {
	            instance: _ctr,
	            deferred: d
	          };
	        },
	        promises: _promises,
	        instances: function() {
	          return _ctr;
	        },
	        promise: function(expectedInstances, numRetries) {
	          var d;
	          if (expectedInstances == null) {
	            expectedInstances = 1;
	          }
	          if (numRetries == null) {
	            numRetries = 50;
	          }
	          d = $q.defer();
	          _checkIfReady(d, expectedInstances, numRetries);
	          return d.promise;
	        },
	        reset: function() {
	          _ctr = 0;
	          _proms.length = 0;
	        },
	        decrement: function() {
	          if (_ctr > 0) {
	            _ctr -= 1;
	          }
	          if (_proms.length) {
	            _proms.length -= 1;
	          }
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapLinked", [
	    "uiGmapBaseObject", function(BaseObject) {
	      var Linked;
	      Linked = (function(superClass) {
	        extend(Linked, superClass);

	        function Linked(scope, element, attrs, ctrls) {
	          this.scope = scope;
	          this.element = element;
	          this.attrs = attrs;
	          this.ctrls = ctrls;
	        }

	        return Linked;

	      })(BaseObject);
	      return Linked;
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmapLogger', [
	    'nemSimpleLogger', function(nemSimpleLogger) {
	      return nemSimpleLogger.spawn();
	    }
	  ]);

	}).call(this);
	;
	/*global _:true, angular:true */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.utils').factory('uiGmapModelKey', [
	    'uiGmapBaseObject', 'uiGmapGmapUtil', function(BaseObject, GmapUtil) {
	      return (function(superClass) {
	        extend(_Class, superClass);

	        function _Class(scope1, _interface) {
	          this.scope = scope1;
	          this["interface"] = _interface != null ? _interface : {
	            scopeKeys: []
	          };
	          this.modelsLength = bind(this.modelsLength, this);
	          this.updateChild = bind(this.updateChild, this);
	          this.destroy = bind(this.destroy, this);
	          this.setChildScope = bind(this.setChildScope, this);
	          this.getChanges = bind(this.getChanges, this);
	          this.getProp = bind(this.getProp, this);
	          this.setIdKey = bind(this.setIdKey, this);
	          this.modelKeyComparison = bind(this.modelKeyComparison, this);
	          _Class.__super__.constructor.call(this);
	          this.defaultIdKey = 'id';
	          this.idKey = void 0;
	        }

	        _Class.prototype.evalModelHandle = function(model, modelKey) {
	          if ((model == null) || (modelKey == null)) {
	            return;
	          }
	          if (modelKey === 'self') {
	            return model;
	          } else {
	            if (_.isFunction(modelKey)) {
	              modelKey = modelKey();
	            }
	            return GmapUtil.getPath(model, modelKey);
	          }
	        };

	        _Class.prototype.modelKeyComparison = function(model1, model2) {
	          var coord1, coord2, hasCoords, isEqual, scope, without;
	          hasCoords = this["interface"].scopeKeys.indexOf('coords') >= 0;
	          if (hasCoords && (this.scope.coords != null) || !hasCoords) {
	            scope = this.scope;
	          }
	          if (scope == null) {
	            throw 'No scope set!';
	          }
	          if (hasCoords) {
	            coord1 = this.scopeOrModelVal('coords', scope, model1);
	            coord2 = this.scopeOrModelVal('coords', scope, model2);
	            isEqual = GmapUtil.equalCoords(coord1, coord2);
	            if (!isEqual) {
	              return isEqual;
	            }
	          }
	          without = _.without(this["interface"].scopeKeys, 'coords');
	          isEqual = _.every(without, (function(_this) {
	            return function(k) {
	              return _this.scopeOrModelVal(scope[k], scope, model1) === _this.scopeOrModelVal(scope[k], scope, model2);
	            };
	          })(this));
	          return isEqual;
	        };

	        _Class.prototype.setIdKey = function(scope) {
	          return this.idKey = scope.idKey != null ? scope.idKey : this.defaultIdKey;
	        };

	        _Class.prototype.setVal = function(model, key, newValue) {
	          this.modelOrKey(model, key = newValue);
	          return model;
	        };

	        _Class.prototype.modelOrKey = function(model, key) {
	          if (key == null) {
	            return;
	          }
	          if (key !== 'self') {
	            return GmapUtil.getPath(model, key);
	          }
	          return model;
	        };

	        _Class.prototype.getProp = function(propName, scope, model) {
	          return this.scopeOrModelVal(propName, scope, model);
	        };


	        /*
	        For the cases were watching a large object we only want to know the list of props
	        that actually changed.
	        Also we want to limit the amount of props we analyze to whitelisted props that are
	        actually tracked by scope. (should make things faster with whitelisted)
	         */

	        _Class.prototype.getChanges = function(now, prev, whitelistedProps) {
	          var c, changes, prop;
	          if (whitelistedProps) {
	            prev = _.pick(prev, whitelistedProps);
	            now = _.pick(now, whitelistedProps);
	          }
	          changes = {};
	          prop = {};
	          c = {};
	          for (prop in now) {
	            if (!prev || prev[prop] !== now[prop]) {
	              if (_.isArray(now[prop])) {
	                changes[prop] = now[prop];
	              } else if (_.isObject(now[prop])) {
	                c = this.getChanges(now[prop], (prev ? prev[prop] : null));
	                if (!_.isEmpty(c)) {
	                  changes[prop] = c;
	                }
	              } else {
	                changes[prop] = now[prop];
	              }
	            }
	          }
	          return changes;
	        };

	        _Class.prototype.scopeOrModelVal = function(key, scope, model, doWrap) {
	          var maybeWrap, modelKey, modelProp, scopeProp;
	          if (doWrap == null) {
	            doWrap = false;
	          }
	          maybeWrap = function(isScope, ret, doWrap) {
	            if (doWrap == null) {
	              doWrap = false;
	            }
	            if (doWrap) {
	              return {
	                isScope: isScope,
	                value: ret
	              };
	            }
	            return ret;
	          };
	          scopeProp = _.get(scope, key);
	          if (_.isFunction(scopeProp)) {
	            return maybeWrap(true, scopeProp(model), doWrap);
	          }
	          if (_.isObject(scopeProp)) {
	            return maybeWrap(true, scopeProp, doWrap);
	          }
	          if (!_.isString(scopeProp)) {
	            return maybeWrap(true, scopeProp, doWrap);
	          }
	          modelKey = scopeProp;
	          if (!modelKey) {
	            modelProp = _.get(model, key);
	          } else {
	            modelProp = modelKey === 'self' ? model : _.get(model, modelKey);
	          }
	          if (_.isFunction(modelProp)) {
	            return maybeWrap(false, modelProp(), doWrap);
	          }
	          return maybeWrap(false, modelProp, doWrap);
	        };

	        _Class.prototype.setChildScope = function(keys, childScope, model) {
	          var isScopeObj, key, name, newValue;
	          for (key in keys) {
	            name = keys[key];
	            isScopeObj = this.scopeOrModelVal(name, childScope, model, true);
	            if ((isScopeObj != null ? isScopeObj.value : void 0) != null) {
	              newValue = isScopeObj.value;
	              if (newValue !== childScope[name]) {
	                childScope[name] = newValue;
	              }
	            }
	          }
	          return childScope.model = model;
	        };

	        _Class.prototype.onDestroy = function(scope) {};

	        _Class.prototype.destroy = function(manualOverride) {
	          var ref;
	          if (manualOverride == null) {
	            manualOverride = false;
	          }
	          if ((this.scope != null) && !((ref = this.scope) != null ? ref.$$destroyed : void 0) && (this.needToManualDestroy || manualOverride)) {
	            return this.scope.$destroy();
	          } else {
	            return this.clean();
	          }
	        };

	        _Class.prototype.updateChild = function(child, model) {
	          if (model[this.idKey] == null) {
	            this.$log.error("Model has no id to assign a child to. This is required for performance. Please assign id, or redirect id to a different key.");
	            return;
	          }
	          return child.updateModel(model);
	        };

	        _Class.prototype.modelsLength = function(arrayOrObjModels) {
	          var len, toCheck;
	          if (arrayOrObjModels == null) {
	            arrayOrObjModels = void 0;
	          }
	          len = 0;
	          toCheck = arrayOrObjModels ? arrayOrObjModels : this.scope.models;
	          if (toCheck == null) {
	            return len;
	          }
	          if (angular.isArray(toCheck) || (toCheck.length != null)) {
	            len = toCheck.length;
	          } else {
	            len = Object.keys(toCheck).length;
	          }
	          return len;
	        };

	        return _Class;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').factory('uiGmapModelsWatcher', [
	    'uiGmapLogger', 'uiGmap_async', '$q', 'uiGmapPromise', function(Logger, _async, $q, uiGmapPromise) {
	      return {
	        didQueueInitPromise: function(existingPiecesObj, scope) {
	          if (scope.models.length === 0) {
	            _async.promiseLock(existingPiecesObj, uiGmapPromise.promiseTypes.init, null, null, (function() {
	              return uiGmapPromise.resolve();
	            }));
	            return true;
	          }
	          return false;
	        },
	        figureOutState: function(idKey, scope, childObjects, comparison, callBack) {
	          var adds, children, mappedScopeModelIds, removals, updates;
	          adds = [];
	          mappedScopeModelIds = {};
	          removals = [];
	          updates = [];
	          scope.models.forEach(function(m) {
	            var child;
	            if (m[idKey] != null) {
	              mappedScopeModelIds[m[idKey]] = {};
	              if (childObjects.get(m[idKey]) == null) {
	                return adds.push(m);
	              } else {
	                child = childObjects.get(m[idKey]);
	                if (!comparison(m, child.clonedModel, scope)) {
	                  return updates.push({
	                    model: m,
	                    child: child
	                  });
	                }
	              }
	            } else {
	              return Logger.error(' id missing for model #{m.toString()},\ncan not use do comparison/insertion');
	            }
	          });
	          children = childObjects.values();
	          children.forEach(function(c) {
	            var id;
	            if (c == null) {
	              Logger.error('child undefined in ModelsWatcher.');
	              return;
	            }
	            if (c.model == null) {
	              Logger.error('child.model undefined in ModelsWatcher.');
	              return;
	            }
	            id = c.model[idKey];
	            if (mappedScopeModelIds[id] == null) {
	              return removals.push(c);
	            }
	          });
	          return {
	            adds: adds,
	            removals: removals,
	            updates: updates
	          };
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.utils').service('uiGmapPromise', [
	    '$q', '$timeout', 'uiGmapLogger', function($q, $timeout, $log) {
	      var ExposedPromise, SniffedPromise, defer, isInProgress, isResolved, promise, promiseStatus, promiseStatuses, promiseTypes, resolve, strPromiseStatuses;
	      promiseTypes = {
	        create: 'create',
	        update: 'update',
	        "delete": 'delete',
	        init: 'init'
	      };
	      promiseStatuses = {
	        IN_PROGRESS: 0,
	        RESOLVED: 1,
	        REJECTED: 2
	      };
	      strPromiseStatuses = (function() {
	        var obj;
	        obj = {};
	        obj["" + promiseStatuses.IN_PROGRESS] = 'in-progress';
	        obj["" + promiseStatuses.RESOLVED] = 'resolved';
	        obj["" + promiseStatuses.REJECTED] = 'rejected';
	        return obj;
	      })();
	      isInProgress = function(promise) {
	        if (promise.$$state) {
	          return promise.$$state.status === promiseStatuses.IN_PROGRESS;
	        }
	        if (!promise.hasOwnProperty("$$v")) {
	          return true;
	        }
	      };
	      isResolved = function(promise) {
	        if (promise.$$state) {
	          return promise.$$state.status === promiseStatuses.RESOLVED;
	        }
	        if (promise.hasOwnProperty("$$v")) {
	          return true;
	        }
	      };
	      promiseStatus = function(status) {
	        return strPromiseStatuses[status] || 'done w error';
	      };
	      ExposedPromise = function(promise) {
	        var cancelDeferred, combined, wrapped;
	        cancelDeferred = $q.defer();
	        combined = $q.all([promise, cancelDeferred.promise]);
	        wrapped = $q.defer();
	        promise.then(cancelDeferred.resolve, (function() {}), function(notify) {
	          cancelDeferred.notify(notify);
	          return wrapped.notify(notify);
	        });
	        combined.then(function(successes) {
	          return wrapped.resolve(successes[0] || successes[1]);
	        }, function(error) {
	          return wrapped.reject(error);
	        });
	        wrapped.promise.cancel = function(reason) {
	          if (reason == null) {
	            reason = 'canceled';
	          }
	          return cancelDeferred.reject(reason);
	        };
	        wrapped.promise.notify = function(msg) {
	          if (msg == null) {
	            msg = 'cancel safe';
	          }
	          wrapped.notify(msg);
	          if (promise.hasOwnProperty('notify')) {
	            return promise.notify(msg);
	          }
	        };
	        if (promise.promiseType != null) {
	          wrapped.promise.promiseType = promise.promiseType;
	        }
	        return wrapped.promise;
	      };
	      SniffedPromise = function(fnPromise, promiseType) {
	        return {
	          promise: fnPromise,
	          promiseType: promiseType
	        };
	      };
	      defer = function() {
	        return $q.defer();
	      };
	      resolve = function() {
	        var d;
	        d = $q.defer();
	        d.resolve.apply(void 0, arguments);
	        return d.promise;
	      };
	      promise = function(fnToWrap) {
	        var d;
	        if (!_.isFunction(fnToWrap)) {
	          $log.error("uiGmapPromise.promise() only accepts functions");
	          return;
	        }
	        d = $q.defer();
	        $timeout(function() {
	          var result;
	          result = fnToWrap();
	          return d.resolve(result);
	        });
	        return d.promise;
	      };
	      return {
	        defer: defer,
	        promise: promise,
	        resolve: resolve,
	        promiseTypes: promiseTypes,
	        isInProgress: isInProgress,
	        isResolved: isResolved,
	        promiseStatus: promiseStatus,
	        ExposedPromise: ExposedPromise,
	        SniffedPromise: SniffedPromise
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapPropMap", function() {

	    /*
	      Simple Object Map with a length property to make it easy to track length/size
	     */
	    var PropMap;
	    return PropMap = (function() {
	      function PropMap() {
	        this.removeAll = bind(this.removeAll, this);
	        this.slice = bind(this.slice, this);
	        this.push = bind(this.push, this);
	        this.keys = bind(this.keys, this);
	        this.values = bind(this.values, this);
	        this.remove = bind(this.remove, this);
	        this.put = bind(this.put, this);
	        this.stateChanged = bind(this.stateChanged, this);
	        this.get = bind(this.get, this);
	        this.length = 0;
	        this.dict = {};
	        this.didValsStateChange = false;
	        this.didKeysStateChange = false;
	        this.allVals = [];
	        this.allKeys = [];
	      }

	      PropMap.prototype.get = function(key) {
	        return this.dict[key];
	      };

	      PropMap.prototype.stateChanged = function() {
	        this.didValsStateChange = true;
	        return this.didKeysStateChange = true;
	      };

	      PropMap.prototype.put = function(key, value) {
	        if (this.get(key) == null) {
	          this.length++;
	        }
	        this.stateChanged();
	        return this.dict[key] = value;
	      };

	      PropMap.prototype.remove = function(key, isSafe) {
	        var value;
	        if (isSafe == null) {
	          isSafe = false;
	        }
	        if (isSafe && !this.get(key)) {
	          return void 0;
	        }
	        value = this.dict[key];
	        delete this.dict[key];
	        this.length--;
	        this.stateChanged();
	        return value;
	      };

	      PropMap.prototype.valuesOrKeys = function(str) {
	        var keys, vals;
	        if (str == null) {
	          str = 'Keys';
	        }
	        if (!this["did" + str + "StateChange"]) {
	          return this['all' + str];
	        }
	        vals = [];
	        keys = [];
	        _.each(this.dict, function(v, k) {
	          vals.push(v);
	          return keys.push(k);
	        });
	        this.didKeysStateChange = false;
	        this.didValsStateChange = false;
	        this.allVals = vals;
	        this.allKeys = keys;
	        return this['all' + str];
	      };

	      PropMap.prototype.values = function() {
	        return this.valuesOrKeys('Vals');
	      };

	      PropMap.prototype.keys = function() {
	        return this.valuesOrKeys();
	      };

	      PropMap.prototype.push = function(obj, key) {
	        if (key == null) {
	          key = "key";
	        }
	        return this.put(obj[key], obj);
	      };

	      PropMap.prototype.slice = function() {
	        return this.keys().map((function(_this) {
	          return function(k) {
	            return _this.remove(k);
	          };
	        })(this));
	      };

	      PropMap.prototype.removeAll = function() {
	        return this.slice();
	      };

	      PropMap.prototype.each = function(cb) {
	        return _.each(this.dict, function(v, k) {
	          return cb(v);
	        });
	      };

	      PropMap.prototype.map = function(cb) {
	        return _.map(this.dict, function(v, k) {
	          return cb(v);
	        });
	      };

	      return PropMap;

	    })();
	  });

	}).call(this);
	;
	/*globals angular,_ */

	(function() {
	  angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapPropertyAction", [
	    "uiGmapLogger", function(Logger) {
	      var PropertyAction;
	      PropertyAction = function(setterFn) {
	        this.setIfChange = function(callingKey) {
	          return function(newVal, oldVal) {
	            if (!_.isEqual(oldVal, newVal)) {
	              return setterFn(callingKey, newVal);
	            }
	          };
	        };
	        this.sic = this.setIfChange;
	        return this;
	      };
	      return PropertyAction;
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module('uiGmapgoogle-maps.directives.api.managers').factory('uiGmapClustererMarkerManager', [
	    'uiGmapLogger', 'uiGmapFitHelper', 'uiGmapPropMap', 'uiGmapEventsHelper', function($log, FitHelper, PropMap, EventsHelper) {
	      var ClustererMarkerManager;
	      ClustererMarkerManager = (function() {
	        ClustererMarkerManager.type = 'ClustererMarkerManager';

	        function ClustererMarkerManager(gMap, opt_markers, opt_options, opt_events) {
	          if (opt_markers == null) {
	            opt_markers = {};
	          }
	          this.opt_options = opt_options != null ? opt_options : {};
	          this.opt_events = opt_events;
	          this.checkSync = bind(this.checkSync, this);
	          this.getGMarkers = bind(this.getGMarkers, this);
	          this.fit = bind(this.fit, this);
	          this.destroy = bind(this.destroy, this);
	          this.attachEvents = bind(this.attachEvents, this);
	          this.clear = bind(this.clear, this);
	          this.draw = bind(this.draw, this);
	          this.removeMany = bind(this.removeMany, this);
	          this.remove = bind(this.remove, this);
	          this.addMany = bind(this.addMany, this);
	          this.update = bind(this.update, this);
	          this.add = bind(this.add, this);
	          this.type = ClustererMarkerManager.type;
	          this.clusterer = new NgMapMarkerClusterer(gMap, opt_markers, this.opt_options);
	          this.propMapGMarkers = new PropMap();
	          this.attachEvents(this.opt_events, 'opt_events');
	          this.clusterer.setIgnoreHidden(true);
	          this.noDrawOnSingleAddRemoves = true;
	          $log.info(this);
	        }

	        ClustererMarkerManager.prototype.checkKey = function(gMarker) {
	          var msg;
	          if (gMarker.key == null) {
	            msg = 'gMarker.key undefined and it is REQUIRED!!';
	            return $log.error(msg);
	          }
	        };

	        ClustererMarkerManager.prototype.add = function(gMarker) {
	          this.checkKey(gMarker);
	          this.clusterer.addMarker(gMarker, this.noDrawOnSingleAddRemoves);
	          this.propMapGMarkers.put(gMarker.key, gMarker);
	          return this.checkSync();
	        };

	        ClustererMarkerManager.prototype.update = function(gMarker) {
	          this.remove(gMarker);
	          return this.add(gMarker);
	        };

	        ClustererMarkerManager.prototype.addMany = function(gMarkers) {
	          return gMarkers.forEach((function(_this) {
	            return function(gMarker) {
	              return _this.add(gMarker);
	            };
	          })(this));
	        };

	        ClustererMarkerManager.prototype.remove = function(gMarker) {
	          var exists;
	          this.checkKey(gMarker);
	          exists = this.propMapGMarkers.get(gMarker.key);
	          if (exists) {
	            this.clusterer.removeMarker(gMarker, this.noDrawOnSingleAddRemoves);
	            this.propMapGMarkers.remove(gMarker.key);
	          }
	          return this.checkSync();
	        };

	        ClustererMarkerManager.prototype.removeMany = function(gMarkers) {
	          return gMarkers.forEach((function(_this) {
	            return function(gMarker) {
	              return _this.remove(gMarker);
	            };
	          })(this));
	        };

	        ClustererMarkerManager.prototype.draw = function() {
	          return this.clusterer.repaint();
	        };

	        ClustererMarkerManager.prototype.clear = function() {
	          this.removeMany(this.getGMarkers());
	          return this.clusterer.repaint();
	        };

	        ClustererMarkerManager.prototype.attachEvents = function(options, optionsName) {
	          var eventHandler, eventName, results;
	          this.listeners = [];
	          if (angular.isDefined(options) && (options != null) && angular.isObject(options)) {
	            results = [];
	            for (eventName in options) {
	              eventHandler = options[eventName];
	              if (options.hasOwnProperty(eventName) && angular.isFunction(options[eventName])) {
	                $log.info(optionsName + ": Attaching event: " + eventName + " to clusterer");
	                results.push(this.listeners.push(google.maps.event.addListener(this.clusterer, eventName, options[eventName])));
	              } else {
	                results.push(void 0);
	              }
	            }
	            return results;
	          }
	        };

	        ClustererMarkerManager.prototype.clearEvents = function() {
	          EventsHelper.removeEvents(this.listeners);
	          return this.listeners = [];
	        };

	        ClustererMarkerManager.prototype.destroy = function() {
	          this.clearEvents();
	          return this.clear();
	        };

	        ClustererMarkerManager.prototype.fit = function() {
	          return FitHelper.fit(this.getGMarkers(), this.clusterer.getMap());
	        };

	        ClustererMarkerManager.prototype.getGMarkers = function() {
	          return this.clusterer.getMarkers().values();
	        };

	        ClustererMarkerManager.prototype.checkSync = function() {};

	        return ClustererMarkerManager;

	      })();
	      return ClustererMarkerManager;
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.managers').service('uiGmapGoogleMapObjectManager', [
	    function() {
	      var _availableInstances, _usedInstances;
	      _availableInstances = [];
	      _usedInstances = [];
	      return {
	        createMapInstance: function(parentElement, options) {
	          var instance;
	          instance = null;
	          if (_availableInstances.length === 0) {
	            instance = new google.maps.Map(parentElement, options);
	            _usedInstances.push(instance);
	          } else {
	            instance = _availableInstances.pop();
	            angular.element(parentElement).append(instance.getDiv());
	            instance.setOptions(options);
	            _usedInstances.push(instance);
	          }
	          return instance;
	        },
	        recycleMapInstance: function(instance) {
	          var index;
	          index = _usedInstances.indexOf(instance);
	          if (index < 0) {
	            throw new Error('Expected map instance to be a previously used instance');
	          }
	          _usedInstances.splice(index, 1);
	          return _availableInstances.push(instance);
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module("uiGmapgoogle-maps.directives.api.managers").factory("uiGmapMarkerManager", [
	    "uiGmapLogger", "uiGmapFitHelper", "uiGmapPropMap", function(Logger, FitHelper, PropMap) {
	      var MarkerManager;
	      MarkerManager = (function() {
	        MarkerManager.type = 'MarkerManager';

	        function MarkerManager(gMap, opt_markers, opt_options) {
	          this.getGMarkers = bind(this.getGMarkers, this);
	          this.fit = bind(this.fit, this);
	          this.handleOptDraw = bind(this.handleOptDraw, this);
	          this.clear = bind(this.clear, this);
	          this.destroy = bind(this.destroy, this);
	          this.draw = bind(this.draw, this);
	          this.removeMany = bind(this.removeMany, this);
	          this.remove = bind(this.remove, this);
	          this.addMany = bind(this.addMany, this);
	          this.update = bind(this.update, this);
	          this.add = bind(this.add, this);
	          this.type = MarkerManager.type;
	          this.gMap = gMap;
	          this.gMarkers = new PropMap();
	          this.$log = Logger;
	          this.$log.info(this);
	        }

	        MarkerManager.prototype.add = function(gMarker, optDraw) {
	          var exists, msg;
	          if (optDraw == null) {
	            optDraw = true;
	          }
	          if (gMarker.key == null) {
	            msg = "gMarker.key undefined and it is REQUIRED!!";
	            Logger.error(msg);
	            throw msg;
	          }
	          exists = this.gMarkers.get(gMarker.key);
	          if (!exists) {
	            this.handleOptDraw(gMarker, optDraw, true);
	            return this.gMarkers.put(gMarker.key, gMarker);
	          }
	        };

	        MarkerManager.prototype.update = function(gMarker, optDraw) {
	          if (optDraw == null) {
	            optDraw = true;
	          }
	          this.remove(gMarker, optDraw);
	          return this.add(gMarker, optDraw);
	        };

	        MarkerManager.prototype.addMany = function(gMarkers) {
	          return gMarkers.forEach((function(_this) {
	            return function(gMarker) {
	              return _this.add(gMarker);
	            };
	          })(this));
	        };

	        MarkerManager.prototype.remove = function(gMarker, optDraw) {
	          if (optDraw == null) {
	            optDraw = true;
	          }
	          this.handleOptDraw(gMarker, optDraw, false);
	          if (this.gMarkers.get(gMarker.key)) {
	            return this.gMarkers.remove(gMarker.key);
	          }
	        };

	        MarkerManager.prototype.removeMany = function(gMarkers) {
	          return gMarkers.forEach((function(_this) {
	            return function(marker) {
	              return _this.remove(marker);
	            };
	          })(this));
	        };

	        MarkerManager.prototype.draw = function() {
	          var deletes;
	          deletes = [];
	          this.gMarkers.each((function(_this) {
	            return function(gMarker) {
	              if (!gMarker.isDrawn) {
	                if (gMarker.doAdd) {
	                  gMarker.setMap(_this.gMap);
	                  return gMarker.isDrawn = true;
	                } else {
	                  return deletes.push(gMarker);
	                }
	              }
	            };
	          })(this));
	          return deletes.forEach((function(_this) {
	            return function(gMarker) {
	              gMarker.isDrawn = false;
	              return _this.remove(gMarker, true);
	            };
	          })(this));
	        };

	        MarkerManager.prototype.destroy = function() {
	          return this.clear();
	        };

	        MarkerManager.prototype.clear = function() {
	          this.gMarkers.each(function(gMarker) {
	            return gMarker.setMap(null);
	          });
	          delete this.gMarkers;
	          return this.gMarkers = new PropMap();
	        };

	        MarkerManager.prototype.handleOptDraw = function(gMarker, optDraw, doAdd) {
	          if (optDraw === true) {
	            if (doAdd) {
	              gMarker.setMap(this.gMap);
	            } else {
	              gMarker.setMap(null);
	            }
	            return gMarker.isDrawn = true;
	          } else {
	            gMarker.isDrawn = false;
	            return gMarker.doAdd = doAdd;
	          }
	        };

	        MarkerManager.prototype.fit = function() {
	          return FitHelper.fit(this.getGMarkers(), this.gMap);
	        };

	        MarkerManager.prototype.getGMarkers = function() {
	          return this.gMarkers.values();
	        };

	        return MarkerManager;

	      })();
	      return MarkerManager;
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module('uiGmapgoogle-maps.directives.api.managers').factory('uiGmapSpiderfierMarkerManager', [
	    'uiGmapLogger', 'uiGmapFitHelper', 'uiGmapPropMap', 'uiGmapMarkerSpiderfier', function($log, FitHelper, PropMap, MarkerSpiderfier) {
	      var SpiderfierMarkerManager;
	      return SpiderfierMarkerManager = (function() {
	        SpiderfierMarkerManager.type = 'SpiderfierMarkerManager';

	        function SpiderfierMarkerManager(gMap, opt_markers, opt_options, opt_events, scope) {
	          if (opt_markers == null) {
	            opt_markers = {};
	          }
	          this.opt_options = opt_options != null ? opt_options : {};
	          this.opt_events = opt_events;
	          this.scope = scope;
	          this.checkSync = bind(this.checkSync, this);
	          this.isSpiderfied = bind(this.isSpiderfied, this);
	          this.getGMarkers = bind(this.getGMarkers, this);
	          this.fit = bind(this.fit, this);
	          this.destroy = bind(this.destroy, this);
	          this.attachEvents = bind(this.attachEvents, this);
	          this.clear = bind(this.clear, this);
	          this.draw = bind(this.draw, this);
	          this.removeMany = bind(this.removeMany, this);
	          this.remove = bind(this.remove, this);
	          this.addMany = bind(this.addMany, this);
	          this.update = bind(this.update, this);
	          this.add = bind(this.add, this);
	          this.type = SpiderfierMarkerManager.type;
	          this.markerSpiderfier = new MarkerSpiderfier(gMap, this.opt_options);
	          this.propMapGMarkers = new PropMap();
	          this.attachEvents(this.opt_events, 'opt_events');
	          this.noDrawOnSingleAddRemoves = true;
	          $log.info(this);
	        }

	        SpiderfierMarkerManager.prototype.checkKey = function(gMarker) {
	          var msg;
	          if (gMarker.key == null) {
	            msg = 'gMarker.key undefined and it is REQUIRED!!';
	            return $log.error(msg);
	          }
	        };

	        SpiderfierMarkerManager.prototype.add = function(gMarker) {
	          gMarker.setMap(this.markerSpiderfier.map);
	          this.checkKey(gMarker);
	          this.markerSpiderfier.addMarker(gMarker, this.noDrawOnSingleAddRemoves);
	          this.propMapGMarkers.put(gMarker.key, gMarker);
	          return this.checkSync();
	        };

	        SpiderfierMarkerManager.prototype.update = function(gMarker) {
	          this.remove(gMarker);
	          return this.add(gMarker);
	        };

	        SpiderfierMarkerManager.prototype.addMany = function(gMarkers) {
	          return gMarkers.forEach((function(_this) {
	            return function(gMarker) {
	              return _this.add(gMarker);
	            };
	          })(this));
	        };

	        SpiderfierMarkerManager.prototype.remove = function(gMarker) {
	          var exists;
	          this.checkKey(gMarker);
	          exists = this.propMapGMarkers.get(gMarker.key);
	          if (exists) {
	            gMarker.setMap(null);
	            this.markerSpiderfier.removeMarker(gMarker, this.noDrawOnSingleAddRemoves);
	            this.propMapGMarkers.remove(gMarker.key);
	          }
	          return this.checkSync();
	        };

	        SpiderfierMarkerManager.prototype.removeMany = function(gMarkers) {
	          return gMarkers.forEach((function(_this) {
	            return function(gMarker) {
	              return _this.remove(gMarker);
	            };
	          })(this));
	        };

	        SpiderfierMarkerManager.prototype.draw = function() {};

	        SpiderfierMarkerManager.prototype.clear = function() {
	          return this.removeMany(this.getGMarkers());
	        };

	        SpiderfierMarkerManager.prototype.attachEvents = function(options, optionsName) {
	          if (angular.isDefined(options) && (options != null) && angular.isObject(options)) {
	            return _.each(options, (function(_this) {
	              return function(eventHandler, eventName) {
	                if (options.hasOwnProperty(eventName) && angular.isFunction(options[eventName])) {
	                  $log.info(optionsName + ": Attaching event: " + eventName + " to markerSpiderfier");
	                  return _this.markerSpiderfier.addListener(eventName, function() {
	                    if (eventName === 'spiderfy' || eventName === 'unspiderfy') {
	                      return _this.scope.$evalAsync(options[eventName].apply(options, arguments));
	                    } else {
	                      return _this.scope.$evalAsync(options[eventName].apply(options, [arguments[0], eventName, arguments[0].model, arguments]));
	                    }
	                  });
	                }
	              };
	            })(this));
	          }
	        };

	        SpiderfierMarkerManager.prototype.clearEvents = function(options, optionsName) {
	          var eventHandler, eventName;
	          if (angular.isDefined(options) && (options != null) && angular.isObject(options)) {
	            for (eventName in options) {
	              eventHandler = options[eventName];
	              if (options.hasOwnProperty(eventName) && angular.isFunction(options[eventName])) {
	                $log.info(optionsName + ": Clearing event: " + eventName + " to markerSpiderfier");
	                this.markerSpiderfier.clearListeners(eventName);
	              }
	            }
	          }
	        };

	        SpiderfierMarkerManager.prototype.destroy = function() {
	          this.clearEvents(this.opt_events, 'opt_events');
	          return this.clear();
	        };

	        SpiderfierMarkerManager.prototype.fit = function() {
	          return FitHelper.fit(this.getGMarkers(), this.markerSpiderfier.map);
	        };

	        SpiderfierMarkerManager.prototype.getGMarkers = function() {
	          return this.markerSpiderfier.getMarkers();
	        };

	        SpiderfierMarkerManager.prototype.isSpiderfied = function() {
	          return _.find(this.getGMarkers(), function(gMarker) {
	            return (gMarker != null ? gMarker._omsData : void 0) != null;
	          });
	        };

	        SpiderfierMarkerManager.prototype.checkSync = function() {};

	        return SpiderfierMarkerManager;

	      })();
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps').factory('uiGmapadd-events', [
	    '$timeout', function($timeout) {
	      var addEvent, addEvents;
	      addEvent = function(target, eventName, handler) {
	        return google.maps.event.addListener(target, eventName, function() {
	          handler.apply(this, arguments);
	          return $timeout((function() {}), true);
	        });
	      };
	      addEvents = function(target, eventName, handler) {
	        var remove;
	        if (handler) {
	          return addEvent(target, eventName, handler);
	        }
	        remove = [];
	        angular.forEach(eventName, function(_handler, key) {
	          return remove.push(addEvent(target, key, _handler));
	        });
	        return function() {
	          angular.forEach(remove, function(listener) {
	            return google.maps.event.removeListener(listener);
	          });
	          return remove = null;
	        };
	      };
	      return addEvents;
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps').factory('uiGmaparray-sync', [
	    'uiGmapadd-events', function(mapEvents) {
	      return function(mapArray, scope, pathEval, pathChangedFn) {
	        var geojsonArray, geojsonHandlers, geojsonWatcher, isSetFromScope, legacyHandlers, legacyWatcher, mapArrayListener, scopePath, watchListener;
	        isSetFromScope = false;
	        scopePath = scope.$eval(pathEval);
	        if (!scope["static"]) {
	          legacyHandlers = {
	            set_at: function(index) {
	              var value;
	              if (isSetFromScope) {
	                return;
	              }
	              value = mapArray.getAt(index);
	              if (!value) {
	                return;
	              }
	              if (!value.lng || !value.lat) {
	                return scopePath[index] = value;
	              } else {
	                scopePath[index].latitude = value.lat();
	                return scopePath[index].longitude = value.lng();
	              }
	            },
	            insert_at: function(index) {
	              var value;
	              if (isSetFromScope) {
	                return;
	              }
	              value = mapArray.getAt(index);
	              if (!value) {
	                return;
	              }
	              if (!value.lng || !value.lat) {
	                return scopePath.splice(index, 0, value);
	              } else {
	                return scopePath.splice(index, 0, {
	                  latitude: value.lat(),
	                  longitude: value.lng()
	                });
	              }
	            },
	            remove_at: function(index) {
	              if (isSetFromScope) {
	                return;
	              }
	              return scopePath.splice(index, 1);
	            }
	          };
	          geojsonArray;
	          if (scopePath.type === 'Polygon') {
	            geojsonArray = scopePath.coordinates[0];
	          } else if (scopePath.type === 'LineString') {
	            geojsonArray = scopePath.coordinates;
	          }
	          geojsonHandlers = {
	            set_at: function(index) {
	              var value;
	              if (isSetFromScope) {
	                return;
	              }
	              value = mapArray.getAt(index);
	              if (!(value && value.lng && value.lat)) {
	                return;
	              }
	              geojsonArray[index][1] = value.lat();
	              return geojsonArray[index][0] = value.lng();
	            },
	            insert_at: function(index) {
	              var value;
	              if (isSetFromScope) {
	                return;
	              }
	              value = mapArray.getAt(index);
	              if (!value) {
	                return;
	              }
	              if (!value.lng || !value.lat) {
	                return;
	              }
	              return geojsonArray.splice(index, 0, [value.lng(), value.lat()]);
	            },
	            remove_at: function(index) {
	              if (isSetFromScope) {
	                return;
	              }
	              return geojsonArray.splice(index, 1);
	            }
	          };
	          mapArrayListener = mapEvents(mapArray, angular.isUndefined(scopePath.type) ? legacyHandlers : geojsonHandlers);
	        }
	        legacyWatcher = function(newPath) {
	          var changed, i, l, newLength, newValue, oldArray, oldLength, oldValue;
	          isSetFromScope = true;
	          oldArray = mapArray;
	          changed = false;
	          if (newPath) {
	            i = 0;
	            oldLength = oldArray.getLength();
	            newLength = newPath.length;
	            l = Math.min(oldLength, newLength);
	            newValue = void 0;
	            while (i < l) {
	              oldValue = oldArray.getAt(i);
	              newValue = newPath[i];
	              if (typeof newValue.equals === 'function') {
	                if (!newValue.equals(oldValue)) {
	                  oldArray.setAt(i, newValue);
	                  changed = true;
	                }
	              } else {
	                if ((oldValue.lat() !== newValue.latitude) || (oldValue.lng() !== newValue.longitude)) {
	                  oldArray.setAt(i, new google.maps.LatLng(newValue.latitude, newValue.longitude));
	                  changed = true;
	                }
	              }
	              i++;
	            }
	            while (i < newLength) {
	              newValue = newPath[i];
	              if (typeof newValue.lat === 'function' && typeof newValue.lng === 'function') {
	                oldArray.push(newValue);
	              } else {
	                oldArray.push(new google.maps.LatLng(newValue.latitude, newValue.longitude));
	              }
	              changed = true;
	              i++;
	            }
	            while (i < oldLength) {
	              oldArray.pop();
	              changed = true;
	              i++;
	            }
	          }
	          isSetFromScope = false;
	          if (changed) {
	            return pathChangedFn(oldArray);
	          }
	        };
	        geojsonWatcher = function(newPath) {
	          var array, changed, i, l, newLength, newValue, oldArray, oldLength, oldValue;
	          isSetFromScope = true;
	          oldArray = mapArray;
	          changed = false;
	          if (newPath) {
	            array;
	            if (scopePath.type === 'Polygon') {
	              array = newPath.coordinates[0];
	            } else if (scopePath.type === 'LineString') {
	              array = newPath.coordinates;
	            }
	            i = 0;
	            oldLength = oldArray.getLength();
	            newLength = array.length;
	            l = Math.min(oldLength, newLength);
	            newValue = void 0;
	            while (i < l) {
	              oldValue = oldArray.getAt(i);
	              newValue = array[i];
	              if ((oldValue.lat() !== newValue[1]) || (oldValue.lng() !== newValue[0])) {
	                oldArray.setAt(i, new google.maps.LatLng(newValue[1], newValue[0]));
	                changed = true;
	              }
	              i++;
	            }
	            while (i < newLength) {
	              newValue = array[i];
	              oldArray.push(new google.maps.LatLng(newValue[1], newValue[0]));
	              changed = true;
	              i++;
	            }
	            while (i < oldLength) {
	              oldArray.pop();
	              changed = true;
	              i++;
	            }
	          }
	          isSetFromScope = false;
	          if (changed) {
	            return pathChangedFn(oldArray);
	          }
	        };
	        watchListener;
	        if (!scope["static"]) {
	          if (angular.isUndefined(scopePath.type)) {
	            watchListener = scope.$watchCollection(pathEval, legacyWatcher);
	          } else {
	            watchListener = scope.$watch(pathEval, geojsonWatcher, true);
	          }
	        }
	        return function() {
	          if (mapArrayListener) {
	            mapArrayListener();
	            mapArrayListener = null;
	          }
	          if (watchListener) {
	            watchListener();
	            return watchListener = null;
	          }
	        };
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapChromeFixes", [
	    '$timeout', function($timeout) {
	      return {
	        maybeRepaint: function(el) {
	          if (el) {
	            el.style.opacity = 0.9;
	            return $timeout(function() {
	              return el.style.opacity = 1;
	            });
	          }
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps').service('uiGmapObjectIterators', function() {
	    var _ignores, _iterators, _slapForEach, _slapMap;
	    _ignores = ['length', 'forEach', 'map'];
	    _iterators = [];
	    _slapForEach = function(object) {
	      object.forEach = function(cb) {
	        return _.each(_.omit(object, _ignores), function(val) {
	          if (!_.isFunction(val)) {
	            return cb(val);
	          }
	        });
	      };
	      return object;
	    };
	    _iterators.push(_slapForEach);
	    _slapMap = function(object) {
	      object.map = function(cb) {
	        return _.map(_.omit(object, _ignores), function(val) {
	          if (!_.isFunction(val)) {
	            return cb(val);
	          }
	        });
	      };
	      return object;
	    };
	    _iterators.push(_slapMap);
	    return {
	      slapMap: _slapMap,
	      slapForEach: _slapForEach,
	      slapAll: function(object) {
	        _iterators.forEach(function(it) {
	          return it(object);
	        });
	        return object;
	      }
	    };
	  });

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.options.builders').service('uiGmapCommonOptionsBuilder', [
	    'uiGmapBaseObject', 'uiGmapLogger', 'uiGmapModelKey', function(BaseObject, $log, ModelKey) {
	      var CommonOptionsBuilder;
	      return CommonOptionsBuilder = (function(superClass) {
	        extend(CommonOptionsBuilder, superClass);

	        function CommonOptionsBuilder() {
	          this.watchProps = bind(this.watchProps, this);
	          this.buildOpts = bind(this.buildOpts, this);
	          return CommonOptionsBuilder.__super__.constructor.apply(this, arguments);
	        }

	        CommonOptionsBuilder.prototype.props = [
	          'clickable', 'draggable', 'editable', 'visible', {
	            prop: 'stroke',
	            isColl: true
	          }
	        ];

	        CommonOptionsBuilder.prototype.getCorrectModel = function(scope) {
	          if (angular.isDefined(scope != null ? scope.model : void 0)) {
	            return scope.model;
	          } else {
	            return scope;
	          }
	        };

	        CommonOptionsBuilder.prototype.buildOpts = function(customOpts, cachedEval, forEachOpts) {
	          var model, opts, stroke;
	          if (customOpts == null) {
	            customOpts = {};
	          }
	          if (forEachOpts == null) {
	            forEachOpts = {};
	          }
	          if (!this.scope) {
	            $log.error('this.scope not defined in CommonOptionsBuilder can not buildOpts');
	            return;
	          }
	          if (!this.gMap) {
	            $log.error('this.map not defined in CommonOptionsBuilder can not buildOpts');
	            return;
	          }
	          model = this.getCorrectModel(this.scope);
	          stroke = this.scopeOrModelVal('stroke', this.scope, model);
	          opts = angular.extend(customOpts, this.DEFAULTS, {
	            map: this.gMap,
	            strokeColor: stroke != null ? stroke.color : void 0,
	            strokeOpacity: stroke != null ? stroke.opacity : void 0,
	            strokeWeight: stroke != null ? stroke.weight : void 0
	          });
	          angular.forEach(angular.extend(forEachOpts, {
	            clickable: true,
	            draggable: false,
	            editable: false,
	            "static": false,
	            fit: false,
	            visible: true,
	            zIndex: 0,
	            icons: []
	          }), (function(_this) {
	            return function(defaultValue, key) {
	              var val;
	              val = cachedEval ? cachedEval[key] : _this.scopeOrModelVal(key, _this.scope, model);
	              if (angular.isUndefined(val)) {
	                return opts[key] = defaultValue;
	              } else {
	                return opts[key] = model[key];
	              }
	            };
	          })(this));
	          if (opts["static"]) {
	            opts.editable = false;
	          }
	          return opts;
	        };

	        CommonOptionsBuilder.prototype.watchProps = function(props) {
	          if (props == null) {
	            props = this.props;
	          }
	          return props.forEach((function(_this) {
	            return function(prop) {
	              if ((_this.attrs[prop] != null) || (_this.attrs[prop != null ? prop.prop : void 0] != null)) {
	                if (prop != null ? prop.isColl : void 0) {
	                  return _this.scope.$watchCollection(prop.prop, _this.setMyOptions);
	                } else {
	                  return _this.scope.$watch(prop, _this.setMyOptions);
	                }
	              }
	            };
	          })(this));
	        };

	        return CommonOptionsBuilder;

	      })(ModelKey);
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.options.builders').factory('uiGmapPolylineOptionsBuilder', [
	    'uiGmapCommonOptionsBuilder', function(CommonOptionsBuilder) {
	      var PolylineOptionsBuilder;
	      return PolylineOptionsBuilder = (function(superClass) {
	        extend(PolylineOptionsBuilder, superClass);

	        function PolylineOptionsBuilder() {
	          return PolylineOptionsBuilder.__super__.constructor.apply(this, arguments);
	        }

	        PolylineOptionsBuilder.prototype.buildOpts = function(pathPoints, cachedEval) {
	          return PolylineOptionsBuilder.__super__.buildOpts.call(this, {
	            path: pathPoints
	          }, cachedEval, {
	            geodesic: false
	          });
	        };

	        return PolylineOptionsBuilder;

	      })(CommonOptionsBuilder);
	    }
	  ]).factory('uiGmapShapeOptionsBuilder', [
	    'uiGmapCommonOptionsBuilder', function(CommonOptionsBuilder) {
	      var ShapeOptionsBuilder;
	      return ShapeOptionsBuilder = (function(superClass) {
	        extend(ShapeOptionsBuilder, superClass);

	        function ShapeOptionsBuilder() {
	          return ShapeOptionsBuilder.__super__.constructor.apply(this, arguments);
	        }

	        ShapeOptionsBuilder.prototype.buildOpts = function(customOpts, cachedEval, forEachOpts) {
	          var fill, model;
	          model = this.getCorrectModel(this.scope);
	          fill = cachedEval ? cachedEval['fill'] : this.scopeOrModelVal('fill', this.scope, model);
	          customOpts = angular.extend(customOpts, {
	            fillColor: fill != null ? fill.color : void 0,
	            fillOpacity: fill != null ? fill.opacity : void 0
	          });
	          return ShapeOptionsBuilder.__super__.buildOpts.call(this, customOpts, cachedEval, forEachOpts);
	        };

	        return ShapeOptionsBuilder;

	      })(CommonOptionsBuilder);
	    }
	  ]).factory('uiGmapPolygonOptionsBuilder', [
	    'uiGmapShapeOptionsBuilder', function(ShapeOptionsBuilder) {
	      var PolygonOptionsBuilder;
	      return PolygonOptionsBuilder = (function(superClass) {
	        extend(PolygonOptionsBuilder, superClass);

	        function PolygonOptionsBuilder() {
	          return PolygonOptionsBuilder.__super__.constructor.apply(this, arguments);
	        }

	        PolygonOptionsBuilder.prototype.buildOpts = function(pathPoints, cachedEval) {
	          return PolygonOptionsBuilder.__super__.buildOpts.call(this, {
	            path: pathPoints
	          }, cachedEval, {
	            geodesic: false
	          });
	        };

	        return PolygonOptionsBuilder;

	      })(ShapeOptionsBuilder);
	    }
	  ]).factory('uiGmapRectangleOptionsBuilder', [
	    'uiGmapShapeOptionsBuilder', function(ShapeOptionsBuilder) {
	      var RectangleOptionsBuilder;
	      return RectangleOptionsBuilder = (function(superClass) {
	        extend(RectangleOptionsBuilder, superClass);

	        function RectangleOptionsBuilder() {
	          return RectangleOptionsBuilder.__super__.constructor.apply(this, arguments);
	        }

	        RectangleOptionsBuilder.prototype.buildOpts = function(bounds, cachedEval) {
	          return RectangleOptionsBuilder.__super__.buildOpts.call(this, {
	            bounds: bounds
	          }, cachedEval);
	        };

	        return RectangleOptionsBuilder;

	      })(ShapeOptionsBuilder);
	    }
	  ]).factory('uiGmapCircleOptionsBuilder', [
	    'uiGmapShapeOptionsBuilder', function(ShapeOptionsBuilder) {
	      var CircleOptionsBuilder;
	      return CircleOptionsBuilder = (function(superClass) {
	        extend(CircleOptionsBuilder, superClass);

	        function CircleOptionsBuilder() {
	          return CircleOptionsBuilder.__super__.constructor.apply(this, arguments);
	        }

	        CircleOptionsBuilder.prototype.buildOpts = function(center, radius, cachedEval) {
	          return CircleOptionsBuilder.__super__.buildOpts.call(this, {
	            center: center,
	            radius: radius
	          }, cachedEval);
	        };

	        return CircleOptionsBuilder;

	      })(ShapeOptionsBuilder);
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.options').service('uiGmapMarkerOptions', [
	    'uiGmapLogger', 'uiGmapGmapUtil', function($log, GmapUtil) {
	      return _.extend(GmapUtil, {
	        createOptions: function(coords, icon, defaults, map) {
	          var opts;
	          if (defaults == null) {
	            defaults = {};
	          }
	          opts = angular.extend({}, defaults, {
	            position: defaults.position != null ? defaults.position : GmapUtil.getCoords(coords),
	            visible: defaults.visible != null ? defaults.visible : GmapUtil.validateCoords(coords)
	          });
	          if ((defaults.icon != null) || (icon != null)) {
	            opts = angular.extend(opts, {
	              icon: defaults.icon != null ? defaults.icon : icon
	            });
	          }
	          if (map != null) {
	            opts.map = map;
	          }
	          return opts;
	        },
	        isLabel: function(options) {
	          if (options == null) {
	            return false;
	          }
	          return (options.labelContent != null) || (options.labelAnchor != null) || (options.labelClass != null) || (options.labelStyle != null) || (options.labelVisible != null);
	        }
	      });
	    }
	  ]);

	}).call(this);
	;
	/*global _,angular */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapBasePolyChildModel', [
	    'uiGmapLogger', '$timeout', 'uiGmaparray-sync', 'uiGmapGmapUtil', 'uiGmapEventsHelper', function($log, $timeout, arraySync, GmapUtil, EventsHelper) {
	      return function(Builder, gFactory) {
	        var BasePolyChildModel;
	        return BasePolyChildModel = (function(superClass) {
	          extend(BasePolyChildModel, superClass);

	          BasePolyChildModel.include(GmapUtil);

	          function BasePolyChildModel(arg) {
	            var create, gObjectChangeCb, ref;
	            this.scope = arg.scope, this.attrs = arg.attrs, this.gMap = arg.gMap, this.defaults = arg.defaults, this.model = arg.model, gObjectChangeCb = arg.gObjectChangeCb, this.isScopeModel = (ref = arg.isScopeModel) != null ? ref : false;
	            this.clean = bind(this.clean, this);
	            if (this.isScopeModel) {
	              this.clonedModel = _.clone(this.model, true);
	            }
	            this.isDragging = false;
	            this.internalEvents = {
	              dragend: (function(_this) {
	                return function() {
	                  return _.defer(function() {
	                    return _this.isDragging = false;
	                  });
	                };
	              })(this),
	              dragstart: (function(_this) {
	                return function() {
	                  return _this.isDragging = true;
	                };
	              })(this)
	            };
	            create = (function(_this) {
	              return function() {
	                var maybeCachedEval;
	                if (_this.isDragging) {
	                  return;
	                }
	                _this.pathPoints = _this.convertPathPoints(_this.scope.path);
	                if (_this.gObject != null) {
	                  _this.clean();
	                }
	                if (_this.scope.model != null) {
	                  maybeCachedEval = _this.scope;
	                }
	                if (_this.pathPoints.length > 0) {
	                  _this.gObject = gFactory(_this.buildOpts(_this.pathPoints, maybeCachedEval));
	                }
	                if (_this.gObject) {
	                  arraySync(_this.gObject.getPath(), _this.scope, 'path', function(pathPoints) {
	                    _this.pathPoints = pathPoints;
	                    if (gObjectChangeCb != null) {
	                      return gObjectChangeCb();
	                    }
	                  });
	                  if (angular.isDefined(_this.scope.events) && angular.isObject(_this.scope.events)) {
	                    _this.listeners = _this.model ? EventsHelper.setEvents(_this.gObject, _this.scope, _this.model) : EventsHelper.setEvents(_this.gObject, _this.scope, _this.scope);
	                  }
	                  return _this.internalListeners = _this.model ? EventsHelper.setEvents(_this.gObject, {
	                    events: _this.internalEvents
	                  }, _this.model) : EventsHelper.setEvents(_this.gObject, {
	                    events: _this.internalEvents
	                  }, _this.scope);
	                }
	              };
	            })(this);
	            create();
	            this.scope.$watch('path', (function(_this) {
	              return function(newValue, oldValue) {
	                if (!_.isEqual(newValue, oldValue) || !_this.gObject) {
	                  return create();
	                }
	              };
	            })(this), true);
	            if (!this.scope["static"] && angular.isDefined(this.scope.editable)) {
	              this.scope.$watch('editable', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    newValue = !_this.isFalse(newValue);
	                    return (ref1 = _this.gObject) != null ? ref1.setEditable(newValue) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.draggable)) {
	              this.scope.$watch('draggable', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    newValue = !_this.isFalse(newValue);
	                    return (ref1 = _this.gObject) != null ? ref1.setDraggable(newValue) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.visible)) {
	              this.scope.$watch('visible', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    newValue = !_this.isFalse(newValue);
	                  }
	                  return (ref1 = _this.gObject) != null ? ref1.setVisible(newValue) : void 0;
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.geodesic)) {
	              this.scope.$watch('geodesic', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    newValue = !_this.isFalse(newValue);
	                    return (ref1 = _this.gObject) != null ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.stroke) && angular.isDefined(this.scope.stroke.weight)) {
	              this.scope.$watch('stroke.weight', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    return (ref1 = _this.gObject) != null ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.stroke) && angular.isDefined(this.scope.stroke.color)) {
	              this.scope.$watch('stroke.color', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    return (ref1 = _this.gObject) != null ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.stroke) && angular.isDefined(this.scope.stroke.opacity)) {
	              this.scope.$watch('stroke.opacity', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    return (ref1 = _this.gObject) != null ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            if (angular.isDefined(this.scope.icons)) {
	              this.scope.$watch('icons', (function(_this) {
	                return function(newValue, oldValue) {
	                  var ref1;
	                  if (newValue !== oldValue) {
	                    return (ref1 = _this.gObject) != null ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
	                  }
	                };
	              })(this), true);
	            }
	            this.scope.$on('$destroy', (function(_this) {
	              return function() {
	                _this.clean();
	                return _this.scope = null;
	              };
	            })(this));
	            if (angular.isDefined(this.scope.fill) && angular.isDefined(this.scope.fill.color)) {
	              this.scope.$watch('fill.color', (function(_this) {
	                return function(newValue, oldValue) {
	                  if (newValue !== oldValue) {
	                    return _this.gObject.setOptions(_this.buildOpts(_this.gObject.getPath()));
	                  }
	                };
	              })(this));
	            }
	            if (angular.isDefined(this.scope.fill) && angular.isDefined(this.scope.fill.opacity)) {
	              this.scope.$watch('fill.opacity', (function(_this) {
	                return function(newValue, oldValue) {
	                  if (newValue !== oldValue) {
	                    return _this.gObject.setOptions(_this.buildOpts(_this.gObject.getPath()));
	                  }
	                };
	              })(this));
	            }
	            if (angular.isDefined(this.scope.zIndex)) {
	              this.scope.$watch('zIndex', (function(_this) {
	                return function(newValue, oldValue) {
	                  if (newValue !== oldValue) {
	                    return _this.gObject.setOptions(_this.buildOpts(_this.gObject.getPath()));
	                  }
	                };
	              })(this));
	            }
	          }

	          BasePolyChildModel.prototype.clean = function() {
	            var ref;
	            EventsHelper.removeEvents(this.listeners);
	            EventsHelper.removeEvents(this.internalListeners);
	            if ((ref = this.gObject) != null) {
	              ref.setMap(null);
	            }
	            return this.gObject = null;
	          };

	          return BasePolyChildModel;

	        })(Builder);
	      };
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicholas McCready - https://twitter.com/nmccready
	Original idea from: http://stackoverflow.com/questions/22758950/google-map-drawing-freehand  , &
	  http://jsfiddle.net/YsQdh/88/
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps.directives.api.models.child').factory('uiGmapDrawFreeHandChildModel', [
	    'uiGmapLogger', '$q', function($log, $q) {
	      var drawFreeHand, freeHandMgr;
	      drawFreeHand = function(map, polys, done) {
	        var move, poly;
	        poly = new google.maps.Polyline({
	          map: map,
	          clickable: false
	        });
	        move = google.maps.event.addListener(map, 'mousemove', function(e) {
	          return poly.getPath().push(e.latLng);
	        });
	        google.maps.event.addListenerOnce(map, 'mouseup', function(e) {
	          var path;
	          google.maps.event.removeListener(move);
	          path = poly.getPath();
	          poly.setMap(null);
	          polys.push(new google.maps.Polygon({
	            map: map,
	            path: path
	          }));
	          poly = null;
	          google.maps.event.clearListeners(map.getDiv(), 'mousedown');
	          return done();
	        });
	        return void 0;
	      };
	      freeHandMgr = function(map1, scope) {
	        var disableMap, enableMap;
	        this.map = map1;
	        disableMap = (function(_this) {
	          return function() {
	            var mapOptions;
	            mapOptions = {
	              draggable: false,
	              disableDefaultUI: true,
	              scrollwheel: false,
	              disableDoubleClickZoom: false
	            };
	            $log.info('disabling map move');
	            return _this.map.setOptions(mapOptions);
	          };
	        })(this);
	        enableMap = (function(_this) {
	          return function() {
	            var mapOptions, ref;
	            mapOptions = {
	              draggable: true,
	              disableDefaultUI: false,
	              scrollwheel: true,
	              disableDoubleClickZoom: true
	            };
	            if ((ref = _this.deferred) != null) {
	              ref.resolve();
	            }
	            return _.defer(function() {
	              return _this.map.setOptions(_.extend(mapOptions, scope.options));
	            });
	          };
	        })(this);
	        this.engage = (function(_this) {
	          return function(polys1) {
	            _this.polys = polys1;
	            _this.deferred = $q.defer();
	            disableMap();
	            $log.info('DrawFreeHandChildModel is engaged (drawing).');
	            google.maps.event.addDomListener(_this.map.getDiv(), 'mousedown', function(e) {
	              return drawFreeHand(_this.map, _this.polys, enableMap);
	            });
	            return _this.deferred.promise;
	          };
	        })(this);
	        return this;
	      };
	      return freeHandMgr;
	    }
	  ]);

	}).call(this);
	;
	/*global _:true,angular:true,google:true, RichMarker:true */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.child').factory('uiGmapMarkerChildModel', [
	    'uiGmapModelKey', 'uiGmapGmapUtil', 'uiGmapLogger', 'uiGmapEventsHelper', 'uiGmapPropertyAction', 'uiGmapMarkerOptions', 'uiGmapIMarker', 'uiGmapMarkerManager', 'uiGmapPromise', function(ModelKey, GmapUtil, $log, EventsHelper, PropertyAction, MarkerOptions, IMarker, MarkerManager, uiGmapPromise) {
	      var MarkerChildModel;
	      MarkerChildModel = (function(superClass) {
	        var destroy;

	        extend(MarkerChildModel, superClass);

	        MarkerChildModel.include(GmapUtil);

	        MarkerChildModel.include(EventsHelper);

	        MarkerChildModel.include(MarkerOptions);

	        destroy = function(child) {
	          if ((child != null ? child.gObject : void 0) != null) {
	            child.removeEvents(child.externalListeners);
	            child.removeEvents(child.internalListeners);
	            if (child != null ? child.gObject : void 0) {
	              if (child.removeFromManager) {
	                child.gManager.remove(child.gObject);
	              }
	              child.gObject.setMap(null);
	              return child.gObject = null;
	            }
	          }
	        };

	        function MarkerChildModel(opts) {
	          this.internalEvents = bind(this.internalEvents, this);
	          this.setLabelOptions = bind(this.setLabelOptions, this);
	          this.setOptions = bind(this.setOptions, this);
	          this.setIcon = bind(this.setIcon, this);
	          this.setCoords = bind(this.setCoords, this);
	          this.isNotValid = bind(this.isNotValid, this);
	          this.maybeSetScopeValue = bind(this.maybeSetScopeValue, this);
	          this.createMarker = bind(this.createMarker, this);
	          this.setMyScope = bind(this.setMyScope, this);
	          this.updateModel = bind(this.updateModel, this);
	          this.handleModelChanges = bind(this.handleModelChanges, this);
	          this.destroy = bind(this.destroy, this);
	          var action, ref, ref1, ref2, ref3, ref4, scope;
	          scope = opts.scope, this.model = opts.model, this.keys = opts.keys, this.gMap = opts.gMap, this.defaults = (ref = opts.defaults) != null ? ref : {}, this.doClick = opts.doClick, this.gManager = opts.gManager, this.doDrawSelf = (ref1 = opts.doDrawSelf) != null ? ref1 : true, this.trackModel = (ref2 = opts.trackModel) != null ? ref2 : true, this.needRedraw = (ref3 = opts.needRedraw) != null ? ref3 : false, this.isScopeModel = (ref4 = opts.isScopeModel) != null ? ref4 : false;
	          if (this.isScopeModel) {
	            this.clonedModel = _.clone(this.model, true);
	          }
	          this.deferred = uiGmapPromise.defer();
	          _.each(this.keys, (function(_this) {
	            return function(v, k) {
	              var keyValue;
	              keyValue = _this.keys[k];
	              if ((keyValue != null) && !_.isFunction(keyValue) && _.isString(keyValue)) {
	                return _this[k + 'Key'] = keyValue;
	              }
	            };
	          })(this));
	          this.idKey = this.idKeyKey || 'id';
	          if (this.model[this.idKey] != null) {
	            this.id = this.model[this.idKey];
	          }
	          MarkerChildModel.__super__.constructor.call(this, scope);
	          this.scope.getGMarker = (function(_this) {
	            return function() {
	              return _this.gObject;
	            };
	          })(this);
	          this.firstTime = true;
	          if (this.trackModel) {
	            this.scope.model = this.model;
	            this.scope.$watch('model', (function(_this) {
	              return function(newValue, oldValue) {
	                if (newValue !== oldValue) {
	                  return _this.handleModelChanges(newValue, oldValue);
	                }
	              };
	            })(this), true);
	          } else {
	            action = new PropertyAction((function(_this) {
	              return function(calledKey) {
	                if (_.isFunction(calledKey)) {
	                  calledKey = 'all';
	                }
	                if (!_this.firstTime) {
	                  return _this.setMyScope(calledKey, scope);
	                }
	              };
	            })(this), false);
	            _.each(this.keys, function(v, k) {
	              return scope.$watch(k, action.sic(k), true);
	            });
	          }
	          this.scope.$on('$destroy', (function(_this) {
	            return function() {
	              return destroy(_this);
	            };
	          })(this));
	          this.createMarker(this.model);
	          $log.info(this);
	        }

	        MarkerChildModel.prototype.destroy = function(removeFromManager) {
	          if (removeFromManager == null) {
	            removeFromManager = true;
	          }
	          this.removeFromManager = removeFromManager;
	          return this.scope.$destroy();
	        };

	        MarkerChildModel.prototype.handleModelChanges = function(newValue, oldValue) {
	          var changes, ctr, len;
	          changes = this.getChanges(newValue, oldValue, IMarker.keys);
	          if (!this.firstTime) {
	            ctr = 0;
	            len = _.keys(changes).length;
	            return _.each(changes, (function(_this) {
	              return function(v, k) {
	                var doDraw;
	                ctr += 1;
	                doDraw = len === ctr;
	                _this.setMyScope(k, newValue, oldValue, false, true, doDraw);
	                return _this.needRedraw = true;
	              };
	            })(this));
	          }
	        };

	        MarkerChildModel.prototype.updateModel = function(model) {
	          if (this.isScopeModel) {
	            this.clonedModel = _.clone(model, true);
	          }
	          return this.setMyScope('all', model, this.model);
	        };

	        MarkerChildModel.prototype.renderGMarker = function(doDraw, validCb) {
	          var coords, isSpiderfied, ref;
	          if (doDraw == null) {
	            doDraw = true;
	          }
	          coords = this.getProp('coords', this.scope, this.model);
	          if (((ref = this.gManager) != null ? ref.isSpiderfied : void 0) != null) {
	            isSpiderfied = this.gManager.isSpiderfied();
	          }
	          if (coords != null) {
	            if (!this.validateCoords(coords)) {
	              $log.debug('MarkerChild does not have coords yet. They may be defined later.');
	              return;
	            }
	            if (validCb != null) {
	              validCb();
	            }
	            if (doDraw && this.gObject) {
	              this.gManager.add(this.gObject);
	            }
	            if (isSpiderfied) {
	              return this.gManager.markerSpiderfier.spiderListener(this.gObject, window.event);
	            }
	          } else {
	            if (doDraw && this.gObject) {
	              return this.gManager.remove(this.gObject);
	            }
	          }
	        };

	        MarkerChildModel.prototype.setMyScope = function(thingThatChanged, model, oldModel, isInit, doDraw) {
	          var justCreated;
	          if (oldModel == null) {
	            oldModel = void 0;
	          }
	          if (isInit == null) {
	            isInit = false;
	          }
	          if (doDraw == null) {
	            doDraw = true;
	          }
	          if (model == null) {
	            model = this.model;
	          } else {
	            this.model = model;
	          }
	          if (!this.gObject) {
	            this.setOptions(this.scope, doDraw);
	            justCreated = true;
	          }
	          switch (thingThatChanged) {
	            case 'all':
	              return _.each(this.keys, (function(_this) {
	                return function(v, k) {
	                  return _this.setMyScope(k, model, oldModel, isInit, doDraw);
	                };
	              })(this));
	            case 'icon':
	              return this.maybeSetScopeValue({
	                gSetter: this.setIcon,
	                doDraw: doDraw
	              });
	            case 'coords':
	              return this.maybeSetScopeValue({
	                gSetter: this.setCoords,
	                doDraw: doDraw
	              });
	            case 'options':
	              if (!justCreated) {
	                return this.createMarker(model, oldModel, isInit, doDraw);
	              }
	          }
	        };

	        MarkerChildModel.prototype.createMarker = function(model, oldModel, isInit, doDraw) {
	          if (oldModel == null) {
	            oldModel = void 0;
	          }
	          if (isInit == null) {
	            isInit = false;
	          }
	          if (doDraw == null) {
	            doDraw = true;
	          }
	          this.maybeSetScopeValue({
	            gSetter: this.setOptions,
	            doDraw: doDraw
	          });
	          return this.firstTime = false;
	        };

	        MarkerChildModel.prototype.maybeSetScopeValue = function(arg) {
	          var doDraw, gSetter, ref;
	          gSetter = arg.gSetter, doDraw = (ref = arg.doDraw) != null ? ref : true;
	          if (gSetter != null) {
	            gSetter(this.scope, doDraw);
	          }
	          if (this.doDrawSelf && doDraw) {
	            return this.gManager.draw();
	          }
	        };

	        MarkerChildModel.prototype.isNotValid = function(scope, doCheckGmarker) {
	          var hasIdenticalScopes, hasNoGmarker;
	          if (doCheckGmarker == null) {
	            doCheckGmarker = true;
	          }
	          hasNoGmarker = !doCheckGmarker ? false : this.gObject === void 0;
	          hasIdenticalScopes = !this.trackModel ? scope.$id !== this.scope.$id : false;
	          return hasIdenticalScopes || hasNoGmarker;
	        };

	        MarkerChildModel.prototype.setCoords = function(scope, doDraw) {
	          if (doDraw == null) {
	            doDraw = true;
	          }
	          if (this.isNotValid(scope) || (this.gObject == null)) {
	            return;
	          }
	          return this.renderGMarker(doDraw, (function(_this) {
	            return function() {
	              var newGValue, newModelVal, oldGValue;
	              newModelVal = _this.getProp('coords', scope, _this.model);
	              newGValue = _this.getCoords(newModelVal);
	              oldGValue = _this.gObject.getPosition();
	              if ((oldGValue != null) && (newGValue != null)) {
	                if (newGValue.lng() === oldGValue.lng() && newGValue.lat() === oldGValue.lat()) {
	                  return;
	                }
	              }
	              _this.gObject.setPosition(newGValue);
	              return _this.gObject.setVisible(_this.validateCoords(newModelVal));
	            };
	          })(this));
	        };

	        MarkerChildModel.prototype.setIcon = function(scope, doDraw) {
	          if (doDraw == null) {
	            doDraw = true;
	          }
	          if (this.isNotValid(scope) || (this.gObject == null)) {
	            return;
	          }
	          return this.renderGMarker(doDraw, (function(_this) {
	            return function() {
	              var coords, newValue, oldValue;
	              oldValue = _this.gObject.getIcon();
	              newValue = _this.getProp('icon', scope, _this.model);
	              if (oldValue === newValue) {
	                return;
	              }
	              _this.gObject.setIcon(newValue);
	              coords = _this.getProp('coords', scope, _this.model);
	              _this.gObject.setPosition(_this.getCoords(coords));
	              return _this.gObject.setVisible(_this.validateCoords(coords));
	            };
	          })(this));
	        };

	        MarkerChildModel.prototype.setOptions = function(scope, doDraw) {
	          var ref;
	          if (doDraw == null) {
	            doDraw = true;
	          }
	          if (this.isNotValid(scope, false)) {
	            return;
	          }
	          this.renderGMarker(doDraw, (function(_this) {
	            return function() {
	              var _options, coords, icon;
	              coords = _this.getProp('coords', scope, _this.model);
	              icon = _this.getProp('icon', scope, _this.model);
	              _options = _this.getProp('options', scope, _this.model);
	              _this.opts = _this.createOptions(coords, icon, _options);
	              if (_this.isLabel(_this.gObject) !== _this.isLabel(_this.opts) && (_this.gObject != null)) {
	                _this.gManager.remove(_this.gObject);
	                _this.gObject = void 0;
	              }
	              if (_this.gObject != null) {
	                _this.gObject.setOptions(_this.setLabelOptions(_this.opts));
	              }
	              if (!_this.gObject) {
	                if (_this.isLabel(_this.opts)) {
	                  _this.gObject = new MarkerWithLabel(_this.setLabelOptions(_this.opts));
	                } else if (_this.opts.content) {
	                  _this.gObject = new RichMarker(_this.opts);
	                  _this.gObject.getIcon = _this.gObject.getContent;
	                  _this.gObject.setIcon = _this.gObject.setContent;
	                } else {
	                  _this.gObject = new google.maps.Marker(_this.opts);
	                }
	                _.extend(_this.gObject, {
	                  model: _this.model
	                });
	              }
	              if (_this.externalListeners) {
	                _this.removeEvents(_this.externalListeners);
	              }
	              if (_this.internalListeners) {
	                _this.removeEvents(_this.internalListeners);
	              }
	              _this.externalListeners = _this.setEvents(_this.gObject, _this.scope, _this.model, ['dragend']);
	              _this.internalListeners = _this.setEvents(_this.gObject, {
	                events: _this.internalEvents(),
	                $evalAsync: function() {}
	              }, _this.model);
	              if (_this.id != null) {
	                return _this.gObject.key = _this.id;
	              }
	            };
	          })(this));
	          if (this.gObject && (this.gObject.getMap() || this.gManager.type !== MarkerManager.type)) {
	            this.deferred.resolve(this.gObject);
	          } else {
	            if (!this.gObject) {
	              return this.deferred.reject('gObject is null');
	            }
	            if (!(((ref = this.gObject) != null ? ref.getMap() : void 0) && this.gManager.type === MarkerManager.type)) {
	              $log.debug('gObject has no map yet');
	              this.deferred.resolve(this.gObject);
	            }
	          }
	          if (this.model[this.fitKey]) {
	            return this.gManager.fit();
	          }
	        };

	        MarkerChildModel.prototype.setLabelOptions = function(opts) {
	          if (opts.labelAnchor) {
	            opts.labelAnchor = this.getLabelPositionPoint(opts.labelAnchor);
	          }
	          return opts;
	        };

	        MarkerChildModel.prototype.internalEvents = function() {
	          return {
	            dragend: (function(_this) {
	              return function(marker, eventName, model, mousearg) {
	                var events, modelToSet, newCoords;
	                modelToSet = _this.trackModel ? _this.scope.model : _this.model;
	                newCoords = _this.setCoordsFromEvent(_this.modelOrKey(modelToSet, _this.coordsKey), _this.gObject.getPosition());
	                modelToSet = _this.setVal(model, _this.coordsKey, newCoords);
	                events = _this.scope.events;
	                if ((events != null ? events.dragend : void 0) != null) {
	                  events.dragend(marker, eventName, modelToSet, mousearg);
	                }
	                return _this.scope.$apply();
	              };
	            })(this),
	            click: (function(_this) {
	              return function(marker, eventName, model, mousearg) {
	                var click;
	                click = _this.getProp('click', _this.scope, _this.model);
	                if (_this.doClick && angular.isFunction(click)) {
	                  return _this.scope.$evalAsync(click(marker, eventName, _this.model, mousearg));
	                }
	              };
	            })(this)
	          };
	        };

	        return MarkerChildModel;

	      })(ModelKey);
	      return MarkerChildModel;
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapPolygonChildModel', [
	    'uiGmapBasePolyChildModel', 'uiGmapPolygonOptionsBuilder', function(BaseGen, Builder) {
	      var PolygonChildModel, base, gFactory;
	      gFactory = function(opts) {
	        return new google.maps.Polygon(opts);
	      };
	      base = new BaseGen(Builder, gFactory);
	      return PolygonChildModel = (function(superClass) {
	        extend(PolygonChildModel, superClass);

	        function PolygonChildModel() {
	          return PolygonChildModel.__super__.constructor.apply(this, arguments);
	        }

	        return PolygonChildModel;

	      })(base);
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapPolylineChildModel', [
	    'uiGmapBasePolyChildModel', 'uiGmapPolylineOptionsBuilder', function(BaseGen, Builder) {
	      var PolylineChildModel, base, gFactory;
	      gFactory = function(opts) {
	        return new google.maps.Polyline(opts);
	      };
	      base = BaseGen(Builder, gFactory);
	      return PolylineChildModel = (function(superClass) {
	        extend(PolylineChildModel, superClass);

	        function PolylineChildModel() {
	          return PolylineChildModel.__super__.constructor.apply(this, arguments);
	        }

	        return PolylineChildModel;

	      })(base);
	    }
	  ]);

	}).call(this);
	;
	/*global _:true,angular:true,google:true */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.child').factory('uiGmapWindowChildModel', [
	    'uiGmapBaseObject', 'uiGmapGmapUtil', 'uiGmapLogger', '$compile', '$http', '$templateCache', 'uiGmapChromeFixes', 'uiGmapEventsHelper', function(BaseObject, GmapUtil, $log, $compile, $http, $templateCache, ChromeFixes, EventsHelper) {
	      var WindowChildModel;
	      WindowChildModel = (function(superClass) {
	        extend(WindowChildModel, superClass);

	        WindowChildModel.include(GmapUtil);

	        WindowChildModel.include(EventsHelper);

	        function WindowChildModel(opts) {
	          this.updateModel = bind(this.updateModel, this);
	          this.destroy = bind(this.destroy, this);
	          this.remove = bind(this.remove, this);
	          this.getLatestPosition = bind(this.getLatestPosition, this);
	          this.hideWindow = bind(this.hideWindow, this);
	          this.showWindow = bind(this.showWindow, this);
	          this.handleClick = bind(this.handleClick, this);
	          this.watchOptions = bind(this.watchOptions, this);
	          this.watchCoords = bind(this.watchCoords, this);
	          this.createGWin = bind(this.createGWin, this);
	          this.watchElement = bind(this.watchElement, this);
	          this.watchAndDoShow = bind(this.watchAndDoShow, this);
	          this.doShow = bind(this.doShow, this);
	          var maybeMarker, ref, ref1, ref2, ref3;
	          this.model = (ref = opts.model) != null ? ref : {}, this.scope = opts.scope, this.opts = opts.opts, this.isIconVisibleOnClick = opts.isIconVisibleOnClick, this.gMap = opts.gMap, this.markerScope = opts.markerScope, this.element = opts.element, this.needToManualDestroy = (ref1 = opts.needToManualDestroy) != null ? ref1 : false, this.markerIsVisibleAfterWindowClose = (ref2 = opts.markerIsVisibleAfterWindowClose) != null ? ref2 : true, this.isScopeModel = (ref3 = opts.isScopeModel) != null ? ref3 : false;
	          if (this.isScopeModel) {
	            this.clonedModel = _.clone(this.model, true);
	          }
	          this.getGmarker = function() {
	            var ref4, ref5;
	            if (((ref4 = this.markerScope) != null ? ref4['getGMarker'] : void 0) != null) {
	              return (ref5 = this.markerScope) != null ? ref5.getGMarker() : void 0;
	            }
	          };
	          this.listeners = [];
	          this.createGWin();
	          maybeMarker = this.getGmarker();
	          if (maybeMarker != null) {
	            maybeMarker.setClickable(true);
	          }
	          this.watchElement();
	          this.watchOptions();
	          this.watchCoords();
	          this.watchAndDoShow();
	          this.scope.$on('$destroy', (function(_this) {
	            return function() {
	              return _this.destroy();
	            };
	          })(this));
	          $log.info(this);
	        }

	        WindowChildModel.prototype.doShow = function(wasOpen) {
	          if (this.scope.show === true || wasOpen) {
	            return this.showWindow();
	          } else {
	            return this.hideWindow();
	          }
	        };

	        WindowChildModel.prototype.watchAndDoShow = function() {
	          if (this.model.show != null) {
	            this.scope.show = this.model.show;
	          }
	          this.scope.$watch('show', this.doShow, true);
	          return this.doShow();
	        };

	        WindowChildModel.prototype.watchElement = function() {
	          return this.scope.$watch((function(_this) {
	            return function() {
	              var ref, wasOpen;
	              if (!(_this.element || _this.html)) {
	                return;
	              }
	              if (_this.html !== _this.element.html() && _this.gObject) {
	                if ((ref = _this.opts) != null) {
	                  ref.content = void 0;
	                }
	                wasOpen = _this.gObject.isOpen();
	                _this.remove();
	                return _this.createGWin(wasOpen);
	              }
	            };
	          })(this));
	        };

	        WindowChildModel.prototype.createGWin = function(isOpen) {
	          var _opts, defaults, maybeMarker, ref, ref1;
	          if (isOpen == null) {
	            isOpen = false;
	          }
	          maybeMarker = this.getGmarker();
	          defaults = {};
	          if (this.opts != null) {
	            if (this.scope.coords) {
	              this.opts.position = this.getCoords(this.scope.coords);
	            }
	            defaults = this.opts;
	          }
	          if (this.element) {
	            this.html = _.isObject(this.element) ? this.element.html() : this.element;
	          }
	          _opts = this.scope.options ? this.scope.options : defaults;
	          this.opts = this.createWindowOptions(maybeMarker, this.markerScope || this.scope, this.html, _opts);
	          if (this.opts != null) {
	            if (!this.gObject) {
	              if (this.opts.boxClass && (window.InfoBox && typeof window.InfoBox === 'function')) {
	                this.gObject = new window.InfoBox(this.opts);
	              } else {
	                this.gObject = new google.maps.InfoWindow(this.opts);
	              }
	              this.listeners.push(google.maps.event.addListener(this.gObject, 'domready', function() {
	                return ChromeFixes.maybeRepaint(this.content);
	              }));
	              this.listeners.push(google.maps.event.addListener(this.gObject, 'closeclick', (function(_this) {
	                return function() {
	                  if (maybeMarker) {
	                    maybeMarker.setAnimation(_this.oldMarkerAnimation);
	                    if (_this.markerIsVisibleAfterWindowClose) {
	                      _.delay(function() {
	                        maybeMarker.setVisible(false);
	                        return maybeMarker.setVisible(_this.markerIsVisibleAfterWindowClose);
	                      }, 250);
	                    }
	                  }
	                  _this.gObject.close();
	                  _this.model.show = false;
	                  if (_this.scope.closeClick != null) {
	                    return _this.scope.$evalAsync(_this.scope.closeClick());
	                  } else {
	                    return _this.scope.$evalAsync();
	                  }
	                };
	              })(this)));
	            }
	            this.gObject.setContent(this.opts.content);
	            this.handleClick(((ref = this.scope) != null ? (ref1 = ref.options) != null ? ref1.forceClick : void 0 : void 0) || isOpen);
	            return this.doShow(this.gObject.isOpen());
	          }
	        };

	        WindowChildModel.prototype.watchCoords = function() {
	          var scope;
	          scope = this.markerScope != null ? this.markerScope : this.scope;
	          return scope.$watch('coords', (function(_this) {
	            return function(newValue, oldValue) {
	              var pos;
	              if (newValue !== oldValue) {
	                if (newValue == null) {
	                  _this.hideWindow();
	                } else if (!_this.validateCoords(newValue)) {
	                  $log.error("WindowChildMarker cannot render marker as scope.coords as no position on marker: " + (JSON.stringify(_this.model)));
	                  return;
	                }
	                pos = _this.getCoords(newValue);
	                _this.doShow();
	                _this.gObject.setPosition(pos);
	                if (_this.opts) {
	                  return _this.opts.position = pos;
	                }
	              }
	            };
	          })(this), true);
	        };

	        WindowChildModel.prototype.watchOptions = function() {
	          return this.scope.$watch('options', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue) {
	                _this.opts = newValue;
	                if (_this.gObject != null) {
	                  _this.gObject.setOptions(_this.opts);
	                  if ((_this.opts.visible != null) && _this.opts.visible) {
	                    return _this.showWindow();
	                  } else if (_this.opts.visible != null) {
	                    return _this.hideWindow();
	                  }
	                }
	              }
	            };
	          })(this), true);
	        };

	        WindowChildModel.prototype.handleClick = function(forceClick) {
	          var click, maybeMarker;
	          if (this.gObject == null) {
	            return;
	          }
	          maybeMarker = this.getGmarker();
	          click = (function(_this) {
	            return function() {
	              if (_this.gObject == null) {
	                _this.createGWin();
	              }
	              _this.showWindow();
	              if (maybeMarker != null) {
	                _this.initialMarkerVisibility = maybeMarker.getVisible();
	                _this.oldMarkerAnimation = maybeMarker.getAnimation();
	                return maybeMarker.setVisible(_this.isIconVisibleOnClick);
	              }
	            };
	          })(this);
	          if (forceClick) {
	            click();
	          }
	          if (maybeMarker) {
	            return this.listeners = this.listeners.concat(this.setEvents(maybeMarker, {
	              events: {
	                click: click
	              }
	            }, this.model));
	          }
	        };

	        WindowChildModel.prototype.showWindow = function() {
	          var compiled, show, templateScope;
	          if (this.gObject == null) {
	            return;
	          }
	          templateScope = null;
	          show = (function(_this) {
	            return function() {
	              var isOpen, maybeMarker, pos;
	              if (!_this.gObject.isOpen()) {
	                maybeMarker = _this.getGmarker();
	                if ((_this.gObject != null) && (_this.gObject.getPosition != null)) {
	                  pos = _this.gObject.getPosition();
	                }
	                if (maybeMarker) {
	                  pos = maybeMarker.getPosition();
	                }
	                if (!pos) {
	                  return;
	                }
	                _this.gObject.open(_this.gMap, maybeMarker);
	                isOpen = _this.gObject.isOpen();
	                if (_this.model.show !== isOpen) {
	                  return _this.model.show = isOpen;
	                }
	              }
	            };
	          })(this);
	          if (this.scope.templateUrl) {
	            $http.get(this.scope.templateUrl, {
	              cache: $templateCache
	            }).then((function(_this) {
	              return function(content) {
	                var compiled;
	                templateScope = _this.scope.$new();
	                if (angular.isDefined(_this.scope.templateParameter)) {
	                  templateScope.parameter = _this.scope.templateParameter;
	                }
	                compiled = $compile(content.data)(templateScope);
	                _this.gObject.setContent(compiled[0]);
	                return show();
	              };
	            })(this));
	          } else if (this.scope.template) {
	            templateScope = this.scope.$new();
	            if (angular.isDefined(this.scope.templateParameter)) {
	              templateScope.parameter = this.scope.templateParameter;
	            }
	            compiled = $compile(this.scope.template)(templateScope);
	            this.gObject.setContent(compiled[0]);
	            show();
	          } else {
	            show();
	          }
	          return this.scope.$on('destroy', function() {
	            return templateScope.$destroy();
	          });
	        };

	        WindowChildModel.prototype.hideWindow = function() {
	          if ((this.gObject != null) && this.gObject.isOpen()) {
	            return this.gObject.close();
	          }
	        };

	        WindowChildModel.prototype.getLatestPosition = function(overridePos) {
	          var maybeMarker;
	          maybeMarker = this.getGmarker();
	          if ((this.gObject != null) && (maybeMarker != null) && !overridePos) {
	            return this.gObject.setPosition(maybeMarker.getPosition());
	          } else {
	            if (overridePos) {
	              return this.gObject.setPosition(overridePos);
	            }
	          }
	        };

	        WindowChildModel.prototype.remove = function() {
	          this.hideWindow();
	          this.removeEvents(this.listeners);
	          this.listeners.length = 0;
	          delete this.gObject;
	          return delete this.opts;
	        };

	        WindowChildModel.prototype.destroy = function(manualOverride) {
	          var ref;
	          if (manualOverride == null) {
	            manualOverride = false;
	          }
	          this.remove();
	          if (((this.scope != null) && !((ref = this.scope) != null ? ref.$$destroyed : void 0)) && (this.needToManualDestroy || manualOverride)) {
	            return this.scope.$destroy();
	          }
	        };

	        WindowChildModel.prototype.updateModel = function(model) {
	          if (this.isScopeModel) {
	            this.clonedModel = _.clone(model, true);
	          }
	          return _.extend(this.model, this.clonedModel || model);
	        };

	        return WindowChildModel;

	      })(BaseObject);
	      return WindowChildModel;
	    }
	  ]);

	}).call(this);
	;
	/*global _, angular */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapBasePolysParentModel', [
	    '$timeout', 'uiGmapLogger', 'uiGmapModelKey', 'uiGmapModelsWatcher', 'uiGmapPropMap', 'uiGmap_async', 'uiGmapPromise', 'uiGmapFitHelper', function($timeout, $log, ModelKey, ModelsWatcher, PropMap, _async, uiGmapPromise, FitHelper) {
	      return function(IPoly, PolyChildModel, gObjectName) {
	        var BasePolysParentModel;
	        return BasePolysParentModel = (function(superClass) {
	          extend(BasePolysParentModel, superClass);

	          BasePolysParentModel.include(ModelsWatcher);

	          function BasePolysParentModel(scope, element, attrs, gMap1, defaults) {
	            this.element = element;
	            this.attrs = attrs;
	            this.gMap = gMap1;
	            this.defaults = defaults;
	            this.maybeFit = bind(this.maybeFit, this);
	            this.createChild = bind(this.createChild, this);
	            this.pieceMeal = bind(this.pieceMeal, this);
	            this.createAllNew = bind(this.createAllNew, this);
	            this.watchIdKey = bind(this.watchIdKey, this);
	            this.createChildScopes = bind(this.createChildScopes, this);
	            this.watchDestroy = bind(this.watchDestroy, this);
	            this.onDestroy = bind(this.onDestroy, this);
	            this.rebuildAll = bind(this.rebuildAll, this);
	            this.doINeedToWipe = bind(this.doINeedToWipe, this);
	            this.watchModels = bind(this.watchModels, this);
	            BasePolysParentModel.__super__.constructor.call(this, scope);
	            this["interface"] = IPoly;
	            this.$log = $log;
	            this.plurals = new PropMap();
	            _.each(IPoly.scopeKeys, (function(_this) {
	              return function(name) {
	                return _this[name + 'Key'] = void 0;
	              };
	            })(this));
	            this.models = void 0;
	            this.firstTime = true;
	            this.$log.info(this);
	            this.createChildScopes();
	          }

	          BasePolysParentModel.prototype.watchModels = function(scope) {

	            /*
	              This was watchCollection but not all model changes were being caught.
	              TODO: Make the directive flexible in overriding whether we watch models (and depth) via watch or watchColleciton.
	             */
	            return scope.$watch('models', (function(_this) {
	              return function(newValue, oldValue) {
	                if (newValue !== oldValue) {
	                  if (_this.doINeedToWipe(newValue) || scope.doRebuildAll) {
	                    return _this.rebuildAll(scope, true, true);
	                  } else {
	                    return _this.createChildScopes(false);
	                  }
	                }
	              };
	            })(this), true);
	          };

	          BasePolysParentModel.prototype.doINeedToWipe = function(newValue) {
	            var newValueIsEmpty;
	            newValueIsEmpty = newValue != null ? newValue.length === 0 : true;
	            return this.plurals.length > 0 && newValueIsEmpty;
	          };

	          BasePolysParentModel.prototype.rebuildAll = function(scope, doCreate, doDelete) {
	            return this.onDestroy(doDelete).then((function(_this) {
	              return function() {
	                if (doCreate) {
	                  return _this.createChildScopes();
	                }
	              };
	            })(this));
	          };

	          BasePolysParentModel.prototype.onDestroy = function() {
	            BasePolysParentModel.__super__.onDestroy.call(this, this.scope);
	            return _async.promiseLock(this, uiGmapPromise.promiseTypes["delete"], void 0, void 0, (function(_this) {
	              return function() {
	                return _async.each(_this.plurals.values(), function(child) {
	                  return child.destroy(true);
	                }, _async.chunkSizeFrom(_this.scope.cleanchunk, false)).then(function() {
	                  var ref;
	                  return (ref = _this.plurals) != null ? ref.removeAll() : void 0;
	                });
	              };
	            })(this));
	          };

	          BasePolysParentModel.prototype.watchDestroy = function(scope) {
	            return scope.$on('$destroy', (function(_this) {
	              return function() {
	                return _this.rebuildAll(scope, false, true);
	              };
	            })(this));
	          };

	          BasePolysParentModel.prototype.createChildScopes = function(isCreatingFromScratch) {
	            if (isCreatingFromScratch == null) {
	              isCreatingFromScratch = true;
	            }
	            if (angular.isUndefined(this.scope.models)) {
	              this.$log.error("No models to create " + gObjectName + "s from! I Need direct models!");
	              return;
	            }
	            if ((this.gMap == null) || (this.scope.models == null)) {
	              return;
	            }
	            this.watchIdKey(this.scope);
	            if (isCreatingFromScratch) {
	              return this.createAllNew(this.scope, false);
	            } else {
	              return this.pieceMeal(this.scope, false);
	            }
	          };

	          BasePolysParentModel.prototype.watchIdKey = function(scope) {
	            this.setIdKey(scope);
	            return scope.$watch('idKey', (function(_this) {
	              return function(newValue, oldValue) {
	                if (newValue !== oldValue && (newValue == null)) {
	                  _this.idKey = newValue;
	                  return _this.rebuildAll(scope, true, true);
	                }
	              };
	            })(this));
	          };

	          BasePolysParentModel.prototype.createAllNew = function(scope, isArray) {
	            var maybeCanceled;
	            if (isArray == null) {
	              isArray = false;
	            }
	            this.models = scope.models;
	            if (this.firstTime) {
	              this.watchModels(scope);
	              this.watchDestroy(scope);
	            }
	            if (this.didQueueInitPromise(this, scope)) {
	              return;
	            }
	            maybeCanceled = null;
	            return _async.promiseLock(this, uiGmapPromise.promiseTypes.create, 'createAllNew', (function(canceledMsg) {
	              return maybeCanceled = canceledMsg;
	            }), (function(_this) {
	              return function() {
	                return _async.map(scope.models, function(model) {
	                  var child;
	                  child = _this.createChild(model, _this.gMap);
	                  if (maybeCanceled) {
	                    $log.debug('createNew should fall through safely');
	                    child.isEnabled = false;
	                  }
	                  maybeCanceled;
	                  return child.pathPoints.getArray();
	                }, _async.chunkSizeFrom(scope.chunk)).then(function(pathPoints) {
	                  _this.maybeFit(pathPoints);
	                  return _this.firstTime = false;
	                });
	              };
	            })(this));
	          };

	          BasePolysParentModel.prototype.pieceMeal = function(scope, isArray) {
	            var maybeCanceled, payload;
	            if (isArray == null) {
	              isArray = true;
	            }
	            if (scope.$$destroyed) {
	              return;
	            }
	            maybeCanceled = null;
	            payload = null;
	            this.models = scope.models;
	            if ((scope != null) && this.modelsLength() && this.plurals.length) {
	              return _async.promiseLock(this, uiGmapPromise.promiseTypes.update, 'pieceMeal', (function(canceledMsg) {
	                return maybeCanceled = canceledMsg;
	              }), (function(_this) {
	                return function() {
	                  return uiGmapPromise.promise(function() {
	                    return _this.figureOutState(_this.idKey, scope, _this.plurals, _this.modelKeyComparison);
	                  }).then(function(state) {
	                    payload = state;
	                    if (payload.updates.length) {
	                      _async.each(payload.updates, function(obj) {
	                        _.extend(obj.child.scope, obj.model);
	                        return obj.child.model = obj.model;
	                      });
	                    }
	                    return _async.each(payload.removals, function(child) {
	                      if (child != null) {
	                        child.destroy();
	                        _this.plurals.remove(child.model[_this.idKey]);
	                        return maybeCanceled;
	                      }
	                    }, _async.chunkSizeFrom(scope.chunk));
	                  }).then(function() {
	                    return _async.each(payload.adds, function(modelToAdd) {
	                      if (maybeCanceled) {
	                        $log.debug('pieceMeal should fall through safely');
	                      }
	                      _this.createChild(modelToAdd, _this.gMap);
	                      return maybeCanceled;
	                    }, _async.chunkSizeFrom(scope.chunk)).then(function() {
	                      return _this.maybeFit();
	                    });
	                  });
	                };
	              })(this));
	            } else {
	              this.inProgress = false;
	              return this.rebuildAll(this.scope, true, true);
	            }
	          };

	          BasePolysParentModel.prototype.createChild = function(model, gMap) {
	            var child, childScope;
	            childScope = this.scope.$new(false);
	            this.setChildScope(IPoly.scopeKeys, childScope, model);
	            childScope.$watch('model', (function(_this) {
	              return function(newValue, oldValue) {
	                if (newValue !== oldValue) {
	                  return _this.setChildScope(childScope, newValue);
	                }
	              };
	            })(this), true);
	            childScope["static"] = this.scope["static"];
	            child = new PolyChildModel({
	              isScopeModel: true,
	              scope: childScope,
	              attrs: this.attrs,
	              gMap: gMap,
	              defaults: this.defaults,
	              model: model,
	              gObjectChangeCb: (function(_this) {
	                return function() {
	                  return _this.maybeFit();
	                };
	              })(this)
	            });
	            if (model[this.idKey] == null) {
	              this.$log.error(gObjectName + " model has no id to assign a child to.\nThis is required for performance. Please assign id,\nor redirect id to a different key.");
	              return;
	            }
	            this.plurals.put(model[this.idKey], child);
	            return child;
	          };

	          BasePolysParentModel.prototype.maybeFit = function(pathPoints) {
	            if (pathPoints == null) {
	              pathPoints = this.plurals.map(function(p) {
	                return p.pathPoints;
	              });
	            }
	            if (this.scope.fit) {
	              pathPoints = _.flatten(pathPoints);
	              return FitHelper.fit(pathPoints, this.gMap);
	            }
	          };

	          return BasePolysParentModel;

	        })(ModelKey);
	      };
	    }
	  ]);

	}).call(this);
	;
	/*globals angular, _, google */

	(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapCircleParentModel', [
	    'uiGmapLogger', '$timeout', 'uiGmapGmapUtil', 'uiGmapEventsHelper', 'uiGmapCircleOptionsBuilder', function($log, $timeout, GmapUtil, EventsHelper, Builder) {
	      var CircleParentModel, _settingFromDirective;
	      _settingFromDirective = function(scope, fn) {
	        scope.settingFromDirective = true;
	        fn();
	        return $timeout(function() {
	          return scope.settingFromDirective = false;
	        });
	      };
	      return CircleParentModel = (function(superClass) {
	        extend(CircleParentModel, superClass);

	        CircleParentModel.include(GmapUtil);

	        CircleParentModel.include(EventsHelper);

	        function CircleParentModel(scope, element, attrs, gMap, DEFAULTS) {
	          var clean, gObject, lastRadius;
	          this.attrs = attrs;
	          this.gMap = gMap;
	          this.DEFAULTS = DEFAULTS;
	          this.scope = scope;
	          lastRadius = null;
	          clean = (function(_this) {
	            return function() {
	              lastRadius = null;
	              if (_this.listeners != null) {
	                _this.removeEvents(_this.listeners);
	                return _this.listeners = void 0;
	              }
	            };
	          })(this);
	          gObject = new google.maps.Circle(this.buildOpts(GmapUtil.getCoords(scope.center), scope.radius));
	          this.setMyOptions = (function(_this) {
	            return function(newVals, oldVals) {
	              if (scope.settingFromDirective) {
	                return;
	              }
	              if (!(_.isEqual(newVals, oldVals) && newVals === oldVals && ((newVals != null) && (oldVals != null) ? newVals.coordinates === oldVals.coordinates : true))) {
	                return gObject.setOptions(_this.buildOpts(GmapUtil.getCoords(scope.center), scope.radius));
	              }
	            };
	          })(this);
	          this.props = this.props.concat([
	            {
	              prop: 'center',
	              isColl: true
	            }, {
	              prop: 'fill',
	              isColl: true
	            }, 'radius', 'zIndex'
	          ]);
	          this.watchProps();
	          if (this.scope.control != null) {
	            this.scope.control.getCircle = function() {
	              return gObject;
	            };
	          }
	          clean();
	          this.listeners = this.setEvents(gObject, scope, scope, ['radius_changed']) || [];
	          this.listeners.push(google.maps.event.addListener(gObject, 'radius_changed', function() {

	            /*
	              possible google bug, and or because a circle has two radii
	              radius_changed appears to fire twice (original and new) which is not too helpful
	              therefore we will check for radius changes manually and bail out if nothing has changed
	             */
	            var newRadius, work;
	            newRadius = gObject.getRadius();
	            if (newRadius === lastRadius) {
	              return;
	            }
	            lastRadius = newRadius;
	            work = function() {
	              return _settingFromDirective(scope, function() {
	                var ref, ref1;
	                if (newRadius !== scope.radius) {
	                  scope.radius = newRadius;
	                }
	                if (((ref = scope.events) != null ? ref.radius_changed : void 0) && _.isFunction((ref1 = scope.events) != null ? ref1.radius_changed : void 0)) {
	                  return scope.events.radius_changed(gObject, 'radius_changed', scope, arguments);
	                }
	              });
	            };
	            if (!angular.mock) {
	              return scope.$evalAsync(function() {
	                return work();
	              });
	            } else {
	              return work();
	            }
	          }));
	          this.listeners.push(google.maps.event.addListener(gObject, 'center_changed', function() {
	            return scope.$evalAsync(function() {
	              return _settingFromDirective(scope, function() {
	                if (angular.isDefined(scope.center.type)) {
	                  scope.center.coordinates[1] = gObject.getCenter().lat();
	                  return scope.center.coordinates[0] = gObject.getCenter().lng();
	                } else {
	                  scope.center.latitude = gObject.getCenter().lat();
	                  return scope.center.longitude = gObject.getCenter().lng();
	                }
	              });
	            });
	          }));
	          scope.$on('$destroy', function() {
	            clean();
	            return gObject.setMap(null);
	          });
	          $log.info(this);
	        }

	        return CircleParentModel;

	      })(Builder);
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapDrawingManagerParentModel', [
	    'uiGmapLogger', '$timeout', 'uiGmapBaseObject', 'uiGmapEventsHelper', function($log, $timeout, BaseObject, EventsHelper) {
	      var DrawingManagerParentModel;
	      return DrawingManagerParentModel = (function(superClass) {
	        extend(DrawingManagerParentModel, superClass);

	        DrawingManagerParentModel.include(EventsHelper);

	        function DrawingManagerParentModel(scope, element, attrs, map) {
	          var gObject, listeners;
	          this.scope = scope;
	          this.attrs = attrs;
	          this.map = map;
	          gObject = new google.maps.drawing.DrawingManager(this.scope.options);
	          gObject.setMap(this.map);
	          listeners = void 0;
	          if (this.scope.control != null) {
	            this.scope.control.getDrawingManager = function() {
	              return gObject;
	            };
	          }
	          if (!this.scope["static"] && this.scope.options) {
	            this.scope.$watch('options', function(newValue) {
	              return gObject != null ? gObject.setOptions(newValue) : void 0;
	            }, true);
	          }
	          if (this.scope.events != null) {
	            listeners = this.setEvents(gObject, this.scope, this.scope);
	            this.scope.$watch('events', (function(_this) {
	              return function(newValue, oldValue) {
	                if (!_.isEqual(newValue, oldValue)) {
	                  if (listeners != null) {
	                    _this.removeEvents(listeners);
	                  }
	                  return listeners = _this.setEvents(gObject, _this.scope, _this.scope);
	                }
	              };
	            })(this));
	          }
	          this.scope.$on('$destroy', (function(_this) {
	            return function() {
	              if (listeners != null) {
	                _this.removeEvents(listeners);
	              }
	              gObject.setMap(null);
	              return gObject = null;
	            };
	          })(this));
	        }

	        return DrawingManagerParentModel;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;
	/*
		- interface for all markers to derrive from
	 	- to enforce a minimum set of requirements
	 		- attributes
	 			- coords
	 			- icon
			- implementation needed on watches
	 */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapIMarkerParentModel", [
	    "uiGmapModelKey", "uiGmapLogger", function(ModelKey, Logger) {
	      var IMarkerParentModel;
	      IMarkerParentModel = (function(superClass) {
	        extend(IMarkerParentModel, superClass);

	        IMarkerParentModel.prototype.DEFAULTS = {};

	        function IMarkerParentModel(scope1, element, attrs, map) {
	          this.scope = scope1;
	          this.element = element;
	          this.attrs = attrs;
	          this.map = map;
	          this.onWatch = bind(this.onWatch, this);
	          this.watch = bind(this.watch, this);
	          this.validateScope = bind(this.validateScope, this);
	          IMarkerParentModel.__super__.constructor.call(this, this.scope);
	          this.$log = Logger;
	          if (!this.validateScope(this.scope)) {
	            throw new String("Unable to construct IMarkerParentModel due to invalid scope");
	          }
	          this.doClick = angular.isDefined(this.attrs.click);
	          if (this.scope.options != null) {
	            this.DEFAULTS = this.scope.options;
	          }
	          this.watch('coords', this.scope);
	          this.watch('icon', this.scope);
	          this.watch('options', this.scope);
	          this.scope.$on("$destroy", (function(_this) {
	            return function() {
	              return _this.onDestroy(_this.scope);
	            };
	          })(this));
	        }

	        IMarkerParentModel.prototype.validateScope = function(scope) {
	          var ret;
	          if (scope == null) {
	            this.$log.error(this.constructor.name + ": invalid scope used");
	            return false;
	          }
	          ret = scope.coords != null;
	          if (!ret) {
	            this.$log.error(this.constructor.name + ": no valid coords attribute found");
	            return false;
	          }
	          return ret;
	        };

	        IMarkerParentModel.prototype.watch = function(propNameToWatch, scope, equalityCheck) {
	          if (equalityCheck == null) {
	            equalityCheck = true;
	          }
	          return scope.$watch(propNameToWatch, (function(_this) {
	            return function(newValue, oldValue) {
	              if (!_.isEqual(newValue, oldValue)) {
	                return _this.onWatch(propNameToWatch, scope, newValue, oldValue);
	              }
	            };
	          })(this), equalityCheck);
	        };

	        IMarkerParentModel.prototype.onWatch = function(propNameToWatch, scope, newValue, oldValue) {};

	        return IMarkerParentModel;

	      })(ModelKey);
	      return IMarkerParentModel;
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapIWindowParentModel", [
	    "uiGmapModelKey", "uiGmapGmapUtil", "uiGmapLogger", function(ModelKey, GmapUtil, Logger) {
	      var IWindowParentModel;
	      return IWindowParentModel = (function(superClass) {
	        extend(IWindowParentModel, superClass);

	        IWindowParentModel.include(GmapUtil);

	        function IWindowParentModel(scope, element, attrs, ctrls, $timeout, $compile, $http, $templateCache) {
	          IWindowParentModel.__super__.constructor.call(this, scope);
	          this.$log = Logger;
	          this.$timeout = $timeout;
	          this.$compile = $compile;
	          this.$http = $http;
	          this.$templateCache = $templateCache;
	          this.DEFAULTS = {};
	          if (scope.options != null) {
	            this.DEFAULTS = scope.options;
	          }
	        }

	        IWindowParentModel.prototype.getItem = function(scope, modelsPropToIterate, index) {
	          if (modelsPropToIterate === 'models') {
	            return scope[modelsPropToIterate][index];
	          }
	          return scope[modelsPropToIterate].get(index);
	        };

	        return IWindowParentModel;

	      })(ModelKey);
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapLayerParentModel', [
	    'uiGmapBaseObject', 'uiGmapLogger', '$timeout', function(BaseObject, Logger, $timeout) {
	      var LayerParentModel;
	      LayerParentModel = (function(superClass) {
	        extend(LayerParentModel, superClass);

	        function LayerParentModel(scope, element, attrs, gMap, onLayerCreated, $log) {
	          this.scope = scope;
	          this.element = element;
	          this.attrs = attrs;
	          this.gMap = gMap;
	          this.onLayerCreated = onLayerCreated != null ? onLayerCreated : void 0;
	          this.$log = $log != null ? $log : Logger;
	          this.createGoogleLayer = bind(this.createGoogleLayer, this);
	          if (this.attrs.type == null) {
	            this.$log.info('type attribute for the layer directive is mandatory. Layer creation aborted!!');
	            return;
	          }
	          this.createGoogleLayer();
	          this.doShow = true;
	          if (angular.isDefined(this.attrs.show)) {
	            this.doShow = this.scope.show;
	          }
	          if (this.doShow && (this.gMap != null)) {
	            this.gObject.setMap(this.gMap);
	          }
	          this.scope.$watch('show', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue) {
	                _this.doShow = newValue;
	                if (newValue) {
	                  return _this.gObject.setMap(_this.gMap);
	                } else {
	                  return _this.gObject.setMap(null);
	                }
	              }
	            };
	          })(this), true);
	          this.scope.$watch('options', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue && _this.doShow) {
	                return _this.gObject.setOptions(newValue);
	              }
	            };
	          })(this), true);
	          this.scope.$on('$destroy', (function(_this) {
	            return function() {
	              return _this.gObject.setMap(null);
	            };
	          })(this));
	        }

	        LayerParentModel.prototype.createGoogleLayer = function() {
	          var base;
	          if (this.attrs.options == null) {
	            this.gObject = this.attrs.namespace === void 0 ? new google.maps[this.attrs.type]() : new google.maps[this.attrs.namespace][this.attrs.type]();
	          } else {
	            this.gObject = this.attrs.namespace === void 0 ? new google.maps[this.attrs.type](this.scope.options) : new google.maps[this.attrs.namespace][this.attrs.type](this.scope.options);
	          }
	          if ((this.gObject != null) && this.doShow) {
	            this.gObject.setMap(this.gMap);
	          }
	          if ((this.gObject != null) && (this.onLayerCreated != null)) {
	            return typeof (base = this.onLayerCreated(this.scope, this.gObject)) === "function" ? base(this.gObject) : void 0;
	          }
	        };

	        return LayerParentModel;

	      })(BaseObject);
	      return LayerParentModel;
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapMapTypeParentModel', [
	    'uiGmapBaseObject', 'uiGmapLogger', function(BaseObject, Logger) {
	      var MapTypeParentModel;
	      MapTypeParentModel = (function(superClass) {
	        extend(MapTypeParentModel, superClass);

	        function MapTypeParentModel(scope, element, attrs, gMap, $log) {
	          this.scope = scope;
	          this.element = element;
	          this.attrs = attrs;
	          this.gMap = gMap;
	          this.$log = $log != null ? $log : Logger;
	          this.hideOverlay = bind(this.hideOverlay, this);
	          this.showOverlay = bind(this.showOverlay, this);
	          this.refreshMapType = bind(this.refreshMapType, this);
	          this.createMapType = bind(this.createMapType, this);
	          if (this.attrs.options == null) {
	            this.$log.info('options attribute for the map-type directive is mandatory. Map type creation aborted!!');
	            return;
	          }
	          this.id = this.gMap.overlayMapTypesCount = this.gMap.overlayMapTypesCount + 1 || 0;
	          this.doShow = true;
	          this.createMapType();
	          if (angular.isDefined(this.attrs.show)) {
	            this.doShow = this.scope.show;
	          }
	          if (this.doShow && (this.gMap != null)) {
	            this.showOverlay();
	          }
	          this.scope.$watch('show', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue) {
	                _this.doShow = newValue;
	                if (newValue) {
	                  return _this.showOverlay();
	                } else {
	                  return _this.hideOverlay();
	                }
	              }
	            };
	          })(this), true);
	          this.scope.$watchCollection('options', (function(_this) {
	            return function(newValue, oldValue) {
	              var different, mapTypeProps;
	              if (!_.isEqual(newValue, oldValue)) {
	                mapTypeProps = ['tileSize', 'maxZoom', 'minZoom', 'name', 'alt'];
	                different = _.some(mapTypeProps, function(prop) {
	                  return !oldValue || !newValue || !_.isEqual(newValue[prop], oldValue[prop]);
	                });
	                if (different) {
	                  return _this.refreshMapType();
	                }
	              }
	            };
	          })(this));
	          if (angular.isDefined(this.attrs.refresh)) {
	            this.scope.$watch('refresh', (function(_this) {
	              return function(newValue, oldValue) {
	                if (!_.isEqual(newValue, oldValue)) {
	                  return _this.refreshMapType();
	                }
	              };
	            })(this), true);
	          }
	          this.scope.$on('$destroy', (function(_this) {
	            return function() {
	              _this.hideOverlay();
	              return _this.mapType = null;
	            };
	          })(this));
	        }

	        MapTypeParentModel.prototype.createMapType = function() {
	          if (this.scope.options.getTile != null) {
	            this.mapType = this.scope.options;
	          } else if (this.scope.options.getTileUrl != null) {
	            this.mapType = new google.maps.ImageMapType(this.scope.options);
	          } else {
	            this.$log.info('options should provide either getTile or getTileUrl methods. Map type creation aborted!!');
	            return;
	          }
	          if (this.attrs.id && this.scope.id) {
	            this.gMap.mapTypes.set(this.scope.id, this.mapType);
	            if (!angular.isDefined(this.attrs.show)) {
	              this.doShow = false;
	            }
	          }
	          return this.mapType.layerId = this.id;
	        };

	        MapTypeParentModel.prototype.refreshMapType = function() {
	          this.hideOverlay();
	          this.mapType = null;
	          this.createMapType();
	          if (this.doShow && (this.gMap != null)) {
	            return this.showOverlay();
	          }
	        };

	        MapTypeParentModel.prototype.showOverlay = function() {
	          return this.gMap.overlayMapTypes.push(this.mapType);
	        };

	        MapTypeParentModel.prototype.hideOverlay = function() {
	          var found;
	          found = false;
	          return this.gMap.overlayMapTypes.forEach((function(_this) {
	            return function(mapType, index) {
	              if (!found && mapType.layerId === _this.id) {
	                found = true;
	                _this.gMap.overlayMapTypes.removeAt(index);
	              }
	            };
	          })(this));
	        };

	        return MapTypeParentModel;

	      })(BaseObject);
	      return MapTypeParentModel;
	    }
	  ]);

	}).call(this);
	;
	/*global _:true,angular:true, */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapMarkersParentModel", [
	    "uiGmapIMarkerParentModel", "uiGmapModelsWatcher", "uiGmapPropMap", "uiGmapMarkerChildModel", "uiGmap_async", "uiGmapClustererMarkerManager", "uiGmapMarkerManager", "$timeout", "uiGmapIMarker", "uiGmapPromise", "uiGmapGmapUtil", "uiGmapLogger", "uiGmapSpiderfierMarkerManager", function(IMarkerParentModel, ModelsWatcher, PropMap, MarkerChildModel, _async, ClustererMarkerManager, MarkerManager, $timeout, IMarker, uiGmapPromise, GmapUtil, $log, SpiderfierMarkerManager) {
	      var MarkersParentModel, _setPlurals;
	      _setPlurals = function(val, objToSet) {
	        objToSet.plurals = new PropMap();
	        objToSet.scope.plurals = objToSet.plurals;
	        return objToSet;
	      };
	      MarkersParentModel = (function(superClass) {
	        extend(MarkersParentModel, superClass);

	        MarkersParentModel.include(GmapUtil);

	        MarkersParentModel.include(ModelsWatcher);

	        function MarkersParentModel(scope, element, attrs, map) {
	          this.maybeExecMappedEvent = bind(this.maybeExecMappedEvent, this);
	          this.onDestroy = bind(this.onDestroy, this);
	          this.newChildMarker = bind(this.newChildMarker, this);
	          this.pieceMeal = bind(this.pieceMeal, this);
	          this.rebuildAll = bind(this.rebuildAll, this);
	          this.createAllNew = bind(this.createAllNew, this);
	          this.bindToTypeEvents = bind(this.bindToTypeEvents, this);
	          this.createChildScopes = bind(this.createChildScopes, this);
	          this.validateScope = bind(this.validateScope, this);
	          this.onWatch = bind(this.onWatch, this);
	          MarkersParentModel.__super__.constructor.call(this, scope, element, attrs, map);
	          this["interface"] = IMarker;
	          _setPlurals(new PropMap(), this);
	          this.scope.pluralsUpdate = {
	            updateCtr: 0
	          };
	          this.$log.info(this);
	          this.doRebuildAll = this.scope.doRebuildAll != null ? this.scope.doRebuildAll : false;
	          this.setIdKey(this.scope);
	          this.scope.$watch('doRebuildAll', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue) {
	                return _this.doRebuildAll = newValue;
	              }
	            };
	          })(this));
	          if (!this.modelsLength()) {
	            this.modelsRendered = false;
	          }
	          this.scope.$watch('models', (function(_this) {
	            return function(newValue, oldValue) {
	              if (!_.isEqual(newValue, oldValue) || !_this.modelsRendered) {
	                if (newValue.length === 0 && oldValue.length === 0) {
	                  return;
	                }
	                _this.modelsRendered = true;
	                return _this.onWatch('models', _this.scope, newValue, oldValue);
	              }
	            };
	          })(this), !this.isTrue(attrs.modelsbyref));
	          this.watch('doCluster', this.scope);
	          this.watch('type', this.scope);
	          this.watch('clusterOptions', this.scope);
	          this.watch('clusterEvents', this.scope);
	          this.watch('typeOptions', this.scope);
	          this.watch('typeEvents', this.scope);
	          this.watch('fit', this.scope);
	          this.watch('idKey', this.scope);
	          this.gManager = void 0;
	          this.createAllNew(this.scope);
	        }

	        MarkersParentModel.prototype.onWatch = function(propNameToWatch, scope, newValue, oldValue) {
	          if (propNameToWatch === "idKey" && newValue !== oldValue) {
	            this.idKey = newValue;
	          }
	          if (this.doRebuildAll || (propNameToWatch === 'doCluster' || propNameToWatch === 'type')) {
	            return this.rebuildAll(scope);
	          } else {
	            return this.pieceMeal(scope);
	          }
	        };

	        MarkersParentModel.prototype.validateScope = function(scope) {
	          var modelsNotDefined;
	          modelsNotDefined = angular.isUndefined(scope.models) || scope.models === void 0;
	          if (modelsNotDefined) {
	            this.$log.error(this.constructor.name + ": no valid models attribute found");
	          }
	          return MarkersParentModel.__super__.validateScope.call(this, scope) || modelsNotDefined;
	        };


	        /*
	        Not used internally by this parent
	        created for consistency for external control in the API
	         */

	        MarkersParentModel.prototype.createChildScopes = function(isCreatingFromScratch) {
	          if ((this.gMap == null) || (this.scope.models == null)) {
	            return;
	          }
	          if (isCreatingFromScratch) {
	            return this.createAllNew(this.scope, false);
	          } else {
	            return this.pieceMeal(this.scope, false);
	          }
	        };

	        MarkersParentModel.prototype.bindToTypeEvents = function(typeEvents, events) {
	          var internalHandles, self;
	          if (events == null) {
	            events = ['click', 'mouseout', 'mouseover'];
	          }

	          /*
	            You should only be binding to events that produce groups/clusters of somthing.
	            Otherwise use the orginal event handle.
	            For Example: Click on a cluster pushes a cluster/group obj through which has getMarkers
	            However Spiderfy's click is for a single marker so this is not ideal for that.
	           */
	          self = this;
	          if (!this.origTypeEvents) {
	            this.origTypeEvents = {};
	            _.each(events, (function(_this) {
	              return function(eventName) {
	                return _this.origTypeEvents[eventName] = typeEvents != null ? typeEvents[eventName] : void 0;
	              };
	            })(this));
	          } else {
	            angular.extend(typeEvents, this.origTypeEvents);
	          }
	          internalHandles = {};
	          _.each(events, function(eventName) {
	            return internalHandles[eventName] = function(group) {
	              return self.maybeExecMappedEvent(group, eventName);
	            };
	          });
	          return angular.extend(typeEvents, internalHandles);
	        };

	        MarkersParentModel.prototype.createAllNew = function(scope) {
	          var isSpiderfied, maybeCanceled, typeEvents, typeOptions;
	          if (this.gManager != null) {
	            if (this.gManager instanceof SpiderfierMarkerManager) {
	              isSpiderfied = this.gManager.isSpiderfied();
	            }
	            this.gManager.clear();
	            delete this.gManager;
	          }
	          typeEvents = scope.typeEvents || scope.clusterEvents;
	          typeOptions = scope.typeOptions || scope.clusterOptions;
	          if (scope.doCluster || scope.type === 'cluster') {
	            if (typeEvents != null) {
	              this.bindToTypeEvents(typeEvents);
	            }
	            this.gManager = new ClustererMarkerManager(this.map, void 0, typeOptions, typeEvents);
	          } else if (scope.type === 'spider') {
	            if (typeEvents != null) {
	              this.bindToTypeEvents(typeEvents, ['spiderfy', 'unspiderfy']);
	            }
	            this.gManager = new SpiderfierMarkerManager(this.map, void 0, typeOptions, typeEvents, this.scope);
	            if (isSpiderfied) {
	              this.gManager.spiderfy();
	            }
	          } else {
	            this.gManager = new MarkerManager(this.map);
	          }
	          if (this.didQueueInitPromise(this, scope)) {
	            return;
	          }
	          maybeCanceled = null;
	          return _async.promiseLock(this, uiGmapPromise.promiseTypes.create, 'createAllNew', (function(canceledMsg) {
	            return maybeCanceled = canceledMsg;
	          }), (function(_this) {
	            return function() {
	              return _async.each(scope.models, function(model) {
	                _this.newChildMarker(model, scope);
	                return maybeCanceled;
	              }, _async.chunkSizeFrom(scope.chunk)).then(function() {
	                _this.modelsRendered = true;
	                if (scope.fit) {
	                  _this.gManager.fit();
	                }
	                _this.gManager.draw();
	                return _this.scope.pluralsUpdate.updateCtr += 1;
	              }, _async.chunkSizeFrom(scope.chunk));
	            };
	          })(this));
	        };

	        MarkersParentModel.prototype.rebuildAll = function(scope) {
	          var ref;
	          if (!scope.doRebuild && scope.doRebuild !== void 0) {
	            return;
	          }
	          if ((ref = this.scope.plurals) != null ? ref.length : void 0) {
	            return this.onDestroy(scope).then((function(_this) {
	              return function() {
	                return _this.createAllNew(scope);
	              };
	            })(this));
	          } else {
	            return this.createAllNew(scope);
	          }
	        };

	        MarkersParentModel.prototype.pieceMeal = function(scope) {
	          var maybeCanceled, payload;
	          if (scope.$$destroyed) {
	            return;
	          }
	          maybeCanceled = null;
	          payload = null;
	          if (this.modelsLength() && this.scope.plurals.length) {
	            return _async.promiseLock(this, uiGmapPromise.promiseTypes.update, 'pieceMeal', (function(canceledMsg) {
	              return maybeCanceled = canceledMsg;
	            }), (function(_this) {
	              return function() {
	                return uiGmapPromise.promise((function() {
	                  return _this.figureOutState(_this.idKey, scope, _this.scope.plurals, _this.modelKeyComparison);
	                })).then(function(state) {
	                  payload = state;
	                  return _async.each(payload.removals, function(child) {
	                    if (child != null) {
	                      if (child.destroy != null) {
	                        child.destroy();
	                      }
	                      _this.scope.plurals.remove(child.id);
	                      return maybeCanceled;
	                    }
	                  }, _async.chunkSizeFrom(scope.chunk));
	                }).then(function() {
	                  return _async.each(payload.adds, function(modelToAdd) {
	                    _this.newChildMarker(modelToAdd, scope);
	                    return maybeCanceled;
	                  }, _async.chunkSizeFrom(scope.chunk));
	                }).then(function() {
	                  return _async.each(payload.updates, function(update) {
	                    _this.updateChild(update.child, update.model);
	                    return maybeCanceled;
	                  }, _async.chunkSizeFrom(scope.chunk));
	                }).then(function() {
	                  if (payload.adds.length > 0 || payload.removals.length > 0 || payload.updates.length > 0) {
	                    scope.plurals = _this.scope.plurals;
	                    if (scope.fit) {
	                      _this.gManager.fit();
	                    }
	                    _this.gManager.draw();
	                  }
	                  return _this.scope.pluralsUpdate.updateCtr += 1;
	                });
	              };
	            })(this));
	          } else {
	            this.inProgress = false;
	            return this.rebuildAll(scope);
	          }
	        };

	        MarkersParentModel.prototype.newChildMarker = function(model, scope) {
	          var child, childScope, keys;
	          if (!model) {
	            throw 'model undefined';
	          }
	          if (model[this.idKey] == null) {
	            this.$log.error("Marker model has no id to assign a child to. This is required for performance. Please assign id, or redirect id to a different key.");
	            return;
	          }
	          this.$log.info('child', child, 'markers', this.scope.markerModels);
	          childScope = scope.$new(false);
	          childScope.events = scope.events;
	          keys = {};
	          IMarker.scopeKeys.forEach(function(k) {
	            return keys[k] = scope[k];
	          });
	          child = new MarkerChildModel({
	            scope: childScope,
	            model: model,
	            keys: keys,
	            gMap: this.map,
	            defaults: this.DEFAULTS,
	            doClick: this.doClick,
	            gManager: this.gManager,
	            doDrawSelf: false,
	            isScopeModel: true
	          });
	          this.scope.plurals.put(model[this.idKey], child);
	          return child;
	        };

	        MarkersParentModel.prototype.onDestroy = function(scope) {
	          MarkersParentModel.__super__.onDestroy.call(this, scope);
	          return _async.promiseLock(this, uiGmapPromise.promiseTypes["delete"], void 0, void 0, (function(_this) {
	            return function() {
	              return _async.each(_this.scope.plurals.values(), function(model) {
	                if (model != null) {
	                  return model.destroy(false);
	                }
	              }, _async.chunkSizeFrom(_this.scope.cleanchunk, false)).then(function() {
	                if (_this.gManager != null) {
	                  _this.gManager.destroy();
	                }
	                _this.plurals.removeAll();
	                if (_this.plurals !== _this.scope.plurals) {
	                  console.error('plurals out of sync for MarkersParentModel');
	                }
	                return _this.scope.pluralsUpdate.updateCtr += 1;
	              });
	            };
	          })(this));
	        };

	        MarkersParentModel.prototype.maybeExecMappedEvent = function(group, fnName) {
	          var pair, typeEvents;
	          if (this.scope.$$destroyed) {
	            return;
	          }
	          typeEvents = this.scope.typeEvents || this.scope.clusterEvents;
	          if (_.isFunction(typeEvents != null ? typeEvents[fnName] : void 0)) {
	            pair = this.mapTypeToPlurals(group);
	            if (this.origTypeEvents[fnName]) {
	              return this.origTypeEvents[fnName](pair.group, pair.mapped);
	            }
	          }
	        };

	        MarkersParentModel.prototype.mapTypeToPlurals = function(group) {
	          var arrayToMap, mapped, ref;
	          if (_.isArray(group)) {
	            arrayToMap = group;
	          } else if (_.isFunction(group.getMarkers)) {
	            arrayToMap = group.getMarkers();
	          }
	          if (arrayToMap == null) {
	            $log.error("Unable to map event as we cannot find the array group to map");
	            return;
	          }
	          if ((ref = this.scope.plurals.values()) != null ? ref.length : void 0) {
	            mapped = arrayToMap.map((function(_this) {
	              return function(g) {
	                return _this.scope.plurals.get(g.key).model;
	              };
	            })(this));
	          } else {
	            mapped = [];
	          }
	          return {
	            cluster: group,
	            mapped: mapped,
	            group: group
	          };
	        };

	        MarkersParentModel.prototype.getItem = function(scope, modelsPropToIterate, index) {
	          if (modelsPropToIterate === 'models') {
	            return scope[modelsPropToIterate][index];
	          }
	          return scope[modelsPropToIterate].get(index);
	        };

	        return MarkersParentModel;

	      })(IMarkerParentModel);
	      return MarkersParentModel;
	    }
	  ]);

	}).call(this);
	;(function() {
	  ['Polygon', 'Polyline'].forEach(function(name) {
	    return angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory("uiGmap" + name + "sParentModel", [
	      'uiGmapBasePolysParentModel', "uiGmap" + name + "ChildModel", "uiGmapI" + name, function(BasePolysParentModel, ChildModel, IPoly) {
	        return BasePolysParentModel(IPoly, ChildModel, name);
	      }
	    ]);
	  });

	}).call(this);
	;
	/*globals angular, _, google */

	(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapRectangleParentModel', [
	    'uiGmapLogger', 'uiGmapGmapUtil', 'uiGmapEventsHelper', 'uiGmapRectangleOptionsBuilder', function($log, GmapUtil, EventsHelper, Builder) {
	      var RectangleParentModel;
	      return RectangleParentModel = (function(superClass) {
	        extend(RectangleParentModel, superClass);

	        RectangleParentModel.include(GmapUtil);

	        RectangleParentModel.include(EventsHelper);

	        function RectangleParentModel(scope, element, attrs, gMap, DEFAULTS) {
	          var bounds, clear, createBounds, dragging, fit, gObject, init, listeners, myListeners, settingBoundsFromScope, updateBounds;
	          this.scope = scope;
	          this.attrs = attrs;
	          this.gMap = gMap;
	          this.DEFAULTS = DEFAULTS;
	          bounds = void 0;
	          dragging = false;
	          myListeners = [];
	          listeners = void 0;
	          fit = (function(_this) {
	            return function() {
	              if (_this.isTrue(_this.attrs.fit)) {
	                return _this.fitMapBounds(_this.gMap, bounds);
	              }
	            };
	          })(this);
	          createBounds = (function(_this) {
	            return function() {
	              var ref, ref1, ref2;
	              if ((_this.scope.bounds != null) && (((ref = _this.scope.bounds) != null ? ref.sw : void 0) != null) && (((ref1 = _this.scope.bounds) != null ? ref1.ne : void 0) != null) && _this.validateBoundPoints(_this.scope.bounds)) {
	                bounds = _this.convertBoundPoints(_this.scope.bounds);
	                return $log.info("new new bounds created: " + (JSON.stringify(bounds)));
	              } else if ((_this.scope.bounds.getNorthEast != null) && (_this.scope.bounds.getSouthWest != null)) {
	                return bounds = _this.scope.bounds;
	              } else {
	                if (_this.scope.bounds != null) {
	                  return $log.error("Invalid bounds for newValue: " + (JSON.stringify((ref2 = _this.scope) != null ? ref2.bounds : void 0)));
	                }
	              }
	            };
	          })(this);
	          createBounds();
	          gObject = new google.maps.Rectangle(this.buildOpts(bounds));
	          $log.info("gObject (rectangle) created: " + gObject);
	          settingBoundsFromScope = false;
	          updateBounds = (function(_this) {
	            return function() {
	              var b, ne, sw;
	              b = gObject.getBounds();
	              ne = b.getNorthEast();
	              sw = b.getSouthWest();
	              if (settingBoundsFromScope) {
	                return;
	              }
	              return _this.scope.$evalAsync(function(s) {
	                if ((s.bounds != null) && (s.bounds.sw != null) && (s.bounds.ne != null)) {
	                  s.bounds.ne = {
	                    latitude: ne.lat(),
	                    longitude: ne.lng()
	                  };
	                  s.bounds.sw = {
	                    latitude: sw.lat(),
	                    longitude: sw.lng()
	                  };
	                }
	                if ((s.bounds.getNorthEast != null) && (s.bounds.getSouthWest != null)) {
	                  return s.bounds = b;
	                }
	              });
	            };
	          })(this);
	          init = (function(_this) {
	            return function() {
	              fit();
	              _this.removeEvents(myListeners);
	              myListeners.push(google.maps.event.addListener(gObject, 'dragstart', function() {
	                return dragging = true;
	              }));
	              myListeners.push(google.maps.event.addListener(gObject, 'dragend', function() {
	                dragging = false;
	                return updateBounds();
	              }));
	              return myListeners.push(google.maps.event.addListener(gObject, 'bounds_changed', function() {
	                if (dragging) {
	                  return;
	                }
	                return updateBounds();
	              }));
	            };
	          })(this);
	          clear = (function(_this) {
	            return function() {
	              _this.removeEvents(myListeners);
	              if (listeners != null) {
	                _this.removeEvents(listeners);
	              }
	              return gObject.setMap(null);
	            };
	          })(this);
	          if (bounds != null) {
	            init();
	          }
	          this.scope.$watch('bounds', (function(newValue, oldValue) {
	            var isNew;
	            if (_.isEqual(newValue, oldValue) && (bounds != null) || dragging) {
	              return;
	            }
	            settingBoundsFromScope = true;
	            if (newValue == null) {
	              clear();
	              return;
	            }
	            if (bounds == null) {
	              isNew = true;
	            } else {
	              fit();
	            }
	            createBounds();
	            gObject.setBounds(bounds);
	            settingBoundsFromScope = false;
	            if (isNew && (bounds != null)) {
	              return init();
	            }
	          }), true);
	          this.setMyOptions = (function(_this) {
	            return function(newVals, oldVals) {
	              if (!_.isEqual(newVals, oldVals)) {
	                if ((bounds != null) && (newVals != null)) {
	                  return gObject.setOptions(_this.buildOpts(bounds));
	                }
	              }
	            };
	          })(this);
	          this.props.push('bounds');
	          this.watchProps(this.props);
	          if (this.attrs.events != null) {
	            listeners = this.setEvents(gObject, this.scope, this.scope);
	            this.scope.$watch('events', (function(_this) {
	              return function(newValue, oldValue) {
	                if (!_.isEqual(newValue, oldValue)) {
	                  if (listeners != null) {
	                    _this.removeEvents(listeners);
	                  }
	                  return listeners = _this.setEvents(gObject, _this.scope, _this.scope);
	                }
	              };
	            })(this));
	          }
	          this.scope.$on('$destroy', function() {
	            return clear();
	          });
	          $log.info(this);
	        }

	        return RectangleParentModel;

	      })(Builder);
	    }
	  ]);

	}).call(this);
	;
	/*global angular:true, google:true */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapSearchBoxParentModel', [
	    'uiGmapBaseObject', 'uiGmapLogger', 'uiGmapEventsHelper', function(BaseObject, Logger, EventsHelper) {
	      var SearchBoxParentModel;
	      SearchBoxParentModel = (function(superClass) {
	        extend(SearchBoxParentModel, superClass);

	        SearchBoxParentModel.include(EventsHelper);

	        function SearchBoxParentModel(scope, element, attrs, gMap, ctrlPosition, template, $log) {
	          var controlDiv;
	          this.scope = scope;
	          this.element = element;
	          this.attrs = attrs;
	          this.gMap = gMap;
	          this.ctrlPosition = ctrlPosition;
	          this.template = template;
	          this.$log = $log != null ? $log : Logger;
	          this.setVisibility = bind(this.setVisibility, this);
	          this.getBounds = bind(this.getBounds, this);
	          this.setBounds = bind(this.setBounds, this);
	          this.createSearchBox = bind(this.createSearchBox, this);
	          this.addToParentDiv = bind(this.addToParentDiv, this);
	          this.addAsMapControl = bind(this.addAsMapControl, this);
	          this.init = bind(this.init, this);
	          if (this.attrs.template == null) {
	            this.$log.error('template attribute for the search-box directive is mandatory. Places Search Box creation aborted!!');
	            return;
	          }
	          if (angular.isUndefined(this.scope.options)) {
	            this.scope.options = {};
	            this.scope.options.visible = true;
	          }
	          if (angular.isUndefined(this.scope.options.visible)) {
	            this.scope.options.visible = true;
	          }
	          if (angular.isUndefined(this.scope.options.autocomplete)) {
	            this.scope.options.autocomplete = false;
	          }
	          this.visible = this.scope.options.visible;
	          this.autocomplete = this.scope.options.autocomplete;
	          controlDiv = angular.element('<div></div>');
	          controlDiv.append(this.template);
	          this.input = controlDiv.find('input')[0];
	          this.init();
	        }

	        SearchBoxParentModel.prototype.init = function() {
	          this.createSearchBox();
	          this.scope.$watch('options', (function(_this) {
	            return function(newValue, oldValue) {
	              if (angular.isObject(newValue)) {
	                if (newValue.bounds != null) {
	                  _this.setBounds(newValue.bounds);
	                }
	                if (newValue.visible != null) {
	                  if (_this.visible !== newValue.visible) {
	                    return _this.setVisibility(newValue.visible);
	                  }
	                }
	              }
	            };
	          })(this), true);
	          if (this.attrs.parentdiv != null) {
	            this.addToParentDiv();
	          } else {
	            this.addAsMapControl();
	          }
	          if (!this.visible) {
	            this.setVisibility(this.visible);
	          }
	          if (this.autocomplete) {
	            this.listener = google.maps.event.addListener(this.gObject, 'place_changed', (function(_this) {
	              return function() {
	                return _this.places = _this.gObject.getPlace();
	              };
	            })(this));
	          } else {
	            this.listener = google.maps.event.addListener(this.gObject, 'places_changed', (function(_this) {
	              return function() {
	                return _this.places = _this.gObject.getPlaces();
	              };
	            })(this));
	          }
	          this.listeners = this.setEvents(this.gObject, this.scope, this.scope);
	          this.$log.info(this);
	          this.scope.$on('$stateChangeSuccess', (function(_this) {
	            return function() {
	              if (_this.attrs.parentdiv != null) {
	                return _this.addToParentDiv();
	              }
	            };
	          })(this));
	          return this.scope.$on('$destroy', (function(_this) {
	            return function() {
	              return _this.gObject = null;
	            };
	          })(this));
	        };

	        SearchBoxParentModel.prototype.addAsMapControl = function() {
	          return this.gMap.controls[google.maps.ControlPosition[this.ctrlPosition]].push(this.input);
	        };

	        SearchBoxParentModel.prototype.addToParentDiv = function() {
	          var ref;
	          this.parentDiv = angular.element(document.getElementById(this.scope.parentdiv));
	          if ((ref = this.parentDiv) != null ? ref.length : void 0) {
	            return this.parentDiv.append(this.input);
	          }
	        };

	        SearchBoxParentModel.prototype.createSearchBox = function() {
	          if (this.autocomplete) {
	            return this.gObject = new google.maps.places.Autocomplete(this.input, this.scope.options);
	          } else {
	            return this.gObject = new google.maps.places.SearchBox(this.input, this.scope.options);
	          }
	        };

	        SearchBoxParentModel.prototype.setBounds = function(bounds) {
	          if (angular.isUndefined(bounds.isEmpty)) {
	            this.$log.error('Error: SearchBoxParentModel setBounds. Bounds not an instance of LatLngBounds.');
	          } else {
	            if (bounds.isEmpty() === false) {
	              if (this.gObject != null) {
	                return this.gObject.setBounds(bounds);
	              }
	            }
	          }
	        };

	        SearchBoxParentModel.prototype.getBounds = function() {
	          return this.gObject.getBounds();
	        };

	        SearchBoxParentModel.prototype.setVisibility = function(val) {
	          if (this.attrs.parentdiv != null) {
	            if (val === false) {
	              this.parentDiv.addClass("ng-hide");
	            } else {
	              this.parentDiv.removeClass("ng-hide");
	            }
	          } else {
	            if (val === false) {
	              this.gMap.controls[google.maps.ControlPosition[this.ctrlPosition]].clear();
	            } else {
	              this.gMap.controls[google.maps.ControlPosition[this.ctrlPosition]].push(this.input);
	            }
	          }
	          return this.visible = val;
	        };

	        return SearchBoxParentModel;

	      })(BaseObject);
	      return SearchBoxParentModel;
	    }
	  ]);

	}).call(this);
	;
	/*global _,angular */


	/*
		WindowsChildModel generator where there are many ChildModels to a parent.
	 */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api.models.parent').factory('uiGmapWindowsParentModel', [
	    'uiGmapIWindowParentModel', 'uiGmapModelsWatcher', 'uiGmapPropMap', 'uiGmapWindowChildModel', 'uiGmapLinked', 'uiGmap_async', 'uiGmapLogger', '$timeout', '$compile', '$http', '$templateCache', '$interpolate', 'uiGmapPromise', 'uiGmapIWindow', 'uiGmapGmapUtil', function(IWindowParentModel, ModelsWatcher, PropMap, WindowChildModel, Linked, _async, $log, $timeout, $compile, $http, $templateCache, $interpolate, uiGmapPromise, IWindow, GmapUtil) {
	      var WindowsParentModel;
	      WindowsParentModel = (function(superClass) {
	        extend(WindowsParentModel, superClass);

	        WindowsParentModel.include(ModelsWatcher);

	        function WindowsParentModel(scope, element, attrs, ctrls, gMap1, markersScope) {
	          this.gMap = gMap1;
	          this.markersScope = markersScope;
	          this.modelKeyComparison = bind(this.modelKeyComparison, this);
	          this.interpolateContent = bind(this.interpolateContent, this);
	          this.setChildScope = bind(this.setChildScope, this);
	          this.createWindow = bind(this.createWindow, this);
	          this.setContentKeys = bind(this.setContentKeys, this);
	          this.pieceMeal = bind(this.pieceMeal, this);
	          this.createAllNew = bind(this.createAllNew, this);
	          this.watchIdKey = bind(this.watchIdKey, this);
	          this.createChildScopes = bind(this.createChildScopes, this);
	          this.watchOurScope = bind(this.watchOurScope, this);
	          this.watchDestroy = bind(this.watchDestroy, this);
	          this.onDestroy = bind(this.onDestroy, this);
	          this.rebuildAll = bind(this.rebuildAll, this);
	          this.doINeedToWipe = bind(this.doINeedToWipe, this);
	          this.watchModels = bind(this.watchModels, this);
	          this.go = bind(this.go, this);
	          WindowsParentModel.__super__.constructor.call(this, scope, element, attrs, ctrls, $timeout, $compile, $http, $templateCache);
	          this["interface"] = IWindow;
	          this.plurals = new PropMap();
	          _.each(IWindow.scopeKeys, (function(_this) {
	            return function(name) {
	              return _this[name + 'Key'] = void 0;
	            };
	          })(this));
	          this.linked = new Linked(scope, element, attrs, ctrls);
	          this.contentKeys = void 0;
	          this.isIconVisibleOnClick = void 0;
	          this.firstTime = true;
	          this.firstWatchModels = true;
	          this.$log.info(self);
	          this.parentScope = void 0;
	          this.go(scope);
	        }

	        WindowsParentModel.prototype.go = function(scope) {
	          this.watchOurScope(scope);
	          this.doRebuildAll = this.scope.doRebuildAll != null ? this.scope.doRebuildAll : false;
	          scope.$watch('doRebuildAll', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue) {
	                return _this.doRebuildAll = newValue;
	              }
	            };
	          })(this));
	          return this.createChildScopes();
	        };

	        WindowsParentModel.prototype.watchModels = function(scope) {
	          var itemToWatch;
	          itemToWatch = this.markersScope != null ? 'pluralsUpdate' : 'models';
	          return scope.$watch(itemToWatch, (function(_this) {
	            return function(newValue, oldValue) {
	              var doScratch;
	              if (!_.isEqual(newValue, oldValue) || _this.firstWatchModels) {
	                _this.firstWatchModels = false;
	                if (_this.doRebuildAll || _this.doINeedToWipe(scope.models)) {
	                  return _this.rebuildAll(scope, true, true);
	                } else {
	                  doScratch = _this.plurals.length === 0;
	                  if (_this.existingPieces != null) {
	                    return _.last(_this.existingPieces._content).then(function() {
	                      return _this.createChildScopes(doScratch);
	                    });
	                  } else {
	                    return _this.createChildScopes(doScratch);
	                  }
	                }
	              }
	            };
	          })(this), true);
	        };

	        WindowsParentModel.prototype.doINeedToWipe = function(newValue) {
	          var newValueIsEmpty;
	          newValueIsEmpty = newValue != null ? newValue.length === 0 : true;
	          return this.plurals.length > 0 && newValueIsEmpty;
	        };

	        WindowsParentModel.prototype.rebuildAll = function(scope, doCreate, doDelete) {
	          return this.onDestroy(doDelete).then((function(_this) {
	            return function() {
	              if (doCreate) {
	                return _this.createChildScopes();
	              }
	            };
	          })(this));
	        };

	        WindowsParentModel.prototype.onDestroy = function(scope) {
	          WindowsParentModel.__super__.onDestroy.call(this, this.scope);
	          return _async.promiseLock(this, uiGmapPromise.promiseTypes["delete"], void 0, void 0, (function(_this) {
	            return function() {
	              return _async.each(_this.plurals.values(), function(child) {
	                return child.destroy(true);
	              }, _async.chunkSizeFrom(_this.scope.cleanchunk, false)).then(function() {
	                var ref;
	                return (ref = _this.plurals) != null ? ref.removeAll() : void 0;
	              });
	            };
	          })(this));
	        };

	        WindowsParentModel.prototype.watchDestroy = function(scope) {
	          return scope.$on('$destroy', (function(_this) {
	            return function() {
	              _this.firstWatchModels = true;
	              _this.firstTime = true;
	              return _this.rebuildAll(scope, false, true);
	            };
	          })(this));
	        };

	        WindowsParentModel.prototype.watchOurScope = function(scope) {
	          return _.each(IWindow.scopeKeys, (function(_this) {
	            return function(name) {
	              var nameKey;
	              nameKey = name + 'Key';
	              return _this[nameKey] = typeof scope[name] === 'function' ? scope[name]() : scope[name];
	            };
	          })(this));
	        };

	        WindowsParentModel.prototype.createChildScopes = function(isCreatingFromScratch) {
	          var modelsNotDefined, ref, ref1;
	          if (isCreatingFromScratch == null) {
	            isCreatingFromScratch = true;
	          }

	          /*
	          being that we cannot tell the difference in Key String vs. a normal value string (TemplateUrl)
	          we will assume that all scope values are string expressions either pointing to a key (propName) or using
	          'self' to point the model as container/object of interest.
	          
	          This may force redundant information into the model, but this appears to be the most flexible approach.
	           */
	          this.isIconVisibleOnClick = true;
	          if (angular.isDefined(this.linked.attrs.isiconvisibleonclick)) {
	            this.isIconVisibleOnClick = this.linked.scope.isIconVisibleOnClick;
	          }
	          modelsNotDefined = angular.isUndefined(this.linked.scope.models);
	          if (modelsNotDefined && (this.markersScope === void 0 || (((ref = this.markersScope) != null ? ref.plurals : void 0) === void 0 || ((ref1 = this.markersScope) != null ? ref1.models : void 0) === void 0))) {
	            this.$log.error('No models to create windows from! Need direct models or models derived from markers!');
	            return;
	          }
	          if (this.gMap != null) {
	            if (this.linked.scope.models != null) {
	              this.watchIdKey(this.linked.scope);
	              if (isCreatingFromScratch) {
	                return this.createAllNew(this.linked.scope, false);
	              } else {
	                return this.pieceMeal(this.linked.scope, false);
	              }
	            } else {
	              this.parentScope = this.markersScope;
	              this.watchIdKey(this.parentScope);
	              if (isCreatingFromScratch) {
	                return this.createAllNew(this.markersScope, true, 'plurals', false);
	              } else {
	                return this.pieceMeal(this.markersScope, true, 'plurals', false);
	              }
	            }
	          }
	        };

	        WindowsParentModel.prototype.watchIdKey = function(scope) {
	          this.setIdKey(scope);
	          return scope.$watch('idKey', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue && (newValue == null)) {
	                _this.idKey = newValue;
	                return _this.rebuildAll(scope, true, true);
	              }
	            };
	          })(this));
	        };

	        WindowsParentModel.prototype.createAllNew = function(scope, hasGMarker, modelsPropToIterate, isArray) {
	          var maybeCanceled;
	          if (modelsPropToIterate == null) {
	            modelsPropToIterate = 'models';
	          }
	          if (isArray == null) {
	            isArray = false;
	          }
	          if (this.firstTime) {
	            this.watchModels(scope);
	            this.watchDestroy(scope);
	          }
	          this.setContentKeys(scope.models);
	          if (this.didQueueInitPromise(this, scope)) {
	            return;
	          }
	          maybeCanceled = null;
	          return _async.promiseLock(this, uiGmapPromise.promiseTypes.create, 'createAllNew', (function(canceledMsg) {
	            return maybeCanceled = canceledMsg;
	          }), (function(_this) {
	            return function() {
	              return _async.each(scope.models, function(model) {
	                var gMarker, ref;
	                gMarker = hasGMarker ? (ref = _this.getItem(scope, modelsPropToIterate, model[_this.idKey])) != null ? ref.gObject : void 0 : void 0;
	                if (!maybeCanceled) {
	                  if (!gMarker && _this.markersScope) {
	                    $log.error('Unable to get gMarker from markersScope!');
	                  }
	                  _this.createWindow(model, gMarker, _this.gMap);
	                }
	                return maybeCanceled;
	              }, _async.chunkSizeFrom(scope.chunk)).then(function() {
	                return _this.firstTime = false;
	              });
	            };
	          })(this));
	        };

	        WindowsParentModel.prototype.pieceMeal = function(scope, hasGMarker, modelsPropToIterate, isArray) {
	          var maybeCanceled, payload;
	          if (modelsPropToIterate == null) {
	            modelsPropToIterate = 'models';
	          }
	          if (isArray == null) {
	            isArray = true;
	          }
	          if (scope.$$destroyed) {
	            return;
	          }
	          maybeCanceled = null;
	          payload = null;
	          if ((scope != null) && this.modelsLength() && this.plurals.length) {
	            return _async.promiseLock(this, uiGmapPromise.promiseTypes.update, 'pieceMeal', (function(canceledMsg) {
	              return maybeCanceled = canceledMsg;
	            }), (function(_this) {
	              return function() {
	                return uiGmapPromise.promise((function() {
	                  return _this.figureOutState(_this.idKey, scope, _this.plurals, _this.modelKeyComparison);
	                })).then(function(state) {
	                  payload = state;
	                  return _async.each(payload.removals, function(child) {
	                    if (child != null) {
	                      _this.plurals.remove(child.id);
	                      if (child.destroy != null) {
	                        child.destroy(true);
	                      }
	                      return maybeCanceled;
	                    }
	                  }, _async.chunkSizeFrom(scope.chunk));
	                }).then(function() {
	                  return _async.each(payload.adds, function(modelToAdd) {
	                    var gMarker, ref;
	                    gMarker = (ref = _this.getItem(scope, modelsPropToIterate, modelToAdd[_this.idKey])) != null ? ref.gObject : void 0;
	                    if (!gMarker) {
	                      throw 'Gmarker undefined';
	                    }
	                    _this.createWindow(modelToAdd, gMarker, _this.gMap);
	                    return maybeCanceled;
	                  });
	                }).then(function() {
	                  return _async.each(payload.updates, function(update) {
	                    _this.updateChild(update.child, update.model);
	                    return maybeCanceled;
	                  }, _async.chunkSizeFrom(scope.chunk));
	                });
	              };
	            })(this));
	          } else {
	            $log.debug('pieceMeal: rebuildAll');
	            return this.rebuildAll(this.scope, true, true);
	          }
	        };

	        WindowsParentModel.prototype.setContentKeys = function(models) {
	          if (this.modelsLength(models)) {
	            return this.contentKeys = Object.keys(models[0]);
	          }
	        };

	        WindowsParentModel.prototype.createWindow = function(model, gMarker, gMap) {
	          var child, childScope, fakeElement, opts, ref, ref1;
	          childScope = this.linked.scope.$new(false);
	          this.setChildScope(childScope, model);
	          childScope.$watch('model', (function(_this) {
	            return function(newValue, oldValue) {
	              if (newValue !== oldValue) {
	                return _this.setChildScope(childScope, newValue);
	              }
	            };
	          })(this), true);
	          fakeElement = {
	            html: (function(_this) {
	              return function() {
	                return _this.interpolateContent(_this.linked.element.html(), model);
	              };
	            })(this)
	          };
	          this.DEFAULTS = this.scopeOrModelVal(this.optionsKey, this.scope, model) || {};
	          opts = this.createWindowOptions(gMarker, childScope, fakeElement.html(), this.DEFAULTS);
	          child = new WindowChildModel({
	            model: model,
	            scope: childScope,
	            opts: opts,
	            isIconVisibleOnClick: this.isIconVisibleOnClick,
	            gMap: gMap,
	            markerScope: (ref = this.markersScope) != null ? (ref1 = ref.plurals.get(model[this.idKey])) != null ? ref1.scope : void 0 : void 0,
	            element: fakeElement,
	            needToManualDestroy: false,
	            markerIsVisibleAfterWindowClose: true,
	            isScopeModel: true
	          });
	          if (model[this.idKey] == null) {
	            this.$log.error('Window model has no id to assign a child to. This is required for performance. Please assign id, or redirect id to a different key.');
	            return;
	          }
	          this.plurals.put(model[this.idKey], child);
	          return child;
	        };

	        WindowsParentModel.prototype.setChildScope = function(childScope, model) {
	          _.each(IWindow.scopeKeys, (function(_this) {
	            return function(name) {
	              var nameKey, newValue;
	              nameKey = name + 'Key';
	              newValue = _this[nameKey] === 'self' ? model : model[_this[nameKey]];
	              if (newValue !== childScope[name]) {
	                return childScope[name] = newValue;
	              }
	            };
	          })(this));
	          return childScope.model = model;
	        };

	        WindowsParentModel.prototype.interpolateContent = function(content, model) {
	          var exp, i, interpModel, key, len, ref;
	          if (this.contentKeys === void 0 || this.contentKeys.length === 0) {
	            return;
	          }
	          exp = $interpolate(content);
	          interpModel = {};
	          ref = this.contentKeys;
	          for (i = 0, len = ref.length; i < len; i++) {
	            key = ref[i];
	            interpModel[key] = model[key];
	          }
	          return exp(interpModel);
	        };

	        WindowsParentModel.prototype.modelKeyComparison = function(model1, model2) {
	          var isEqual, scope;
	          scope = this.scope.coords != null ? this.scope : this.parentScope;
	          if (scope == null) {
	            throw 'No scope or parentScope set!';
	          }
	          isEqual = GmapUtil.equalCoords(this.evalModelHandle(model1, scope.coords), this.evalModelHandle(model2, scope.coords));
	          if (!isEqual) {
	            return isEqual;
	          }
	          isEqual = _.every(_.without(this["interface"].scopeKeys, 'coords'), (function(_this) {
	            return function(k) {
	              return _this.evalModelHandle(model1, scope[k]) === _this.evalModelHandle(model2, scope[k]);
	            };
	          })(this));
	          return isEqual;
	        };

	        return WindowsParentModel;

	      })(IWindowParentModel);
	      return WindowsParentModel;
	    }
	  ]);

	}).call(this);
	;
	/*global angular, _ */

	(function() {
	  angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapCircle", [
	    "uiGmapICircle", "uiGmapCircleParentModel", function(ICircle, CircleParentModel) {
	      return _.extend(ICircle, {
	        link: function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then(function(gMap) {
	            return new CircleParentModel(scope, element, attrs, gMap);
	          });
	        }
	      });
	    }
	  ]);

	}).call(this);
	;(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapControl", [
	    "uiGmapIControl", "$http", "$templateCache", "$compile", "$controller", 'uiGmapGoogleMapApi', function(IControl, $http, $templateCache, $compile, $controller, GoogleMapApi) {
	      var Control;
	      return Control = (function(superClass) {
	        extend(Control, superClass);

	        function Control() {
	          this.link = bind(this.link, this);
	          Control.__super__.constructor.call(this);
	        }

	        Control.prototype.transclude = true;

	        Control.prototype.link = function(scope, element, attrs, ctrl, transclude) {
	          return GoogleMapApi.then((function(_this) {
	            return function(maps) {
	              var hasTranscludedContent, index, position, transcludedContent;
	              transcludedContent = transclude();
	              hasTranscludedContent = transclude().length > 0;
	              if (!hasTranscludedContent && angular.isUndefined(scope.template)) {
	                _this.$log.error('mapControl: could not find a valid template property or elements for transclusion');
	                return;
	              }
	              index = angular.isDefined(scope.index && !isNaN(parseInt(scope.index))) ? parseInt(scope.index) : void 0;
	              position = angular.isDefined(scope.position) ? scope.position.toUpperCase().replace(/-/g, '_') : 'TOP_CENTER';
	              if (!maps.ControlPosition[position]) {
	                _this.$log.error('mapControl: invalid position property');
	                return;
	              }
	              return IControl.mapPromise(scope, ctrl).then(function(map) {
	                var control, controlDiv, pushControl;
	                control = void 0;
	                controlDiv = angular.element('<div></div>');
	                pushControl = function(map, control, index) {
	                  if (index) {
	                    control[0].index = index;
	                  }
	                  return map.controls[google.maps.ControlPosition[position]].push(control[0]);
	                };
	                if (hasTranscludedContent) {
	                  return transclude(function(transcludeEl) {
	                    controlDiv.append(transcludeEl);
	                    return pushControl(map, controlDiv, index);
	                  });
	                } else {
	                  return $http.get(scope.template, {
	                    cache: $templateCache
	                  }).success(function(template) {
	                    var templateCtrl, templateScope;
	                    templateScope = scope.$new();
	                    controlDiv.append(template);
	                    if (angular.isDefined(scope.controller)) {
	                      templateCtrl = $controller(scope.controller, {
	                        $scope: templateScope
	                      });
	                      controlDiv.children().data('$ngControllerController', templateCtrl);
	                    }
	                    return control = $compile(controlDiv.children())(templateScope);
	                  }).error(function(error) {
	                    return _this.$log.error('mapControl: template could not be found');
	                  }).then(function() {
	                    return pushControl(map, control, index);
	                  });
	                }
	              });
	            };
	          })(this));
	        };

	        return Control;

	      })(IControl);
	    }
	  ]);

	}).call(this);
	;
	/*globals angular, _ */

	(function() {
	  angular.module('uiGmapgoogle-maps.directives.api').service('uiGmapDragZoom', [
	    'uiGmapCtrlHandle', 'uiGmapPropertyAction', function(CtrlHandle, PropertyAction) {
	      return {
	        restrict: 'EMA',
	        transclude: true,
	        template: '<div class="angular-google-map-dragzoom" ng-transclude style="display: none"></div>',
	        require: '^' + 'uiGmapGoogleMap',
	        scope: {
	          keyboardkey: '=',
	          options: '=',
	          spec: '='
	        },
	        controller: [
	          '$scope', '$element', function($scope, $element) {
	            $scope.ctrlType = 'uiGmapDragZoom';
	            return _.extend(this, CtrlHandle.handle($scope, $element));
	          }
	        ],
	        link: function(scope, element, attrs, ctrl) {
	          return CtrlHandle.mapPromise(scope, ctrl).then(function(map) {
	            var enableKeyDragZoom, setKeyAction, setOptionsAction;
	            enableKeyDragZoom = function(opts) {
	              return map.enableKeyDragZoom(opts);
	            };
	            setKeyAction = new PropertyAction(function(key, newVal) {
	              if (newVal) {
	                return enableKeyDragZoom({
	                  key: newVal
	                });
	              } else {
	                return enableKeyDragZoom();
	              }
	            });
	            setOptionsAction = new PropertyAction(function(key, newVal) {
	              if (newVal) {
	                return enableKeyDragZoom(newVal);
	              }
	            });
	            scope.$watch('keyboardkey', setKeyAction.sic('keyboardkey'));
	            setKeyAction.sic(scope.keyboardkey);
	            scope.$watch('options', setOptionsAction.sic('options'));
	            return setOptionsAction.sic(scope.options);
	          });
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapDrawingManager", [
	    "uiGmapIDrawingManager", "uiGmapDrawingManagerParentModel", function(IDrawingManager, DrawingManagerParentModel) {
	      return _.extend(IDrawingManager, {
	        link: function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then(function(map) {
	            return new DrawingManagerParentModel(scope, element, attrs, map);
	          });
	        }
	      });
	    }
	  ]);

	}).call(this);
	;
	/*
	  - Link up Polygons to be sent back to a controller
	  - inject the draw function into a controllers scope so that controller can call the directive to draw on demand
	  - draw function creates the DrawFreeHandChildModel which manages itself
	 */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapApiFreeDrawPolygons', [
	    'uiGmapLogger', 'uiGmapBaseObject', 'uiGmapCtrlHandle', 'uiGmapDrawFreeHandChildModel', 'uiGmapLodash', function($log, BaseObject, CtrlHandle, DrawFreeHandChildModel, uiGmapLodash) {
	      var FreeDrawPolygons;
	      return FreeDrawPolygons = (function(superClass) {
	        extend(FreeDrawPolygons, superClass);

	        function FreeDrawPolygons() {
	          this.link = bind(this.link, this);
	          return FreeDrawPolygons.__super__.constructor.apply(this, arguments);
	        }

	        FreeDrawPolygons.include(CtrlHandle);

	        FreeDrawPolygons.prototype.restrict = 'EMA';

	        FreeDrawPolygons.prototype.replace = true;

	        FreeDrawPolygons.prototype.require = '^' + 'uiGmapGoogleMap';

	        FreeDrawPolygons.prototype.scope = {
	          polygons: '=',
	          draw: '='
	        };

	        FreeDrawPolygons.prototype.link = function(scope, element, attrs, ctrl) {
	          return this.mapPromise(scope, ctrl).then((function(_this) {
	            return function(map) {
	              var freeHand, listener;
	              if (!scope.polygons) {
	                return $log.error('No polygons to bind to!');
	              }
	              if (!_.isArray(scope.polygons)) {
	                return $log.error('Free Draw Polygons must be of type Array!');
	              }
	              freeHand = new DrawFreeHandChildModel(map, ctrl.getScope());
	              listener = void 0;
	              return scope.draw = function() {
	                if (typeof listener === "function") {
	                  listener();
	                }
	                return freeHand.engage(scope.polygons).then(function() {
	                  var firstTime;
	                  firstTime = true;
	                  return listener = scope.$watchCollection('polygons', function(newValue, oldValue) {
	                    var removals;
	                    if (firstTime || newValue === oldValue) {
	                      firstTime = false;
	                      return;
	                    }
	                    removals = uiGmapLodash.differenceObjects(oldValue, newValue);
	                    return removals.forEach(function(p) {
	                      return p.setMap(null);
	                    });
	                  });
	                });
	              };
	            };
	          })(this));
	        };

	        return FreeDrawPolygons;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module("uiGmapgoogle-maps.directives.api").service("uiGmapICircle", [
	    function() {
	      var DEFAULTS;
	      DEFAULTS = {};
	      return {
	        restrict: "EA",
	        replace: true,
	        require: '^' + 'uiGmapGoogleMap',
	        scope: {
	          center: "=center",
	          radius: "=radius",
	          stroke: "=stroke",
	          fill: "=fill",
	          clickable: "=",
	          draggable: "=",
	          editable: "=",
	          geodesic: "=",
	          icons: "=icons",
	          visible: "=",
	          events: "=",
	          control: "=",
	          zIndex: "=zindex"
	        }
	      };
	    }
	  ]);

	}).call(this);
	;
	/*
	 - interface for all controls to derive from
	 - to enforce a minimum set of requirements
		- attributes
			- template
			- position
			- controller
			- index
	 */

	(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapIControl", [
	    "uiGmapBaseObject", "uiGmapLogger", "uiGmapCtrlHandle", function(BaseObject, Logger, CtrlHandle) {
	      var IControl;
	      return IControl = (function(superClass) {
	        extend(IControl, superClass);

	        IControl.extend(CtrlHandle);

	        function IControl() {
	          this.restrict = 'EA';
	          this.replace = true;
	          this.require = '^' + 'uiGmapGoogleMap';
	          this.scope = {
	            template: '@template',
	            position: '@position',
	            controller: '@controller',
	            index: '@index'
	          };
	          this.$log = Logger;
	        }

	        IControl.prototype.link = function(scope, element, attrs, ctrl) {
	          throw new Exception("Not implemented!!");
	        };

	        return IControl;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api').service('uiGmapIDrawingManager', [
	    function() {
	      return {
	        restrict: 'EA',
	        replace: true,
	        require: '^' + 'uiGmapGoogleMap',
	        scope: {
	          "static": '@',
	          control: '=',
	          options: '=',
	          events: '='
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapIMarker', [
	    'uiGmapBaseObject', 'uiGmapCtrlHandle', function(BaseObject, CtrlHandle) {
	      var IMarker;
	      return IMarker = (function(superClass) {
	        extend(IMarker, superClass);

	        IMarker.scope = {
	          coords: '=coords',
	          icon: '=icon',
	          click: '&click',
	          options: '=options',
	          events: '=events',
	          fit: '=fit',
	          idKey: '=idkey',
	          control: '=control'
	        };

	        IMarker.scopeKeys = _.keys(IMarker.scope);

	        IMarker.keys = IMarker.scopeKeys;

	        IMarker.extend(CtrlHandle);

	        function IMarker() {
	          this.restrict = 'EMA';
	          this.require = '^' + 'uiGmapGoogleMap';
	          this.priority = -1;
	          this.transclude = true;
	          this.replace = true;
	          this.scope = _.extend(this.scope || {}, IMarker.scope);
	        }

	        return IMarker;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapIPolygon', [
	    'uiGmapGmapUtil', 'uiGmapBaseObject', 'uiGmapLogger', 'uiGmapCtrlHandle', function(GmapUtil, BaseObject, Logger, CtrlHandle) {
	      var IPolygon;
	      return IPolygon = (function(superClass) {
	        extend(IPolygon, superClass);

	        IPolygon.scope = {
	          path: '=path',
	          stroke: '=stroke',
	          clickable: '=',
	          draggable: '=',
	          editable: '=',
	          geodesic: '=',
	          fill: '=',
	          icons: '=icons',
	          visible: '=',
	          "static": '=',
	          events: '=',
	          zIndex: '=zindex',
	          fit: '=',
	          control: '=control'
	        };

	        IPolygon.scopeKeys = _.keys(IPolygon.scope);

	        IPolygon.include(GmapUtil);

	        IPolygon.extend(CtrlHandle);

	        function IPolygon() {}

	        IPolygon.prototype.restrict = 'EMA';

	        IPolygon.prototype.replace = true;

	        IPolygon.prototype.require = '^' + 'uiGmapGoogleMap';

	        IPolygon.prototype.scope = IPolygon.scope;

	        IPolygon.prototype.DEFAULTS = {};

	        IPolygon.prototype.$log = Logger;

	        return IPolygon;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapIPolyline', [
	    'uiGmapGmapUtil', 'uiGmapBaseObject', 'uiGmapLogger', 'uiGmapCtrlHandle', function(GmapUtil, BaseObject, Logger, CtrlHandle) {
	      var IPolyline;
	      return IPolyline = (function(superClass) {
	        extend(IPolyline, superClass);

	        IPolyline.scope = {
	          path: '=',
	          stroke: '=',
	          clickable: '=',
	          draggable: '=',
	          editable: '=',
	          geodesic: '=',
	          icons: '=',
	          visible: '=',
	          "static": '=',
	          fit: '=',
	          events: '=',
	          zIndex: '=zindex'
	        };

	        IPolyline.scopeKeys = _.keys(IPolyline.scope);

	        IPolyline.include(GmapUtil);

	        IPolyline.extend(CtrlHandle);

	        function IPolyline() {}

	        IPolyline.prototype.restrict = 'EMA';

	        IPolyline.prototype.replace = true;

	        IPolyline.prototype.require = '^' + 'uiGmapGoogleMap';

	        IPolyline.prototype.scope = IPolyline.scope;

	        IPolyline.prototype.DEFAULTS = {};

	        IPolyline.prototype.$log = Logger;

	        return IPolyline;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api').service('uiGmapIRectangle', [
	    function() {
	      'use strict';
	      var DEFAULTS;
	      DEFAULTS = {};
	      return {
	        restrict: 'EMA',
	        require: '^' + 'uiGmapGoogleMap',
	        replace: true,
	        scope: {
	          bounds: '=',
	          stroke: '=',
	          clickable: '=',
	          draggable: '=',
	          editable: '=',
	          fill: '=',
	          visible: '=',
	          events: '='
	        }
	      };
	    }
	  ]);

	}).call(this);
	;(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapIWindow', [
	    'uiGmapBaseObject', 'uiGmapChildEvents', 'uiGmapCtrlHandle', function(BaseObject, ChildEvents, CtrlHandle) {
	      var IWindow;
	      return IWindow = (function(superClass) {
	        extend(IWindow, superClass);

	        IWindow.scope = {
	          coords: '=coords',
	          template: '=template',
	          templateUrl: '=templateurl',
	          templateParameter: '=templateparameter',
	          isIconVisibleOnClick: '=isiconvisibleonclick',
	          closeClick: '&closeclick',
	          options: '=options',
	          control: '=control',
	          show: '=show'
	        };

	        IWindow.scopeKeys = _.keys(IWindow.scope);

	        IWindow.include(ChildEvents);

	        IWindow.extend(CtrlHandle);

	        function IWindow() {
	          this.restrict = 'EMA';
	          this.template = void 0;
	          this.transclude = true;
	          this.priority = -100;
	          this.require = '^' + 'uiGmapGoogleMap';
	          this.replace = true;
	          this.scope = _.extend(this.scope || {}, IWindow.scope);
	        }

	        return IWindow;

	      })(BaseObject);
	    }
	  ]);

	}).call(this);
	;
	/*globals angular,_,google */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapMap', ['$timeout', '$q', '$log', 'uiGmapGmapUtil', 'uiGmapBaseObject', 'uiGmapCtrlHandle', 'uiGmapIsReady', 'uiGmapuuid', 'uiGmapExtendGWin', 'uiGmapExtendMarkerClusterer', 'uiGmapGoogleMapsUtilV3', 'uiGmapGoogleMapApi', 'uiGmapEventsHelper', 'uiGmapGoogleMapObjectManager', function($timeout, $q, $log, uiGmapGmapUtil, uiGmapBaseObject, uiGmapCtrlHandle, uiGmapIsReady, uiGmapuuid, uiGmapExtendGWin, uiGmapExtendMarkerClusterer, uiGmapGoogleMapsUtilV3, uiGmapGoogleMapApi, uiGmapEventsHelper, uiGmapGoogleMapObjectManager) {
	    var DEFAULTS, Map, initializeItems;
	    DEFAULTS = void 0;
	    initializeItems = [uiGmapGoogleMapsUtilV3, uiGmapExtendGWin, uiGmapExtendMarkerClusterer];
	    return Map = (function(superClass) {
	      extend(Map, superClass);

	      Map.include(uiGmapGmapUtil);

	      function Map() {
	        this.link = bind(this.link, this);
	        var ctrlFn;
	        ctrlFn = function($scope) {
	          var ctrlObj, retCtrl;
	          retCtrl = void 0;
	          $scope.$on('$destroy', function() {
	            return uiGmapIsReady.decrement();
	          });
	          ctrlObj = uiGmapCtrlHandle.handle($scope);
	          $scope.ctrlType = 'Map';
	          $scope.deferred.promise.then(function() {
	            return initializeItems.forEach(function(i) {
	              return i.init();
	            });
	          });
	          ctrlObj.getMap = function() {
	            return $scope.map;
	          };
	          retCtrl = _.extend(this, ctrlObj);
	          return retCtrl;
	        };
	        this.controller = ['$scope', ctrlFn];
	      }

	      Map.prototype.restrict = 'EMA';

	      Map.prototype.transclude = true;

	      Map.prototype.replace = false;

	      Map.prototype.template = "<div class=\"angular-google-map\"><div class=\"angular-google-map-container\">\n</div><div ng-transclude style=\"display: none\"></div></div>";

	      Map.prototype.scope = {
	        center: '=',
	        zoom: '=',
	        dragging: '=',
	        control: '=',
	        options: '=',
	        events: '=',
	        eventOpts: '=',
	        styles: '=',
	        bounds: '=',
	        update: '='
	      };

	      Map.prototype.link = function(scope, element, attrs) {
	        var listeners;
	        listeners = [];
	        scope.$on('$destroy', function() {
	          uiGmapEventsHelper.removeEvents(listeners);
	          if (attrs.recycleMapInstance === 'true' && scope.map) {
	            uiGmapGoogleMapObjectManager.recycleMapInstance(scope.map);
	            return scope.map = null;
	          }
	        });
	        scope.idleAndZoomChanged = false;
	        return uiGmapGoogleMapApi.then((function(_this) {
	          return function(maps) {
	            var _gMap, customListeners, disabledEvents, dragging, el, eventName, getEventHandler, mapOptions, maybeHookToEvent, opts, ref, resolveSpawned, settingFromDirective, spawned, type, updateCenter, zoomPromise;
	            DEFAULTS = {
	              mapTypeId: maps.MapTypeId.ROADMAP
	            };
	            spawned = uiGmapIsReady.spawn();
	            resolveSpawned = function() {
	              return spawned.deferred.resolve({
	                instance: spawned.instance,
	                map: _gMap
	              });
	            };
	            if (!angular.isDefined(scope.center) && !angular.isDefined(scope.bounds)) {
	              $log.error('angular-google-maps: a center or bounds property is required');
	              return;
	            }
	            if (!angular.isDefined(scope.center)) {
	              scope.center = new google.maps.LatLngBounds(_this.getCoords(scope.bounds.southwest), _this.getCoords(scope.bounds.northeast)).getCenter();
	            }
	            if (!angular.isDefined(scope.zoom)) {
	              scope.zoom = 10;
	            }
	            el = angular.element(element);
	            el.addClass('angular-google-map');
	            opts = {
	              options: {}
	            };
	            if (attrs.options) {
	              opts.options = scope.options;
	            }
	            if (attrs.styles) {
	              opts.styles = scope.styles;
	            }
	            if (attrs.type) {
	              type = attrs.type.toUpperCase();
	              if (google.maps.MapTypeId.hasOwnProperty(type)) {
	                opts.mapTypeId = google.maps.MapTypeId[attrs.type.toUpperCase()];
	              } else {
	                $log.error("angular-google-maps: invalid map type '" + attrs.type + "'");
	              }
	            }
	            mapOptions = angular.extend({}, DEFAULTS, opts, {
	              center: _this.getCoords(scope.center),
	              zoom: scope.zoom,
	              bounds: scope.bounds
	            });
	            if (attrs.recycleMapInstance === 'true') {
	              _gMap = uiGmapGoogleMapObjectManager.createMapInstance(el.find('div')[1], mapOptions);
	            } else {
	              _gMap = new google.maps.Map(el.find('div')[1], mapOptions);
	            }
	            _gMap['uiGmap_id'] = uiGmapuuid.generate();
	            dragging = false;
	            listeners.push(google.maps.event.addListenerOnce(_gMap, 'idle', function() {
	              scope.deferred.resolve(_gMap);
	              return resolveSpawned();
	            }));
	            disabledEvents = attrs.events && (((ref = scope.events) != null ? ref.blacklist : void 0) != null) ? scope.events.blacklist : [];
	            if (_.isString(disabledEvents)) {
	              disabledEvents = [disabledEvents];
	            }
	            maybeHookToEvent = function(eventName, fn, prefn) {
	              if (!_.includes(disabledEvents, eventName)) {
	                if (prefn) {
	                  prefn();
	                }
	                return listeners.push(google.maps.event.addListener(_gMap, eventName, function() {
	                  var ref1;
	                  if (!((ref1 = scope.update) != null ? ref1.lazy : void 0)) {
	                    return fn();
	                  }
	                }));
	              }
	            };
	            if (!_.includes(disabledEvents, 'all')) {
	              maybeHookToEvent('dragstart', function() {
	                dragging = true;
	                return scope.$evalAsync(function(s) {
	                  if (s.dragging != null) {
	                    return s.dragging = dragging;
	                  }
	                });
	              });
	              maybeHookToEvent('dragend', function() {
	                dragging = false;
	                return scope.$evalAsync(function(s) {
	                  if (s.dragging != null) {
	                    return s.dragging = dragging;
	                  }
	                });
	              });
	              updateCenter = function(c, s) {
	                if (c == null) {
	                  c = _gMap.center;
	                }
	                if (s == null) {
	                  s = scope;
	                }
	                if (_.includes(disabledEvents, 'center')) {
	                  if (s.center.latitude !== c.lat()) {
	                    s.center.latitude = c.lat();
	                  }
	                  if (s.center.longitude !== c.lng()) {
	                    return s.center.longitude = c.lng();
	                  }
	                }
	              };
	              settingFromDirective = false;
	              maybeHookToEvent('idle', function() {
	                var b, ne, sw;
	                b = _gMap.getBounds();
	                ne = b.getNorthEast();
	                sw = b.getSouthWest();
	                settingFromDirective = true;
	                return scope.$evalAsync(function(s) {
	                  updateCenter();
	                  if (!_.isUndefined(s.bounds) && !_.includes(disabledEvents, 'bounds')) {
	                    s.bounds.northeast = {
	                      latitude: ne.lat(),
	                      longitude: ne.lng()
	                    };
	                    s.bounds.southwest = {
	                      latitude: sw.lat(),
	                      longitude: sw.lng()
	                    };
	                  }
	                  if (!_.includes(disabledEvents, 'zoom')) {
	                    s.zoom = _gMap.zoom;
	                    scope.idleAndZoomChanged = !scope.idleAndZoomChanged;
	                  }
	                  return settingFromDirective = false;
	                });
	              });
	            }
	            if (angular.isDefined(scope.events) && scope.events !== null && angular.isObject(scope.events)) {
	              getEventHandler = function(eventName) {
	                return function() {
	                  return scope.events[eventName].apply(scope, [_gMap, eventName, arguments]);
	                };
	              };
	              customListeners = [];
	              for (eventName in scope.events) {
	                if (scope.events.hasOwnProperty(eventName) && angular.isFunction(scope.events[eventName])) {
	                  customListeners.push(google.maps.event.addListener(_gMap, eventName, getEventHandler(eventName)));
	                }
	              }
	              listeners.concat(customListeners);
	            }
	            _gMap.getOptions = function() {
	              return mapOptions;
	            };
	            scope.map = _gMap;
	            if ((attrs.control != null) && (scope.control != null)) {
	              scope.control.refresh = function(maybeCoords) {
	                var coords, ref1, ref2;
	                if (_gMap == null) {
	                  return;
	                }
	                if (((typeof google !== "undefined" && google !== null ? (ref1 = google.maps) != null ? (ref2 = ref1.event) != null ? ref2.trigger : void 0 : void 0 : void 0) != null) && (_gMap != null)) {
	                  google.maps.event.trigger(_gMap, 'resize');
	                }
	                if (((maybeCoords != null ? maybeCoords.latitude : void 0) != null) && ((maybeCoords != null ? maybeCoords.longitude : void 0) != null)) {
	                  coords = _this.getCoords(maybeCoords);
	                  if (_this.isTrue(attrs.pan)) {
	                    return _gMap.panTo(coords);
	                  } else {
	                    return _gMap.setCenter(coords);
	                  }
	                }
	              };
	              scope.control.getGMap = function() {
	                return _gMap;
	              };
	              scope.control.getMapOptions = function() {
	                return mapOptions;
	              };
	              scope.control.getCustomEventListeners = function() {
	                return customListeners;
	              };
	              scope.control.removeEvents = function(yourListeners) {
	                return uiGmapEventsHelper.removeEvents(yourListeners);
	              };
	            }
	            scope.$watch('center', function(newValue, oldValue) {
	              var coords;
	              if (newValue === oldValue || settingFromDirective) {
	                return;
	              }
	              coords = _this.getCoords(scope.center);
	              if (coords.lat() === _gMap.center.lat() && coords.lng() === _gMap.center.lng()) {
	                return;
	              }
	              if (!dragging) {
	                if (!_this.validateCoords(newValue)) {
	                  $log.error("Invalid center for newValue: " + (JSON.stringify(newValue)));
	                }
	                if (_this.isTrue(attrs.pan) && scope.zoom === _gMap.zoom) {
	                  return _gMap.panTo(coords);
	                } else {
	                  return _gMap.setCenter(coords);
	                }
	              }
	            }, true);
	            zoomPromise = null;
	            scope.$watch('zoom', function(newValue, oldValue) {
	              var ref1, ref2;
	              if (newValue == null) {
	                return;
	              }
	              if (_.isEqual(newValue, oldValue) || (_gMap != null ? _gMap.getZoom() : void 0) === (scope != null ? scope.zoom : void 0) || settingFromDirective) {
	                return;
	              }
	              if (zoomPromise != null) {
	                $timeout.cancel(zoomPromise);
	              }
	              return zoomPromise = $timeout(function() {
	                return _gMap.setZoom(newValue);
	              }, ((ref1 = scope.eventOpts) != null ? (ref2 = ref1.debounce) != null ? ref2.zoomMs : void 0 : void 0) + 20, false);
	            });
	            scope.$watch('bounds', function(newValue, oldValue) {
	              var bounds, ne, ref1, ref2, ref3, ref4, sw;
	              if (newValue === oldValue) {
	                return;
	              }
	              if (((newValue != null ? (ref1 = newValue.northeast) != null ? ref1.latitude : void 0 : void 0) == null) || ((newValue != null ? (ref2 = newValue.northeast) != null ? ref2.longitude : void 0 : void 0) == null) || ((newValue != null ? (ref3 = newValue.southwest) != null ? ref3.latitude : void 0 : void 0) == null) || ((newValue != null ? (ref4 = newValue.southwest) != null ? ref4.longitude : void 0 : void 0) == null)) {
	                $log.error("Invalid map bounds for new value: " + (JSON.stringify(newValue)));
	                return;
	              }
	              ne = new google.maps.LatLng(newValue.northeast.latitude, newValue.northeast.longitude);
	              sw = new google.maps.LatLng(newValue.southwest.latitude, newValue.southwest.longitude);
	              bounds = new google.maps.LatLngBounds(sw, ne);
	              return _gMap.fitBounds(bounds);
	            });
	            return ['options', 'styles'].forEach(function(toWatch) {
	              return scope.$watch(toWatch, function(newValue, oldValue) {
	                if (_.isEqual(newValue, oldValue)) {
	                  return;
	                }
	                if (toWatch === 'options') {
	                  opts.options = newValue;
	                } else {
	                  opts.options[toWatch] = newValue;
	                }
	                if (_gMap != null) {
	                  return _gMap.setOptions(opts);
	                }
	              }, true);
	            });
	          };
	        })(this));
	      };

	      return Map;

	    })(uiGmapBaseObject);
	  }]);

	}).call(this);
	;
	/*global _:true,angular:true */

	(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapMarker", [
	    "uiGmapIMarker", "uiGmapMarkerChildModel", "uiGmapMarkerManager", "uiGmapLogger", function(IMarker, MarkerChildModel, MarkerManager, $log) {
	      var Marker;
	      return Marker = (function(superClass) {
	        extend(Marker, superClass);

	        function Marker() {
	          Marker.__super__.constructor.call(this);
	          this.template = '<span class="angular-google-map-marker" ng-transclude></span>';
	          $log.info(this);
	        }

	        Marker.prototype.controller = [
	          '$scope', '$element', function($scope, $element) {
	            $scope.ctrlType = 'Marker';
	            return _.extend(this, IMarker.handle($scope, $element));
	          }
	        ];

	        Marker.prototype.link = function(scope, element, attrs, ctrl) {
	          var mapPromise;
	          mapPromise = IMarker.mapPromise(scope, ctrl);
	          mapPromise.then(function(gMap) {
	            var gManager, keys, m;
	            gManager = new MarkerManager(gMap);
	            keys = _.object(IMarker.keys, IMarker.keys);
	            m = new MarkerChildModel({
	              scope: scope,
	              model: scope,
	              keys: keys,
	              gMap: gMap,
	              doClick: true,
	              gManager: gManager,
	              doDrawSelf: false,
	              trackModel: false
	            });
	            m.deferred.promise.then(function(gMarker) {
	              return scope.deferred.resolve(gMarker);
	            });
	            if (scope.control != null) {
	              return scope.control.getGMarkers = gManager.getGMarkers;
	            }
	          });
	          return scope.$on('$destroy', function() {
	            var gManager;
	            if (typeof gManager !== "undefined" && gManager !== null) {
	              gManager.clear();
	            }
	            return gManager = null;
	          });
	        };

	        return Marker;

	      })(IMarker);
	    }
	  ]);

	}).call(this);
	;
	/*global _:true,angular:true */

	(function() {
	  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapMarkers", [
	    "uiGmapIMarker", "uiGmapPlural", "uiGmapMarkersParentModel", "uiGmap_sync", "uiGmapLogger", function(IMarker, Plural, MarkersParentModel, _sync, $log) {
	      var Markers;
	      return Markers = (function(superClass) {
	        extend(Markers, superClass);

	        function Markers() {
	          Markers.__super__.constructor.call(this);
	          this.template = '<span class="angular-google-map-markers" ng-transclude></span>';
	          Plural.extend(this, {
	            doCluster: '=?docluster',
	            clusterOptions: '=clusteroptions',
	            clusterEvents: '=clusterevents',
	            modelsByRef: '=modelsbyref',
	            type: '=?type',
	            typeOptions: '=?typeoptions',
	            typeEvents: '=?typeevents'
	          });
	          $log.info(this);
	        }

	        Markers.prototype.controller = [
	          '$scope', '$element', function($scope, $element) {
	            $scope.ctrlType = 'Markers';
	            return _.extend(this, IMarker.handle($scope, $element));
	          }
	        ];

	        Markers.prototype.link = function(scope, element, attrs, ctrl) {
	          var parentModel, ready;
	          parentModel = void 0;
	          ready = function() {
	            return scope.deferred.resolve();
	          };
	          return IMarker.mapPromise(scope, ctrl).then(function(map) {
	            var mapScope;
	            mapScope = ctrl.getScope();
	            mapScope.$watch('idleAndZoomChanged', function() {
	              return _.defer(parentModel.gManager.draw);
	            });
	            parentModel = new MarkersParentModel(scope, element, attrs, map);
	            Plural.link(scope, parentModel);
	            if (scope.control != null) {
	              scope.control.getGMarkers = function() {
	                var ref;
	                return (ref = parentModel.gManager) != null ? ref.getGMarkers() : void 0;
	              };
	              scope.control.getChildMarkers = function() {
	                return parentModel.plurals;
	              };
	            }
	            return _.last(parentModel.existingPieces._content).then(function() {
	              return ready();
	            });
	          });
	        };

	        return Markers;

	      })(IMarker);
	    }
	  ]);

	}).call(this);
	;
	/*global angular */

	(function() {
	  angular.module('uiGmapgoogle-maps.directives.api').service('uiGmapPlural', [
	    function() {
	      var _initControl;
	      _initControl = function(scope, parent) {
	        if (scope.control == null) {
	          return;
	        }
	        scope.control.updateModels = function(models) {
	          scope.models = models;
	          return parent.createChildScopes(false);
	        };
	        scope.control.newModels = function(models) {
	          scope.models = models;
	          return parent.rebuildAll(scope, true, true);
	        };
	        scope.control.clean = function() {
	          return parent.rebuildAll(scope, false, true);
	        };
	        scope.control.getPlurals = function() {
	          return parent.plurals;
	        };
	        scope.control.getManager = function() {
	          return parent.gManager;
	        };
	        scope.control.hasManager = function() {
	          return (parent.gManager != null) === true;
	        };
	        return scope.control.managerDraw = function() {
	          var ref;
	          if (scope.control.hasManager()) {
	            return (ref = scope.control.getManager()) != null ? ref.draw() : void 0;
	          }
	        };
	      };
	      return {
	        extend: function(obj, obj2) {
	          return _.extend(obj.scope || {}, obj2 || {}, {
	            idKey: '=idkey',
	            doRebuildAll: '=dorebuildall',
	            models: '=models',
	            chunk: '=chunk',
	            cleanchunk: '=cleanchunk',
	            control: '=control'
	          });
	        },
	        link: function(scope, parent) {
	          return _initControl(scope, parent);
	        }
	      };
	    }
	  ]);

	}).call(this);
	;
	/*global angular */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapPolygon', [
	    'uiGmapIPolygon', '$timeout', 'uiGmapPolygonChildModel', function(IPolygon, $timeout, PolygonChild) {
	      var Polygon;
	      return Polygon = (function(superClass) {
	        extend(Polygon, superClass);

	        function Polygon() {
	          this.link = bind(this.link, this);
	          return Polygon.__super__.constructor.apply(this, arguments);
	        }

	        Polygon.prototype.link = function(scope, element, attrs, mapCtrl) {
	          var children, promise;
	          children = [];
	          promise = IPolygon.mapPromise(scope, mapCtrl);
	          if (scope.control != null) {
	            scope.control.getInstance = this;
	            scope.control.polygons = children;
	            scope.control.promise = promise;
	          }
	          return promise.then((function(_this) {
	            return function(gMap) {
	              return children.push(new PolygonChild({
	                scope: scope,
	                attrs: attrs,
	                gMap: gMap,
	                defaults: _this.DEFAULTS
	              }));
	            };
	          })(this));
	        };

	        return Polygon;

	      })(IPolygon);
	    }
	  ]);

	}).call(this);
	;
	/*global angular:true */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapPolygons', [
	    'uiGmapIPolygon', '$timeout', 'uiGmapPolygonsParentModel', 'uiGmapPlural', function(Interface, $timeout, ParentModel, Plural) {
	      var Polygons;
	      return Polygons = (function(superClass) {
	        extend(Polygons, superClass);

	        function Polygons() {
	          this.link = bind(this.link, this);
	          Polygons.__super__.constructor.call(this);
	          Plural.extend(this);
	          this.$log.info(this);
	        }

	        Polygons.prototype.link = function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then((function(_this) {
	            return function(map) {
	              if (angular.isUndefined(scope.path) || scope.path === null) {
	                _this.$log.warn('polygons: no valid path attribute found');
	              }
	              if (!scope.models) {
	                _this.$log.warn('polygons: no models found to create from');
	              }
	              return Plural.link(scope, new ParentModel(scope, element, attrs, map, _this.DEFAULTS));
	            };
	          })(this));
	        };

	        return Polygons;

	      })(Interface);
	    }
	  ]);

	}).call(this);
	;
	/*global angular */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapPolyline', [
	    'uiGmapIPolyline', '$timeout', 'uiGmapPolylineChildModel', function(IPolyline, $timeout, PolylineChildModel) {
	      var Polyline;
	      return Polyline = (function(superClass) {
	        extend(Polyline, superClass);

	        function Polyline() {
	          this.link = bind(this.link, this);
	          return Polyline.__super__.constructor.apply(this, arguments);
	        }

	        Polyline.prototype.link = function(scope, element, attrs, mapCtrl) {
	          return IPolyline.mapPromise(scope, mapCtrl).then((function(_this) {
	            return function(gMap) {
	              if (angular.isUndefined(scope.path) || scope.path === null || !_this.validatePath(scope.path)) {
	                _this.$log.warn('polyline: no valid path attribute found');
	              }
	              return new PolylineChildModel({
	                scope: scope,
	                attrs: attrs,
	                gMap: gMap,
	                defaults: _this.DEFAULTS
	              });
	            };
	          })(this));
	        };

	        return Polyline;

	      })(IPolyline);
	    }
	  ]);

	}).call(this);
	;
	/*global angular */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapPolylines', [
	    'uiGmapIPolyline', '$timeout', 'uiGmapPolylinesParentModel', 'uiGmapPlural', function(IPolyline, $timeout, PolylinesParentModel, Plural) {
	      var Polylines;
	      return Polylines = (function(superClass) {
	        extend(Polylines, superClass);

	        function Polylines() {
	          this.link = bind(this.link, this);
	          Polylines.__super__.constructor.call(this);
	          Plural.extend(this);
	          this.$log.info(this);
	        }

	        Polylines.prototype.link = function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then((function(_this) {
	            return function(gMap) {
	              if (angular.isUndefined(scope.path) || scope.path === null) {
	                _this.$log.warn('polylines: no valid path attribute found');
	              }
	              if (!scope.models) {
	                _this.$log.warn('polylines: no models found to create from');
	              }
	              return Plural.link(scope, new PolylinesParentModel(scope, element, attrs, gMap, _this.DEFAULTS));
	            };
	          })(this));
	        };

	        return Polylines;

	      })(IPolyline);
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapRectangle', [
	    'uiGmapLogger', 'uiGmapGmapUtil', 'uiGmapIRectangle', 'uiGmapRectangleParentModel', function($log, GmapUtil, IRectangle, RectangleParentModel) {
	      return _.extend(IRectangle, {
	        link: function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then(function(gMap) {
	            return new RectangleParentModel(scope, element, attrs, gMap);
	          });
	        }
	      });
	    }
	  ]);

	}).call(this);
	;
	/*global angular:true */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapWindow', [
	    'uiGmapIWindow', 'uiGmapGmapUtil', 'uiGmapWindowChildModel', 'uiGmapLodash', 'uiGmapLogger', function(IWindow, GmapUtil, WindowChildModel, uiGmapLodash, $log) {
	      var Window;
	      return Window = (function(superClass) {
	        extend(Window, superClass);

	        Window.include(GmapUtil);

	        function Window() {
	          this.link = bind(this.link, this);
	          Window.__super__.constructor.call(this);
	          this.require = ['^' + 'uiGmapGoogleMap', '^?' + 'uiGmapMarker'];
	          this.template = '<span class="angular-google-maps-window" ng-transclude></span>';
	          $log.debug(this);
	          this.childWindows = [];
	        }

	        Window.prototype.link = function(scope, element, attrs, ctrls) {
	          var markerCtrl, markerScope;
	          markerCtrl = ctrls.length > 1 && (ctrls[1] != null) ? ctrls[1] : void 0;
	          markerScope = markerCtrl != null ? markerCtrl.getScope() : void 0;
	          this.mapPromise = IWindow.mapPromise(scope, ctrls[0]);
	          return this.mapPromise.then((function(_this) {
	            return function(gMap) {
	              var isIconVisibleOnClick;
	              isIconVisibleOnClick = true;
	              if (angular.isDefined(attrs.isiconvisibleonclick)) {
	                isIconVisibleOnClick = scope.isIconVisibleOnClick;
	              }
	              if (!markerCtrl) {
	                _this.init(scope, element, isIconVisibleOnClick, gMap);
	                return;
	              }
	              return markerScope.deferred.promise.then(function(gMarker) {
	                return _this.init(scope, element, isIconVisibleOnClick, gMap, markerScope);
	              });
	            };
	          })(this));
	        };

	        Window.prototype.init = function(scope, element, isIconVisibleOnClick, gMap, markerScope) {
	          var childWindow, defaults, gMarker, hasScopeCoords, opts;
	          defaults = scope.options != null ? scope.options : {};
	          hasScopeCoords = (scope != null) && this.validateCoords(scope.coords);
	          if ((markerScope != null ? markerScope['getGMarker'] : void 0) != null) {
	            gMarker = markerScope.getGMarker();
	          }
	          opts = hasScopeCoords ? this.createWindowOptions(gMarker, scope, element.html(), defaults) : defaults;
	          if (gMap != null) {
	            childWindow = new WindowChildModel({
	              scope: scope,
	              opts: opts,
	              isIconVisibleOnClick: isIconVisibleOnClick,
	              gMap: gMap,
	              markerScope: markerScope,
	              element: element
	            });
	            this.childWindows.push(childWindow);
	            scope.$on('$destroy', (function(_this) {
	              return function() {
	                _this.childWindows = uiGmapLodash.withoutObjects(_this.childWindows, [childWindow], function(child1, child2) {
	                  return child1.scope.$id === child2.scope.$id;
	                });
	                return _this.childWindows.length = 0;
	              };
	            })(this));
	          }
	          if (scope.control != null) {
	            scope.control.getGWindows = (function(_this) {
	              return function() {
	                return _this.childWindows.map(function(child) {
	                  return child.gObject;
	                });
	              };
	            })(this);
	            scope.control.getChildWindows = (function(_this) {
	              return function() {
	                return _this.childWindows;
	              };
	            })(this);
	            scope.control.getPlurals = scope.control.getChildWindows;
	            scope.control.showWindow = (function(_this) {
	              return function() {
	                return _this.childWindows.map(function(child) {
	                  return child.showWindow();
	                });
	              };
	            })(this);
	            scope.control.hideWindow = (function(_this) {
	              return function() {
	                return _this.childWindows.map(function(child) {
	                  return child.hideWindow();
	                });
	              };
	            })(this);
	          }
	          if ((this.onChildCreation != null) && (childWindow != null)) {
	            return this.onChildCreation(childWindow);
	          }
	        };

	        return Window;

	      })(IWindow);
	    }
	  ]);

	}).call(this);
	;
	/*global angular */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  angular.module('uiGmapgoogle-maps.directives.api').factory('uiGmapWindows', [
	    'uiGmapIWindow', 'uiGmapPlural', 'uiGmapWindowsParentModel', 'uiGmapPromise', 'uiGmapLogger', function(IWindow, Plural, WindowsParentModel, uiGmapPromise, $log) {

	      /*
	      Windows directive where many windows map to the models property
	       */
	      var Windows;
	      return Windows = (function(superClass) {
	        extend(Windows, superClass);

	        function Windows() {
	          this.link = bind(this.link, this);
	          Windows.__super__.constructor.call(this);
	          this.require = ['^' + 'uiGmapGoogleMap', '^?' + 'uiGmapMarkers'];
	          this.template = '<span class="angular-google-maps-windows" ng-transclude></span>';
	          Plural.extend(this);
	          $log.debug(this);
	        }

	        Windows.prototype.link = function(scope, element, attrs, ctrls) {
	          var mapScope, markerCtrl, markerScope;
	          mapScope = ctrls[0].getScope();
	          markerCtrl = ctrls.length > 1 && (ctrls[1] != null) ? ctrls[1] : void 0;
	          markerScope = markerCtrl != null ? markerCtrl.getScope() : void 0;
	          return mapScope.deferred.promise.then((function(_this) {
	            return function(map) {
	              var promise, ref;
	              promise = (markerScope != null ? (ref = markerScope.deferred) != null ? ref.promise : void 0 : void 0) || uiGmapPromise.resolve();
	              return promise.then(function() {
	                var pieces, ref1;
	                pieces = (ref1 = _this.parentModel) != null ? ref1.existingPieces : void 0;
	                if (pieces) {
	                  return pieces.then(function() {
	                    return _this.init(scope, element, attrs, ctrls, map, markerScope);
	                  });
	                } else {
	                  return _this.init(scope, element, attrs, ctrls, map, markerScope);
	                }
	              });
	            };
	          })(this));
	        };

	        Windows.prototype.init = function(scope, element, attrs, ctrls, map, additionalScope) {
	          var parentModel;
	          parentModel = new WindowsParentModel(scope, element, attrs, ctrls, map, additionalScope);
	          Plural.link(scope, parentModel);
	          if (scope.control != null) {
	            scope.control.getGWindows = function() {
	              return parentModel.plurals.map(function(child) {
	                return child.gObject;
	              });
	            };
	            return scope.control.getChildWindows = function() {
	              return parentModel.plurals;
	            };
	          }
	        };

	        return Windows;

	      })(IWindow);
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	Nick Baugh - https://github.com/niftylettuce
	 */


	/*globals angular */

	(function() {
	  angular.module("uiGmapgoogle-maps").directive("uiGmapGoogleMap", ['uiGmapMap', function(uiGmapMap) {
	    return new uiGmapMap();
	  }]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */


	/*
	Map marker directive

	This directive is used to create a marker on an existing map.
	This directive creates a new scope.

	{attribute coords required}  object containing latitude and longitude properties
	{attribute icon optional}    string url to image used for marker icon
	{attribute animate optional} if set to false, the marker won't be animated (on by default)
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapMarker', [
	    '$timeout', 'uiGmapMarker', function($timeout, Marker) {
	      return new Marker($timeout);
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */


	/*
	Map marker directive

	This directive is used to create a marker on an existing map.
	This directive creates a new scope.

	{attribute coords required}  object containing latitude and longitude properties
	{attribute icon optional}    string url to image used for marker icon
	{attribute animate optional} if set to false, the marker won't be animated (on by default)
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapMarkers', [
	    '$timeout', 'uiGmapMarkers', function($timeout, Markers) {
	      return new Markers($timeout);
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	Rick Huizinga - https://plus.google.com/+RickHuizinga
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapPolygon', [
	    'uiGmapPolygon', function(Polygon) {
	      return new Polygon();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Julian Popescu - https://github.com/jpopesculian
	Rick Huizinga - https://plus.google.com/+RickHuizinga
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive("uiGmapCircle", [
	    "uiGmapCircle", function(Circle) {
	      return Circle;
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */

	(function() {
	  angular.module("uiGmapgoogle-maps").directive("uiGmapPolyline", [
	    "uiGmapPolyline", function(Polyline) {
	      return new Polyline();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapPolylines', [
	    'uiGmapPolylines', function(Polylines) {
	      return new Polylines();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	Chentsu Lin - https://github.com/ChenTsuLin
	 */

	(function() {
	  angular.module("uiGmapgoogle-maps").directive("uiGmapRectangle", [
	    "uiGmapLogger", "uiGmapRectangle", function($log, Rectangle) {
	      return Rectangle;
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */


	/*
	Map info window directive

	This directive is used to create an info window on an existing map.
	This directive creates a new scope.

	{attribute coords required}  object containing latitude and longitude properties
	{attribute show optional}    map will show when this expression returns true
	 */

	(function() {
	  angular.module("uiGmapgoogle-maps").directive("uiGmapWindow", [
	    "$timeout", "$compile", "$http", "$templateCache", "uiGmapWindow", function($timeout, $compile, $http, $templateCache, Window) {
	      return new Window($timeout, $compile, $http, $templateCache);
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	 */


	/*
	Map info window directive

	This directive is used to create an info window on an existing map.
	This directive creates a new scope.

	{attribute coords required}  object containing latitude and longitude properties
	{attribute show optional}    map will show when this expression returns true
	 */

	(function() {
	  angular.module("uiGmapgoogle-maps").directive("uiGmapWindows", [
	    "$timeout", "$compile", "$http", "$templateCache", "$interpolate", "uiGmapWindows", function($timeout, $compile, $http, $templateCache, $interpolate, Windows) {
	      return new Windows($timeout, $compile, $http, $templateCache, $interpolate);
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors:
	- Nicolas Laplante https://plus.google.com/108189012221374960701
	- Nicholas McCready - https://twitter.com/nmccready
	 */


	/*
	Map Layer directive

	This directive is used to create any type of Layer from the google maps sdk.
	This directive creates a new scope.

	{attribute show optional}  true (default) shows the trafficlayer otherwise it is hidden
	 */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module('uiGmapgoogle-maps').directive('uiGmapLayer', [
	    '$timeout', 'uiGmapLogger', 'uiGmapLayerParentModel', function($timeout, Logger, LayerParentModel) {
	      var Layer;
	      Layer = (function() {
	        function Layer() {
	          this.link = bind(this.link, this);
	          this.$log = Logger;
	          this.restrict = 'EMA';
	          this.require = '^' + 'uiGmapGoogleMap';
	          this.priority = -1;
	          this.transclude = true;
	          this.template = '<span class=\'angular-google-map-layer\' ng-transclude></span>';
	          this.replace = true;
	          this.scope = {
	            show: '=show',
	            type: '=type',
	            namespace: '=namespace',
	            options: '=options',
	            onCreated: '&oncreated'
	          };
	        }

	        Layer.prototype.link = function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then((function(_this) {
	            return function(map) {
	              if (scope.onCreated != null) {
	                return new LayerParentModel(scope, element, attrs, map, scope.onCreated);
	              } else {
	                return new LayerParentModel(scope, element, attrs, map);
	              }
	            };
	          })(this));
	        };

	        return Layer;

	      })();
	      return new Layer();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Adam Kreitals, kreitals@hotmail.com
	 */


	/*
	mapControl directive

	This directive is used to create a custom control element on an existing map.
	This directive creates a new scope.

	{attribute template required}  	string url of the template to be used for the control
	{attribute position optional}  	string position of the control of the form top-left or TOP_LEFT defaults to TOP_CENTER
	{attribute controller optional}	string controller to be applied to the template
	{attribute index optional}		number index for controlling the order of similarly positioned mapControl elements
	 */

	(function() {
	  angular.module("uiGmapgoogle-maps").directive("uiGmapMapControl", [
	    "uiGmapControl", function(Control) {
	      return new Control();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicholas McCready - https://twitter.com/nmccready
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapDragZoom', [
	    'uiGmapDragZoom', function(DragZoom) {
	      return DragZoom;
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps').directive("uiGmapDrawingManager", [
	    "uiGmapDrawingManager", function(DrawingManager) {
	      return DrawingManager;
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicholas McCready - https://twitter.com/nmccready
	 * Brunt of the work is in DrawFreeHandChildModel
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapFreeDrawPolygons', [
	    'uiGmapApiFreeDrawPolygons', function(FreeDrawPolygons) {
	      return new FreeDrawPolygons();
	    }
	  ]);

	}).call(this);
	;
	/*
	Map Layer directive

	This directive is used to create any type of Layer from the google maps sdk.
	This directive creates a new scope.

	{attribute show optional}  true (default) shows the trafficlayer otherwise it is hidden
	 */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module("uiGmapgoogle-maps").directive("uiGmapMapType", [
	    "$timeout", "uiGmapLogger", "uiGmapMapTypeParentModel", function($timeout, Logger, MapTypeParentModel) {
	      var MapType;
	      MapType = (function() {
	        function MapType() {
	          this.link = bind(this.link, this);
	          this.$log = Logger;
	          this.restrict = "EMA";
	          this.require = '^' + 'uiGmapGoogleMap';
	          this.priority = -1;
	          this.transclude = true;
	          this.template = '<span class=\"angular-google-map-layer\" ng-transclude></span>';
	          this.replace = true;
	          this.scope = {
	            show: "=show",
	            options: '=options',
	            refresh: '=refresh',
	            id: '@'
	          };
	        }

	        MapType.prototype.link = function(scope, element, attrs, mapCtrl) {
	          return mapCtrl.getScope().deferred.promise.then((function(_this) {
	            return function(map) {
	              return new MapTypeParentModel(scope, element, attrs, map);
	            };
	          })(this));
	        };

	        return MapType;

	      })();
	      return new MapType();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors
	Nicolas Laplante - https://plus.google.com/108189012221374960701
	Nicholas McCready - https://twitter.com/nmccready
	Rick Huizinga - https://plus.google.com/+RickHuizinga
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapPolygons', [
	    'uiGmapPolygons', function(Polygons) {
	      return new Polygons();
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors:
	- Nicolas Laplante https://plus.google.com/108189012221374960701
	- Nicholas McCready - https://twitter.com/nmccready
	- Carrie Kengle - http://about.me/carrie
	 */


	/*
	Places Search Box directive

	This directive is used to create a Places Search Box.
	This directive creates a new scope.

	{attribute input required}  HTMLInputElement
	{attribute options optional} The options that can be set on a SearchBox object (google.maps.places.SearchBoxOptions object specification)
	 */

	(function() {
	  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  angular.module('uiGmapgoogle-maps').directive('uiGmapSearchBox', [
	    'uiGmapGoogleMapApi', 'uiGmapLogger', 'uiGmapSearchBoxParentModel', '$http', '$templateCache', '$compile', function(GoogleMapApi, Logger, SearchBoxParentModel, $http, $templateCache, $compile) {
	      var SearchBox;
	      SearchBox = (function() {
	        SearchBox.prototype.require = 'ngModel';

	        function SearchBox() {
	          this.link = bind(this.link, this);
	          this.$log = Logger;
	          this.restrict = 'EMA';
	          this.require = '^' + 'uiGmapGoogleMap';
	          this.priority = -1;
	          this.transclude = true;
	          this.template = '<span class=\'angular-google-map-search\' ng-transclude></span>';
	          this.replace = true;
	          this.scope = {
	            template: '=template',
	            events: '=events',
	            position: '=?position',
	            options: '=?options',
	            parentdiv: '=?parentdiv',
	            ngModel: "=?"
	          };
	        }

	        SearchBox.prototype.link = function(scope, element, attrs, mapCtrl) {
	          return GoogleMapApi.then((function(_this) {
	            return function(maps) {
	              if (scope.template == null) {
	                $templateCache.put('uigmap-searchbox-default.tpl.html', '<input type="text">');
	                scope.template = 'uigmap-searchbox-default.tpl.html';
	              }
	              return $http.get(scope.template, {
	                cache: $templateCache
	              }).success(function(template) {
	                if (angular.isUndefined(scope.events)) {
	                  _this.$log.error('searchBox: the events property is required');
	                  return;
	                }
	                return mapCtrl.getScope().deferred.promise.then(function(map) {
	                  var ctrlPosition;
	                  ctrlPosition = angular.isDefined(scope.position) ? scope.position.toUpperCase().replace(/-/g, '_') : 'TOP_LEFT';
	                  if (!maps.ControlPosition[ctrlPosition]) {
	                    _this.$log.error('searchBox: invalid position property');
	                    return;
	                  }
	                  return new SearchBoxParentModel(scope, element, attrs, map, ctrlPosition, $compile(template)(scope));
	                });
	              });
	            };
	          })(this));
	        };

	        return SearchBox;

	      })();
	      return new SearchBox();
	    }
	  ]);

	}).call(this);
	;(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapShow', [
	    '$animate', 'uiGmapLogger', function($animate, $log) {
	      return {
	        scope: {
	          'uiGmapShow': '=',
	          'uiGmapAfterShow': '&',
	          'uiGmapAfterHide': '&'
	        },
	        link: function(scope, element) {
	          var angular_post_1_3_handle, angular_pre_1_3_handle, handle;
	          angular_post_1_3_handle = function(animateAction, cb) {
	            return $animate[animateAction](element, 'ng-hide').then(function() {
	              return cb();
	            });
	          };
	          angular_pre_1_3_handle = function(animateAction, cb) {
	            return $animate[animateAction](element, 'ng-hide', cb);
	          };
	          handle = function(animateAction, cb) {
	            if (angular.version.major > 1) {
	              return $log.error("uiGmapShow is not supported for Angular Major greater than 1.\nYour Major is " + angular.version.major + "\"");
	            }
	            if (angular.version.major === 1 && angular.version.minor < 3) {
	              return angular_pre_1_3_handle(animateAction, cb);
	            }
	            return angular_post_1_3_handle(animateAction, cb);
	          };
	          return scope.$watch('uiGmapShow', function(show) {
	            if (show) {
	              handle('removeClass', scope.uiGmapAfterShow);
	            }
	            if (!show) {
	              return handle('addClass', scope.uiGmapAfterHide);
	            }
	          });
	        }
	      };
	    }
	  ]);

	}).call(this);
	;
	/*
	@authors:
	- Nicholas McCready - https://twitter.com/nmccready
	 */


	/*
	StreetViewPanorama Directive to care of basic initialization of StreetViewPanorama
	 */

	(function() {
	  angular.module('uiGmapgoogle-maps').directive('uiGmapStreetViewPanorama', [
	    'uiGmapGoogleMapApi', 'uiGmapLogger', 'uiGmapGmapUtil', 'uiGmapEventsHelper', function(GoogleMapApi, $log, GmapUtil, EventsHelper) {
	      var name;
	      name = 'uiGmapStreetViewPanorama';
	      return {
	        restrict: 'EMA',
	        template: '<div class="angular-google-map-street-view-panorama"></div>',
	        replace: true,
	        scope: {
	          focalcoord: '=',
	          radius: '=?',
	          events: '=?',
	          options: '=?',
	          control: '=?',
	          povoptions: '=?',
	          imagestatus: '='
	        },
	        link: function(scope, element, attrs) {
	          return GoogleMapApi.then((function(_this) {
	            return function(maps) {
	              var clean, create, didCreateOptionsFromDirective, firstTime, handleSettings, listeners, opts, pano, povOpts, sv;
	              pano = void 0;
	              sv = void 0;
	              didCreateOptionsFromDirective = false;
	              listeners = void 0;
	              opts = null;
	              povOpts = null;
	              clean = function() {
	                EventsHelper.removeEvents(listeners);
	                if (pano != null) {
	                  pano.unbind('position');
	                  pano.setVisible(false);
	                }
	                if (sv != null) {
	                  if ((sv != null ? sv.setVisible : void 0) != null) {
	                    sv.setVisible(false);
	                  }
	                  return sv = void 0;
	                }
	              };
	              handleSettings = function(perspectivePoint, focalPoint) {
	                var heading;
	                heading = google.maps.geometry.spherical.computeHeading(perspectivePoint, focalPoint);
	                didCreateOptionsFromDirective = true;
	                scope.radius = scope.radius || 50;
	                povOpts = angular.extend({
	                  heading: heading,
	                  zoom: 1,
	                  pitch: 0
	                }, scope.povoptions || {});
	                opts = opts = angular.extend({
	                  navigationControl: false,
	                  addressControl: false,
	                  linksControl: false,
	                  position: perspectivePoint,
	                  pov: povOpts,
	                  visible: true
	                }, scope.options || {});
	                return didCreateOptionsFromDirective = false;
	              };
	              create = function() {
	                var focalPoint;
	                if (!scope.focalcoord) {
	                  $log.error(name + ": focalCoord needs to be defined");
	                  return;
	                }
	                if (!scope.radius) {
	                  $log.error(name + ": needs a radius to set the camera view from its focal target.");
	                  return;
	                }
	                clean();
	                if (sv == null) {
	                  sv = new google.maps.StreetViewService();
	                }
	                if (scope.events) {
	                  listeners = EventsHelper.setEvents(sv, scope, scope);
	                }
	                focalPoint = GmapUtil.getCoords(scope.focalcoord);
	                return sv.getPanoramaByLocation(focalPoint, scope.radius, function(streetViewPanoramaData, status) {
	                  var ele, perspectivePoint, ref;
	                  if (scope.imagestatus != null) {
	                    scope.imagestatus = status;
	                  }
	                  if (((ref = scope.events) != null ? ref.image_status_changed : void 0) != null) {
	                    scope.events.image_status_changed(sv, 'image_status_changed', scope, status);
	                  }
	                  if (status === "OK") {
	                    perspectivePoint = streetViewPanoramaData.location.latLng;
	                    handleSettings(perspectivePoint, focalPoint);
	                    ele = element[0];
	                    return pano = new google.maps.StreetViewPanorama(ele, opts);
	                  }
	                });
	              };
	              if (scope.control != null) {
	                scope.control.getOptions = function() {
	                  return opts;
	                };
	                scope.control.getPovOptions = function() {
	                  return povOpts;
	                };
	                scope.control.getGObject = function() {
	                  return sv;
	                };
	                scope.control.getGPano = function() {
	                  return pano;
	                };
	              }
	              scope.$watch('options', function(newValue, oldValue) {
	                if (newValue === oldValue || newValue === opts || didCreateOptionsFromDirective) {
	                  return;
	                }
	                return create();
	              });
	              firstTime = true;
	              scope.$watch('focalcoord', function(newValue, oldValue) {
	                if (newValue === oldValue && !firstTime) {
	                  return;
	                }
	                if (newValue == null) {
	                  return;
	                }
	                firstTime = false;
	                return create();
	              });
	              return scope.$on('$destroy', function() {
	                return clean();
	              });
	            };
	          })(this));
	        }
	      };
	    }
	  ]);

	}).call(this);
	;angular.module('uiGmapgoogle-maps.wrapped')
	.service('uiGmapuuid', function() {
	  //BEGIN REPLACE
	  /* istanbul ignore next */
	  /*
	 Version: core-1.0
	 The MIT License: Copyright (c) 2012 LiosK.
	*/
	function UUID(){}UUID.generate=function(){var a=UUID._gri,b=UUID._ha;return b(a(32),8)+"-"+b(a(16),4)+"-"+b(16384|a(12),4)+"-"+b(32768|a(14),4)+"-"+b(a(48),12)};UUID._gri=function(a){return 0>a?NaN:30>=a?0|Math.random()*(1<<a):53>=a?(0|1073741824*Math.random())+1073741824*(0|Math.random()*(1<<a-30)):NaN};UUID._ha=function(a,b){for(var c=a.toString(16),d=b-c.length,e="0";0<d;d>>>=1,e+=e)d&1&&(c=e+c);return c};

	  //END REPLACE
	return UUID;
	});
	;// wrap the utility libraries needed in ./lib
	// http://google-maps-utility-library-v3.googlecode.com/svn/
	angular.module('uiGmapgoogle-maps.wrapped')
	.service('uiGmapGoogleMapsUtilV3', function () {
	  return {
	    init: _.once(function () {
	      //BEGIN REPLACE
	      /* istanbul ignore next */
	      +function(){
	      function ClusterIcon(cluster,styles){cluster.getMarkerClusterer().extend(ClusterIcon,google.maps.OverlayView),this.cluster_=cluster,this.className_=cluster.getMarkerClusterer().getClusterClass(),this.styles_=styles,this.center_=null,this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(cluster.getMap())}function Cluster(mc){this.markerClusterer_=mc,this.map_=mc.getMap(),this.gridSize_=mc.getGridSize(),this.minClusterSize_=mc.getMinimumClusterSize(),this.averageCenter_=mc.getAverageCenter(),this.hideLabel_=mc.getHideLabel(),this.markers_=[],this.center_=null,this.bounds_=null,this.clusterIcon_=new ClusterIcon(this,mc.getStyles())}function MarkerClusterer(map,opt_markers,opt_options){this.extend(MarkerClusterer,google.maps.OverlayView),opt_markers=opt_markers||[],opt_options=opt_options||{},this.markers_=[],this.clusters_=[],this.listeners_=[],this.activeMap_=null,this.ready_=!1,this.gridSize_=opt_options.gridSize||60,this.minClusterSize_=opt_options.minimumClusterSize||2,this.maxZoom_=opt_options.maxZoom||null,this.styles_=opt_options.styles||[],this.title_=opt_options.title||"",this.zoomOnClick_=!0,void 0!==opt_options.zoomOnClick&&(this.zoomOnClick_=opt_options.zoomOnClick),this.averageCenter_=!1,void 0!==opt_options.averageCenter&&(this.averageCenter_=opt_options.averageCenter),this.ignoreHidden_=!1,void 0!==opt_options.ignoreHidden&&(this.ignoreHidden_=opt_options.ignoreHidden),this.enableRetinaIcons_=!1,void 0!==opt_options.enableRetinaIcons&&(this.enableRetinaIcons_=opt_options.enableRetinaIcons),this.hideLabel_=!1,void 0!==opt_options.hideLabel&&(this.hideLabel_=opt_options.hideLabel),this.imagePath_=opt_options.imagePath||MarkerClusterer.IMAGE_PATH,this.imageExtension_=opt_options.imageExtension||MarkerClusterer.IMAGE_EXTENSION,this.imageSizes_=opt_options.imageSizes||MarkerClusterer.IMAGE_SIZES,this.calculator_=opt_options.calculator||MarkerClusterer.CALCULATOR,this.batchSize_=opt_options.batchSize||MarkerClusterer.BATCH_SIZE,this.batchSizeIE_=opt_options.batchSizeIE||MarkerClusterer.BATCH_SIZE_IE,this.clusterClass_=opt_options.clusterClass||"cluster",-1!==navigator.userAgent.toLowerCase().indexOf("msie")&&(this.batchSize_=this.batchSizeIE_),this.setupStyles_(),this.addMarkers(opt_markers,!0),this.setMap(map)}ClusterIcon.prototype.onAdd=function(){var cMouseDownInCluster,cDraggingMapByCluster,cClusterIcon=this;this.div_=document.createElement("div"),this.div_.className=this.className_,this.visible_&&this.show(),this.getPanes().overlayMouseTarget.appendChild(this.div_),this.boundsChangedListener_=google.maps.event.addListener(this.getMap(),"bounds_changed",function(){cDraggingMapByCluster=cMouseDownInCluster}),google.maps.event.addDomListener(this.div_,"mousedown",function(){cMouseDownInCluster=!0,cDraggingMapByCluster=!1}),google.maps.event.addDomListener(this.div_,"click",function(e){if(cMouseDownInCluster=!1,!cDraggingMapByCluster){var theBounds,mz,mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,"click",cClusterIcon.cluster_),google.maps.event.trigger(mc,"clusterclick",cClusterIcon.cluster_),mc.getZoomOnClick()&&(mz=mc.getMaxZoom(),theBounds=cClusterIcon.cluster_.getBounds(),mc.getMap().fitBounds(theBounds),setTimeout(function(){mc.getMap().fitBounds(theBounds),null!==mz&&mc.getMap().getZoom()>mz&&mc.getMap().setZoom(mz+1)},100)),e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation()}}),google.maps.event.addDomListener(this.div_,"mouseover",function(){var mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,"mouseover",cClusterIcon.cluster_)}),google.maps.event.addDomListener(this.div_,"mouseout",function(){var mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,"mouseout",cClusterIcon.cluster_)})},ClusterIcon.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),google.maps.event.removeListener(this.boundsChangedListener_),google.maps.event.clearInstanceListeners(this.div_),this.div_.parentNode.removeChild(this.div_),this.div_=null)},ClusterIcon.prototype.draw=function(){if(this.visible_){var pos=this.getPosFromLatLng_(this.center_);this.div_.style.top=pos.y+"px",this.div_.style.left=pos.x+"px"}},ClusterIcon.prototype.hide=function(){this.div_&&(this.div_.style.display="none"),this.visible_=!1},ClusterIcon.prototype.show=function(){if(this.div_){var img="",bp=this.backgroundPosition_.split(" "),spriteH=parseInt(bp[0].trim(),10),spriteV=parseInt(bp[1].trim(),10),pos=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(pos),img="<img src='"+this.url_+"' style='position: absolute; top: "+spriteV+"px; left: "+spriteH+"px; ",img+=this.cluster_.getMarkerClusterer().enableRetinaIcons_?"width: "+this.width_+"px;height: "+this.height_+"px;":"clip: rect("+-1*spriteV+"px, "+(-1*spriteH+this.width_)+"px, "+(-1*spriteV+this.height_)+"px, "+-1*spriteH+"px);",img+="'>",this.div_.innerHTML=img+"<div style='position: absolute;top: "+this.anchorText_[0]+"px;left: "+this.anchorText_[1]+"px;color: "+this.textColor_+";font-size: "+this.textSize_+"px;font-family: "+this.fontFamily_+";font-weight: "+this.fontWeight_+";font-style: "+this.fontStyle_+";text-decoration: "+this.textDecoration_+";text-align: center;width: "+this.width_+"px;line-height:"+this.height_+"px;'>"+(this.cluster_.hideLabel_?" ":this.sums_.text)+"</div>",this.div_.title="undefined"==typeof this.sums_.title||""===this.sums_.title?this.cluster_.getMarkerClusterer().getTitle():this.sums_.title,this.div_.style.display=""}this.visible_=!0},ClusterIcon.prototype.useStyle=function(sums){this.sums_=sums;var index=Math.max(0,sums.index-1);index=Math.min(this.styles_.length-1,index);var style=this.styles_[index];this.url_=style.url,this.height_=style.height,this.width_=style.width,this.anchorText_=style.anchorText||[0,0],this.anchorIcon_=style.anchorIcon||[parseInt(this.height_/2,10),parseInt(this.width_/2,10)],this.textColor_=style.textColor||"black",this.textSize_=style.textSize||11,this.textDecoration_=style.textDecoration||"none",this.fontWeight_=style.fontWeight||"bold",this.fontStyle_=style.fontStyle||"normal",this.fontFamily_=style.fontFamily||"Arial,sans-serif",this.backgroundPosition_=style.backgroundPosition||"0 0"},ClusterIcon.prototype.setCenter=function(center){this.center_=center},ClusterIcon.prototype.createCss=function(pos){var style=[];return style.push("cursor: pointer;"),style.push("position: absolute; top: "+pos.y+"px; left: "+pos.x+"px;"),style.push("width: "+this.width_+"px; height: "+this.height_+"px;"),style.join("")},ClusterIcon.prototype.getPosFromLatLng_=function(latlng){var pos=this.getProjection().fromLatLngToDivPixel(latlng);return pos.x-=this.anchorIcon_[1],pos.y-=this.anchorIcon_[0],pos.x=parseInt(pos.x,10),pos.y=parseInt(pos.y,10),pos},Cluster.prototype.getSize=function(){return this.markers_.length},Cluster.prototype.getMarkers=function(){return this.markers_},Cluster.prototype.getCenter=function(){return this.center_},Cluster.prototype.getMap=function(){return this.map_},Cluster.prototype.getMarkerClusterer=function(){return this.markerClusterer_},Cluster.prototype.getBounds=function(){var i,bounds=new google.maps.LatLngBounds(this.center_,this.center_),markers=this.getMarkers();for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());return bounds},Cluster.prototype.remove=function(){this.clusterIcon_.setMap(null),this.markers_=[],delete this.markers_},Cluster.prototype.addMarker=function(marker){var i,mCount,mz;if(this.isMarkerAlreadyAdded_(marker))return!1;if(this.center_){if(this.averageCenter_){var l=this.markers_.length+1,lat=(this.center_.lat()*(l-1)+marker.getPosition().lat())/l,lng=(this.center_.lng()*(l-1)+marker.getPosition().lng())/l;this.center_=new google.maps.LatLng(lat,lng),this.calculateBounds_()}}else this.center_=marker.getPosition(),this.calculateBounds_();if(marker.isAdded=!0,this.markers_.push(marker),mCount=this.markers_.length,mz=this.markerClusterer_.getMaxZoom(),null!==mz&&this.map_.getZoom()>mz)marker.getMap()!==this.map_&&marker.setMap(this.map_);else if(mCount<this.minClusterSize_)marker.getMap()!==this.map_&&marker.setMap(this.map_);else if(mCount===this.minClusterSize_)for(i=0;mCount>i;i++)this.markers_[i].setMap(null);else marker.setMap(null);return!0},Cluster.prototype.isMarkerInClusterBounds=function(marker){return this.bounds_.contains(marker.getPosition())},Cluster.prototype.calculateBounds_=function(){var bounds=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(bounds)},Cluster.prototype.updateIcon_=function(){var mCount=this.markers_.length,mz=this.markerClusterer_.getMaxZoom();if(null!==mz&&this.map_.getZoom()>mz)return void this.clusterIcon_.hide();if(mCount<this.minClusterSize_)return void this.clusterIcon_.hide();var numStyles=this.markerClusterer_.getStyles().length,sums=this.markerClusterer_.getCalculator()(this.markers_,numStyles);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.useStyle(sums),this.clusterIcon_.show()},Cluster.prototype.isMarkerAlreadyAdded_=function(marker){for(var i=0,n=this.markers_.length;n>i;i++)if(marker===this.markers_[i])return!0;return!1},MarkerClusterer.prototype.onAdd=function(){var cMarkerClusterer=this;this.activeMap_=this.getMap(),this.ready_=!0,this.repaint(),this.listeners_=[google.maps.event.addListener(this.getMap(),"zoom_changed",function(){cMarkerClusterer.resetViewport_(!1),(this.getZoom()===(this.get("minZoom")||0)||this.getZoom()===this.get("maxZoom"))&&google.maps.event.trigger(this,"idle")}),google.maps.event.addListener(this.getMap(),"idle",function(){cMarkerClusterer.redraw_()})]},MarkerClusterer.prototype.onRemove=function(){var i;for(i=0;i<this.markers_.length;i++)this.markers_[i].getMap()!==this.activeMap_&&this.markers_[i].setMap(this.activeMap_);for(i=0;i<this.clusters_.length;i++)this.clusters_[i].remove();for(this.clusters_=[],i=0;i<this.listeners_.length;i++)google.maps.event.removeListener(this.listeners_[i]);this.listeners_=[],this.activeMap_=null,this.ready_=!1},MarkerClusterer.prototype.draw=function(){},MarkerClusterer.prototype.setupStyles_=function(){var i,size;if(!(this.styles_.length>0))for(i=0;i<this.imageSizes_.length;i++)size=this.imageSizes_[i],this.styles_.push({url:this.imagePath_+(i+1)+"."+this.imageExtension_,height:size,width:size})},MarkerClusterer.prototype.fitMapToMarkers=function(){var i,markers=this.getMarkers(),bounds=new google.maps.LatLngBounds;for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());this.getMap().fitBounds(bounds)},MarkerClusterer.prototype.getGridSize=function(){return this.gridSize_},MarkerClusterer.prototype.setGridSize=function(gridSize){this.gridSize_=gridSize},MarkerClusterer.prototype.getMinimumClusterSize=function(){return this.minClusterSize_},MarkerClusterer.prototype.setMinimumClusterSize=function(minimumClusterSize){this.minClusterSize_=minimumClusterSize},MarkerClusterer.prototype.getMaxZoom=function(){return this.maxZoom_},MarkerClusterer.prototype.setMaxZoom=function(maxZoom){this.maxZoom_=maxZoom},MarkerClusterer.prototype.getStyles=function(){return this.styles_},MarkerClusterer.prototype.setStyles=function(styles){this.styles_=styles},MarkerClusterer.prototype.getTitle=function(){return this.title_},MarkerClusterer.prototype.setTitle=function(title){this.title_=title},MarkerClusterer.prototype.getZoomOnClick=function(){return this.zoomOnClick_},MarkerClusterer.prototype.setZoomOnClick=function(zoomOnClick){this.zoomOnClick_=zoomOnClick},MarkerClusterer.prototype.getAverageCenter=function(){return this.averageCenter_},MarkerClusterer.prototype.setAverageCenter=function(averageCenter){this.averageCenter_=averageCenter},MarkerClusterer.prototype.getIgnoreHidden=function(){return this.ignoreHidden_},MarkerClusterer.prototype.setIgnoreHidden=function(ignoreHidden){this.ignoreHidden_=ignoreHidden},MarkerClusterer.prototype.getEnableRetinaIcons=function(){return this.enableRetinaIcons_},MarkerClusterer.prototype.setEnableRetinaIcons=function(enableRetinaIcons){this.enableRetinaIcons_=enableRetinaIcons},MarkerClusterer.prototype.getImageExtension=function(){return this.imageExtension_},MarkerClusterer.prototype.setImageExtension=function(imageExtension){this.imageExtension_=imageExtension},MarkerClusterer.prototype.getImagePath=function(){return this.imagePath_},MarkerClusterer.prototype.setImagePath=function(imagePath){this.imagePath_=imagePath},MarkerClusterer.prototype.getImageSizes=function(){return this.imageSizes_},MarkerClusterer.prototype.setImageSizes=function(imageSizes){this.imageSizes_=imageSizes},MarkerClusterer.prototype.getCalculator=function(){return this.calculator_},MarkerClusterer.prototype.setCalculator=function(calculator){this.calculator_=calculator},MarkerClusterer.prototype.setHideLabel=function(hideLabel){this.hideLabel_=hideLabel},MarkerClusterer.prototype.getHideLabel=function(){return this.hideLabel_},MarkerClusterer.prototype.getBatchSizeIE=function(){return this.batchSizeIE_},MarkerClusterer.prototype.setBatchSizeIE=function(batchSizeIE){this.batchSizeIE_=batchSizeIE},MarkerClusterer.prototype.getClusterClass=function(){return this.clusterClass_},MarkerClusterer.prototype.setClusterClass=function(clusterClass){this.clusterClass_=clusterClass},MarkerClusterer.prototype.getMarkers=function(){return this.markers_},MarkerClusterer.prototype.getTotalMarkers=function(){return this.markers_.length},MarkerClusterer.prototype.getClusters=function(){return this.clusters_},MarkerClusterer.prototype.getTotalClusters=function(){return this.clusters_.length},MarkerClusterer.prototype.addMarker=function(marker,opt_nodraw){this.pushMarkerTo_(marker),opt_nodraw||this.redraw_()},MarkerClusterer.prototype.addMarkers=function(markers,opt_nodraw){var key;for(key in markers)markers.hasOwnProperty(key)&&this.pushMarkerTo_(markers[key]);opt_nodraw||this.redraw_()},MarkerClusterer.prototype.pushMarkerTo_=function(marker){if(marker.getDraggable()){var cMarkerClusterer=this;google.maps.event.addListener(marker,"dragend",function(){cMarkerClusterer.ready_&&(this.isAdded=!1,cMarkerClusterer.repaint())})}marker.isAdded=!1,this.markers_.push(marker)},MarkerClusterer.prototype.removeMarker=function(marker,opt_nodraw,opt_noMapRemove){var removeFromMap=!0&&!opt_noMapRemove,removed=this.removeMarker_(marker,removeFromMap);return!opt_nodraw&&removed&&this.repaint(),removed},MarkerClusterer.prototype.removeMarkers=function(markers,opt_nodraw,opt_noMapRemove){var i,r,removed=!1,removeFromMap=!0&&!opt_noMapRemove;for(i=0;i<markers.length;i++)r=this.removeMarker_(markers[i],removeFromMap),removed=removed||r;return!opt_nodraw&&removed&&this.repaint(),removed},MarkerClusterer.prototype.removeMarker_=function(marker,removeFromMap){var i,index=-1;if(this.markers_.indexOf)index=this.markers_.indexOf(marker);else for(i=0;i<this.markers_.length;i++)if(marker===this.markers_[i]){index=i;break}return-1===index?!1:(removeFromMap&&marker.setMap(null),this.markers_.splice(index,1),!0)},MarkerClusterer.prototype.clearMarkers=function(){this.resetViewport_(!0),this.markers_=[]},MarkerClusterer.prototype.repaint=function(){var oldClusters=this.clusters_.slice();this.clusters_=[],this.resetViewport_(!1),this.redraw_(),setTimeout(function(){var i;for(i=0;i<oldClusters.length;i++)oldClusters[i].remove()},0)},MarkerClusterer.prototype.getExtendedBounds=function(bounds){var projection=this.getProjection(),tr=new google.maps.LatLng(bounds.getNorthEast().lat(),bounds.getNorthEast().lng()),bl=new google.maps.LatLng(bounds.getSouthWest().lat(),bounds.getSouthWest().lng()),trPix=projection.fromLatLngToDivPixel(tr);trPix.x+=this.gridSize_,trPix.y-=this.gridSize_;var blPix=projection.fromLatLngToDivPixel(bl);blPix.x-=this.gridSize_,blPix.y+=this.gridSize_;var ne=projection.fromDivPixelToLatLng(trPix),sw=projection.fromDivPixelToLatLng(blPix);return bounds.extend(ne),bounds.extend(sw),bounds},MarkerClusterer.prototype.redraw_=function(){this.createClusters_(0)},MarkerClusterer.prototype.resetViewport_=function(opt_hide){var i,marker;for(i=0;i<this.clusters_.length;i++)this.clusters_[i].remove();for(this.clusters_=[],i=0;i<this.markers_.length;i++)marker=this.markers_[i],marker.isAdded=!1,opt_hide&&marker.setMap(null)},MarkerClusterer.prototype.distanceBetweenPoints_=function(p1,p2){var R=6371,dLat=(p2.lat()-p1.lat())*Math.PI/180,dLon=(p2.lng()-p1.lng())*Math.PI/180,a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(p1.lat()*Math.PI/180)*Math.cos(p2.lat()*Math.PI/180)*Math.sin(dLon/2)*Math.sin(dLon/2),c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),d=R*c;return d},MarkerClusterer.prototype.isMarkerInBounds_=function(marker,bounds){return bounds.contains(marker.getPosition())},MarkerClusterer.prototype.addToClosestCluster_=function(marker){var i,d,cluster,center,distance=4e4,clusterToAddTo=null;for(i=0;i<this.clusters_.length;i++)cluster=this.clusters_[i],center=cluster.getCenter(),center&&(d=this.distanceBetweenPoints_(center,marker.getPosition()),distance>d&&(distance=d,clusterToAddTo=cluster));clusterToAddTo&&clusterToAddTo.isMarkerInClusterBounds(marker)?clusterToAddTo.addMarker(marker):(cluster=new Cluster(this),cluster.addMarker(marker),this.clusters_.push(cluster))},MarkerClusterer.prototype.createClusters_=function(iFirst){var i,marker,mapBounds,cMarkerClusterer=this;if(this.ready_){0===iFirst&&(google.maps.event.trigger(this,"clusteringbegin",this),"undefined"!=typeof this.timerRefStatic&&(clearTimeout(this.timerRefStatic),delete this.timerRefStatic)),mapBounds=this.getMap().getZoom()>3?new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(),this.getMap().getBounds().getNorthEast()):new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472,-178.48388434375),new google.maps.LatLng(-85.08136444384544,178.00048865625));var bounds=this.getExtendedBounds(mapBounds),iLast=Math.min(iFirst+this.batchSize_,this.markers_.length);for(i=iFirst;iLast>i;i++)marker=this.markers_[i],!marker.isAdded&&this.isMarkerInBounds_(marker,bounds)&&(!this.ignoreHidden_||this.ignoreHidden_&&marker.getVisible())&&this.addToClosestCluster_(marker);if(iLast<this.markers_.length)this.timerRefStatic=setTimeout(function(){cMarkerClusterer.createClusters_(iLast)},0);else for(delete this.timerRefStatic,google.maps.event.trigger(this,"clusteringend",this),i=0;i<this.clusters_.length;i++)this.clusters_[i].updateIcon_()}},MarkerClusterer.prototype.extend=function(obj1,obj2){return function(object){var property;for(property in object.prototype)this.prototype[property]=object.prototype[property];return this}.apply(obj1,[obj2])},MarkerClusterer.CALCULATOR=function(markers,numStyles){for(var index=0,title="",count=markers.length.toString(),dv=count;0!==dv;)dv=parseInt(dv/10,10),index++;return index=Math.min(index,numStyles),{text:count,index:index,title:title}},MarkerClusterer.BATCH_SIZE=2e3,MarkerClusterer.BATCH_SIZE_IE=500,MarkerClusterer.IMAGE_PATH="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/images/m",MarkerClusterer.IMAGE_EXTENSION="png",MarkerClusterer.IMAGE_SIZES=[53,56,66,78,90],"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")});
	/**
	 *  google-maps-utility-library-v3-infobox
	 *
	 * @version: 1.1.14
	 * @author: Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)
	 * @contributors: Nicholas McCready
	 * @date: Fri May 13 2016 16:35:27 GMT-0400 (EDT)
	 * @license: Apache License 2.0
	 */
	/**
	 * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.
	 *  <p>
	 *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several
	 *  additional properties for advanced styling. An InfoBox can also be used as a map label.
	 *  <p>
	 *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.
	 */

	/*jslint browser:true */
	/*global google */

	/**
	 * @name InfoBoxOptions
	 * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.
	 * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).
	 * @property {boolean} [disableAutoPan=false] Disable auto-pan on <tt>open</tt>.
	 * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.
	 * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox
	 *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)
	 *  to the map pixel corresponding to <tt>position</tt>.
	 * @property {LatLng} position The geographic location at which to display the InfoBox.
	 * @property {number} zIndex The CSS z-index style value for the InfoBox.
	 *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.
	 * @property {string} [boxClass="infoBox"] The name of the CSS class defining the styles for the InfoBox container.
	 * @property {Object} [boxStyle] An object literal whose properties define specific CSS
	 *  style values to be applied to the InfoBox. Style values defined here override those that may
	 *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the
	 *  InfoBox has been created, all previously set styles (except those defined in the style sheet)
	 *  are removed from the InfoBox before the new style values are applied.
	 * @property {string} closeBoxMargin The CSS margin style value for the close box.
	 *  The default is "2px" (a 2-pixel margin on all sides).
	 * @property {string} closeBoxURL The URL of the image representing the close box.
	 *  Note: The default is the URL for Google's standard close box.
	 *  Set this property to "" if no close box is required.
	 * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the
	 *  map edge after an auto-pan.
	 * @property {boolean} [isHidden=false] Hide the InfoBox on <tt>open</tt>.
	 *  [Deprecated in favor of the <tt>visible</tt> property.]
	 * @property {boolean} [visible=true] Show the InfoBox on <tt>open</tt>.
	 * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>
	 *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).
	 * @property {string} pane The pane where the InfoBox is to appear (default is "floatPane").
	 *  Set the pane to "mapPane" if the InfoBox is being used as a map label.
	 *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.
	 * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,
	 *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox
	 *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set
	 *  this property to <tt>true</tt> if the InfoBox is being used as a map label.
	 */

	/**
	 * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.
	 *  Call <tt>InfoBox.open</tt> to add the box to the map.
	 * @constructor
	 * @param {InfoBoxOptions} [opt_opts]
	 */
	function InfoBox(opt_opts) {

	  opt_opts = opt_opts || {};

	  google.maps.OverlayView.apply(this, arguments);

	  // Standard options (in common with google.maps.InfoWindow):
	  //
	  this.content_ = opt_opts.content || "";
	  this.disableAutoPan_ = opt_opts.disableAutoPan || false;
	  this.maxWidth_ = opt_opts.maxWidth || 0;
	  this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);
	  this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);
	  this.zIndex_ = opt_opts.zIndex || null;

	  // Additional options (unique to InfoBox):
	  //
	  this.boxClass_ = opt_opts.boxClass || "infoBox";
	  this.boxStyle_ = opt_opts.boxStyle || {};
	  this.closeBoxMargin_ = opt_opts.closeBoxMargin || "2px";
	  this.closeBoxURL_ = opt_opts.closeBoxURL || "http://www.google.com/intl/en_us/mapfiles/close.gif";
	  if (opt_opts.closeBoxURL === "") {
	    this.closeBoxURL_ = "";
	  }
	  this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);

	  if (typeof opt_opts.visible === "undefined") {
	    if (typeof opt_opts.isHidden === "undefined") {
	      opt_opts.visible = true;
	    } else {
	      opt_opts.visible = !opt_opts.isHidden;
	    }
	  }
	  this.isHidden_ = !opt_opts.visible;

	  this.alignBottom_ = opt_opts.alignBottom || false;
	  this.pane_ = opt_opts.pane || "floatPane";
	  this.enableEventPropagation_ = opt_opts.enableEventPropagation || false;

	  this.div_ = null;
	  this.closeListener_ = null;
	  this.moveListener_ = null;
	  this.contextListener_ = null;
	  this.eventListeners_ = null;
	  this.fixedWidthSet_ = null;
	}

	/* InfoBox extends OverlayView in the Google Maps API v3.
	 */
	InfoBox.prototype = new google.maps.OverlayView();

	/**
	 * Creates the DIV representing the InfoBox.
	 * @private
	 */
	InfoBox.prototype.createInfoBoxDiv_ = function () {

	  var i;
	  var events;
	  var bw;
	  var me = this;

	  // This handler prevents an event in the InfoBox from being passed on to the map.
	  //
	  var cancelHandler = function (e) {
	    e.cancelBubble = true;
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	  };

	  // This handler ignores the current event in the InfoBox and conditionally prevents
	  // the event from being passed on to the map. It is used for the contextmenu event.
	  //
	  var ignoreHandler = function (e) {

	    e.returnValue = false;

	    if (e.preventDefault) {

	      e.preventDefault();
	    }

	    if (!me.enableEventPropagation_) {

	      cancelHandler(e);
	    }
	  };

	  if (!this.div_) {

	    this.div_ = document.createElement("div");

	    this.setBoxStyle_();

	    if (typeof this.content_.nodeType === "undefined") {
	      this.div_.innerHTML = this.getCloseBoxImg_() + this.content_;
	    } else {
	      this.div_.innerHTML = this.getCloseBoxImg_();
	      this.div_.appendChild(this.content_);
	    }

	    // Add the InfoBox DIV to the DOM
	    this.getPanes()[this.pane_].appendChild(this.div_);

	    this.addClickHandler_();

	    if (this.div_.style.width) {

	      this.fixedWidthSet_ = true;

	    } else {

	      if (this.maxWidth_ !== 0 && this.div_.offsetWidth > this.maxWidth_) {

	        this.div_.style.width = this.maxWidth_;
	        this.div_.style.overflow = "auto";
	        this.fixedWidthSet_ = true;

	      } else { // The following code is needed to overcome problems with MSIE

	        bw = this.getBoxWidths_();

	        this.div_.style.width = (this.div_.offsetWidth - bw.left - bw.right) + "px";
	        this.fixedWidthSet_ = false;
	      }
	    }

	    this.panBox_(this.disableAutoPan_);

	    if (!this.enableEventPropagation_) {

	      this.eventListeners_ = [];

	      // Cancel event propagation.
	      //
	      // Note: mousemove not included (to resolve Issue 152)
	      events = ["mousedown", "mouseover", "mouseout", "mouseup",
	      "click", "dblclick", "touchstart", "touchend", "touchmove"];

	      for (i = 0; i < events.length; i++) {

	        this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));
	      }

	      // Workaround for Google bug that causes the cursor to change to a pointer
	      // when the mouse moves over a marker underneath InfoBox.
	      this.eventListeners_.push(google.maps.event.addDomListener(this.div_, "mouseover", function (e) {
	        this.style.cursor = "default";
	      }));
	    }

	    this.contextListener_ = google.maps.event.addDomListener(this.div_, "contextmenu", ignoreHandler);

	    /**
	     * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.
	     * @name InfoBox#domready
	     * @event
	     */
	    google.maps.event.trigger(this, "domready");
	  }
	};

	/**
	 * Returns the HTML <IMG> tag for the close box.
	 * @private
	 */
	InfoBox.prototype.getCloseBoxImg_ = function () {

	  var img = "";

	  if (this.closeBoxURL_ !== "") {

	    img  = "<img";
	    img += " src='" + this.closeBoxURL_ + "'";
	    img += " align=right"; // Do this because Opera chokes on style='float: right;'
	    img += " style='";
	    img += " position: relative;"; // Required by MSIE
	    img += " cursor: pointer;";
	    img += " margin: " + this.closeBoxMargin_ + ";";
	    img += "'>";
	  }

	  return img;
	};

	/**
	 * Adds the click handler to the InfoBox close box.
	 * @private
	 */
	InfoBox.prototype.addClickHandler_ = function () {

	  var closeBox;

	  if (this.closeBoxURL_ !== "") {

	    closeBox = this.div_.firstChild;
	    this.closeListener_ = google.maps.event.addDomListener(closeBox, "click", this.getCloseClickHandler_());

	  } else {

	    this.closeListener_ = null;
	  }
	};

	/**
	 * Returns the function to call when the user clicks the close box of an InfoBox.
	 * @private
	 */
	InfoBox.prototype.getCloseClickHandler_ = function () {

	  var me = this;

	  return function (e) {

	    // 1.0.3 fix: Always prevent propagation of a close box click to the map:
	    e.cancelBubble = true;

	    if (e.stopPropagation) {

	      e.stopPropagation();
	    }

	    /**
	     * This event is fired when the InfoBox's close box is clicked.
	     * @name InfoBox#closeclick
	     * @event
	     */
	    google.maps.event.trigger(me, "closeclick");

	    me.close();
	  };
	};

	/**
	 * Pans the map so that the InfoBox appears entirely within the map's visible area.
	 * @private
	 */
	InfoBox.prototype.panBox_ = function (disablePan) {

	  var map;
	  var bounds;
	  var xOffset = 0, yOffset = 0;

	  if (!disablePan) {

	    map = this.getMap();

	    if (map instanceof google.maps.Map) { // Only pan if attached to map, not panorama

	      if (!map.getBounds().contains(this.position_)) {
	      // Marker not in visible area of map, so set center
	      // of map to the marker position first.
	        map.setCenter(this.position_);
	      }

	      bounds = map.getBounds();

	      var mapDiv = map.getDiv();
	      var mapWidth = mapDiv.offsetWidth;
	      var mapHeight = mapDiv.offsetHeight;
	      var iwOffsetX = this.pixelOffset_.width;
	      var iwOffsetY = this.pixelOffset_.height;
	      var iwWidth = this.div_.offsetWidth;
	      var iwHeight = this.div_.offsetHeight;
	      var padX = this.infoBoxClearance_.width;
	      var padY = this.infoBoxClearance_.height;
	      var pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);

	      if (pixPosition.x < (-iwOffsetX + padX)) {
	        xOffset = pixPosition.x + iwOffsetX - padX;
	      } else if ((pixPosition.x + iwWidth + iwOffsetX + padX) > mapWidth) {
	        xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;
	      }
	      if (this.alignBottom_) {
	        if (pixPosition.y < (-iwOffsetY + padY + iwHeight)) {
	          yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;
	        } else if ((pixPosition.y + iwOffsetY + padY) > mapHeight) {
	          yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;
	        }
	      } else {
	        if (pixPosition.y < (-iwOffsetY + padY)) {
	          yOffset = pixPosition.y + iwOffsetY - padY;
	        } else if ((pixPosition.y + iwHeight + iwOffsetY + padY) > mapHeight) {
	          yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;
	        }
	      }

	      if (!(xOffset === 0 && yOffset === 0)) {

	        // Move the map to the shifted center.
	        //
	        var c = map.getCenter();
	        map.panBy(xOffset, yOffset);
	      }
	    }
	  }
	};

	/**
	 * Sets the style of the InfoBox by setting the style sheet and applying
	 * other specific styles requested.
	 * @private
	 */
	InfoBox.prototype.setBoxStyle_ = function () {

	  var i, boxStyle;

	  if (this.div_) {

	    // Apply style values from the style sheet defined in the boxClass parameter:
	    this.div_.className = this.boxClass_;

	    // Clear existing inline style values:
	    this.div_.style.cssText = "";

	    // Apply style values defined in the boxStyle parameter:
	    boxStyle = this.boxStyle_;
	    for (i in boxStyle) {

	      if (boxStyle.hasOwnProperty(i)) {

	        this.div_.style[i] = boxStyle[i];
	      }
	    }

	    // Fix for iOS disappearing InfoBox problem.
	    // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad
	    this.div_.style.WebkitTransform = "translateZ(0)";

	    // Fix up opacity style for benefit of MSIE:
	    //
	    if (typeof this.div_.style.opacity !== "undefined" && this.div_.style.opacity !== "") {
	      // See http://www.quirksmode.org/css/opacity.html
	      this.div_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + (this.div_.style.opacity * 100) + ")\"";
	      this.div_.style.filter = "alpha(opacity=" + (this.div_.style.opacity * 100) + ")";
	    }

	    // Apply required styles:
	    //
	    this.div_.style.position = "absolute";
	    this.div_.style.visibility = 'hidden';
	    if (this.zIndex_ !== null) {

	      this.div_.style.zIndex = this.zIndex_;
	    }
	  }
	};

	/**
	 * Get the widths of the borders of the InfoBox.
	 * @private
	 * @return {Object} widths object (top, bottom left, right)
	 */
	InfoBox.prototype.getBoxWidths_ = function () {

	  var computedStyle;
	  var bw = {top: 0, bottom: 0, left: 0, right: 0};
	  var box = this.div_;

	  if (document.defaultView && document.defaultView.getComputedStyle) {

	    computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, "");

	    if (computedStyle) {

	      // The computed styles are always in pixel units (good!)
	      bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;
	      bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
	      bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;
	      bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;
	    }

	  } else if (document.documentElement.currentStyle) { // MSIE

	    if (box.currentStyle) {

	      // The current styles may not be in pixel units, but assume they are (bad!)
	      bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;
	      bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;
	      bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;
	      bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;
	    }
	  }

	  return bw;
	};

	/**
	 * Invoked when <tt>close</tt> is called. Do not call it directly.
	 */
	InfoBox.prototype.onRemove = function () {

	  if (this.div_) {

	    this.div_.parentNode.removeChild(this.div_);
	    this.div_ = null;
	  }
	};

	/**
	 * Draws the InfoBox based on the current map projection and zoom level.
	 */
	InfoBox.prototype.draw = function () {

	  this.createInfoBoxDiv_();

	  var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);

	  this.div_.style.left = (pixPosition.x + this.pixelOffset_.width) + "px";

	  if (this.alignBottom_) {
	    this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + "px";
	  } else {
	    this.div_.style.top = (pixPosition.y + this.pixelOffset_.height) + "px";
	  }

	  if (this.isHidden_) {

	    this.div_.style.visibility = "hidden";

	  } else {

	    this.div_.style.visibility = "visible";
	  }
	};

	/**
	 * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,
	 *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>
	 *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one
	 *  is <tt>open</tt>ed.
	 * @param {InfoBoxOptions} opt_opts
	 */
	InfoBox.prototype.setOptions = function (opt_opts) {
	  if (typeof opt_opts.boxClass !== "undefined") { // Must be first

	    this.boxClass_ = opt_opts.boxClass;
	    this.setBoxStyle_();
	  }
	  if (typeof opt_opts.boxStyle !== "undefined") { // Must be second

	    this.boxStyle_ = opt_opts.boxStyle;
	    this.setBoxStyle_();
	  }
	  if (typeof opt_opts.content !== "undefined") {

	    this.setContent(opt_opts.content);
	  }
	  if (typeof opt_opts.disableAutoPan !== "undefined") {

	    this.disableAutoPan_ = opt_opts.disableAutoPan;
	  }
	  if (typeof opt_opts.maxWidth !== "undefined") {

	    this.maxWidth_ = opt_opts.maxWidth;
	  }
	  if (typeof opt_opts.pixelOffset !== "undefined") {

	    this.pixelOffset_ = opt_opts.pixelOffset;
	  }
	  if (typeof opt_opts.alignBottom !== "undefined") {

	    this.alignBottom_ = opt_opts.alignBottom;
	  }
	  if (typeof opt_opts.position !== "undefined") {

	    this.setPosition(opt_opts.position);
	  }
	  if (typeof opt_opts.zIndex !== "undefined") {

	    this.setZIndex(opt_opts.zIndex);
	  }
	  if (typeof opt_opts.closeBoxMargin !== "undefined") {

	    this.closeBoxMargin_ = opt_opts.closeBoxMargin;
	  }
	  if (typeof opt_opts.closeBoxURL !== "undefined") {

	    this.closeBoxURL_ = opt_opts.closeBoxURL;
	  }
	  if (typeof opt_opts.infoBoxClearance !== "undefined") {

	    this.infoBoxClearance_ = opt_opts.infoBoxClearance;
	  }
	  if (typeof opt_opts.isHidden !== "undefined") {

	    this.isHidden_ = opt_opts.isHidden;
	  }
	  if (typeof opt_opts.visible !== "undefined") {

	    this.isHidden_ = !opt_opts.visible;
	  }
	  if (typeof opt_opts.enableEventPropagation !== "undefined") {

	    this.enableEventPropagation_ = opt_opts.enableEventPropagation;
	  }

	  if (this.div_) {

	    this.draw();
	  }
	};

	/**
	 * Sets the content of the InfoBox.
	 *  The content can be plain text or an HTML DOM node.
	 * @param {string|Node} content
	 */
	InfoBox.prototype.setContent = function (content) {
	  this.content_ = content;

	  if (this.div_) {

	    if (this.closeListener_) {

	      google.maps.event.removeListener(this.closeListener_);
	      this.closeListener_ = null;
	    }

	    // Odd code required to make things work with MSIE.
	    //
	    if (!this.fixedWidthSet_) {

	      this.div_.style.width = "";
	    }

	    if (typeof content.nodeType === "undefined") {
	      this.div_.innerHTML = this.getCloseBoxImg_() + content;
	    } else {
	      this.div_.innerHTML = this.getCloseBoxImg_();
	      this.div_.appendChild(content);
	    }

	    // Perverse code required to make things work with MSIE.
	    // (Ensures the close box does, in fact, float to the right.)
	    //
	    if (!this.fixedWidthSet_) {
	      this.div_.style.width = this.div_.offsetWidth + "px";
	      if (typeof content.nodeType === "undefined") {
	        this.div_.innerHTML = this.getCloseBoxImg_() + content;
	      } else {
	        this.div_.innerHTML = this.getCloseBoxImg_();
	        this.div_.appendChild(content);
	      }
	    }

	    this.addClickHandler_();
	  }

	  /**
	   * This event is fired when the content of the InfoBox changes.
	   * @name InfoBox#content_changed
	   * @event
	   */
	  google.maps.event.trigger(this, "content_changed");
	};

	/**
	 * Sets the geographic location of the InfoBox.
	 * @param {LatLng} latlng
	 */
	InfoBox.prototype.setPosition = function (latlng) {

	  this.position_ = latlng;

	  if (this.div_) {

	    this.draw();
	  }

	  /**
	   * This event is fired when the position of the InfoBox changes.
	   * @name InfoBox#position_changed
	   * @event
	   */
	  google.maps.event.trigger(this, "position_changed");
	};

	/**
	 * Sets the zIndex style for the InfoBox.
	 * @param {number} index
	 */
	InfoBox.prototype.setZIndex = function (index) {

	  this.zIndex_ = index;

	  if (this.div_) {

	    this.div_.style.zIndex = index;
	  }

	  /**
	   * This event is fired when the zIndex of the InfoBox changes.
	   * @name InfoBox#zindex_changed
	   * @event
	   */
	  google.maps.event.trigger(this, "zindex_changed");
	};

	/**
	 * Sets the visibility of the InfoBox.
	 * @param {boolean} isVisible
	 */
	InfoBox.prototype.setVisible = function (isVisible) {

	  this.isHidden_ = !isVisible;
	  if (this.div_) {
	    this.div_.style.visibility = (this.isHidden_ ? "hidden" : "visible");
	  }
	};

	/**
	 * Returns the content of the InfoBox.
	 * @returns {string}
	 */
	InfoBox.prototype.getContent = function () {

	  return this.content_;
	};

	/**
	 * Returns the geographic location of the InfoBox.
	 * @returns {LatLng}
	 */
	InfoBox.prototype.getPosition = function () {

	  return this.position_;
	};

	/**
	 * Returns the zIndex for the InfoBox.
	 * @returns {number}
	 */
	InfoBox.prototype.getZIndex = function () {

	  return this.zIndex_;
	};

	/**
	 * Returns a flag indicating whether the InfoBox is visible.
	 * @returns {boolean}
	 */
	InfoBox.prototype.getVisible = function () {

	  var isVisible;

	  if ((typeof this.getMap() === "undefined") || (this.getMap() === null)) {
	    isVisible = false;
	  } else {
	    isVisible = !this.isHidden_;
	  }
	  return isVisible;
	};

	/**
	 * Shows the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]
	 */
	InfoBox.prototype.show = function () {

	  this.isHidden_ = false;
	  if (this.div_) {
	    this.div_.style.visibility = "visible";
	  }
	};

	/**
	 * Hides the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]
	 */
	InfoBox.prototype.hide = function () {

	  this.isHidden_ = true;
	  if (this.div_) {
	    this.div_.style.visibility = "hidden";
	  }
	};

	/**
	 * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>
	 *  (usually a <tt>google.maps.Marker</tt>) is specified, the position
	 *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the
	 *  anchor is dragged to a new location, the InfoBox moves as well.
	 * @param {Map|StreetViewPanorama} map
	 * @param {MVCObject} [anchor]
	 */
	InfoBox.prototype.open = function (map, anchor) {

	  var me = this;

	  if (anchor) {

	    this.position_ = anchor.getPosition();
	    this.moveListener_ = google.maps.event.addListener(anchor, "position_changed", function () {
	      me.setPosition(this.getPosition());
	    });
	  }

	  this.setMap(map);

	  if (this.div_) {

	    this.panBox_();
	  }
	};

	/**
	 * Removes the InfoBox from the map.
	 */
	InfoBox.prototype.close = function () {

	  var i;

	  if (this.closeListener_) {

	    google.maps.event.removeListener(this.closeListener_);
	    this.closeListener_ = null;
	  }

	  if (this.eventListeners_) {

	    for (i = 0; i < this.eventListeners_.length; i++) {

	      google.maps.event.removeListener(this.eventListeners_[i]);
	    }
	    this.eventListeners_ = null;
	  }

	  if (this.moveListener_) {

	    google.maps.event.removeListener(this.moveListener_);
	    this.moveListener_ = null;
	  }

	  if (this.contextListener_) {

	    google.maps.event.removeListener(this.contextListener_);
	    this.contextListener_ = null;
	  }

	  this.setMap(null);
	};

	/**
	 *  google-maps-utility-library-v3-keydragzoom
	 *
	 * @version: 2.0.9
	 * @author: Nianwei Liu [nianwei at gmail dot com] & Gary Little [gary at luxcentral dot com]
	 * @contributors: undefined
	 * @date: Fri May 13 2016 13:45:18 GMT-0400 (EDT)
	 * @license: Apache License 2.0
	 */
	/**
	 * @fileoverview This library adds a drag zoom capability to a V3 Google map.
	 *  When drag zoom is enabled, holding down a designated hot key <code>(shift | ctrl | alt)</code>
	 *  while dragging a box around an area of interest will zoom the map in to that area when
	 *  the mouse button is released. Optionally, a visual control can also be supplied for turning
	 *  a drag zoom operation on and off.
	 *  Only one line of code is needed: <code>google.maps.Map.enableKeyDragZoom();</code>
	 *  <p>
	 *  NOTE: Do not use Ctrl as the hot key with Google Maps JavaScript API V3 since, unlike with V2,
	 *  it causes a context menu to appear when running on the Macintosh.
	 *  <p>
	 *  Note that if the map's container has a border around it, the border widths must be specified
	 *  in pixel units (or as thin, medium, or thick). This is required because of an MSIE limitation.
	 *   <p>NL: 2009-05-28: initial port to core API V3.
	 *  <br>NL: 2009-11-02: added a temp fix for -moz-transform for FF3.5.x using code from Paul Kulchenko (http://notebook.kulchenko.com/maps/gridmove).
	 *  <br>NL: 2010-02-02: added a fix for IE flickering on divs onmousemove, caused by scroll value when get mouse position.
	 *  <br>GL: 2010-06-15: added a visual control option.
	 */
	(function () {
	  /*jslint browser:true */
	  /*global window,google */
	  /* Utility functions use "var funName=function()" syntax to allow use of the */
	  /* Dean Edwards Packer compression tool (with Shrink variables, without Base62 encode). */

	  /**
	   * Converts "thin", "medium", and "thick" to pixel widths
	   * in an MSIE environment. Not called for other browsers
	   * because getComputedStyle() returns pixel widths automatically.
	   * @param {string} widthValue The value of the border width parameter.
	   */
	  var toPixels = function (widthValue) {
	    var px;
	    switch (widthValue) {
	    case "thin":
	      px = "2px";
	      break;
	    case "medium":
	      px = "4px";
	      break;
	    case "thick":
	      px = "6px";
	      break;
	    default:
	      px = widthValue;
	    }
	    return px;
	  };
	 /**
	  * Get the widths of the borders of an HTML element.
	  *
	  * @param {Node} h  The HTML element.
	  * @return {Object} The width object {top, bottom left, right}.
	  */
	  var getBorderWidths = function (h) {
	    var computedStyle;
	    var bw = {};
	    if (document.defaultView && document.defaultView.getComputedStyle) {
	      computedStyle = h.ownerDocument.defaultView.getComputedStyle(h, "");
	      if (computedStyle) {
	        // The computed styles are always in pixel units (good!)
	        bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;
	        bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
	        bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;
	        bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;
	        return bw;
	      }
	    } else if (document.documentElement.currentStyle) { // MSIE
	      if (h.currentStyle) {
	        // The current styles may not be in pixel units so try to convert (bad!)
	        bw.top = parseInt(toPixels(h.currentStyle.borderTopWidth), 10) || 0;
	        bw.bottom = parseInt(toPixels(h.currentStyle.borderBottomWidth), 10) || 0;
	        bw.left = parseInt(toPixels(h.currentStyle.borderLeftWidth), 10) || 0;
	        bw.right = parseInt(toPixels(h.currentStyle.borderRightWidth), 10) || 0;
	        return bw;
	      }
	    }
	    // Shouldn't get this far for any modern browser
	    bw.top = parseInt(h.style["border-top-width"], 10) || 0;
	    bw.bottom = parseInt(h.style["border-bottom-width"], 10) || 0;
	    bw.left = parseInt(h.style["border-left-width"], 10) || 0;
	    bw.right = parseInt(h.style["border-right-width"], 10) || 0;
	    return bw;
	  };

	  // Page scroll values for use by getMousePosition. To prevent flickering on MSIE
	  // they are calculated only when the document actually scrolls, not every time the
	  // mouse moves (as they would be if they were calculated inside getMousePosition).
	  var scroll = {
	    x: 0,
	    y: 0
	  };
	  var getScrollValue = function (e) {
	    scroll.x = (typeof document.documentElement.scrollLeft !== "undefined" ? document.documentElement.scrollLeft : document.body.scrollLeft);
	    scroll.y = (typeof document.documentElement.scrollTop !== "undefined" ? document.documentElement.scrollTop : document.body.scrollTop);
	  };
	  getScrollValue();

	  /**
	   * Get the position of the mouse relative to the document.
	   * @param {Event} e  The mouse event.
	   * @return {Object} The position object {left, top}.
	   */
	  var getMousePosition = function (e) {
	    var posX = 0, posY = 0;
	    e = e || window.event;
	    if (typeof e.pageX !== "undefined") {
	      posX = e.pageX;
	      posY = e.pageY;
	    } else if (typeof e.clientX !== "undefined") { // MSIE
	      posX = e.clientX + scroll.x;
	      posY = e.clientY + scroll.y;
	    }
	    return {
	      left: posX,
	      top: posY
	    };
	  };
	  /**
	   * Get the position of an HTML element relative to the document.
	   * @param {Node} h  The HTML element.
	   * @return {Object} The position object {left, top}.
	   */
	  var getElementPosition = function (h) {
	    var posX = h.offsetLeft;
	    var posY = h.offsetTop;
	    var parent = h.offsetParent;
	    // Add offsets for all ancestors in the hierarchy
	    while (parent !== null) {
	      // Adjust for scrolling elements which may affect the map position.
	      //
	      // See http://www.howtocreate.co.uk/tutorials/javascript/browserspecific
	      //
	      // "...make sure that every element [on a Web page] with an overflow
	      // of anything other than visible also has a position style set to
	      // something other than the default static..."
	      if (parent !== document.body && parent !== document.documentElement) {
	        posX -= parent.scrollLeft;
	        posY -= parent.scrollTop;
	      }
	      // See http://groups.google.com/group/google-maps-js-api-v3/browse_thread/thread/4cb86c0c1037a5e5
	      // Example: http://notebook.kulchenko.com/maps/gridmove
	      var m = parent;
	      // This is the "normal" way to get offset information:
	      var moffx = m.offsetLeft;
	      var moffy = m.offsetTop;
	      // This covers those cases where a transform is used:
	      if (!moffx && !moffy && window.getComputedStyle) {
	        var matrix = document.defaultView.getComputedStyle(m, null).MozTransform ||
	        document.defaultView.getComputedStyle(m, null).WebkitTransform;
	        if (matrix) {
	          if (typeof matrix === "string") {
	            var parms = matrix.split(",");
	            moffx += parseInt(parms[4], 10) || 0;
	            moffy += parseInt(parms[5], 10) || 0;
	          }
	        }
	      }
	      posX += moffx;
	      posY += moffy;
	      parent = parent.offsetParent;
	    }
	    return {
	      left: posX,
	      top: posY
	    };
	  };
	  /**
	   * Set the properties of an object to those from another object.
	   * @param {Object} obj The target object.
	   * @param {Object} vals The source object.
	   */
	  var setVals = function (obj, vals) {
	    if (obj && vals) {
	      for (var x in vals) {
	        if (vals.hasOwnProperty(x)) {
	          obj[x] = vals[x];
	        }
	      }
	    }
	    return obj;
	  };
	  /**
	   * Set the opacity. If op is not passed in, this function just performs an MSIE fix.
	   * @param {Node} h The HTML element.
	   * @param {number} op The opacity value (0-1).
	   */
	  var setOpacity = function (h, op) {
	    if (typeof op !== "undefined") {
	      h.style.opacity = op;
	    }
	    if (typeof h.style.opacity !== "undefined" && h.style.opacity !== "") {
	      h.style.filter = "alpha(opacity=" + (h.style.opacity * 100) + ")";
	    }
	  };
	  /**
	   * @name KeyDragZoomOptions
	   * @class This class represents the optional parameter passed into <code>google.maps.Map.enableKeyDragZoom</code>.
	   * @property {string} [key="shift"] The hot key to hold down to activate a drag zoom, <code>shift | ctrl | alt</code>.
	   *  NOTE: Do not use Ctrl as the hot key with Google Maps JavaScript API V3 since, unlike with V2,
	   *  it causes a context menu to appear when running on the Macintosh. Also note that the
	   *  <code>alt</code> hot key refers to the Option key on a Macintosh.
	   * @property {Object} [boxStyle={border: "4px solid #736AFF"}]
	   *  An object literal defining the CSS styles of the zoom box.
	   *  Border widths must be specified in pixel units (or as thin, medium, or thick).
	   * @property {Object} [veilStyle={backgroundColor: "gray", opacity: 0.25, cursor: "crosshair"}]
	   *  An object literal defining the CSS styles of the veil pane which covers the map when a drag
	   *  zoom is activated. The previous name for this property was <code>paneStyle</code> but the use
	   *  of this name is now deprecated.
	   * @property {boolean} [noZoom=false] A flag indicating whether to disable zooming after an area is
	   *  selected. Set this to <code>true</code> to allow KeyDragZoom to be used as a simple area
	   *  selection tool.
	   * @property {boolean} [visualEnabled=false] A flag indicating whether a visual control is to be used.
	   * @property {string} [visualClass=""] The name of the CSS class defining the styles for the visual
	   *  control. To prevent the visual control from being printed, set this property to the name of
	   *  a class, defined inside a <code>@media print</code> rule, which sets the CSS
	   *  <code>display</code> style to <code>none</code>.
	   * @property {ControlPosition} [visualPosition=google.maps.ControlPosition.LEFT_TOP]
	   *  The position of the visual control.
	   * @property {Size} [visualPositionOffset=google.maps.Size(35, 0)] The width and height values
	   *  provided by this property are the offsets (in pixels) from the location at which the control
	   *  would normally be drawn to the desired drawing location.
	   * @property {number} [visualPositionIndex=null] The index of the visual control.
	   *  The index is for controlling the placement of the control relative to other controls at the
	   *  position given by <code>visualPosition</code>; controls with a lower index are placed first.
	   *  Use a negative value to place the control <i>before</i> any default controls. No index is
	   *  generally required.
	   * @property {String} [visualSprite="http://maps.gstatic.com/mapfiles/ftr/controls/dragzoom_btn.png"]
	   *  The URL of the sprite image used for showing the visual control in the on, off, and hot
	   *  (i.e., when the mouse is over the control) states. The three images within the sprite must
	   *  be the same size and arranged in on-hot-off order in a single row with no spaces between images.
	   * @property {Size} [visualSize=google.maps.Size(20, 20)] The width and height values provided by
	   *  this property are the size (in pixels) of each of the images within <code>visualSprite</code>.
	   * @property {Object} [visualTips={off: "Turn on drag zoom mode", on: "Turn off drag zoom mode"}]
	   *  An object literal defining the help tips that appear when
	   *  the mouse moves over the visual control. The <code>off</code> property is the tip to be shown
	   *  when the control is off and the <code>on</code> property is the tip to be shown when the
	   *  control is on.
	   */
	  /**
	   * @name DragZoom
	   * @class This class represents a drag zoom object for a map. The object is activated by holding down the hot key
	   * or by turning on the visual control.
	   * This object is created when <code>google.maps.Map.enableKeyDragZoom</code> is called; it cannot be created directly.
	   * Use <code>google.maps.Map.getDragZoomObject</code> to gain access to this object in order to attach event listeners.
	   * @param {Map} map The map to which the DragZoom object is to be attached.
	   * @param {KeyDragZoomOptions} [opt_zoomOpts] The optional parameters.
	   */
	  function DragZoom(map, opt_zoomOpts) {
	    var me = this;
	    var ov = new google.maps.OverlayView();
	    ov.onAdd = function () {
	      me.init_(map, opt_zoomOpts);
	    };
	    ov.draw = function () {
	    };
	    ov.onRemove = function () {
	    };
	    ov.setMap(map);
	    this.prjov_ = ov;
	  }
	  /**
	   * Initialize the tool.
	   * @param {Map} map The map to which the DragZoom object is to be attached.
	   * @param {KeyDragZoomOptions} [opt_zoomOpts] The optional parameters.
	   */
	  DragZoom.prototype.init_ = function (map, opt_zoomOpts) {
	    var i;
	    var me = this;
	    this.map_ = map;
	    opt_zoomOpts = opt_zoomOpts || {};
	    this.key_ = opt_zoomOpts.key || "shift";
	    this.key_ = this.key_.toLowerCase();
	    this.borderWidths_ = getBorderWidths(this.map_.getDiv());
	    this.veilDiv_ = [];
	    for (i = 0; i < 4; i++) {
	      this.veilDiv_[i] = document.createElement("div");
	      // Prevents selection of other elements on the webpage
	      // when a drag zoom operation is in progress:
	      this.veilDiv_[i].onselectstart = function () {
	        return false;
	      };
	      // Apply default style values for the veil:
	      setVals(this.veilDiv_[i].style, {
	        backgroundColor: "gray",
	        opacity: 0.25,
	        cursor: "crosshair"
	      });
	      // Apply style values specified in veilStyle parameter:
	      setVals(this.veilDiv_[i].style, opt_zoomOpts.paneStyle); // Old option name was "paneStyle"
	      setVals(this.veilDiv_[i].style, opt_zoomOpts.veilStyle); // New name is "veilStyle"
	      // Apply mandatory style values:
	      setVals(this.veilDiv_[i].style, {
	        position: "absolute",
	        overflow: "hidden",
	        display: "none"
	      });
	      // Workaround for Firefox Shift-Click problem:
	      if (this.key_ === "shift") {
	        this.veilDiv_[i].style.MozUserSelect = "none";
	      }
	      setOpacity(this.veilDiv_[i]);
	      // An IE fix: If the background is transparent it cannot capture mousedown
	      // events, so if it is, change the background to white with 0 opacity.
	      if (this.veilDiv_[i].style.backgroundColor === "transparent") {
	        this.veilDiv_[i].style.backgroundColor = "white";
	        setOpacity(this.veilDiv_[i], 0);
	      }
	      this.map_.getDiv().appendChild(this.veilDiv_[i]);
	    }

	    this.noZoom_ = opt_zoomOpts.noZoom || false;
	    this.visualEnabled_ = opt_zoomOpts.visualEnabled || false;
	    this.visualClass_ = opt_zoomOpts.visualClass || "";
	    this.visualPosition_ = opt_zoomOpts.visualPosition || google.maps.ControlPosition.LEFT_TOP;
	    this.visualPositionOffset_ = opt_zoomOpts.visualPositionOffset || new google.maps.Size(35, 0);
	    this.visualPositionIndex_ = opt_zoomOpts.visualPositionIndex || null;
	    this.visualSprite_ = opt_zoomOpts.visualSprite || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/mapfiles/ftr/controls/dragzoom_btn.png";
	    this.visualSize_ = opt_zoomOpts.visualSize || new google.maps.Size(20, 20);
	    this.visualTips_ = opt_zoomOpts.visualTips || {};
	    this.visualTips_.off =  this.visualTips_.off || "Turn on drag zoom mode";
	    this.visualTips_.on =  this.visualTips_.on || "Turn off drag zoom mode";

	    this.boxDiv_ = document.createElement("div");
	    // Apply default style values for the zoom box:
	    setVals(this.boxDiv_.style, {
	      border: "4px solid #736AFF"
	    });
	    // Apply style values specified in boxStyle parameter:
	    setVals(this.boxDiv_.style, opt_zoomOpts.boxStyle);
	    // Apply mandatory style values:
	    setVals(this.boxDiv_.style, {
	      position: "absolute",
	      display: "none"
	    });
	    setOpacity(this.boxDiv_);
	    this.map_.getDiv().appendChild(this.boxDiv_);
	    this.boxBorderWidths_ = getBorderWidths(this.boxDiv_);

	    this.listeners_ = [
	      google.maps.event.addDomListener(document, "keydown", function (e) {
	        me.onKeyDown_(e);
	      }),
	      google.maps.event.addDomListener(document, "keyup", function (e) {
	        me.onKeyUp_(e);
	      }),
	      google.maps.event.addDomListener(this.veilDiv_[0], "mousedown", function (e) {
	        me.onMouseDown_(e);
	      }),
	      google.maps.event.addDomListener(this.veilDiv_[1], "mousedown", function (e) {
	        me.onMouseDown_(e);
	      }),
	      google.maps.event.addDomListener(this.veilDiv_[2], "mousedown", function (e) {
	        me.onMouseDown_(e);
	      }),
	      google.maps.event.addDomListener(this.veilDiv_[3], "mousedown", function (e) {
	        me.onMouseDown_(e);
	      }),
	      google.maps.event.addDomListener(document, "mousedown", function (e) {
	        me.onMouseDownDocument_(e);
	      }),
	      google.maps.event.addDomListener(document, "mousemove", function (e) {
	        me.onMouseMove_(e);
	      }),
	      google.maps.event.addDomListener(document, "mouseup", function (e) {
	        me.onMouseUp_(e);
	      }),
	      google.maps.event.addDomListener(window, "scroll", getScrollValue)
	    ];

	    this.hotKeyDown_ = false;
	    this.mouseDown_ = false;
	    this.dragging_ = false;
	    this.startPt_ = null;
	    this.endPt_ = null;
	    this.mapWidth_ = null;
	    this.mapHeight_ = null;
	    this.mousePosn_ = null;
	    this.mapPosn_ = null;

	    if (this.visualEnabled_) {
	      this.buttonDiv_ = this.initControl_(this.visualPositionOffset_);
	      if (this.visualPositionIndex_ !== null) {
	        this.buttonDiv_.index = this.visualPositionIndex_;
	      }
	      this.map_.controls[this.visualPosition_].push(this.buttonDiv_);
	      this.controlIndex_ = this.map_.controls[this.visualPosition_].length - 1;
	    }
	  };
	  /**
	   * Initializes the visual control and returns its DOM element.
	   * @param {Size} offset The offset of the control from its normal position.
	   * @return {Node} The DOM element containing the visual control.
	   */
	  DragZoom.prototype.initControl_ = function (offset) {
	    var control;
	    var image;
	    var me = this;

	    control = document.createElement("div");
	    control.className = this.visualClass_;
	    control.style.position = "relative";
	    control.style.overflow = "hidden";
	    control.style.height = this.visualSize_.height + "px";
	    control.style.width = this.visualSize_.width + "px";
	    control.title = this.visualTips_.off;
	    image = document.createElement("img");
	    image.src = this.visualSprite_;
	    image.style.position = "absolute";
	    image.style.left = -(this.visualSize_.width * 2) + "px";
	    image.style.top = 0 + "px";
	    control.appendChild(image);
	    control.onclick = function (e) {
	      me.hotKeyDown_ = !me.hotKeyDown_;
	      if (me.hotKeyDown_) {
	        me.buttonDiv_.firstChild.style.left = -(me.visualSize_.width * 0) + "px";
	        me.buttonDiv_.title = me.visualTips_.on;
	        me.activatedByControl_ = true;
	        google.maps.event.trigger(me, "activate");
	      } else {
	        me.buttonDiv_.firstChild.style.left = -(me.visualSize_.width * 2) + "px";
	        me.buttonDiv_.title = me.visualTips_.off;
	        google.maps.event.trigger(me, "deactivate");
	      }
	      me.onMouseMove_(e); // Updates the veil
	    };
	    control.onmouseover = function () {
	      me.buttonDiv_.firstChild.style.left = -(me.visualSize_.width * 1) + "px";
	    };
	    control.onmouseout = function () {
	      if (me.hotKeyDown_) {
	        me.buttonDiv_.firstChild.style.left = -(me.visualSize_.width * 0) + "px";
	        me.buttonDiv_.title = me.visualTips_.on;
	      } else {
	        me.buttonDiv_.firstChild.style.left = -(me.visualSize_.width * 2) + "px";
	        me.buttonDiv_.title = me.visualTips_.off;
	      }
	    };
	    control.ondragstart = function () {
	      return false;
	    };
	    setVals(control.style, {
	      cursor: "pointer",
	      marginTop: offset.height + "px",
	      marginLeft: offset.width + "px"
	    });
	    return control;
	  };
	  /**
	   * Returns <code>true</code> if the hot key is being pressed when an event occurs.
	   * @param {Event} e The keyboard event.
	   * @return {boolean} Flag indicating whether the hot key is down.
	   */
	  DragZoom.prototype.isHotKeyDown_ = function (e) {
	    var isHot;
	    e = e || window.event;
	    isHot = (e.shiftKey && this.key_ === "shift") || (e.altKey && this.key_ === "alt") || (e.ctrlKey && this.key_ === "ctrl");
	    if (!isHot) {
	      // Need to look at keyCode for Opera because it
	      // doesn't set the shiftKey, altKey, ctrlKey properties
	      // unless a non-modifier event is being reported.
	      //
	      // See http://cross-browser.com/x/examples/shift_mode.php
	      // Also see http://unixpapa.com/js/key.html
	      switch (e.keyCode) {
	      case 16:
	        if (this.key_ === "shift") {
	          isHot = true;
	        }
	        break;
	      case 17:
	        if (this.key_ === "ctrl") {
	          isHot = true;
	        }
	        break;
	      case 18:
	        if (this.key_ === "alt") {
	          isHot = true;
	        }
	        break;
	      }
	    }
	    return isHot;
	  };
	  /**
	   * Returns <code>true</code> if the mouse is on top of the map div.
	   * The position is captured in onMouseMove_.
	   * @return {boolean}
	   */
	  DragZoom.prototype.isMouseOnMap_ = function () {
	    var mousePosn = this.mousePosn_;
	    if (mousePosn) {
	      var mapPosn = this.mapPosn_;
	      var mapDiv = this.map_.getDiv();
	      return mousePosn.left > mapPosn.left && mousePosn.left < (mapPosn.left + mapDiv.offsetWidth) &&
	      mousePosn.top > mapPosn.top && mousePosn.top < (mapPosn.top + mapDiv.offsetHeight);
	    } else {
	      // if user never moved mouse
	      return false;
	    }
	  };
	  /**
	   * Show the veil if the hot key is down and the mouse is over the map,
	   * otherwise hide the veil.
	   */
	  DragZoom.prototype.setVeilVisibility_ = function () {
	    var i;
	    if (this.map_ && this.hotKeyDown_ && this.isMouseOnMap_()) {
	      var mapDiv = this.map_.getDiv();
	      this.mapWidth_ = mapDiv.offsetWidth - (this.borderWidths_.left + this.borderWidths_.right);
	      this.mapHeight_ = mapDiv.offsetHeight - (this.borderWidths_.top + this.borderWidths_.bottom);
	      if (this.activatedByControl_) { // Veil covers entire map (except control)
	        var left = parseInt(this.buttonDiv_.style.left, 10) + this.visualPositionOffset_.width;
	        var top = parseInt(this.buttonDiv_.style.top, 10) + this.visualPositionOffset_.height;
	        var width = this.visualSize_.width;
	        var height = this.visualSize_.height;
	        // Left veil rectangle:
	        this.veilDiv_[0].style.top = "0px";
	        this.veilDiv_[0].style.left = "0px";
	        this.veilDiv_[0].style.width = left + "px";
	        this.veilDiv_[0].style.height = this.mapHeight_ + "px";
	        // Right veil rectangle:
	        this.veilDiv_[1].style.top = "0px";
	        this.veilDiv_[1].style.left = (left + width) + "px";
	        this.veilDiv_[1].style.width = (this.mapWidth_ - (left + width)) + "px";
	        this.veilDiv_[1].style.height = this.mapHeight_ + "px";
	        // Top veil rectangle:
	        this.veilDiv_[2].style.top = "0px";
	        this.veilDiv_[2].style.left = left + "px";
	        this.veilDiv_[2].style.width = width + "px";
	        this.veilDiv_[2].style.height = top + "px";
	        // Bottom veil rectangle:
	        this.veilDiv_[3].style.top = (top + height) + "px";
	        this.veilDiv_[3].style.left = left + "px";
	        this.veilDiv_[3].style.width = width + "px";
	        this.veilDiv_[3].style.height = (this.mapHeight_ - (top + height)) + "px";
	        for (i = 0; i < this.veilDiv_.length; i++) {
	          this.veilDiv_[i].style.display = "block";
	        }
	      } else {
	        this.veilDiv_[0].style.left = "0px";
	        this.veilDiv_[0].style.top = "0px";
	        this.veilDiv_[0].style.width = this.mapWidth_ + "px";
	        this.veilDiv_[0].style.height = this.mapHeight_ + "px";
	        for (i = 1; i < this.veilDiv_.length; i++) {
	          this.veilDiv_[i].style.width = "0px";
	          this.veilDiv_[i].style.height = "0px";
	        }
	        for (i = 0; i < this.veilDiv_.length; i++) {
	          this.veilDiv_[i].style.display = "block";
	        }
	      }
	    } else {
	      for (i = 0; i < this.veilDiv_.length; i++) {
	        this.veilDiv_[i].style.display = "none";
	      }
	    }
	  };
	  /**
	   * Handle key down. Show the veil if the hot key has been pressed.
	   * @param {Event} e The keyboard event.
	   */
	  DragZoom.prototype.onKeyDown_ = function (e) {
	    if (this.map_ && !this.hotKeyDown_ && this.isHotKeyDown_(e)) {
	      this.mapPosn_ = getElementPosition(this.map_.getDiv());
	      this.hotKeyDown_ = true;
	      this.activatedByControl_ = false;
	      this.setVeilVisibility_();
	     /**
	       * This event is fired when the hot key is pressed.
	       * @name DragZoom#activate
	       * @event
	       */
	      google.maps.event.trigger(this, "activate");
	    }
	  };
	  /**
	   * Get the <code>google.maps.Point</code> of the mouse position.
	   * @param {Event} e The mouse event.
	   * @return {Point} The mouse position.
	   */
	  DragZoom.prototype.getMousePoint_ = function (e) {
	    var mousePosn = getMousePosition(e);
	    var p = new google.maps.Point();
	    p.x = mousePosn.left - this.mapPosn_.left - this.borderWidths_.left;
	    p.y = mousePosn.top - this.mapPosn_.top - this.borderWidths_.top;
	    p.x = Math.min(p.x, this.mapWidth_);
	    p.y = Math.min(p.y, this.mapHeight_);
	    p.x = Math.max(p.x, 0);
	    p.y = Math.max(p.y, 0);
	    return p;
	  };
	  /**
	   * Handle mouse down.
	   * @param {Event} e The mouse event.
	   */
	  DragZoom.prototype.onMouseDown_ = function (e) {
	    if (this.map_ && this.hotKeyDown_) {
	      this.mapPosn_ = getElementPosition(this.map_.getDiv());
	      this.dragging_ = true;
	      this.startPt_ = this.endPt_ = this.getMousePoint_(e);
	      this.boxDiv_.style.width = this.boxDiv_.style.height = "0px";
	      var prj = this.prjov_.getProjection();
	      var latlng = prj.fromContainerPixelToLatLng(this.startPt_);
	      /**
	       * This event is fired when the drag operation begins.
	       * The parameter passed is the geographic position of the starting point.
	       * @name DragZoom#dragstart
	       * @param {LatLng} latlng The geographic position of the starting point.
	       * @event
	       */
	      google.maps.event.trigger(this, "dragstart", latlng);
	    }
	  };
	  /**
	   * Handle mouse down at the document level.
	   * @param {Event} e The mouse event.
	   */
	  DragZoom.prototype.onMouseDownDocument_ = function (e) {
	    this.mouseDown_ = true;
	  };
	  /**
	   * Handle mouse move.
	   * @param {Event} e The mouse event.
	   */
	  DragZoom.prototype.onMouseMove_ = function (e) {
	    this.mousePosn_ = getMousePosition(e);
	    if (this.dragging_) {
	      this.endPt_ = this.getMousePoint_(e);
	      var left = Math.min(this.startPt_.x, this.endPt_.x);
	      var top = Math.min(this.startPt_.y, this.endPt_.y);
	      var width = Math.abs(this.startPt_.x - this.endPt_.x);
	      var height = Math.abs(this.startPt_.y - this.endPt_.y);
	      // For benefit of MSIE 7/8 ensure following values are not negative:
	      var boxWidth = Math.max(0, width - (this.boxBorderWidths_.left + this.boxBorderWidths_.right));
	      var boxHeight = Math.max(0, height - (this.boxBorderWidths_.top + this.boxBorderWidths_.bottom));
	      // Left veil rectangle:
	      this.veilDiv_[0].style.top = "0px";
	      this.veilDiv_[0].style.left = "0px";
	      this.veilDiv_[0].style.width = left + "px";
	      this.veilDiv_[0].style.height = this.mapHeight_ + "px";
	      // Right veil rectangle:
	      this.veilDiv_[1].style.top = "0px";
	      this.veilDiv_[1].style.left = (left + width) + "px";
	      this.veilDiv_[1].style.width = (this.mapWidth_ - (left + width)) + "px";
	      this.veilDiv_[1].style.height = this.mapHeight_ + "px";
	      // Top veil rectangle:
	      this.veilDiv_[2].style.top = "0px";
	      this.veilDiv_[2].style.left = left + "px";
	      this.veilDiv_[2].style.width = width + "px";
	      this.veilDiv_[2].style.height = top + "px";
	      // Bottom veil rectangle:
	      this.veilDiv_[3].style.top = (top + height) + "px";
	      this.veilDiv_[3].style.left = left + "px";
	      this.veilDiv_[3].style.width = width + "px";
	      this.veilDiv_[3].style.height = (this.mapHeight_ - (top + height)) + "px";
	      // Selection rectangle:
	      this.boxDiv_.style.top = top + "px";
	      this.boxDiv_.style.left = left + "px";
	      this.boxDiv_.style.width = boxWidth + "px";
	      this.boxDiv_.style.height = boxHeight + "px";
	      this.boxDiv_.style.display = "block";
	      /**
	       * This event is fired repeatedly while the user drags a box across the area of interest.
	       * The southwest and northeast point are passed as parameters of type <code>google.maps.Point</code>
	       * (for performance reasons), relative to the map container. Also passed is the projection object
	       * so that the event listener, if necessary, can convert the pixel positions to geographic
	       * coordinates using <code>google.maps.MapCanvasProjection.fromContainerPixelToLatLng</code>.
	       * @name DragZoom#drag
	       * @param {Point} southwestPixel The southwest point of the selection area.
	       * @param {Point} northeastPixel The northeast point of the selection area.
	       * @param {MapCanvasProjection} prj The projection object.
	       * @event
	       */
	      google.maps.event.trigger(this, "drag", new google.maps.Point(left, top + height), new google.maps.Point(left + width, top), this.prjov_.getProjection());
	    } else if (!this.mouseDown_) {
	      this.mapPosn_ = getElementPosition(this.map_.getDiv());
	      this.setVeilVisibility_();
	    }
	  };
	  /**
	   * Handle mouse up.
	   * @param {Event} e The mouse event.
	   */
	  DragZoom.prototype.onMouseUp_ = function (e) {
	    var z;
	    var me = this;
	    this.mouseDown_ = false;
	    if (this.dragging_) {
	      if ((this.getMousePoint_(e).x === this.startPt_.x) && (this.getMousePoint_(e).y === this.startPt_.y)) {
	        this.onKeyUp_(e); // Cancel event
	        return;
	      }
	      var left = Math.min(this.startPt_.x, this.endPt_.x);
	      var top = Math.min(this.startPt_.y, this.endPt_.y);
	      var width = Math.abs(this.startPt_.x - this.endPt_.x);
	      var height = Math.abs(this.startPt_.y - this.endPt_.y);
	      // Google Maps API bug: setCenter() doesn't work as expected if the map has a
	      // border on the left or top. The code here includes a workaround for this problem.
	      var kGoogleCenteringBug = true;
	      if (kGoogleCenteringBug) {
	        left += this.borderWidths_.left;
	        top += this.borderWidths_.top;
	      }

	      var prj = this.prjov_.getProjection();
	      var sw = prj.fromContainerPixelToLatLng(new google.maps.Point(left, top + height));
	      var ne = prj.fromContainerPixelToLatLng(new google.maps.Point(left + width, top));
	      var bnds = new google.maps.LatLngBounds(sw, ne);

	      if (this.noZoom_) {
	        this.boxDiv_.style.display = "none";
	      } else {
	        // Sometimes fitBounds causes a zoom OUT, so restore original zoom level if this happens.
	        z = this.map_.getZoom();
	        this.map_.fitBounds(bnds);
	        if (this.map_.getZoom() < z) {
	          this.map_.setZoom(z);
	        }

	        // Redraw box after zoom:
	        var swPt = prj.fromLatLngToContainerPixel(sw);
	        var nePt = prj.fromLatLngToContainerPixel(ne);
	        if (kGoogleCenteringBug) {
	          swPt.x -= this.borderWidths_.left;
	          swPt.y -= this.borderWidths_.top;
	          nePt.x -= this.borderWidths_.left;
	          nePt.y -= this.borderWidths_.top;
	        }
	        this.boxDiv_.style.left = swPt.x + "px";
	        this.boxDiv_.style.top = nePt.y + "px";
	        this.boxDiv_.style.width = (Math.abs(nePt.x - swPt.x) - (this.boxBorderWidths_.left + this.boxBorderWidths_.right)) + "px";
	        this.boxDiv_.style.height = (Math.abs(nePt.y - swPt.y) - (this.boxBorderWidths_.top + this.boxBorderWidths_.bottom)) + "px";
	        // Hide box asynchronously after 1 second:
	        setTimeout(function () {
	          me.boxDiv_.style.display = "none";
	        }, 1000);
	      }
	      this.dragging_ = false;
	      this.onMouseMove_(e); // Updates the veil
	      /**
	       * This event is fired when the drag operation ends.
	       * The parameter passed is the geographic bounds of the selected area.
	       * Note that this event is <i>not</i> fired if the hot key is released before the drag operation ends.
	       * @name DragZoom#dragend
	       * @param {LatLngBounds} bnds The geographic bounds of the selected area.
	       * @event
	       */
	      google.maps.event.trigger(this, "dragend", bnds);
	      // if the hot key isn't down, the drag zoom must have been activated by turning
	      // on the visual control. In this case, finish up by simulating a key up event.
	      if (!this.isHotKeyDown_(e)) {
	        this.onKeyUp_(e);
	      }
	    }
	  };
	  /**
	   * Handle key up.
	   * @param {Event} e The keyboard event.
	   */
	  DragZoom.prototype.onKeyUp_ = function (e) {
	    var i;
	    var left, top, width, height, prj, sw, ne;
	    var bnds = null;
	    if (this.map_ && this.hotKeyDown_) {
	      this.hotKeyDown_ = false;
	      if (this.dragging_) {
	        this.boxDiv_.style.display = "none";
	        this.dragging_ = false;
	        // Calculate the bounds when drag zoom was cancelled
	        left = Math.min(this.startPt_.x, this.endPt_.x);
	        top = Math.min(this.startPt_.y, this.endPt_.y);
	        width = Math.abs(this.startPt_.x - this.endPt_.x);
	        height = Math.abs(this.startPt_.y - this.endPt_.y);
	        prj = this.prjov_.getProjection();
	        sw = prj.fromContainerPixelToLatLng(new google.maps.Point(left, top + height));
	        ne = prj.fromContainerPixelToLatLng(new google.maps.Point(left + width, top));
	        bnds = new google.maps.LatLngBounds(sw, ne);
	      }
	      for (i = 0; i < this.veilDiv_.length; i++) {
	        this.veilDiv_[i].style.display = "none";
	      }
	      if (this.visualEnabled_) {
	        this.buttonDiv_.firstChild.style.left = -(this.visualSize_.width * 2) + "px";
	        this.buttonDiv_.title = this.visualTips_.off;
	        this.buttonDiv_.style.display = "";
	      }
	      /**
	       * This event is fired when the hot key is released.
	       * The parameter passed is the geographic bounds of the selected area immediately
	       * before the hot key was released.
	       * @name DragZoom#deactivate
	       * @param {LatLngBounds} bnds The geographic bounds of the selected area immediately
	       *  before the hot key was released.
	       * @event
	       */
	      google.maps.event.trigger(this, "deactivate", bnds);
	    }
	  };
	  /**
	   * @name google.maps.Map
	   * @class These are new methods added to the Google Maps JavaScript API V3's
	   * <a href="http://code.google.com/apis/maps/documentation/javascript/reference.html#Map">Map</a>
	   * class.
	   */
	  /**
	   * Enables drag zoom. The user can zoom to an area of interest by holding down the hot key
	   * <code>(shift | ctrl | alt )</code> while dragging a box around the area or by turning
	   * on the visual control then dragging a box around the area.
	   * @param {KeyDragZoomOptions} opt_zoomOpts The optional parameters.
	   */
	  google.maps.Map.prototype.enableKeyDragZoom = function (opt_zoomOpts) {
	    this.dragZoom_ = new DragZoom(this, opt_zoomOpts);
	  };
	  /**
	   * Disables drag zoom.
	   */
	  google.maps.Map.prototype.disableKeyDragZoom = function () {
	    var i;
	    var d = this.dragZoom_;
	    if (d) {
	      for (i = 0; i < d.listeners_.length; ++i) {
	        google.maps.event.removeListener(d.listeners_[i]);
	      }
	      this.getDiv().removeChild(d.boxDiv_);
	      for (i = 0; i < d.veilDiv_.length; i++) {
	        this.getDiv().removeChild(d.veilDiv_[i]);
	      }
	      if (d.visualEnabled_) {
	        // Remove the custom control:
	        this.controls[d.visualPosition_].removeAt(d.controlIndex_);
	      }
	      d.prjov_.setMap(null);
	      this.dragZoom_ = null;
	    }
	  };
	  /**
	   * Returns <code>true</code> if the drag zoom feature has been enabled.
	   * @return {boolean}
	   */
	  google.maps.Map.prototype.keyDragZoomEnabled = function () {
	    return this.dragZoom_ !== null;
	  };
	  /**
	   * Returns the DragZoom object which is created when <code>google.maps.Map.enableKeyDragZoom</code> is called.
	   * With this object you can use <code>google.maps.event.addListener</code> to attach event listeners
	   * for the "activate", "deactivate", "dragstart", "drag", and "dragend" events.
	   * @return {DragZoom}
	   */
	  google.maps.Map.prototype.getDragZoomObject = function () {
	    return this.dragZoom_;
	  };
	})();

	/**
	 *  google-maps-utility-library-v3-markerwithlabel
	 *
	 * @version: 1.1.10
	 * @author: Gary Little (inspired by code from Marc Ridey of Google).
	 * @contributors: Nicholas McCready
	 * @date: Fri May 13 2016 16:29:58 GMT-0400 (EDT)
	 * @license: Apache License 2.0
	 */
	/**
	 *  MarkerWithLabel allows you to define markers with associated labels. As you would expect,
	 *  if the marker is draggable, so too will be the label. In addition, a marker with a label
	 *  responds to all mouse events in the same manner as a regular marker. It also fires mouse
	 *  events and "property changed" events just as a regular marker would. Version 1.1 adds
	 *  support for the raiseOnDrag feature introduced in API V3.3.
	 *  <p>
	 *  If you drag a marker by its label, you can cancel the drag and return the marker to its
	 *  original position by pressing the <code>Esc</code> key. This doesn't work if you drag the marker
	 *  itself because this feature is not (yet) supported in the <code>google.maps.Marker</code> class.
	 */

	/*jslint browser:true */
	/*global document,google */

	/**
	 * @param {Function} childCtor Child class.
	 * @param {Function} parentCtor Parent class.
	 * @private
	 */
	function inherits(childCtor, parentCtor) {
	  /* @constructor */
	  function tempCtor() {}
	  tempCtor.prototype = parentCtor.prototype;
	  childCtor.superClass_ = parentCtor.prototype;
	  childCtor.prototype = new tempCtor();
	  /* @override */
	  childCtor.prototype.constructor = childCtor;
	}

	/**
	 * This constructor creates a label and associates it with a marker.
	 * It is for the private use of the MarkerWithLabel class.
	 * @constructor
	 * @param {Marker} marker The marker with which the label is to be associated.
	 * @param {string} crossURL The URL of the cross image =.
	 * @param {string} handCursor The URL of the hand cursor.
	 * @private
	 */
	function MarkerLabel_(marker, crossURL, handCursorURL) {
	  this.marker_ = marker;
	  this.handCursorURL_ = marker.handCursorURL;

	  this.labelDiv_ = document.createElement("div");
	  this.labelDiv_.style.cssText = "position: absolute; overflow: hidden;";

	  // Set up the DIV for handling mouse events in the label. This DIV forms a transparent veil
	  // in the "overlayMouseTarget" pane, a veil that covers just the label. This is done so that
	  // events can be captured even if the label is in the shadow of a google.maps.InfoWindow.
	  // Code is included here to ensure the veil is always exactly the same size as the label.
	  this.eventDiv_ = document.createElement("div");
	  this.eventDiv_.style.cssText = this.labelDiv_.style.cssText;

	  // This is needed for proper behavior on MSIE:
	  this.eventDiv_.setAttribute("onselectstart", "return false;");
	  this.eventDiv_.setAttribute("ondragstart", "return false;");

	  // Get the DIV for the "X" to be displayed when the marker is raised.
	  this.crossDiv_ = MarkerLabel_.getSharedCross(crossURL);
	}

	inherits(MarkerLabel_, google.maps.OverlayView);

	/**
	 * Returns the DIV for the cross used when dragging a marker when the
	 * raiseOnDrag parameter set to true. One cross is shared with all markers.
	 * @param {string} crossURL The URL of the cross image =.
	 * @private
	 */
	MarkerLabel_.getSharedCross = function (crossURL) {
	  var div;
	  if (typeof MarkerLabel_.getSharedCross.crossDiv === "undefined") {
	    div = document.createElement("img");
	    div.style.cssText = "position: absolute; z-index: 1000002; display: none;";
	    // Hopefully Google never changes the standard "X" attributes:
	    div.style.marginLeft = "-8px";
	    div.style.marginTop = "-9px";
	    div.src = crossURL;
	    MarkerLabel_.getSharedCross.crossDiv = div;
	  }
	  return MarkerLabel_.getSharedCross.crossDiv;
	};

	/**
	 * Adds the DIV representing the label to the DOM. This method is called
	 * automatically when the marker's <code>setMap</code> method is called.
	 * @private
	 */
	MarkerLabel_.prototype.onAdd = function () {
	  var me = this;
	  var cMouseIsDown = false;
	  var cDraggingLabel = false;
	  var cSavedZIndex;
	  var cLatOffset, cLngOffset;
	  var cIgnoreClick;
	  var cRaiseEnabled;
	  var cStartPosition;
	  var cStartCenter;
	  // Constants:
	  var cRaiseOffset = 20;
	  var cDraggingCursor = "url(" + this.handCursorURL_ + ")";

	  // Stops all processing of an event.
	  //
	  var cAbortEvent = function (e) {
	    if (e.preventDefault) {
	      e.preventDefault();
	    }
	    e.cancelBubble = true;
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	  };

	  var cStopBounce = function () {
	    me.marker_.setAnimation(null);
	  };

	  this.getPanes().overlayImage.appendChild(this.labelDiv_);
	  this.getPanes().overlayMouseTarget.appendChild(this.eventDiv_);
	  // One cross is shared with all markers, so only add it once:
	  if (typeof MarkerLabel_.getSharedCross.processed === "undefined") {
	    this.getPanes().overlayImage.appendChild(this.crossDiv_);
	    MarkerLabel_.getSharedCross.processed = true;
	  }

	  this.listeners_ = [
	    google.maps.event.addDomListener(this.eventDiv_, "mouseover", function (e) {
	      if (me.marker_.getDraggable() || me.marker_.getClickable()) {
	        this.style.cursor = "pointer";
	        google.maps.event.trigger(me.marker_, "mouseover", e);
	      }
	    }),
	    google.maps.event.addDomListener(this.eventDiv_, "mouseout", function (e) {
	      if ((me.marker_.getDraggable() || me.marker_.getClickable()) && !cDraggingLabel) {
	        this.style.cursor = me.marker_.getCursor();
	        google.maps.event.trigger(me.marker_, "mouseout", e);
	      }
	    }),
	    google.maps.event.addDomListener(this.eventDiv_, "mousedown", function (e) {
	      cDraggingLabel = false;
	      if (me.marker_.getDraggable()) {
	        cMouseIsDown = true;
	        this.style.cursor = cDraggingCursor;
	      }
	      if (me.marker_.getDraggable() || me.marker_.getClickable()) {
	        google.maps.event.trigger(me.marker_, "mousedown", e);
	        cAbortEvent(e); // Prevent map pan when starting a drag on a label
	      }
	    }),
	    google.maps.event.addDomListener(document, "mouseup", function (mEvent) {
	      var position;
	      if (cMouseIsDown) {
	        cMouseIsDown = false;
	        me.eventDiv_.style.cursor = "pointer";
	        google.maps.event.trigger(me.marker_, "mouseup", mEvent);
	      }
	      if (cDraggingLabel) {
	        if (cRaiseEnabled) { // Lower the marker & label
	          position = me.getProjection().fromLatLngToDivPixel(me.marker_.getPosition());
	          position.y += cRaiseOffset;
	          me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
	          // This is not the same bouncing style as when the marker portion is dragged,
	          // but it will have to do:
	          try { // Will fail if running Google Maps API earlier than V3.3
	            me.marker_.setAnimation(google.maps.Animation.BOUNCE);
	            setTimeout(cStopBounce, 1406);
	          } catch (e) {}
	        }
	        me.crossDiv_.style.display = "none";
	        me.marker_.setZIndex(cSavedZIndex);
	        cIgnoreClick = true; // Set flag to ignore the click event reported after a label drag
	        cDraggingLabel = false;
	        mEvent.latLng = me.marker_.getPosition();
	        google.maps.event.trigger(me.marker_, "dragend", mEvent);
	      }
	    }),
	    google.maps.event.addListener(me.marker_.getMap(), "mousemove", function (mEvent) {
	      var position;
	      if (cMouseIsDown) {
	        if (cDraggingLabel) {
	          // Change the reported location from the mouse position to the marker position:
	          mEvent.latLng = new google.maps.LatLng(mEvent.latLng.lat() - cLatOffset, mEvent.latLng.lng() - cLngOffset);
	          position = me.getProjection().fromLatLngToDivPixel(mEvent.latLng);
	          if (cRaiseEnabled) {
	            me.crossDiv_.style.left = position.x + "px";
	            me.crossDiv_.style.top = position.y + "px";
	            me.crossDiv_.style.display = "";
	            position.y -= cRaiseOffset;
	          }
	          me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
	          if (cRaiseEnabled) { // Don't raise the veil; this hack needed to make MSIE act properly
	            me.eventDiv_.style.top = (position.y + cRaiseOffset) + "px";
	          }
	          google.maps.event.trigger(me.marker_, "drag", mEvent);
	        } else {
	          // Calculate offsets from the click point to the marker position:
	          cLatOffset = mEvent.latLng.lat() - me.marker_.getPosition().lat();
	          cLngOffset = mEvent.latLng.lng() - me.marker_.getPosition().lng();
	          cSavedZIndex = me.marker_.getZIndex();
	          cStartPosition = me.marker_.getPosition();
	          cStartCenter = me.marker_.getMap().getCenter();
	          cRaiseEnabled = me.marker_.get("raiseOnDrag");
	          cDraggingLabel = true;
	          me.marker_.setZIndex(1000000); // Moves the marker & label to the foreground during a drag
	          mEvent.latLng = me.marker_.getPosition();
	          google.maps.event.trigger(me.marker_, "dragstart", mEvent);
	        }
	      }
	    }),
	    google.maps.event.addDomListener(document, "keydown", function (e) {
	      if (cDraggingLabel) {
	        if (e.keyCode === 27) { // Esc key
	          cRaiseEnabled = false;
	          me.marker_.setPosition(cStartPosition);
	          me.marker_.getMap().setCenter(cStartCenter);
	          google.maps.event.trigger(document, "mouseup", e);
	        }
	      }
	    }),
	    google.maps.event.addDomListener(this.eventDiv_, "click", function (e) {
	      if (me.marker_.getDraggable() || me.marker_.getClickable()) {
	        if (cIgnoreClick) { // Ignore the click reported when a label drag ends
	          cIgnoreClick = false;
	        } else {
	          google.maps.event.trigger(me.marker_, "click", e);
	          cAbortEvent(e); // Prevent click from being passed on to map
	        }
	      }
	    }),
	    google.maps.event.addDomListener(this.eventDiv_, "dblclick", function (e) {
	      if (me.marker_.getDraggable() || me.marker_.getClickable()) {
	        google.maps.event.trigger(me.marker_, "dblclick", e);
	        cAbortEvent(e); // Prevent map zoom when double-clicking on a label
	      }
	    }),
	    google.maps.event.addListener(this.marker_, "dragstart", function (mEvent) {
	      if (!cDraggingLabel) {
	        cRaiseEnabled = this.get("raiseOnDrag");
	      }
	    }),
	    google.maps.event.addListener(this.marker_, "drag", function (mEvent) {
	      if (!cDraggingLabel) {
	        if (cRaiseEnabled) {
	          me.setPosition(cRaiseOffset);
	          // During a drag, the marker's z-index is temporarily set to 1000000 to
	          // ensure it appears above all other markers. Also set the label's z-index
	          // to 1000000 (plus or minus 1 depending on whether the label is supposed
	          // to be above or below the marker).
	          me.labelDiv_.style.zIndex = 1000000 + (this.get("labelInBackground") ? -1 : +1);
	        }
	      }
	    }),
	    google.maps.event.addListener(this.marker_, "dragend", function (mEvent) {
	      if (!cDraggingLabel) {
	        if (cRaiseEnabled) {
	          me.setPosition(0); // Also restores z-index of label
	        }
	      }
	    }),
	    google.maps.event.addListener(this.marker_, "position_changed", function () {
	      me.setPosition();
	    }),
	    google.maps.event.addListener(this.marker_, "zindex_changed", function () {
	      me.setZIndex();
	    }),
	    google.maps.event.addListener(this.marker_, "visible_changed", function () {
	      me.setVisible();
	    }),
	    google.maps.event.addListener(this.marker_, "labelvisible_changed", function () {
	      me.setVisible();
	    }),
	    google.maps.event.addListener(this.marker_, "title_changed", function () {
	      me.setTitle();
	    }),
	    google.maps.event.addListener(this.marker_, "labelcontent_changed", function () {
	      me.setContent();
	    }),
	    google.maps.event.addListener(this.marker_, "labelanchor_changed", function () {
	      me.setAnchor();
	    }),
	    google.maps.event.addListener(this.marker_, "labelclass_changed", function () {
	      me.setStyles();
	    }),
	    google.maps.event.addListener(this.marker_, "labelstyle_changed", function () {
	      me.setStyles();
	    })
	  ];
	};

	/**
	 * Removes the DIV for the label from the DOM. It also removes all event handlers.
	 * This method is called automatically when the marker's <code>setMap(null)</code>
	 * method is called.
	 * @private
	 */
	MarkerLabel_.prototype.onRemove = function () {
	  var i;
	  this.labelDiv_.parentNode.removeChild(this.labelDiv_);
	  this.eventDiv_.parentNode.removeChild(this.eventDiv_);

	  // Remove event listeners:
	  for (i = 0; i < this.listeners_.length; i++) {
	    google.maps.event.removeListener(this.listeners_[i]);
	  }
	};

	/**
	 * Draws the label on the map.
	 * @private
	 */
	MarkerLabel_.prototype.draw = function () {
	  this.setContent();
	  this.setTitle();
	  this.setStyles();
	};

	/**
	 * Sets the content of the label.
	 * The content can be plain text or an HTML DOM node.
	 * @private
	 */
	MarkerLabel_.prototype.setContent = function () {
	  var content = this.marker_.get("labelContent");
	  if (typeof content.nodeType === "undefined") {
	    this.labelDiv_.innerHTML = content;
	    this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
	  } else {
	    this.labelDiv_.innerHTML = ""; // Remove current content
	    this.labelDiv_.appendChild(content);
	    content = content.cloneNode(true);
	    this.eventDiv_.innerHTML = ""; // Remove current content
	    this.eventDiv_.appendChild(content);
	  }
	};

	/**
	 * Sets the content of the tool tip for the label. It is
	 * always set to be the same as for the marker itself.
	 * @private
	 */
	MarkerLabel_.prototype.setTitle = function () {
	  this.eventDiv_.title = this.marker_.getTitle() || "";
	};

	/**
	 * Sets the style of the label by setting the style sheet and applying
	 * other specific styles requested.
	 * @private
	 */
	MarkerLabel_.prototype.setStyles = function () {
	  var i, labelStyle;

	  // Apply style values from the style sheet defined in the labelClass parameter:
	  this.labelDiv_.className = this.marker_.get("labelClass");
	  this.eventDiv_.className = this.labelDiv_.className;

	  // Clear existing inline style values:
	  this.labelDiv_.style.cssText = "";
	  this.eventDiv_.style.cssText = "";
	  // Apply style values defined in the labelStyle parameter:
	  labelStyle = this.marker_.get("labelStyle");
	  for (i in labelStyle) {
	    if (labelStyle.hasOwnProperty(i)) {
	      this.labelDiv_.style[i] = labelStyle[i];
	      this.eventDiv_.style[i] = labelStyle[i];
	    }
	  }
	  this.setMandatoryStyles();
	};

	/**
	 * Sets the mandatory styles to the DIV representing the label as well as to the
	 * associated event DIV. This includes setting the DIV position, z-index, and visibility.
	 * @private
	 */
	MarkerLabel_.prototype.setMandatoryStyles = function () {
	  this.labelDiv_.style.position = "absolute";
	  this.labelDiv_.style.overflow = "hidden";
	  // Make sure the opacity setting causes the desired effect on MSIE:
	  if (typeof this.labelDiv_.style.opacity !== "undefined" && this.labelDiv_.style.opacity !== "") {
	    this.labelDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")\"";
	    this.labelDiv_.style.filter = "alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")";
	  }

	  this.eventDiv_.style.position = this.labelDiv_.style.position;
	  this.eventDiv_.style.overflow = this.labelDiv_.style.overflow;
	  this.eventDiv_.style.opacity = 0.01; // Don't use 0; DIV won't be clickable on MSIE
	  this.eventDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=1)\"";
	  this.eventDiv_.style.filter = "alpha(opacity=1)"; // For MSIE

	  this.setAnchor();
	  this.setPosition(); // This also updates z-index, if necessary.
	  this.setVisible();
	};

	/**
	 * Sets the anchor point of the label.
	 * @private
	 */
	MarkerLabel_.prototype.setAnchor = function () {
	  var anchor = this.marker_.get("labelAnchor");
	  this.labelDiv_.style.marginLeft = -anchor.x + "px";
	  this.labelDiv_.style.marginTop = -anchor.y + "px";
	  this.eventDiv_.style.marginLeft = -anchor.x + "px";
	  this.eventDiv_.style.marginTop = -anchor.y + "px";
	};

	/**
	 * Sets the position of the label. The z-index is also updated, if necessary.
	 * @private
	 */
	MarkerLabel_.prototype.setPosition = function (yOffset) {
	  var position = this.getProjection().fromLatLngToDivPixel(this.marker_.getPosition());
	  if (typeof yOffset === "undefined") {
	    yOffset = 0;
	  }
	  this.labelDiv_.style.left = Math.round(position.x) + "px";
	  this.labelDiv_.style.top = Math.round(position.y - yOffset) + "px";
	  this.eventDiv_.style.left = this.labelDiv_.style.left;
	  this.eventDiv_.style.top = this.labelDiv_.style.top;

	  this.setZIndex();
	};

	/**
	 * Sets the z-index of the label. If the marker's z-index property has not been defined, the z-index
	 * of the label is set to the vertical coordinate of the label. This is in keeping with the default
	 * stacking order for Google Maps: markers to the south are in front of markers to the north.
	 * @private
	 */
	MarkerLabel_.prototype.setZIndex = function () {
	  var zAdjust = (this.marker_.get("labelInBackground") ? -1 : +1);
	  if (typeof this.marker_.getZIndex() === "undefined") {
	    this.labelDiv_.style.zIndex = parseInt(this.labelDiv_.style.top, 10) + zAdjust;
	    this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
	  } else {
	    this.labelDiv_.style.zIndex = this.marker_.getZIndex() + zAdjust;
	    this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
	  }
	};

	/**
	 * Sets the visibility of the label. The label is visible only if the marker itself is
	 * visible (i.e., its visible property is true) and the labelVisible property is true.
	 * @private
	 */
	MarkerLabel_.prototype.setVisible = function () {
	  if (this.marker_.get("labelVisible")) {
	    this.labelDiv_.style.display = this.marker_.getVisible() ? "block" : "none";
	  } else {
	    this.labelDiv_.style.display = "none";
	  }
	  this.eventDiv_.style.display = this.labelDiv_.style.display;
	};

	/**
	 * @name MarkerWithLabelOptions
	 * @class This class represents the optional parameter passed to the {@link MarkerWithLabel} constructor.
	 *  The properties available are the same as for <code>google.maps.Marker</code> with the addition
	 *  of the properties listed below. To change any of these additional properties after the labeled
	 *  marker has been created, call <code>google.maps.Marker.set(propertyName, propertyValue)</code>.
	 *  <p>
	 *  When any of these properties changes, a property changed event is fired. The names of these
	 *  events are derived from the name of the property and are of the form <code>propertyname_changed</code>.
	 *  For example, if the content of the label changes, a <code>labelcontent_changed</code> event
	 *  is fired.
	 *  <p>
	 * @property {string|Node} [labelContent] The content of the label (plain text or an HTML DOM node).
	 * @property {Point} [labelAnchor] By default, a label is drawn with its anchor point at (0,0) so
	 *  that its top left corner is positioned at the anchor point of the associated marker. Use this
	 *  property to change the anchor point of the label. For example, to center a 50px-wide label
	 *  beneath a marker, specify a <code>labelAnchor</code> of <code>google.maps.Point(25, 0)</code>.
	 *  (Note: x-values increase to the right and y-values increase to the top.)
	 * @property {string} [labelClass] The name of the CSS class defining the styles for the label.
	 *  Note that style values for <code>position</code>, <code>overflow</code>, <code>top</code>,
	 *  <code>left</code>, <code>zIndex</code>, <code>display</code>, <code>marginLeft</code>, and
	 *  <code>marginTop</code> are ignored; these styles are for internal use only.
	 * @property {Object} [labelStyle] An object literal whose properties define specific CSS
	 *  style values to be applied to the label. Style values defined here override those that may
	 *  be defined in the <code>labelClass</code> style sheet. If this property is changed after the
	 *  label has been created, all previously set styles (except those defined in the style sheet)
	 *  are removed from the label before the new style values are applied.
	 *  Note that style values for <code>position</code>, <code>overflow</code>, <code>top</code>,
	 *  <code>left</code>, <code>zIndex</code>, <code>display</code>, <code>marginLeft</code>, and
	 *  <code>marginTop</code> are ignored; these styles are for internal use only.
	 * @property {boolean} [labelInBackground] A flag indicating whether a label that overlaps its
	 *  associated marker should appear in the background (i.e., in a plane below the marker).
	 *  The default is <code>false</code>, which causes the label to appear in the foreground.
	 * @property {boolean} [labelVisible] A flag indicating whether the label is to be visible.
	 *  The default is <code>true</code>. Note that even if <code>labelVisible</code> is
	 *  <code>true</code>, the label will <i>not</i> be visible unless the associated marker is also
	 *  visible (i.e., unless the marker's <code>visible</code> property is <code>true</code>).
	 * @property {boolean} [raiseOnDrag] A flag indicating whether the label and marker are to be
	 *  raised when the marker is dragged. The default is <code>true</code>. If a draggable marker is
	 *  being created and a version of Google Maps API earlier than V3.3 is being used, this property
	 *  must be set to <code>false</code>.
	 * @property {boolean} [optimized] A flag indicating whether rendering is to be optimized for the
	 *  marker. <b>Important: The optimized rendering technique is not supported by MarkerWithLabel,
	 *  so the value of this parameter is always forced to <code>false</code>.
	 * @property {string} [crossImage="http://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png"]
	 *  The URL of the cross image to be displayed while dragging a marker.
	 * @property {string} [handCursor="http://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur"]
	 *  The URL of the cursor to be displayed while dragging a marker.
	 */
	/**
	 * Creates a MarkerWithLabel with the options specified in {@link MarkerWithLabelOptions}.
	 * @constructor
	 * @param {MarkerWithLabelOptions} [opt_options] The optional parameters.
	 */
	function MarkerWithLabel(opt_options) {
	  opt_options = opt_options || {};
	  opt_options.labelContent = opt_options.labelContent || "";
	  opt_options.labelAnchor = opt_options.labelAnchor || new google.maps.Point(0, 0);
	  opt_options.labelClass = opt_options.labelClass || "markerLabels";
	  opt_options.labelStyle = opt_options.labelStyle || {};
	  opt_options.labelInBackground = opt_options.labelInBackground || false;
	  if (typeof opt_options.labelVisible === "undefined") {
	    opt_options.labelVisible = true;
	  }
	  if (typeof opt_options.raiseOnDrag === "undefined") {
	    opt_options.raiseOnDrag = true;
	  }
	  if (typeof opt_options.clickable === "undefined") {
	    opt_options.clickable = true;
	  }
	  if (typeof opt_options.draggable === "undefined") {
	    opt_options.draggable = false;
	  }
	  if (typeof opt_options.optimized === "undefined") {
	    opt_options.optimized = false;
	  }
	  opt_options.crossImage = opt_options.crossImage || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png";
	  opt_options.handCursor = opt_options.handCursor || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur";
	  opt_options.optimized = false; // Optimized rendering is not supported

	  this.label = new MarkerLabel_(this, opt_options.crossImage, opt_options.handCursor); // Bind the label to the marker

	  // Call the parent constructor. It calls Marker.setValues to initialize, so all
	  // the new parameters are conveniently saved and can be accessed with get/set.
	  // Marker.set triggers a property changed event (called "propertyname_changed")
	  // that the marker label listens for in order to react to state changes.
	  google.maps.Marker.apply(this, arguments);
	}

	inherits(MarkerWithLabel, google.maps.Marker);

	/**
	 * Overrides the standard Marker setMap function.
	 * @param {Map} theMap The map to which the marker is to be added.
	 * @private
	 */
	MarkerWithLabel.prototype.setMap = function (theMap) {

	  // Call the inherited function...
	  google.maps.Marker.prototype.setMap.apply(this, arguments);

	  // ... then deal with the label:
	  this.label.setMap(theMap);
	};

	// ==ClosureCompiler==
	// @compilation_level ADVANCED_OPTIMIZATIONS
	// @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3.js
	// @output_wrapper (function() {%output%})();
	// ==/ClosureCompiler==

	/**
	 * @license
	 * Copyright 2013 Google Inc. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * A RichMarker that allows any HTML/DOM to be added to a map and be draggable.
	 *
	 * @param {Object.<string, *>=} opt_options Optional properties to set.
	 * @extends {google.maps.OverlayView}
	 * @constructor
	 */
	function RichMarker(opt_options) {
	  var options = opt_options || {};

	  /**
	   * @type {boolean}
	   * @private
	   */
	  this.ready_ = false;

	  /**
	   * @type {boolean}
	   * @private
	   */
	  this.dragging_ = false;

	  if (opt_options['visible'] == undefined) {
	    opt_options['visible'] = true;
	  }

	  if (opt_options['shadow'] == undefined) {
	    opt_options['shadow'] = '7px -3px 5px rgba(88,88,88,0.7)';
	  }

	  if (opt_options['anchor'] == undefined) {
	    opt_options['anchor'] = RichMarkerPosition['BOTTOM'];
	  }

	  this.setValues(options);
	}
	RichMarker.prototype = new google.maps.OverlayView();
	window['RichMarker'] = RichMarker;


	/**
	 * Returns the current visibility state of the marker.
	 *
	 * @return {boolean} The visiblity of the marker.
	 */
	RichMarker.prototype.getVisible = function() {
	  return /** @type {boolean} */ (this.get('visible'));
	};
	RichMarker.prototype['getVisible'] = RichMarker.prototype.getVisible;


	/**
	 * Sets the visiblility state of the marker.
	 *
	 * @param {boolean} visible The visiblilty of the marker.
	 */
	RichMarker.prototype.setVisible = function(visible) {
	  this.set('visible', visible);
	};
	RichMarker.prototype['setVisible'] = RichMarker.prototype.setVisible;


	/**
	 *  The visible changed event.
	 */
	RichMarker.prototype.visible_changed = function() {
	  if (this.ready_) {
	    this.markerWrapper_.style['display'] = this.getVisible() ? '' : 'none';
	    this.draw();
	  }
	};
	RichMarker.prototype['visible_changed'] = RichMarker.prototype.visible_changed;


	/**
	 * Sets the marker to be flat.
	 *
	 * @param {boolean} flat If the marker is to be flat or not.
	 */
	RichMarker.prototype.setFlat = function(flat) {
	  this.set('flat', !!flat);
	};
	RichMarker.prototype['setFlat'] = RichMarker.prototype.setFlat;


	/**
	 * If the makrer is flat or not.
	 *
	 * @return {boolean} True the marker is flat.
	 */
	RichMarker.prototype.getFlat = function() {
	  return /** @type {boolean} */ (this.get('flat'));
	};
	RichMarker.prototype['getFlat'] = RichMarker.prototype.getFlat;


	/**
	 * Get the width of the marker.
	 *
	 * @return {Number} The width of the marker.
	 */
	RichMarker.prototype.getWidth = function() {
	  return /** @type {Number} */ (this.get('width'));
	};
	RichMarker.prototype['getWidth'] = RichMarker.prototype.getWidth;


	/**
	 * Get the height of the marker.
	 *
	 * @return {Number} The height of the marker.
	 */
	RichMarker.prototype.getHeight = function() {
	  return /** @type {Number} */ (this.get('height'));
	};
	RichMarker.prototype['getHeight'] = RichMarker.prototype.getHeight;


	/**
	 * Sets the marker's box shadow.
	 *
	 * @param {string} shadow The box shadow to set.
	 */
	RichMarker.prototype.setShadow = function(shadow) {
	  this.set('shadow', shadow);
	  this.flat_changed();
	};
	RichMarker.prototype['setShadow'] = RichMarker.prototype.setShadow;


	/**
	 * Gets the marker's box shadow.
	 *
	 * @return {string} The box shadow.
	 */
	RichMarker.prototype.getShadow = function() {
	  return /** @type {string} */ (this.get('shadow'));
	};
	RichMarker.prototype['getShadow'] = RichMarker.prototype.getShadow;


	/**
	 * Flat changed event.
	 */
	RichMarker.prototype.flat_changed = function() {
	  if (!this.ready_) {
	    return;
	  }

	  this.markerWrapper_.style['boxShadow'] =
	      this.markerWrapper_.style['webkitBoxShadow'] =
	      this.markerWrapper_.style['MozBoxShadow'] =
	      this.getFlat() ? '' : this.getShadow();
	};
	RichMarker.prototype['flat_changed'] = RichMarker.prototype.flat_changed;


	/**
	 * Sets the zIndex of the marker.
	 *
	 * @param {Number} index The index to set.
	 */
	RichMarker.prototype.setZIndex = function(index) {
	  this.set('zIndex', index);
	};
	RichMarker.prototype['setZIndex'] = RichMarker.prototype.setZIndex;


	/**
	 * Gets the zIndex of the marker.
	 *
	 * @return {Number} The zIndex of the marker.
	 */
	RichMarker.prototype.getZIndex = function() {
	  return /** @type {Number} */ (this.get('zIndex'));
	};
	RichMarker.prototype['getZIndex'] = RichMarker.prototype.getZIndex;


	/**
	 * zIndex changed event.
	 */
	RichMarker.prototype.zIndex_changed = function() {
	  if (this.getZIndex() && this.ready_) {
	    this.markerWrapper_.style.zIndex = this.getZIndex();
	  }
	};
	RichMarker.prototype['zIndex_changed'] = RichMarker.prototype.zIndex_changed;

	/**
	 * Whether the marker is draggable or not.
	 *
	 * @return {boolean} True if the marker is draggable.
	 */
	RichMarker.prototype.getDraggable = function() {
	  return /** @type {boolean} */ (this.get('draggable'));
	};
	RichMarker.prototype['getDraggable'] = RichMarker.prototype.getDraggable;


	/**
	 * Sets the marker to be draggable or not.
	 *
	 * @param {boolean} draggable If the marker is draggable or not.
	 */
	RichMarker.prototype.setDraggable = function(draggable) {
	  this.set('draggable', !!draggable);
	};
	RichMarker.prototype['setDraggable'] = RichMarker.prototype.setDraggable;


	/**
	 * Draggable property changed callback.
	 */
	RichMarker.prototype.draggable_changed = function() {
	  if (this.ready_) {
	    if (this.getDraggable()) {
	      this.addDragging_(this.markerWrapper_);
	    } else {
	      this.removeDragListeners_();
	    }
	  }
	};
	RichMarker.prototype['draggable_changed'] =
	    RichMarker.prototype.draggable_changed;


	/**
	 * Gets the postiton of the marker.
	 *
	 * @return {google.maps.LatLng} The position of the marker.
	 */
	RichMarker.prototype.getPosition = function() {
	  return /** @type {google.maps.LatLng} */ (this.get('position'));
	};
	RichMarker.prototype['getPosition'] = RichMarker.prototype.getPosition;


	/**
	 * Sets the position of the marker.
	 *
	 * @param {google.maps.LatLng} position The position to set.
	 */
	RichMarker.prototype.setPosition = function(position) {
	  this.set('position', position);
	};
	RichMarker.prototype['setPosition'] = RichMarker.prototype.setPosition;


	/**
	 * Position changed event.
	 */
	RichMarker.prototype.position_changed = function() {
	  this.draw();
	};
	RichMarker.prototype['position_changed'] =
	    RichMarker.prototype.position_changed;


	/**
	 * Gets the anchor.
	 *
	 * @return {google.maps.Size} The position of the anchor.
	 */
	RichMarker.prototype.getAnchor = function() {
	  return /** @type {google.maps.Size} */ (this.get('anchor'));
	};
	RichMarker.prototype['getAnchor'] = RichMarker.prototype.getAnchor;


	/**
	 * Sets the anchor.
	 *
	 * @param {RichMarkerPosition|google.maps.Size} anchor The anchor to set.
	 */
	RichMarker.prototype.setAnchor = function(anchor) {
	  this.set('anchor', anchor);
	};
	RichMarker.prototype['setAnchor'] = RichMarker.prototype.setAnchor;


	/**
	 * Anchor changed event.
	 */
	RichMarker.prototype.anchor_changed = function() {
	  this.draw();
	};
	RichMarker.prototype['anchor_changed'] = RichMarker.prototype.anchor_changed;


	/**
	 * Converts a HTML string to a document fragment.
	 *
	 * @param {string} htmlString The HTML string to convert.
	 * @return {Node} A HTML document fragment.
	 * @private
	 */
	RichMarker.prototype.htmlToDocumentFragment_ = function(htmlString) {
	  var tempDiv = document.createElement('DIV');
	  tempDiv.innerHTML = htmlString;
	  if (tempDiv.childNodes.length == 1) {
	    return /** @type {!Node} */ (tempDiv.removeChild(tempDiv.firstChild));
	  } else {
	    var fragment = document.createDocumentFragment();
	    while (tempDiv.firstChild) {
	      fragment.appendChild(tempDiv.firstChild);
	    }
	    return fragment;
	  }
	};


	/**
	 * Removes all children from the node.
	 *
	 * @param {Node} node The node to remove all children from.
	 * @private
	 */
	RichMarker.prototype.removeChildren_ = function(node) {
	  if (!node) {
	    return;
	  }

	  var child;
	  while (child = node.firstChild) {
	    node.removeChild(child);
	  }
	};


	/**
	 * Sets the content of the marker.
	 *
	 * @param {string|Node} content The content to set.
	 */
	RichMarker.prototype.setContent = function(content) {
	  this.set('content', content);
	};
	RichMarker.prototype['setContent'] = RichMarker.prototype.setContent;


	/**
	 * Get the content of the marker.
	 *
	 * @return {string|Node} The marker content.
	 */
	RichMarker.prototype.getContent = function() {
	  return /** @type {Node|string} */ (this.get('content'));
	};
	RichMarker.prototype['getContent'] = RichMarker.prototype.getContent;


	/**
	 * Sets the marker content and adds loading events to images
	 */
	RichMarker.prototype.content_changed = function() {
	  if (!this.markerContent_) {
	    // Marker content area doesnt exist.
	    return;
	  }

	  this.removeChildren_(this.markerContent_);
	  var content = this.getContent();
	  if (content) {
	    if (typeof content == 'string') {
	      content = content.replace(/^\s*([\S\s]*)\b\s*$/, '$1');
	      content = this.htmlToDocumentFragment_(content);
	    }
	    this.markerContent_.appendChild(content);

	    var that = this;
	    var images = this.markerContent_.getElementsByTagName('IMG');
	    for (var i = 0, image; image = images[i]; i++) {
	      // By default, a browser lets a image be dragged outside of the browser,
	      // so by calling preventDefault we stop this behaviour and allow the image
	      // to be dragged around the map and now out of the browser and onto the
	      // desktop.
	      google.maps.event.addDomListener(image, 'mousedown', function(e) {
	        if (that.getDraggable()) {
	          if (e.preventDefault) {
	            e.preventDefault();
	          }
	          e.returnValue = false;
	        }
	      });

	      // Because we don't know the size of an image till it loads, add a
	      // listener to the image load so the marker can resize and reposition
	      // itself to be the correct height.
	      google.maps.event.addDomListener(image, 'load', function() {
	        that.draw();
	      });
	    }

	    google.maps.event.trigger(this, 'domready');
	  }

	  if (this.ready_) {
	    this.draw();
	  }
	};
	RichMarker.prototype['content_changed'] = RichMarker.prototype.content_changed;

	/**
	 * Sets the cursor.
	 *
	 * @param {string} whichCursor What cursor to show.
	 * @private
	 */
	RichMarker.prototype.setCursor_ = function(whichCursor) {
	  if (!this.ready_) {
	    return;
	  }

	  var cursor = '';
	  if (navigator.userAgent.indexOf('Gecko/') !== -1) {
	    // Moz has some nice cursors :)
	    if (whichCursor == 'dragging') {
	      cursor = '-moz-grabbing';
	    }

	    if (whichCursor == 'dragready') {
	      cursor = '-moz-grab';
	    }

	    if (whichCursor == 'draggable') {
	      cursor = 'pointer';
	    }
	  } else {
	    if (whichCursor == 'dragging' || whichCursor == 'dragready') {
	      cursor = 'move';
	    }

	    if (whichCursor == 'draggable') {
	      cursor = 'pointer';
	    }
	  }

	  if (this.markerWrapper_.style.cursor != cursor) {
	    this.markerWrapper_.style.cursor = cursor;
	  }
	};

	/**
	 * Start dragging.
	 *
	 * @param {Event} e The event.
	 */
	RichMarker.prototype.startDrag = function(e) {
	  if (!this.getDraggable()) {
	    return;
	  }

	  if (!this.dragging_) {
	    this.dragging_ = true;
	    var map = this.getMap();
	    this.mapDraggable_ = map.get('draggable');
	    map.set('draggable', false);

	    // Store the current mouse position
	    this.mouseX_ = e.clientX;
	    this.mouseY_ = e.clientY;

	    this.setCursor_('dragready');

	    // Stop the text from being selectable while being dragged
	    this.markerWrapper_.style['MozUserSelect'] = 'none';
	    this.markerWrapper_.style['KhtmlUserSelect'] = 'none';
	    this.markerWrapper_.style['WebkitUserSelect'] = 'none';

	    this.markerWrapper_['unselectable'] = 'on';
	    this.markerWrapper_['onselectstart'] = function() {
	      return false;
	    };

	    this.addDraggingListeners_();

	    google.maps.event.trigger(this, 'dragstart');
	  }
	};


	/**
	 * Stop dragging.
	 */
	RichMarker.prototype.stopDrag = function() {
	  if (!this.getDraggable()) {
	    return;
	  }

	  if (this.dragging_) {
	    this.dragging_ = false;
	    this.getMap().set('draggable', this.mapDraggable_);
	    this.mouseX_ = this.mouseY_ = this.mapDraggable_ = null;

	    // Allow the text to be selectable again
	    this.markerWrapper_.style['MozUserSelect'] = '';
	    this.markerWrapper_.style['KhtmlUserSelect'] = '';
	    this.markerWrapper_.style['WebkitUserSelect'] = '';
	    this.markerWrapper_['unselectable'] = 'off';
	    this.markerWrapper_['onselectstart'] = function() {};

	    this.removeDraggingListeners_();

	    this.setCursor_('draggable');
	    google.maps.event.trigger(this, 'dragend');

	    this.draw();
	  }
	};


	/**
	 * Handles the drag event.
	 *
	 * @param {Event} e The event.
	 */
	RichMarker.prototype.drag = function(e) {
	  if (!this.getDraggable() || !this.dragging_) {
	    // This object isn't draggable or we have stopped dragging
	    this.stopDrag();
	    return;
	  }

	  var dx = this.mouseX_ - e.clientX;
	  var dy = this.mouseY_ - e.clientY;

	  this.mouseX_ = e.clientX;
	  this.mouseY_ = e.clientY;

	  var left = parseInt(this.markerWrapper_.style['left'], 10) - dx;
	  var top = parseInt(this.markerWrapper_.style['top'], 10) - dy;

	  this.markerWrapper_.style['left'] = left + 'px';
	  this.markerWrapper_.style['top'] = top + 'px';

	  var offset = this.getOffset_();

	  // Set the position property and adjust for the anchor offset
	  var point = new google.maps.Point(left - offset.width, top - offset.height);
	  var projection = this.getProjection();
	  this.setPosition(projection.fromDivPixelToLatLng(point));

	  this.setCursor_('dragging');
	  google.maps.event.trigger(this, 'drag');
	};


	/**
	 * Removes the drag listeners associated with the marker.
	 *
	 * @private
	 */
	RichMarker.prototype.removeDragListeners_ = function() {
	  if (this.draggableListener_) {
	    google.maps.event.removeListener(this.draggableListener_);
	    delete this.draggableListener_;
	  }
	  this.setCursor_('');
	};


	/**
	 * Add dragability events to the marker.
	 *
	 * @param {Node} node The node to apply dragging to.
	 * @private
	 */
	RichMarker.prototype.addDragging_ = function(node) {
	  if (!node) {
	    return;
	  }

	  var that = this;
	  this.draggableListener_ =
	    google.maps.event.addDomListener(node, 'mousedown', function(e) {
	      that.startDrag(e);
	    });

	  this.setCursor_('draggable');
	};


	/**
	 * Add dragging listeners.
	 *
	 * @private
	 */
	RichMarker.prototype.addDraggingListeners_ = function() {
	  var that = this;
	  if (this.markerWrapper_.setCapture) {
	    this.markerWrapper_.setCapture(true);
	    this.draggingListeners_ = [
	      google.maps.event.addDomListener(this.markerWrapper_, 'mousemove', function(e) {
	        that.drag(e);
	      }, true),
	      google.maps.event.addDomListener(this.markerWrapper_, 'mouseup', function() {
	        that.stopDrag();
	        that.markerWrapper_.releaseCapture();
	      }, true)
	    ];
	  } else {
	    this.draggingListeners_ = [
	      google.maps.event.addDomListener(window, 'mousemove', function(e) {
	        that.drag(e);
	      }, true),
	      google.maps.event.addDomListener(window, 'mouseup', function() {
	        that.stopDrag();
	      }, true)
	    ];
	  }
	};


	/**
	 * Remove dragging listeners.
	 *
	 * @private
	 */
	RichMarker.prototype.removeDraggingListeners_ = function() {
	  if (this.draggingListeners_) {
	    for (var i = 0, listener; listener = this.draggingListeners_[i]; i++) {
	      google.maps.event.removeListener(listener);
	    }
	    this.draggingListeners_.length = 0;
	  }
	};


	/**
	 * Get the anchor offset.
	 *
	 * @return {google.maps.Size} The size offset.
	 * @private
	 */
	RichMarker.prototype.getOffset_ = function() {
	  var anchor = this.getAnchor();
	  if (typeof anchor == 'object') {
	    return /** @type {google.maps.Size} */ (anchor);
	  }

	  var offset = new google.maps.Size(0, 0);
	  if (!this.markerContent_) {
	    return offset;
	  }

	  var width = this.markerContent_.offsetWidth;
	  var height = this.markerContent_.offsetHeight;

	  switch (anchor) {
	   case RichMarkerPosition['TOP_LEFT']:
	     break;
	   case RichMarkerPosition['TOP']:
	     offset.width = -width / 2;
	     break;
	   case RichMarkerPosition['TOP_RIGHT']:
	     offset.width = -width;
	     break;
	   case RichMarkerPosition['LEFT']:
	     offset.height = -height / 2;
	     break;
	   case RichMarkerPosition['MIDDLE']:
	     offset.width = -width / 2;
	     offset.height = -height / 2;
	     break;
	   case RichMarkerPosition['RIGHT']:
	     offset.width = -width;
	     offset.height = -height / 2;
	     break;
	   case RichMarkerPosition['BOTTOM_LEFT']:
	     offset.height = -height;
	     break;
	   case RichMarkerPosition['BOTTOM']:
	     offset.width = -width / 2;
	     offset.height = -height;
	     break;
	   case RichMarkerPosition['BOTTOM_RIGHT']:
	     offset.width = -width;
	     offset.height = -height;
	     break;
	  }

	  return offset;
	};


	/**
	 * Adding the marker to a map.
	 * Implementing the interface.
	 */
	RichMarker.prototype.onAdd = function() {
	  if (!this.markerWrapper_) {
	    this.markerWrapper_ = document.createElement('DIV');
	    this.markerWrapper_.style['position'] = 'absolute';
	  }

	  if (this.getZIndex()) {
	    this.markerWrapper_.style['zIndex'] = this.getZIndex();
	  }

	  this.markerWrapper_.style['display'] = this.getVisible() ? '' : 'none';

	  if (!this.markerContent_) {
	    this.markerContent_ = document.createElement('DIV');
	    this.markerWrapper_.appendChild(this.markerContent_);

	    var that = this;
	    google.maps.event.addDomListener(this.markerContent_, 'click', function(e) {
	      google.maps.event.trigger(that, 'click');
	    });
	    google.maps.event.addDomListener(this.markerContent_, 'mouseover', function(e) {
	      google.maps.event.trigger(that, 'mouseover');
	    });
	    google.maps.event.addDomListener(this.markerContent_, 'mouseout', function(e) {
	      google.maps.event.trigger(that, 'mouseout');
	    });
	  }

	  this.ready_ = true;
	  this.content_changed();
	  this.flat_changed();
	  this.draggable_changed();

	  var panes = this.getPanes();
	  if (panes) {
	    panes.overlayMouseTarget.appendChild(this.markerWrapper_);
	  }

	  google.maps.event.trigger(this, 'ready');
	};
	RichMarker.prototype['onAdd'] = RichMarker.prototype.onAdd;


	/**
	 * Impelementing the interface.
	 */
	RichMarker.prototype.draw = function() {
	  if (!this.ready_ || this.dragging_) {
	    return;
	  }

	  var projection = this.getProjection();

	  if (!projection) {
	    // The map projection is not ready yet so do nothing
	    return;
	  }

	  var latLng = /** @type {google.maps.LatLng} */ (this.get('position'));
	  var pos = projection.fromLatLngToDivPixel(latLng);

	  var offset = this.getOffset_();
	  this.markerWrapper_.style['top'] = (pos.y + offset.height) + 'px';
	  this.markerWrapper_.style['left'] = (pos.x + offset.width) + 'px';

	  var height = this.markerContent_.offsetHeight;
	  var width = this.markerContent_.offsetWidth;

	  if (width != this.get('width')) {
	    this.set('width', width);
	  }

	  if (height != this.get('height')) {
	    this.set('height', height);
	  }
	};
	RichMarker.prototype['draw'] = RichMarker.prototype.draw;


	/**
	 * Removing a marker from the map.
	 * Implementing the interface.
	 */
	RichMarker.prototype.onRemove = function() {
	  if (this.markerWrapper_ && this.markerWrapper_.parentNode) {
	    this.markerWrapper_.parentNode.removeChild(this.markerWrapper_);
	  }
	  this.removeDragListeners_();
	};
	RichMarker.prototype['onRemove'] = RichMarker.prototype.onRemove;


	/**
	 * RichMarker Anchor positions
	 * @enum {number}
	 */
	var RichMarkerPosition = {
	  'TOP_LEFT': 1,
	  'TOP': 2,
	  'TOP_RIGHT': 3,
	  'LEFT': 4,
	  'MIDDLE': 5,
	  'RIGHT': 6,
	  'BOTTOM_LEFT': 7,
	  'BOTTOM': 8,
	  'BOTTOM_RIGHT': 9
	};
	window['RichMarkerPosition'] = RichMarkerPosition;


	        //TODO: export / passthese on in the service instead of window
	        window.InfoBox = InfoBox;
	        window.Cluster = Cluster;
	        window.ClusterIcon = ClusterIcon;
	        window.MarkerClusterer = MarkerClusterer;
	        window.MarkerLabel_ = MarkerLabel_;
	        window.MarkerWithLabel = MarkerWithLabel;
	        window.RichMarker = RichMarker;
	      }();
	      //END REPLACE
	    })
	  };
	});
	;/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		/* istanbul ignore next */
		angular.module('uiGmapgoogle-maps.wrapped')
		.service('uiGmapDataStructures', function() {
		return {
		  Graph: __webpack_require__(1).Graph,
		  Queue: __webpack_require__(1).Queue
		};
		});


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		(function() {
		  module.exports = {
		    Graph: __webpack_require__(2),
		    Heap: __webpack_require__(3),
		    LinkedList: __webpack_require__(4),
		    Map: __webpack_require__(5),
		    Queue: __webpack_require__(6),
		    RedBlackTree: __webpack_require__(7),
		    Trie: __webpack_require__(8)
		  };

		}).call(this);


	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		/*
		Graph implemented as a modified incidence list. O(1) for every typical
		operation except `removeNode()` at O(E) where E is the number of edges.

		## Overview example:

		```js
		var graph = new Graph;
		graph.addNode('A'); // => a node object. For more info, log the output or check
		                    // the documentation for addNode
		graph.addNode('B');
		graph.addNode('C');
		graph.addEdge('A', 'C'); // => an edge object
		graph.addEdge('A', 'B');
		graph.getEdge('B', 'A'); // => undefined. Directed edge!
		graph.getEdge('A', 'B'); // => the edge object previously added
		graph.getEdge('A', 'B').weight = 2 // weight is the only built-in handy property
		                                   // of an edge object. Feel free to attach
		                                   // other properties
		graph.getInEdgesOf('B'); // => array of edge objects, in this case only one;
		                         // connecting A to B
		graph.getOutEdgesOf('A'); // => array of edge objects, one to B and one to C
		graph.getAllEdgesOf('A'); // => all the in and out edges. Edge directed toward
		                          // the node itself are only counted once
		forEachNode(function(nodeObject) {
		  console.log(node);
		});
		forEachEdge(function(edgeObject) {
		  console.log(edgeObject);
		});
		graph.removeNode('C'); // => 'C'. The edge between A and C also removed
		graph.removeEdge('A', 'B'); // => the edge object removed
		```

		## Properties:

		- nodeSize: total number of nodes.
		- edgeSize: total number of edges.
		*/


		(function() {
		  var Graph,
		    __hasProp = {}.hasOwnProperty;

		  Graph = (function() {
		    function Graph() {
		      this._nodes = {};
		      this.nodeSize = 0;
		      this.edgeSize = 0;
		    }

		    Graph.prototype.addNode = function(id) {
		      /*
		      The `id` is a unique identifier for the node, and should **not** change
		      after it's added. It will be used for adding, retrieving and deleting
		      related edges too.
		      
		      **Note** that, internally, the ids are kept in an object. JavaScript's
		      object hashes the id `'2'` and `2` to the same key, so please stick to a
		      simple id data type such as number or string.
		      
		      _Returns:_ the node object. Feel free to attach additional custom properties
		      on it for graph algorithms' needs. **Undefined if node id already exists**,
		      as to avoid accidental overrides.
		      */

		      if (!this._nodes[id]) {
		        this.nodeSize++;
		        return this._nodes[id] = {
		          _outEdges: {},
		          _inEdges: {}
		        };
		      }
		    };

		    Graph.prototype.getNode = function(id) {
		      /*
		      _Returns:_ the node object. Feel free to attach additional custom properties
		      on it for graph algorithms' needs.
		      */

		      return this._nodes[id];
		    };

		    Graph.prototype.removeNode = function(id) {
		      /*
		      _Returns:_ the node object removed, or undefined if it didn't exist in the
		      first place.
		      */

		      var inEdgeId, nodeToRemove, outEdgeId, _ref, _ref1;
		      nodeToRemove = this._nodes[id];
		      if (!nodeToRemove) {
		        return;
		      } else {
		        _ref = nodeToRemove._outEdges;
		        for (outEdgeId in _ref) {
		          if (!__hasProp.call(_ref, outEdgeId)) continue;
		          this.removeEdge(id, outEdgeId);
		        }
		        _ref1 = nodeToRemove._inEdges;
		        for (inEdgeId in _ref1) {
		          if (!__hasProp.call(_ref1, inEdgeId)) continue;
		          this.removeEdge(inEdgeId, id);
		        }
		        this.nodeSize--;
		        delete this._nodes[id];
		      }
		      return nodeToRemove;
		    };

		    Graph.prototype.addEdge = function(fromId, toId, weight) {
		      var edgeToAdd, fromNode, toNode;
		      if (weight == null) {
		        weight = 1;
		      }
		      /*
		      `fromId` and `toId` are the node id specified when it was created using
		      `addNode()`. `weight` is optional and defaults to 1. Ignoring it effectively
		      makes this an unweighted graph. Under the hood, `weight` is just a normal
		      property of the edge object.
		      
		      _Returns:_ the edge object created. Feel free to attach additional custom
		      properties on it for graph algorithms' needs. **Or undefined** if the nodes
		      of id `fromId` or `toId` aren't found, or if an edge already exists between
		      the two nodes.
		      */

		      if (this.getEdge(fromId, toId)) {
		        return;
		      }
		      fromNode = this._nodes[fromId];
		      toNode = this._nodes[toId];
		      if (!fromNode || !toNode) {
		        return;
		      }
		      edgeToAdd = {
		        weight: weight
		      };
		      fromNode._outEdges[toId] = edgeToAdd;
		      toNode._inEdges[fromId] = edgeToAdd;
		      this.edgeSize++;
		      return edgeToAdd;
		    };

		    Graph.prototype.getEdge = function(fromId, toId) {
		      /*
		      _Returns:_ the edge object, or undefined if the nodes of id `fromId` or
		      `toId` aren't found.
		      */

		      var fromNode, toNode;
		      fromNode = this._nodes[fromId];
		      toNode = this._nodes[toId];
		      if (!fromNode || !toNode) {

		      } else {
		        return fromNode._outEdges[toId];
		      }
		    };

		    Graph.prototype.removeEdge = function(fromId, toId) {
		      /*
		      _Returns:_ the edge object removed, or undefined of edge wasn't found.
		      */

		      var edgeToDelete, fromNode, toNode;
		      fromNode = this._nodes[fromId];
		      toNode = this._nodes[toId];
		      edgeToDelete = this.getEdge(fromId, toId);
		      if (!edgeToDelete) {
		        return;
		      }
		      delete fromNode._outEdges[toId];
		      delete toNode._inEdges[fromId];
		      this.edgeSize--;
		      return edgeToDelete;
		    };

		    Graph.prototype.getInEdgesOf = function(nodeId) {
		      /*
		      _Returns:_ an array of edge objects that are directed toward the node, or
		      empty array if no such edge or node exists.
		      */

		      var fromId, inEdges, toNode, _ref;
		      toNode = this._nodes[nodeId];
		      inEdges = [];
		      _ref = toNode != null ? toNode._inEdges : void 0;
		      for (fromId in _ref) {
		        if (!__hasProp.call(_ref, fromId)) continue;
		        inEdges.push(this.getEdge(fromId, nodeId));
		      }
		      return inEdges;
		    };

		    Graph.prototype.getOutEdgesOf = function(nodeId) {
		      /*
		      _Returns:_ an array of edge objects that go out of the node, or empty array
		      if no such edge or node exists.
		      */

		      var fromNode, outEdges, toId, _ref;
		      fromNode = this._nodes[nodeId];
		      outEdges = [];
		      _ref = fromNode != null ? fromNode._outEdges : void 0;
		      for (toId in _ref) {
		        if (!__hasProp.call(_ref, toId)) continue;
		        outEdges.push(this.getEdge(nodeId, toId));
		      }
		      return outEdges;
		    };

		    Graph.prototype.getAllEdgesOf = function(nodeId) {
		      /*
		      **Note:** not the same as concatenating `getInEdgesOf()` and
		      `getOutEdgesOf()`. Some nodes might have an edge pointing toward itself.
		      This method solves that duplication.
		      
		      _Returns:_ an array of edge objects linked to the node, no matter if they're
		      outgoing or coming. Duplicate edge created by self-pointing nodes are
		      removed. Only one copy stays. Empty array if node has no edge.
		      */

		      var i, inEdges, outEdges, selfEdge, _i, _ref, _ref1;
		      inEdges = this.getInEdgesOf(nodeId);
		      outEdges = this.getOutEdgesOf(nodeId);
		      if (inEdges.length === 0) {
		        return outEdges;
		      }
		      selfEdge = this.getEdge(nodeId, nodeId);
		      for (i = _i = 0, _ref = inEdges.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
		        if (inEdges[i] === selfEdge) {
		          _ref1 = [inEdges[inEdges.length - 1], inEdges[i]], inEdges[i] = _ref1[0], inEdges[inEdges.length - 1] = _ref1[1];
		          inEdges.pop();
		          break;
		        }
		      }
		      return inEdges.concat(outEdges);
		    };

		    Graph.prototype.forEachNode = function(operation) {
		      /*
		      Traverse through the graph in an arbitrary manner, visiting each node once.
		      Pass a function of the form `fn(nodeObject, nodeId)`.
		      
		      _Returns:_ undefined.
		      */

		      var nodeId, nodeObject, _ref;
		      _ref = this._nodes;
		      for (nodeId in _ref) {
		        if (!__hasProp.call(_ref, nodeId)) continue;
		        nodeObject = _ref[nodeId];
		        operation(nodeObject, nodeId);
		      }
		    };

		    Graph.prototype.forEachEdge = function(operation) {
		      /*
		      Traverse through the graph in an arbitrary manner, visiting each edge once.
		      Pass a function of the form `fn(edgeObject)`.
		      
		      _Returns:_ undefined.
		      */

		      var edgeObject, nodeId, nodeObject, toId, _ref, _ref1;
		      _ref = this._nodes;
		      for (nodeId in _ref) {
		        if (!__hasProp.call(_ref, nodeId)) continue;
		        nodeObject = _ref[nodeId];
		        _ref1 = nodeObject._outEdges;
		        for (toId in _ref1) {
		          if (!__hasProp.call(_ref1, toId)) continue;
		          edgeObject = _ref1[toId];
		          operation(edgeObject);
		        }
		      }
		    };

		    return Graph;

		  })();

		  module.exports = Graph;

		}).call(this);


	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		/*
		Minimum heap, i.e. smallest node at root.

		**Note:** does not accept null or undefined. This is by design. Those values
		cause comparison problems and might report false negative during extraction.

		## Overview example:

		```js
		var heap = new Heap([5, 6, 3, 4]);
		heap.add(10); // => 10
		heap.removeMin(); // => 3
		heap.peekMin(); // => 4
		```

		## Properties:

		- size: total number of items.
		*/


		(function() {
		  var Heap, _leftChild, _parent, _rightChild;

		  Heap = (function() {
		    function Heap(dataToHeapify) {
		      var i, item, _i, _j, _len, _ref;
		      if (dataToHeapify == null) {
		        dataToHeapify = [];
		      }
		      /*
		      Pass an optional array to be heapified. Takes only O(n) time.
		      */

		      this._data = [void 0];
		      for (_i = 0, _len = dataToHeapify.length; _i < _len; _i++) {
		        item = dataToHeapify[_i];
		        if (item != null) {
		          this._data.push(item);
		        }
		      }
		      if (this._data.length > 1) {
		        for (i = _j = 2, _ref = this._data.length; 2 <= _ref ? _j < _ref : _j > _ref; i = 2 <= _ref ? ++_j : --_j) {
		          this._upHeap(i);
		        }
		      }
		      this.size = this._data.length - 1;
		    }

		    Heap.prototype.add = function(value) {
		      /*
		      **Remember:** rejects null and undefined for mentioned reasons.
		      
		      _Returns:_ the value added.
		      */

		      if (value == null) {
		        return;
		      }
		      this._data.push(value);
		      this._upHeap(this._data.length - 1);
		      this.size++;
		      return value;
		    };

		    Heap.prototype.removeMin = function() {
		      /*
		      _Returns:_ the smallest item (the root).
		      */

		      var min;
		      if (this._data.length === 1) {
		        return;
		      }
		      this.size--;
		      if (this._data.length === 2) {
		        return this._data.pop();
		      }
		      min = this._data[1];
		      this._data[1] = this._data.pop();
		      this._downHeap();
		      return min;
		    };

		    Heap.prototype.peekMin = function() {
		      /*
		      Check the smallest item without removing it.
		      
		      _Returns:_ the smallest item (the root).
		      */

		      return this._data[1];
		    };

		    Heap.prototype._upHeap = function(index) {
		      var valueHolder, _ref;
		      valueHolder = this._data[index];
		      while (this._data[index] < this._data[_parent(index)] && index > 1) {
		        _ref = [this._data[_parent(index)], this._data[index]], this._data[index] = _ref[0], this._data[_parent(index)] = _ref[1];
		        index = _parent(index);
		      }
		    };

		    Heap.prototype._downHeap = function() {
		      var currentIndex, smallerChildIndex, _ref;
		      currentIndex = 1;
		      while (_leftChild(currentIndex < this._data.length)) {
		        smallerChildIndex = _leftChild(currentIndex);
		        if (smallerChildIndex < this._data.length - 1) {
		          if (this._data[_rightChild(currentIndex)] < this._data[smallerChildIndex]) {
		            smallerChildIndex = _rightChild(currentIndex);
		          }
		        }
		        if (this._data[smallerChildIndex] < this._data[currentIndex]) {
		          _ref = [this._data[currentIndex], this._data[smallerChildIndex]], this._data[smallerChildIndex] = _ref[0], this._data[currentIndex] = _ref[1];
		          currentIndex = smallerChildIndex;
		        } else {
		          break;
		        }
		      }
		    };

		    return Heap;

		  })();

		  _parent = function(index) {
		    return index >> 1;
		  };

		  _leftChild = function(index) {
		    return index << 1;
		  };

		  _rightChild = function(index) {
		    return (index << 1) + 1;
		  };

		  module.exports = Heap;

		}).call(this);


	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		/*
		Doubly Linked.

		## Overview example:

		```js
		var list = new LinkedList([5, 4, 9]);
		list.add(12); // => 12
		list.head.next.value; // => 4
		list.tail.value; // => 12
		list.at(-1); // => 12
		list.removeAt(2); // => 9
		list.remove(4); // => 4
		list.indexOf(5); // => 0
		list.add(5, 1); // => 5. Second 5 at position 1.
		list.indexOf(5, 1); // => 1
		```

		## Properties:

		- head: first item.
		- tail: last item.
		- size: total number of items.
		- item.value: value passed to the item when calling `add()`.
		- item.prev: previous item.
		- item.next: next item.
		*/


		(function() {
		  var LinkedList;

		  LinkedList = (function() {
		    function LinkedList(valuesToAdd) {
		      var value, _i, _len;
		      if (valuesToAdd == null) {
		        valuesToAdd = [];
		      }
		      /*
		      Can pass an array of elements to link together during `new LinkedList()`
		      initiation.
		      */

		      this.head = {
		        prev: void 0,
		        value: void 0,
		        next: void 0
		      };
		      this.tail = {
		        prev: void 0,
		        value: void 0,
		        next: void 0
		      };
		      this.size = 0;
		      for (_i = 0, _len = valuesToAdd.length; _i < _len; _i++) {
		        value = valuesToAdd[_i];
		        this.add(value);
		      }
		    }

		    LinkedList.prototype.at = function(position) {
		      /*
		      Get the item at `position` (optional). Accepts negative index:
		      
		      ```js
		      myList.at(-1); // Returns the last element.
		      ```
		      However, passing a negative index that surpasses the boundary will return
		      undefined:
		      
		      ```js
		      myList = new LinkedList([2, 6, 8, 3])
		      myList.at(-5); // Undefined.
		      myList.at(-4); // 2.
		      ```
		      _Returns:_ item gotten, or undefined if not found.
		      */

		      var currentNode, i, _i, _j, _ref;
		      if (!((-this.size <= position && position < this.size))) {
		        return;
		      }
		      position = this._adjust(position);
		      if (position * 2 < this.size) {
		        currentNode = this.head;
		        for (i = _i = 1; _i <= position; i = _i += 1) {
		          currentNode = currentNode.next;
		        }
		      } else {
		        currentNode = this.tail;
		        for (i = _j = 1, _ref = this.size - position - 1; _j <= _ref; i = _j += 1) {
		          currentNode = currentNode.prev;
		        }
		      }
		      return currentNode;
		    };

		    LinkedList.prototype.add = function(value, position) {
		      var currentNode, nodeToAdd, _ref, _ref1, _ref2;
		      if (position == null) {
		        position = this.size;
		      }
		      /*
		      Add a new item at `position` (optional). Defaults to adding at the end.
		      `position`, just like in `at()`, can be negative (within the negative
		      boundary). Position specifies the place the value's going to be, and the old
		      node will be pushed higher. `add(-2)` on list of size 7 is the same as
		      `add(5)`.
		      
		      _Returns:_ item added.
		      */

		      if (!((-this.size <= position && position <= this.size))) {
		        return;
		      }
		      nodeToAdd = {
		        value: value
		      };
		      position = this._adjust(position);
		      if (this.size === 0) {
		        this.head = nodeToAdd;
		      } else {
		        if (position === 0) {
		          _ref = [nodeToAdd, this.head, nodeToAdd], this.head.prev = _ref[0], nodeToAdd.next = _ref[1], this.head = _ref[2];
		        } else {
		          currentNode = this.at(position - 1);
		          _ref1 = [currentNode.next, nodeToAdd, nodeToAdd, currentNode], nodeToAdd.next = _ref1[0], (_ref2 = currentNode.next) != null ? _ref2.prev = _ref1[1] : void 0, currentNode.next = _ref1[2], nodeToAdd.prev = _ref1[3];
		        }
		      }
		      if (position === this.size) {
		        this.tail = nodeToAdd;
		      }
		      this.size++;
		      return value;
		    };

		    LinkedList.prototype.removeAt = function(position) {
		      var currentNode, valueToReturn, _ref;
		      if (position == null) {
		        position = this.size - 1;
		      }
		      /*
		      Remove an item at index `position` (optional). Defaults to the last item.
		      Index can be negative (within the boundary).
		      
		      _Returns:_ item removed.
		      */

		      if (!((-this.size <= position && position < this.size))) {
		        return;
		      }
		      if (this.size === 0) {
		        return;
		      }
		      position = this._adjust(position);
		      if (this.size === 1) {
		        valueToReturn = this.head.value;
		        this.head.value = this.tail.value = void 0;
		      } else {
		        if (position === 0) {
		          valueToReturn = this.head.value;
		          this.head = this.head.next;
		          this.head.prev = void 0;
		        } else {
		          currentNode = this.at(position);
		          valueToReturn = currentNode.value;
		          currentNode.prev.next = currentNode.next;
		          if ((_ref = currentNode.next) != null) {
		            _ref.prev = currentNode.prev;
		          }
		          if (position === this.size - 1) {
		            this.tail = currentNode.prev;
		          }
		        }
		      }
		      this.size--;
		      return valueToReturn;
		    };

		    LinkedList.prototype.remove = function(value) {
		      /*
		      Remove the item using its value instead of position. **Will remove the fist
		      occurrence of `value`.**
		      
		      _Returns:_ the value, or undefined if value's not found.
		      */

		      var currentNode;
		      if (value == null) {
		        return;
		      }
		      currentNode = this.head;
		      while (currentNode && currentNode.value !== value) {
		        currentNode = currentNode.next;
		      }
		      if (!currentNode) {
		        return;
		      }
		      if (this.size === 1) {
		        this.head.value = this.tail.value = void 0;
		      } else if (currentNode === this.head) {
		        this.head = this.head.next;
		        this.head.prev = void 0;
		      } else if (currentNode === this.tail) {
		        this.tail = this.tail.prev;
		        this.tail.next = void 0;
		      } else {
		        currentNode.prev.next = currentNode.next;
		        currentNode.next.prev = currentNode.prev;
		      }
		      this.size--;
		      return value;
		    };

		    LinkedList.prototype.indexOf = function(value, startingPosition) {
		      var currentNode, position;
		      if (startingPosition == null) {
		        startingPosition = 0;
		      }
		      /*
		      Find the index of an item, similarly to `array.indexOf()`. Defaults to start
		      searching from the beginning, by can start at another position by passing
		      `startingPosition`. This parameter can also be negative; but unlike the
		      other methods of this class, `startingPosition` (optional) can be as small
		      as desired; a value of -999 for a list of size 5 will start searching
		      normally, at the beginning.
		      
		      **Note:** searches forwardly, **not** backwardly, i.e:
		      
		      ```js
		      var myList = new LinkedList([2, 3, 1, 4, 3, 5])
		      myList.indexOf(3, -3); // Returns 4, not 1
		      ```
		      _Returns:_ index of item found, or -1 if not found.
		      */

		      if (((this.head.value == null) && !this.head.next) || startingPosition >= this.size) {
		        return -1;
		      }
		      startingPosition = Math.max(0, this._adjust(startingPosition));
		      currentNode = this.at(startingPosition);
		      position = startingPosition;
		      while (currentNode) {
		        if (currentNode.value === value) {
		          break;
		        }
		        currentNode = currentNode.next;
		        position++;
		      }
		      if (position === this.size) {
		        return -1;
		      } else {
		        return position;
		      }
		    };

		    LinkedList.prototype._adjust = function(position) {
		      if (position < 0) {
		        return this.size + position;
		      } else {
		        return position;
		      }
		    };

		    return LinkedList;

		  })();

		  module.exports = LinkedList;

		}).call(this);


	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		/*
		Kind of a stopgap measure for the upcoming [JavaScript
		Map](http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets)

		**Note:** due to JavaScript's limitations, hashing something other than Boolean,
		Number, String, Undefined, Null, RegExp, Function requires a hack that inserts a
		hidden unique property into the object. This means `set`, `get`, `has` and
		`delete` must employ the same object, and not a mere identical copy as in the
		case of, say, a string.

		## Overview example:

		```js
		var map = new Map({'alice': 'wonderland', 20: 'ok'});
		map.set('20', 5); // => 5
		map.get('20'); // => 5
		map.has('alice'); // => true
		map.delete(20) // => true
		var arr = [1, 2];
		map.add(arr, 'goody'); // => 'goody'
		map.has(arr); // => true
		map.has([1, 2]); // => false. Needs to compare by reference
		map.forEach(function(key, value) {
		  console.log(key, value);
		});
		```

		## Properties:

		- size: The total number of `(key, value)` pairs.
		*/


		(function() {
		  var Map, SPECIAL_TYPE_KEY_PREFIX, _extractDataType, _isSpecialType,
		    __hasProp = {}.hasOwnProperty;

		  SPECIAL_TYPE_KEY_PREFIX = '_mapId_';

		  Map = (function() {
		    Map._mapIdTracker = 0;

		    Map._newMapId = function() {
		      return this._mapIdTracker++;
		    };

		    function Map(objectToMap) {
		      /*
		      Pass an optional object whose (key, value) pair will be hashed. **Careful**
		      not to pass something like {5: 'hi', '5': 'hello'}, since JavaScript's
		      native object behavior will crush the first 5 property before it gets to
		      constructor.
		      */

		      var key, value;
		      this._content = {};
		      this._itemId = 0;
		      this._id = Map._newMapId();
		      this.size = 0;
		      for (key in objectToMap) {
		        if (!__hasProp.call(objectToMap, key)) continue;
		        value = objectToMap[key];
		        this.set(key, value);
		      }
		    }

		    Map.prototype.hash = function(key, makeHash) {
		      var propertyForMap, type;
		      if (makeHash == null) {
		        makeHash = false;
		      }
		      /*
		      The hash function for hashing keys is public. Feel free to replace it with
		      your own. The `makeHash` parameter is optional and accepts a boolean
		      (defaults to `false`) indicating whether or not to produce a new hash (for
		      the first use, naturally).
		      
		      _Returns:_ the hash.
		      */

		      type = _extractDataType(key);
		      if (_isSpecialType(key)) {
		        propertyForMap = SPECIAL_TYPE_KEY_PREFIX + this._id;
		        if (makeHash && !key[propertyForMap]) {
		          key[propertyForMap] = this._itemId++;
		        }
		        return propertyForMap + '_' + key[propertyForMap];
		      } else {
		        return type + '_' + key;
		      }
		    };

		    Map.prototype.set = function(key, value) {
		      /*
		      _Returns:_ value.
		      */

		      if (!this.has(key)) {
		        this.size++;
		      }
		      this._content[this.hash(key, true)] = [value, key];
		      return value;
		    };

		    Map.prototype.get = function(key) {
		      /*
		      _Returns:_ value corresponding to the key, or undefined if not found.
		      */

		      var _ref;
		      return (_ref = this._content[this.hash(key)]) != null ? _ref[0] : void 0;
		    };

		    Map.prototype.has = function(key) {
		      /*
		      Check whether a value exists for the key.
		      
		      _Returns:_ true or false.
		      */

		      return this.hash(key) in this._content;
		    };

		    Map.prototype["delete"] = function(key) {
		      /*
		      Remove the (key, value) pair.
		      
		      _Returns:_ **true or false**. Unlike most of this library, this method
		      doesn't return the deleted value. This is so that it conforms to the future
		      JavaScript `map.delete()`'s behavior.
		      */

		      var hashedKey;
		      hashedKey = this.hash(key);
		      if (hashedKey in this._content) {
		        delete this._content[hashedKey];
		        if (_isSpecialType(key)) {
		          delete key[SPECIAL_TYPE_KEY_PREFIX + this._id];
		        }
		        this.size--;
		        return true;
		      }
		      return false;
		    };

		    Map.prototype.forEach = function(operation) {
		      /*
		      Traverse through the map. Pass a function of the form `fn(key, value)`.
		      
		      _Returns:_ undefined.
		      */

		      var key, value, _ref;
		      _ref = this._content;
		      for (key in _ref) {
		        if (!__hasProp.call(_ref, key)) continue;
		        value = _ref[key];
		        operation(value[1], value[0]);
		      }
		    };

		    return Map;

		  })();

		  _isSpecialType = function(key) {
		    var simpleHashableTypes, simpleType, type, _i, _len;
		    simpleHashableTypes = ['Boolean', 'Number', 'String', 'Undefined', 'Null', 'RegExp', 'Function'];
		    type = _extractDataType(key);
		    for (_i = 0, _len = simpleHashableTypes.length; _i < _len; _i++) {
		      simpleType = simpleHashableTypes[_i];
		      if (type === simpleType) {
		        return false;
		      }
		    }
		    return true;
		  };

		  _extractDataType = function(type) {
		    return Object.prototype.toString.apply(type).match(/\[object (.+)\]/)[1];
		  };

		  module.exports = Map;

		}).call(this);


	/***/ },
	/* 6 */
	/***/ function(module, exports) {

		/*
		Amortized O(1) dequeue!

		## Overview example:

		```js
		var queue = new Queue([1, 6, 4]);
		queue.enqueue(10); // => 10
		queue.dequeue(); // => 1
		queue.dequeue(); // => 6
		queue.dequeue(); // => 4
		queue.peek(); // => 10
		queue.dequeue(); // => 10
		queue.peek(); // => undefined
		```

		## Properties:

		- size: The total number of items.
		*/


		(function() {
		  var Queue;

		  Queue = (function() {
		    function Queue(initialArray) {
		      if (initialArray == null) {
		        initialArray = [];
		      }
		      /*
		      Pass an optional array to be transformed into a queue. The item at index 0
		      is the first to be dequeued.
		      */

		      this._content = initialArray;
		      this._dequeueIndex = 0;
		      this.size = this._content.length;
		    }

		    Queue.prototype.enqueue = function(item) {
		      /*
		      _Returns:_ the item.
		      */

		      this.size++;
		      this._content.push(item);
		      return item;
		    };

		    Queue.prototype.dequeue = function() {
		      /*
		      _Returns:_ the dequeued item.
		      */

		      var itemToDequeue;
		      if (this.size === 0) {
		        return;
		      }
		      this.size--;
		      itemToDequeue = this._content[this._dequeueIndex];
		      this._dequeueIndex++;
		      if (this._dequeueIndex * 2 > this._content.length) {
		        this._content = this._content.slice(this._dequeueIndex);
		        this._dequeueIndex = 0;
		      }
		      return itemToDequeue;
		    };

		    Queue.prototype.peek = function() {
		      /*
		      Check the next item to be dequeued, without removing it.
		      
		      _Returns:_ the item.
		      */

		      return this._content[this._dequeueIndex];
		    };

		    return Queue;

		  })();

		  module.exports = Queue;

		}).call(this);


	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		/*
		Credit to Wikipedia's article on [Red-black
		tree](http://en.wikipedia.org/wiki/Red–black_tree)

		**Note:** doesn't handle duplicate entries, undefined and null. This is by
		design.

		## Overview example:

		```js
		var rbt = new RedBlackTree([7, 5, 1, 8]);
		rbt.add(2); // => 2
		rbt.add(10); // => 10
		rbt.has(5); // => true
		rbt.peekMin(); // => 1
		rbt.peekMax(); // => 10
		rbt.removeMin(); // => 1
		rbt.removeMax(); // => 10
		rbt.remove(8); // => 8
		```

		## Properties:

		- size: The total number of items.
		*/


		(function() {
		  var BLACK, NODE_FOUND, NODE_TOO_BIG, NODE_TOO_SMALL, RED, RedBlackTree, STOP_SEARCHING, _findNode, _grandParentOf, _isLeft, _leftOrRight, _peekMaxNode, _peekMinNode, _siblingOf, _uncleOf;

		  NODE_FOUND = 0;

		  NODE_TOO_BIG = 1;

		  NODE_TOO_SMALL = 2;

		  STOP_SEARCHING = 3;

		  RED = 1;

		  BLACK = 2;

		  RedBlackTree = (function() {
		    function RedBlackTree(valuesToAdd) {
		      var value, _i, _len;
		      if (valuesToAdd == null) {
		        valuesToAdd = [];
		      }
		      /*
		      Pass an optional array to be turned into binary tree. **Note:** does not
		      accept duplicate, undefined and null.
		      */

		      this._root;
		      this.size = 0;
		      for (_i = 0, _len = valuesToAdd.length; _i < _len; _i++) {
		        value = valuesToAdd[_i];
		        if (value != null) {
		          this.add(value);
		        }
		      }
		    }

		    RedBlackTree.prototype.add = function(value) {
		      /*
		      Again, make sure to not pass a value already in the tree, or undefined, or
		      null.
		      
		      _Returns:_ value added.
		      */

		      var currentNode, foundNode, nodeToInsert, _ref;
		      if (value == null) {
		        return;
		      }
		      this.size++;
		      nodeToInsert = {
		        value: value,
		        _color: RED
		      };
		      if (!this._root) {
		        this._root = nodeToInsert;
		      } else {
		        foundNode = _findNode(this._root, function(node) {
		          if (value === node.value) {
		            return NODE_FOUND;
		          } else {
		            if (value < node.value) {
		              if (node._left) {
		                return NODE_TOO_BIG;
		              } else {
		                nodeToInsert._parent = node;
		                node._left = nodeToInsert;
		                return STOP_SEARCHING;
		              }
		            } else {
		              if (node._right) {
		                return NODE_TOO_SMALL;
		              } else {
		                nodeToInsert._parent = node;
		                node._right = nodeToInsert;
		                return STOP_SEARCHING;
		              }
		            }
		          }
		        });
		        if (foundNode != null) {
		          return;
		        }
		      }
		      currentNode = nodeToInsert;
		      while (true) {
		        if (currentNode === this._root) {
		          currentNode._color = BLACK;
		          break;
		        }
		        if (currentNode._parent._color === BLACK) {
		          break;
		        }
		        if (((_ref = _uncleOf(currentNode)) != null ? _ref._color : void 0) === RED) {
		          currentNode._parent._color = BLACK;
		          _uncleOf(currentNode)._color = BLACK;
		          _grandParentOf(currentNode)._color = RED;
		          currentNode = _grandParentOf(currentNode);
		          continue;
		        }
		        if (!_isLeft(currentNode) && _isLeft(currentNode._parent)) {
		          this._rotateLeft(currentNode._parent);
		          currentNode = currentNode._left;
		        } else if (_isLeft(currentNode) && !_isLeft(currentNode._parent)) {
		          this._rotateRight(currentNode._parent);
		          currentNode = currentNode._right;
		        }
		        currentNode._parent._color = BLACK;
		        _grandParentOf(currentNode)._color = RED;
		        if (_isLeft(currentNode)) {
		          this._rotateRight(_grandParentOf(currentNode));
		        } else {
		          this._rotateLeft(_grandParentOf(currentNode));
		        }
		        break;
		      }
		      return value;
		    };

		    RedBlackTree.prototype.has = function(value) {
		      /*
		      _Returns:_ true or false.
		      */

		      var foundNode;
		      foundNode = _findNode(this._root, function(node) {
		        if (value === node.value) {
		          return NODE_FOUND;
		        } else if (value < node.value) {
		          return NODE_TOO_BIG;
		        } else {
		          return NODE_TOO_SMALL;
		        }
		      });
		      if (foundNode) {
		        return true;
		      } else {
		        return false;
		      }
		    };

		    RedBlackTree.prototype.peekMin = function() {
		      /*
		      Check the minimum value without removing it.
		      
		      _Returns:_ the minimum value.
		      */

		      var _ref;
		      return (_ref = _peekMinNode(this._root)) != null ? _ref.value : void 0;
		    };

		    RedBlackTree.prototype.peekMax = function() {
		      /*
		      Check the maximum value without removing it.
		      
		      _Returns:_ the maximum value.
		      */

		      var _ref;
		      return (_ref = _peekMaxNode(this._root)) != null ? _ref.value : void 0;
		    };

		    RedBlackTree.prototype.remove = function(value) {
		      /*
		      _Returns:_ the value removed, or undefined if the value's not found.
		      */

		      var foundNode;
		      foundNode = _findNode(this._root, function(node) {
		        if (value === node.value) {
		          return NODE_FOUND;
		        } else if (value < node.value) {
		          return NODE_TOO_BIG;
		        } else {
		          return NODE_TOO_SMALL;
		        }
		      });
		      if (!foundNode) {
		        return;
		      }
		      this._removeNode(this._root, foundNode);
		      this.size--;
		      return value;
		    };

		    RedBlackTree.prototype.removeMin = function() {
		      /*
		      _Returns:_ smallest item removed, or undefined if tree's empty.
		      */

		      var nodeToRemove, valueToReturn;
		      nodeToRemove = _peekMinNode(this._root);
		      if (!nodeToRemove) {
		        return;
		      }
		      valueToReturn = nodeToRemove.value;
		      this._removeNode(this._root, nodeToRemove);
		      return valueToReturn;
		    };

		    RedBlackTree.prototype.removeMax = function() {
		      /*
		      _Returns:_ biggest item removed, or undefined if tree's empty.
		      */

		      var nodeToRemove, valueToReturn;
		      nodeToRemove = _peekMaxNode(this._root);
		      if (!nodeToRemove) {
		        return;
		      }
		      valueToReturn = nodeToRemove.value;
		      this._removeNode(this._root, nodeToRemove);
		      return valueToReturn;
		    };

		    RedBlackTree.prototype._removeNode = function(root, node) {
		      var sibling, successor, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
		      if (node._left && node._right) {
		        successor = _peekMinNode(node._right);
		        node.value = successor.value;
		        node = successor;
		      }
		      successor = node._left || node._right;
		      if (!successor) {
		        successor = {
		          color: BLACK,
		          _right: void 0,
		          _left: void 0,
		          isLeaf: true
		        };
		      }
		      successor._parent = node._parent;
		      if ((_ref = node._parent) != null) {
		        _ref[_leftOrRight(node)] = successor;
		      }
		      if (node._color === BLACK) {
		        if (successor._color === RED) {
		          successor._color = BLACK;
		          if (!successor._parent) {
		            this._root = successor;
		          }
		        } else {
		          while (true) {
		            if (!successor._parent) {
		              if (!successor.isLeaf) {
		                this._root = successor;
		              } else {
		                this._root = void 0;
		              }
		              break;
		            }
		            sibling = _siblingOf(successor);
		            if ((sibling != null ? sibling._color : void 0) === RED) {
		              successor._parent._color = RED;
		              sibling._color = BLACK;
		              if (_isLeft(successor)) {
		                this._rotateLeft(successor._parent);
		              } else {
		                this._rotateRight(successor._parent);
		              }
		            }
		            sibling = _siblingOf(successor);
		            if (successor._parent._color === BLACK && (!sibling || (sibling._color === BLACK && (!sibling._left || sibling._left._color === BLACK) && (!sibling._right || sibling._right._color === BLACK)))) {
		              if (sibling != null) {
		                sibling._color = RED;
		              }
		              if (successor.isLeaf) {
		                successor._parent[_leftOrRight(successor)] = void 0;
		              }
		              successor = successor._parent;
		              continue;
		            }
		            if (successor._parent._color === RED && (!sibling || (sibling._color === BLACK && (!sibling._left || ((_ref1 = sibling._left) != null ? _ref1._color : void 0) === BLACK) && (!sibling._right || ((_ref2 = sibling._right) != null ? _ref2._color : void 0) === BLACK)))) {
		              if (sibling != null) {
		                sibling._color = RED;
		              }
		              successor._parent._color = BLACK;
		              break;
		            }
		            if ((sibling != null ? sibling._color : void 0) === BLACK) {
		              if (_isLeft(successor) && (!sibling._right || sibling._right._color === BLACK) && ((_ref3 = sibling._left) != null ? _ref3._color : void 0) === RED) {
		                sibling._color = RED;
		                if ((_ref4 = sibling._left) != null) {
		                  _ref4._color = BLACK;
		                }
		                this._rotateRight(sibling);
		              } else if (!_isLeft(successor) && (!sibling._left || sibling._left._color === BLACK) && ((_ref5 = sibling._right) != null ? _ref5._color : void 0) === RED) {
		                sibling._color = RED;
		                if ((_ref6 = sibling._right) != null) {
		                  _ref6._color = BLACK;
		                }
		                this._rotateLeft(sibling);
		              }
		              break;
		            }
		            sibling = _siblingOf(successor);
		            sibling._color = successor._parent._color;
		            if (_isLeft(successor)) {
		              sibling._right._color = BLACK;
		              this._rotateRight(successor._parent);
		            } else {
		              sibling._left._color = BLACK;
		              this._rotateLeft(successor._parent);
		            }
		          }
		        }
		      }
		      if (successor.isLeaf) {
		        return (_ref7 = successor._parent) != null ? _ref7[_leftOrRight(successor)] = void 0 : void 0;
		      }
		    };

		    RedBlackTree.prototype._rotateLeft = function(node) {
		      var _ref, _ref1;
		      if ((_ref = node._parent) != null) {
		        _ref[_leftOrRight(node)] = node._right;
		      }
		      node._right._parent = node._parent;
		      node._parent = node._right;
		      node._right = node._right._left;
		      node._parent._left = node;
		      if ((_ref1 = node._right) != null) {
		        _ref1._parent = node;
		      }
		      if (node._parent._parent == null) {
		        return this._root = node._parent;
		      }
		    };

		    RedBlackTree.prototype._rotateRight = function(node) {
		      var _ref, _ref1;
		      if ((_ref = node._parent) != null) {
		        _ref[_leftOrRight(node)] = node._left;
		      }
		      node._left._parent = node._parent;
		      node._parent = node._left;
		      node._left = node._left._right;
		      node._parent._right = node;
		      if ((_ref1 = node._left) != null) {
		        _ref1._parent = node;
		      }
		      if (node._parent._parent == null) {
		        return this._root = node._parent;
		      }
		    };

		    return RedBlackTree;

		  })();

		  _isLeft = function(node) {
		    return node === node._parent._left;
		  };

		  _leftOrRight = function(node) {
		    if (_isLeft(node)) {
		      return '_left';
		    } else {
		      return '_right';
		    }
		  };

		  _findNode = function(startingNode, comparator) {
		    var comparisonResult, currentNode, foundNode;
		    currentNode = startingNode;
		    foundNode = void 0;
		    while (currentNode) {
		      comparisonResult = comparator(currentNode);
		      if (comparisonResult === NODE_FOUND) {
		        foundNode = currentNode;
		        break;
		      }
		      if (comparisonResult === NODE_TOO_BIG) {
		        currentNode = currentNode._left;
		      } else if (comparisonResult === NODE_TOO_SMALL) {
		        currentNode = currentNode._right;
		      } else if (comparisonResult === STOP_SEARCHING) {
		        break;
		      }
		    }
		    return foundNode;
		  };

		  _peekMinNode = function(startingNode) {
		    return _findNode(startingNode, function(node) {
		      if (node._left) {
		        return NODE_TOO_BIG;
		      } else {
		        return NODE_FOUND;
		      }
		    });
		  };

		  _peekMaxNode = function(startingNode) {
		    return _findNode(startingNode, function(node) {
		      if (node._right) {
		        return NODE_TOO_SMALL;
		      } else {
		        return NODE_FOUND;
		      }
		    });
		  };

		  _grandParentOf = function(node) {
		    var _ref;
		    return (_ref = node._parent) != null ? _ref._parent : void 0;
		  };

		  _uncleOf = function(node) {
		    if (!_grandParentOf(node)) {
		      return;
		    }
		    if (_isLeft(node._parent)) {
		      return _grandParentOf(node)._right;
		    } else {
		      return _grandParentOf(node)._left;
		    }
		  };

		  _siblingOf = function(node) {
		    if (_isLeft(node)) {
		      return node._parent._right;
		    } else {
		      return node._parent._left;
		    }
		  };

		  module.exports = RedBlackTree;

		}).call(this);


	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		Good for fast insertion/removal/lookup of strings.

		## Overview example:

		```js
		var trie = new Trie(['bear', 'beer']);
		trie.add('hello'); // => 'hello'
		trie.add('helloha!'); // => 'helloha!'
		trie.has('bears'); // => false
		trie.longestPrefixOf('beatrice'); // => 'bea'
		trie.wordsWithPrefix('hel'); // => ['hello', 'helloha!']
		trie.remove('beers'); // => undefined. 'beer' still exists
		trie.remove('Beer') // => undefined. Case-sensitive
		trie.remove('beer') // => 'beer'. Removed
		```

		## Properties:

		- size: The total number of words.
		*/


		(function() {
		  var Queue, Trie, WORD_END, _hasAtLeastNChildren,
		    __hasProp = {}.hasOwnProperty;

		  Queue = __webpack_require__(6);

		  WORD_END = 'end';

		  Trie = (function() {
		    function Trie(words) {
		      var word, _i, _len;
		      if (words == null) {
		        words = [];
		      }
		      /*
		      Pass an optional array of strings to be inserted initially.
		      */

		      this._root = {};
		      this.size = 0;
		      for (_i = 0, _len = words.length; _i < _len; _i++) {
		        word = words[_i];
		        this.add(word);
		      }
		    }

		    Trie.prototype.add = function(word) {
		      /*
		      Add a whole string to the trie.
		      
		      _Returns:_ the word added. Will return undefined (without adding the value)
		      if the word passed is null or undefined.
		      */

		      var currentNode, letter, _i, _len;
		      if (word == null) {
		        return;
		      }
		      this.size++;
		      currentNode = this._root;
		      for (_i = 0, _len = word.length; _i < _len; _i++) {
		        letter = word[_i];
		        if (currentNode[letter] == null) {
		          currentNode[letter] = {};
		        }
		        currentNode = currentNode[letter];
		      }
		      currentNode[WORD_END] = true;
		      return word;
		    };

		    Trie.prototype.has = function(word) {
		      /*
		      __Returns:_ true or false.
		      */

		      var currentNode, letter, _i, _len;
		      if (word == null) {
		        return false;
		      }
		      currentNode = this._root;
		      for (_i = 0, _len = word.length; _i < _len; _i++) {
		        letter = word[_i];
		        if (currentNode[letter] == null) {
		          return false;
		        }
		        currentNode = currentNode[letter];
		      }
		      if (currentNode[WORD_END]) {
		        return true;
		      } else {
		        return false;
		      }
		    };

		    Trie.prototype.longestPrefixOf = function(word) {
		      /*
		      Find all words containing the prefix. The word itself counts as a prefix.
		      
		      ```js
		      var trie = new Trie;
		      trie.add('hello');
		      trie.longestPrefixOf('he'); // 'he'
		      trie.longestPrefixOf('hello'); // 'hello'
		      trie.longestPrefixOf('helloha!'); // 'hello'
		      ```
		      
		      _Returns:_ the prefix string, or empty string if no prefix found.
		      */

		      var currentNode, letter, prefix, _i, _len;
		      if (word == null) {
		        return '';
		      }
		      currentNode = this._root;
		      prefix = '';
		      for (_i = 0, _len = word.length; _i < _len; _i++) {
		        letter = word[_i];
		        if (currentNode[letter] == null) {
		          break;
		        }
		        prefix += letter;
		        currentNode = currentNode[letter];
		      }
		      return prefix;
		    };

		    Trie.prototype.wordsWithPrefix = function(prefix) {
		      /*
		      Find all words containing the prefix. The word itself counts as a prefix.
		      **Watch out for edge cases.**
		      
		      ```js
		      var trie = new Trie;
		      trie.wordsWithPrefix(''); // []. Check later case below.
		      trie.add('');
		      trie.wordsWithPrefix(''); // ['']
		      trie.add('he');
		      trie.add('hello');
		      trie.add('hell');
		      trie.add('bear');
		      trie.add('z');
		      trie.add('zebra');
		      trie.wordsWithPrefix('hel'); // ['hell', 'hello']
		      ```
		      
		      _Returns:_ an array of strings, or empty array if no word found.
		      */

		      var accumulatedLetters, currentNode, letter, node, queue, subNode, words, _i, _len, _ref;
		      if (prefix == null) {
		        return [];
		      }
		      (prefix != null) || (prefix = '');
		      words = [];
		      currentNode = this._root;
		      for (_i = 0, _len = prefix.length; _i < _len; _i++) {
		        letter = prefix[_i];
		        currentNode = currentNode[letter];
		        if (currentNode == null) {
		          return [];
		        }
		      }
		      queue = new Queue();
		      queue.enqueue([currentNode, '']);
		      while (queue.size !== 0) {
		        _ref = queue.dequeue(), node = _ref[0], accumulatedLetters = _ref[1];
		        if (node[WORD_END]) {
		          words.push(prefix + accumulatedLetters);
		        }
		        for (letter in node) {
		          if (!__hasProp.call(node, letter)) continue;
		          subNode = node[letter];
		          queue.enqueue([subNode, accumulatedLetters + letter]);
		        }
		      }
		      return words;
		    };

		    Trie.prototype.remove = function(word) {
		      /*
		      _Returns:_ the string removed, or undefined if the word in its whole doesn't
		      exist. **Note:** this means removing `beers` when only `beer` exists will
		      return undefined and conserve `beer`.
		      */

		      var currentNode, i, letter, prefix, _i, _j, _len, _ref;
		      if (word == null) {
		        return;
		      }
		      currentNode = this._root;
		      prefix = [];
		      for (_i = 0, _len = word.length; _i < _len; _i++) {
		        letter = word[_i];
		        if (currentNode[letter] == null) {
		          return;
		        }
		        currentNode = currentNode[letter];
		        prefix.push([letter, currentNode]);
		      }
		      if (!currentNode[WORD_END]) {
		        return;
		      }
		      this.size--;
		      delete currentNode[WORD_END];
		      if (_hasAtLeastNChildren(currentNode, 1)) {
		        return word;
		      }
		      for (i = _j = _ref = prefix.length - 1; _ref <= 1 ? _j <= 1 : _j >= 1; i = _ref <= 1 ? ++_j : --_j) {
		        if (!_hasAtLeastNChildren(prefix[i][1], 1)) {
		          delete prefix[i - 1][1][prefix[i][0]];
		        } else {
		          break;
		        }
		      }
		      if (!_hasAtLeastNChildren(this._root[prefix[0][0]], 1)) {
		        delete this._root[prefix[0][0]];
		      }
		      return word;
		    };

		    return Trie;

		  })();

		  _hasAtLeastNChildren = function(node, n) {
		    var child, childCount;
		    if (n === 0) {
		      return true;
		    }
		    childCount = 0;
		    for (child in node) {
		      if (!__hasProp.call(node, child)) continue;
		      childCount++;
		      if (childCount >= n) {
		        return true;
		      }
		    }
		    return false;
		  };

		  module.exports = Trie;

		}).call(this);


	/***/ }
	/******/ ]);;angular.module('uiGmapgoogle-maps.wrapped')
	.service('uiGmapMarkerSpiderfier', [ 'uiGmapGoogleMapApi', function(GoogleMapApi) {
	  var self = this;
	  /* istanbul ignore next */
	  +function(){
	    
	/** @preserve OverlappingMarkerSpiderfier
	https://github.com/jawj/OverlappingMarkerSpiderfier
	Copyright (c) 2011 - 2013 George MacKerron
	Released under the MIT licence: http://opensource.org/licenses/mit-license
	Note: The Google Maps API v3 must be included *before* this code
	 */
	var hasProp = {}.hasOwnProperty,
	  slice = [].slice;

	this['OverlappingMarkerSpiderfier'] = (function() {
	  var ge, gm, j, lcH, lcU, len, mt, p, ref, twoPi, x;

	  p = _Class.prototype;

	  ref = [_Class, p];
	  for (j = 0, len = ref.length; j < len; j++) {
	    x = ref[j];
	    x['VERSION'] = '0.3.3';
	  }

	  gm = void 0;

	  ge = void 0;

	  mt = void 0;

	  twoPi = Math.PI * 2;

	  p['keepSpiderfied'] = false;

	  p['markersWontHide'] = false;

	  p['markersWontMove'] = false;

	  p['nearbyDistance'] = 20;

	  p['circleSpiralSwitchover'] = 9;

	  p['circleFootSeparation'] = 23;

	  p['circleStartAngle'] = twoPi / 12;

	  p['spiralFootSeparation'] = 26;

	  p['spiralLengthStart'] = 11;

	  p['spiralLengthFactor'] = 4;

	  p['spiderfiedZIndex'] = 1000;

	  p['usualLegZIndex'] = 10;

	  p['highlightedLegZIndex'] = 20;

	  p['event'] = 'click';

	  p['minZoomLevel'] = false;

	  p['legWeight'] = 1.5;

	  p['legColors'] = {
	    'usual': {},
	    'highlighted': {}
	  };

	  lcU = p['legColors']['usual'];

	  lcH = p['legColors']['highlighted'];

	  _Class['initializeGoogleMaps'] = function(google) {
	    gm = google.maps;
	    ge = gm.event;
	    mt = gm.MapTypeId;
	    lcU[mt.HYBRID] = lcU[mt.SATELLITE] = '#fff';
	    lcH[mt.HYBRID] = lcH[mt.SATELLITE] = '#f00';
	    lcU[mt.TERRAIN] = lcU[mt.ROADMAP] = '#444';
	    lcH[mt.TERRAIN] = lcH[mt.ROADMAP] = '#f00';
	    this.ProjHelper = function(map) {
	      return this.setMap(map);
	    };
	    this.ProjHelper.prototype = new gm.OverlayView();
	    return this.ProjHelper.prototype['draw'] = function() {};
	  };

	  function _Class(map1, opts) {
	    var e, k, l, len1, ref1, v;
	    this.map = map1;
	    if (opts == null) {
	      opts = {};
	    }
	    for (k in opts) {
	      if (!hasProp.call(opts, k)) continue;
	      v = opts[k];
	      this[k] = v;
	    }
	    this.projHelper = new this.constructor.ProjHelper(this.map);
	    this.initMarkerArrays();
	    this.listeners = {};
	    ref1 = ['click', 'zoom_changed', 'maptypeid_changed'];
	    for (l = 0, len1 = ref1.length; l < len1; l++) {
	      e = ref1[l];
	      ge.addListener(this.map, e, (function(_this) {
	        return function() {
	          return _this['unspiderfy']();
	        };
	      })(this));
	    }
	  }

	  p.initMarkerArrays = function() {
	    this.markers = [];
	    return this.markerListenerRefs = [];
	  };

	  p['addMarker'] = function(marker) {
	    var listenerRefs;
	    if (marker['_oms'] != null) {
	      return this;
	    }
	    marker['_oms'] = true;
	    listenerRefs = [
	      ge.addListener(marker, this['event'], (function(_this) {
	        return function(event) {
	          return _this.spiderListener(marker, event);
	        };
	      })(this))
	    ];
	    if (!this['markersWontHide']) {
	      listenerRefs.push(ge.addListener(marker, 'visible_changed', (function(_this) {
	        return function() {
	          return _this.markerChangeListener(marker, false);
	        };
	      })(this)));
	    }
	    if (!this['markersWontMove']) {
	      listenerRefs.push(ge.addListener(marker, 'position_changed', (function(_this) {
	        return function() {
	          return _this.markerChangeListener(marker, true);
	        };
	      })(this)));
	    }
	    this.markerListenerRefs.push(listenerRefs);
	    this.markers.push(marker);
	    return this;
	  };

	  p.markerChangeListener = function(marker, positionChanged) {
	    if ((marker['_omsData'] != null) && (positionChanged || !marker.getVisible()) && !((this.spiderfying != null) || (this.unspiderfying != null))) {
	      return this['unspiderfy'](positionChanged ? marker : null);
	    }
	  };

	  p['getMarkers'] = function() {
	    return this.markers.slice(0);
	  };

	  p['removeMarker'] = function(marker) {
	    var i, l, len1, listenerRef, listenerRefs;
	    if (marker['_omsData'] != null) {
	      this['unspiderfy']();
	    }
	    i = this.arrIndexOf(this.markers, marker);
	    if (i < 0) {
	      return this;
	    }
	    listenerRefs = this.markerListenerRefs.splice(i, 1)[0];
	    for (l = 0, len1 = listenerRefs.length; l < len1; l++) {
	      listenerRef = listenerRefs[l];
	      ge.removeListener(listenerRef);
	    }
	    delete marker['_oms'];
	    this.markers.splice(i, 1);
	    return this;
	  };

	  p['clearMarkers'] = function() {
	    var i, l, len1, len2, listenerRef, listenerRefs, marker, n, ref1;
	    this['unspiderfy']();
	    ref1 = this.markers;
	    for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
	      marker = ref1[i];
	      listenerRefs = this.markerListenerRefs[i];
	      for (n = 0, len2 = listenerRefs.length; n < len2; n++) {
	        listenerRef = listenerRefs[n];
	        ge.removeListener(listenerRef);
	      }
	      delete marker['_oms'];
	    }
	    this.initMarkerArrays();
	    return this;
	  };

	  p['addListener'] = function(event, func) {
	    var base;
	    ((base = this.listeners)[event] != null ? base[event] : base[event] = []).push(func);
	    return this;
	  };

	  p['removeListener'] = function(event, func) {
	    var i;
	    i = this.arrIndexOf(this.listeners[event], func);
	    if (!(i < 0)) {
	      this.listeners[event].splice(i, 1);
	    }
	    return this;
	  };

	  p['clearListeners'] = function(event) {
	    this.listeners[event] = [];
	    return this;
	  };

	  p.trigger = function() {
	    var args, event, func, l, len1, ref1, ref2, results;
	    event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    ref2 = (ref1 = this.listeners[event]) != null ? ref1 : [];
	    results = [];
	    for (l = 0, len1 = ref2.length; l < len1; l++) {
	      func = ref2[l];
	      results.push(func.apply(null, args));
	    }
	    return results;
	  };

	  p.generatePtsCircle = function(count, centerPt) {
	    var angle, angleStep, circumference, i, l, legLength, ref1, results;
	    circumference = this['circleFootSeparation'] * (2 + count);
	    legLength = circumference / twoPi;
	    angleStep = twoPi / count;
	    results = [];
	    for (i = l = 0, ref1 = count; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
	      angle = this['circleStartAngle'] + i * angleStep;
	      results.push(new gm.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle)));
	    }
	    return results;
	  };

	  p.generatePtsSpiral = function(count, centerPt) {
	    var angle, i, l, legLength, pt, ref1, results;
	    legLength = this['spiralLengthStart'];
	    angle = 0;
	    results = [];
	    for (i = l = 0, ref1 = count; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
	      angle += this['spiralFootSeparation'] / legLength + i * 0.0005;
	      pt = new gm.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle));
	      legLength += twoPi * this['spiralLengthFactor'] / angle;
	      results.push(pt);
	    }
	    return results;
	  };

	  p.spiderListener = function(marker, event) {
	    var $this, clear, l, len1, m, mPt, markerPt, markerSpiderfied, nDist, nearbyMarkerData, nonNearbyMarkers, pxSq, ref1;
	    markerSpiderfied = marker['_omsData'] != null;
	    if (!(markerSpiderfied && this['keepSpiderfied'])) {
	      if (this['event'] === 'mouseover') {
	        $this = this;
	        clear = function() {
	          return $this['unspiderfy']();
	        };
	        window.clearTimeout(p.timeout);
	        p.timeout = setTimeout(clear, 3000);
	      } else {
	        this['unspiderfy']();
	      }
	    }
	    if (markerSpiderfied || this.map.getStreetView().getVisible() || this.map.getMapTypeId() === 'GoogleEarthAPI') {
	      return this.trigger('click', marker, event);
	    } else {
	      nearbyMarkerData = [];
	      nonNearbyMarkers = [];
	      nDist = this['nearbyDistance'];
	      pxSq = nDist * nDist;
	      markerPt = this.llToPt(marker.position);
	      ref1 = this.markers;
	      for (l = 0, len1 = ref1.length; l < len1; l++) {
	        m = ref1[l];
	        if (!((m.map != null) && m.getVisible())) {
	          continue;
	        }
	        mPt = this.llToPt(m.position);
	        if (this.ptDistanceSq(mPt, markerPt) < pxSq) {
	          nearbyMarkerData.push({
	            marker: m,
	            markerPt: mPt
	          });
	        } else {
	          nonNearbyMarkers.push(m);
	        }
	      }
	      if (nearbyMarkerData.length === 1) {
	        return this.trigger('click', marker, event);
	      } else {
	        return this.spiderfy(nearbyMarkerData, nonNearbyMarkers);
	      }
	    }
	  };

	  p['markersNearMarker'] = function(marker, firstOnly) {
	    var l, len1, m, mPt, markerPt, markers, nDist, pxSq, ref1, ref2, ref3;
	    if (firstOnly == null) {
	      firstOnly = false;
	    }
	    if (this.projHelper.getProjection() == null) {
	      throw "Must wait for 'idle' event on map before calling markersNearMarker";
	    }
	    nDist = this['nearbyDistance'];
	    pxSq = nDist * nDist;
	    markerPt = this.llToPt(marker.position);
	    markers = [];
	    ref1 = this.markers;
	    for (l = 0, len1 = ref1.length; l < len1; l++) {
	      m = ref1[l];
	      if (m === marker || (m.map == null) || !m.getVisible()) {
	        continue;
	      }
	      mPt = this.llToPt((ref2 = (ref3 = m['_omsData']) != null ? ref3.usualPosition : void 0) != null ? ref2 : m.position);
	      if (this.ptDistanceSq(mPt, markerPt) < pxSq) {
	        markers.push(m);
	        if (firstOnly) {
	          break;
	        }
	      }
	    }
	    return markers;
	  };

	  p['markersNearAnyOtherMarker'] = function() {
	    var i, i1, i2, l, len1, len2, len3, m, m1, m1Data, m2, m2Data, mData, n, nDist, pxSq, q, ref1, ref2, ref3, results;
	    if (this.projHelper.getProjection() == null) {
	      throw "Must wait for 'idle' event on map before calling markersNearAnyOtherMarker";
	    }
	    nDist = this['nearbyDistance'];
	    pxSq = nDist * nDist;
	    mData = (function() {
	      var l, len1, ref1, ref2, ref3, results;
	      ref1 = this.markers;
	      results = [];
	      for (l = 0, len1 = ref1.length; l < len1; l++) {
	        m = ref1[l];
	        results.push({
	          pt: this.llToPt((ref2 = (ref3 = m['_omsData']) != null ? ref3.usualPosition : void 0) != null ? ref2 : m.position),
	          willSpiderfy: false
	        });
	      }
	      return results;
	    }).call(this);
	    ref1 = this.markers;
	    for (i1 = l = 0, len1 = ref1.length; l < len1; i1 = ++l) {
	      m1 = ref1[i1];
	      if (!((m1.map != null) && m1.getVisible())) {
	        continue;
	      }
	      m1Data = mData[i1];
	      if (m1Data.willSpiderfy) {
	        continue;
	      }
	      ref2 = this.markers;
	      for (i2 = n = 0, len2 = ref2.length; n < len2; i2 = ++n) {
	        m2 = ref2[i2];
	        if (i2 === i1) {
	          continue;
	        }
	        if (!((m2.map != null) && m2.getVisible())) {
	          continue;
	        }
	        m2Data = mData[i2];
	        if (i2 < i1 && !m2Data.willSpiderfy) {
	          continue;
	        }
	        if (this.ptDistanceSq(m1Data.pt, m2Data.pt) < pxSq) {
	          m1Data.willSpiderfy = m2Data.willSpiderfy = true;
	          break;
	        }
	      }
	    }
	    ref3 = this.markers;
	    results = [];
	    for (i = q = 0, len3 = ref3.length; q < len3; i = ++q) {
	      m = ref3[i];
	      if (mData[i].willSpiderfy) {
	        results.push(m);
	      }
	    }
	    return results;
	  };

	  p.makeHighlightListenerFuncs = function(marker) {
	    return {
	      highlight: (function(_this) {
	        return function() {
	          return marker['_omsData'].leg.setOptions({
	            strokeColor: _this['legColors']['highlighted'][_this.map.mapTypeId],
	            zIndex: _this['highlightedLegZIndex']
	          });
	        };
	      })(this),
	      unhighlight: (function(_this) {
	        return function() {
	          return marker['_omsData'].leg.setOptions({
	            strokeColor: _this['legColors']['usual'][_this.map.mapTypeId],
	            zIndex: _this['usualLegZIndex']
	          });
	        };
	      })(this)
	    };
	  };

	  p.spiderfy = function(markerData, nonNearbyMarkers) {
	    var bodyPt, footLl, footPt, footPts, highlightListenerFuncs, leg, marker, md, nearestMarkerDatum, numFeet, spiderfiedMarkers;
	    if (this['minZoomLevel'] && this.map.getZoom() < this['minZoomLevel']) {
	      return false;
	    }
	    this.spiderfying = true;
	    numFeet = markerData.length;
	    bodyPt = this.ptAverage((function() {
	      var l, len1, results;
	      results = [];
	      for (l = 0, len1 = markerData.length; l < len1; l++) {
	        md = markerData[l];
	        results.push(md.markerPt);
	      }
	      return results;
	    })());
	    footPts = numFeet >= this['circleSpiralSwitchover'] ? this.generatePtsSpiral(numFeet, bodyPt).reverse() : this.generatePtsCircle(numFeet, bodyPt);
	    spiderfiedMarkers = (function() {
	      var l, len1, results;
	      results = [];
	      for (l = 0, len1 = footPts.length; l < len1; l++) {
	        footPt = footPts[l];
	        footLl = this.ptToLl(footPt);
	        nearestMarkerDatum = this.minExtract(markerData, (function(_this) {
	          return function(md) {
	            return _this.ptDistanceSq(md.markerPt, footPt);
	          };
	        })(this));
	        marker = nearestMarkerDatum.marker;
	        leg = new gm.Polyline({
	          map: this.map,
	          path: [marker.position, footLl],
	          strokeColor: this['legColors']['usual'][this.map.mapTypeId],
	          strokeWeight: this['legWeight'],
	          zIndex: this['usualLegZIndex']
	        });
	        marker['_omsData'] = {
	          usualPosition: marker.position,
	          leg: leg
	        };
	        if (this['legColors']['highlighted'][this.map.mapTypeId] !== this['legColors']['usual'][this.map.mapTypeId]) {
	          highlightListenerFuncs = this.makeHighlightListenerFuncs(marker);
	          marker['_omsData'].hightlightListeners = {
	            highlight: ge.addListener(marker, 'mouseover', highlightListenerFuncs.highlight),
	            unhighlight: ge.addListener(marker, 'mouseout', highlightListenerFuncs.unhighlight)
	          };
	        }
	        marker.setPosition(footLl);
	        marker.setZIndex(Math.round(this['spiderfiedZIndex'] + footPt.y));
	        results.push(marker);
	      }
	      return results;
	    }).call(this);
	    delete this.spiderfying;
	    this.spiderfied = true;
	    return this.trigger('spiderfy', spiderfiedMarkers, nonNearbyMarkers);
	  };

	  p['unspiderfy'] = function(markerNotToMove) {
	    var l, len1, listeners, marker, nonNearbyMarkers, ref1, unspiderfiedMarkers;
	    if (markerNotToMove == null) {
	      markerNotToMove = null;
	    }
	    if (this.spiderfied == null) {
	      return this;
	    }
	    this.unspiderfying = true;
	    unspiderfiedMarkers = [];
	    nonNearbyMarkers = [];
	    ref1 = this.markers;
	    for (l = 0, len1 = ref1.length; l < len1; l++) {
	      marker = ref1[l];
	      if (marker['_omsData'] != null) {
	        marker['_omsData'].leg.setMap(null);
	        if (marker !== markerNotToMove) {
	          marker.setPosition(marker['_omsData'].usualPosition);
	        }
	        marker.setZIndex(null);
	        listeners = marker['_omsData'].hightlightListeners;
	        if (listeners != null) {
	          ge.removeListener(listeners.highlight);
	          ge.removeListener(listeners.unhighlight);
	        }
	        delete marker['_omsData'];
	        unspiderfiedMarkers.push(marker);
	      } else {
	        nonNearbyMarkers.push(marker);
	      }
	    }
	    delete this.unspiderfying;
	    delete this.spiderfied;
	    this.trigger('unspiderfy', unspiderfiedMarkers, nonNearbyMarkers);
	    return this;
	  };

	  p.ptDistanceSq = function(pt1, pt2) {
	    var dx, dy;
	    dx = pt1.x - pt2.x;
	    dy = pt1.y - pt2.y;
	    return dx * dx + dy * dy;
	  };

	  p.ptAverage = function(pts) {
	    var l, len1, numPts, pt, sumX, sumY;
	    sumX = sumY = 0;
	    for (l = 0, len1 = pts.length; l < len1; l++) {
	      pt = pts[l];
	      sumX += pt.x;
	      sumY += pt.y;
	    }
	    numPts = pts.length;
	    return new gm.Point(sumX / numPts, sumY / numPts);
	  };

	  p.llToPt = function(ll) {
	    return this.projHelper.getProjection().fromLatLngToDivPixel(ll);
	  };

	  p.ptToLl = function(pt) {
	    return this.projHelper.getProjection().fromDivPixelToLatLng(pt);
	  };

	  p.minExtract = function(set, func) {
	    var bestIndex, bestVal, index, item, l, len1, val;
	    for (index = l = 0, len1 = set.length; l < len1; index = ++l) {
	      item = set[index];
	      val = func(item);
	      if ((typeof bestIndex === "undefined" || bestIndex === null) || val < bestVal) {
	        bestVal = val;
	        bestIndex = index;
	      }
	    }
	    return set.splice(bestIndex, 1)[0];
	  };

	  p.arrIndexOf = function(arr, obj) {
	    var i, l, len1, o;
	    if (arr.indexOf != null) {
	      return arr.indexOf(obj);
	    }
	    for (i = l = 0, len1 = arr.length; l < len1; i = ++l) {
	      o = arr[i];
	      if (o === obj) {
	        return i;
	      }
	    }
	    return -1;
	  };

	  return _Class;

	})();

	  }.apply(self);

	  GoogleMapApi.then(function(){
	    self.OverlappingMarkerSpiderfier.initializeGoogleMaps(window.google);
	  });
	  return this.OverlappingMarkerSpiderfier;
	}]);
	;/**
	 * Performance overrides on MarkerClusterer custom to Angular Google Maps
	 *
	 * Created by Petr Bruna ccg1415 and Nick McCready on 7/13/14.
	 */
	angular.module('uiGmapgoogle-maps.extensions')
	.service('uiGmapExtendMarkerClusterer',['uiGmapLodash', 'uiGmapPropMap', function (uiGmapLodash, PropMap) {
	  return {
	    init: _.once(function () {
	      (function () {
	        var __hasProp = {}.hasOwnProperty,
	          __extends = function (child, parent) {
	            for (var key in parent) {
	              if (__hasProp.call(parent, key)) child[key] = parent[key];
	            }
	            function ctor() {
	              this.constructor = child;
	            }

	            ctor.prototype = parent.prototype;
	            child.prototype = new ctor();
	            child.__super__ = parent.prototype;
	            return child;
	          };

	        window.NgMapCluster = (function (_super) {
	          __extends(NgMapCluster, _super);

	          function NgMapCluster(opts) {
	            NgMapCluster.__super__.constructor.call(this, opts);
	            this.markers_ = new PropMap();
	          }

	          /**
	           * Adds a marker to the cluster.
	           *
	           * @param {google.maps.Marker} marker The marker to be added.
	           * @return {boolean} True if the marker was added.
	           * @ignore
	           */
	          NgMapCluster.prototype.addMarker = function (marker) {
	            var i;
	            var mCount;
	            var mz;

	            if (this.isMarkerAlreadyAdded_(marker)) {
	              var oldMarker = this.markers_.get(marker.key);
	              if (oldMarker.getPosition().lat() == marker.getPosition().lat() && oldMarker.getPosition().lon() == marker.getPosition().lon()) //if nothing has changed
	                return false;
	            }

	            if (!this.center_) {
	              this.center_ = marker.getPosition();
	              this.calculateBounds_();
	            } else {
	              if (this.averageCenter_) {
	                var l = this.markers_.length + 1;
	                var lat = (this.center_.lat() * (l - 1) + marker.getPosition().lat()) / l;
	                var lng = (this.center_.lng() * (l - 1) + marker.getPosition().lng()) / l;
	                this.center_ = new google.maps.LatLng(lat, lng);
	                this.calculateBounds_();
	              }
	            }
	            marker.isAdded = true;
	            this.markers_.push(marker);

	            mCount = this.markers_.length;
	            mz = this.markerClusterer_.getMaxZoom();
	            if (mz !== null && this.map_.getZoom() > mz) {
	              // Zoomed in past max zoom, so show the marker.
	              if (marker.getMap() !== this.map_) {
	                marker.setMap(this.map_);
	              }
	            } else if (mCount < this.minClusterSize_) {
	              // Min cluster size not reached so show the marker.
	              if (marker.getMap() !== this.map_) {
	                marker.setMap(this.map_);
	              }
	            } else if (mCount === this.minClusterSize_) {
	              // Hide the markers that were showing.
	              this.markers_.each(function (m) {
	                m.setMap(null);
	              });
	            } else {
	              marker.setMap(null);
	            }

	            //this.updateIcon_();
	            return true;
	          };

	          /**
	           * Determines if a marker has already been added to the cluster.
	           *
	           * @param {google.maps.Marker} marker The marker to check.
	           * @return {boolean} True if the marker has already been added.
	           */
	          NgMapCluster.prototype.isMarkerAlreadyAdded_ = function (marker) {
	            return uiGmapLodash.isNullOrUndefined(this.markers_.get(marker.key));
	          };


	          /**
	           * Returns the bounds of the cluster.
	           *
	           * @return {google.maps.LatLngBounds} the cluster bounds.
	           * @ignore
	           */
	          NgMapCluster.prototype.getBounds = function () {
	            var i;
	            var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
	            this.getMarkers().each(function(m){
	              bounds.extend(m.getPosition());
	            });
	            return bounds;
	          };


	          /**
	           * Removes the cluster from the map.
	           *
	           * @ignore
	           */
	          NgMapCluster.prototype.remove = function () {
	            this.clusterIcon_.setMap(null);
	            this.markers_ = new PropMap();
	            delete this.markers_;
	          };


	          return NgMapCluster;

	        })(Cluster);


	        window.NgMapMarkerClusterer = (function (_super) {
	          __extends(NgMapMarkerClusterer, _super);

	          function NgMapMarkerClusterer(map, opt_markers, opt_options) {
	            NgMapMarkerClusterer.__super__.constructor.call(this, map, opt_markers, opt_options);
	            this.markers_ = new PropMap();
	          }

	          /**
	           * Removes all clusters and markers from the map and also removes all markers
	           *  managed by the clusterer.
	           */
	          NgMapMarkerClusterer.prototype.clearMarkers = function () {
	            this.resetViewport_(true);
	            this.markers_ = new PropMap();
	          };
	          /**
	           * Removes a marker and returns true if removed, false if not.
	           *
	           * @param {google.maps.Marker} marker The marker to remove
	           * @return {boolean} Whether the marker was removed or not
	           */
	          NgMapMarkerClusterer.prototype.removeMarker_ = function (marker) {
	            if (!this.markers_.get(marker.key)) {
	              return false;
	            }
	            marker.setMap(null);
	            this.markers_.remove(marker.key); // Remove the marker from the list of managed markers
	            return true;
	          };

	          /**
	           * Creates the clusters. This is done in batches to avoid timeout errors
	           *  in some browsers when there is a huge number of markers.
	           *
	           * @param {number} iFirst The index of the first marker in the batch of
	           *  markers to be added to clusters.
	           */
	          NgMapMarkerClusterer.prototype.createClusters_ = function (iFirst) {
	            var i, marker;
	            var mapBounds;
	            var cMarkerClusterer = this;
	            if (!this.ready_) {
	              return;
	            }

	            // Cancel previous batch processing if we're working on the first batch:
	            if (iFirst === 0) {
	              /**
	               * This event is fired when the <code>MarkerClusterer</code> begins
	               *  clustering markers.
	               * @name MarkerClusterer#clusteringbegin
	               * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.
	               * @event
	               */
	              google.maps.event.trigger(this, 'clusteringbegin', this);

	              if (typeof this.timerRefStatic !== 'undefined') {
	                clearTimeout(this.timerRefStatic);
	                delete this.timerRefStatic;
	              }
	            }

	            // Get our current map view bounds.
	            // Create a new bounds object so we don't affect the map.
	            //
	            // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:
	            if (this.getMap().getZoom() > 3) {
	              mapBounds = new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(),
	                this.getMap().getBounds().getNorthEast());
	            } else {
	              mapBounds = new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));
	            }
	            var bounds = this.getExtendedBounds(mapBounds);

	            var iLast = Math.min(iFirst + this.batchSize_, this.markers_.length);

	            var _ms = this.markers_.values();
	            for (i = iFirst; i < iLast; i++) {
	              marker = _ms[i];
	              if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {
	                if (!this.ignoreHidden_ || (this.ignoreHidden_ && marker.getVisible())) {
	                  this.addToClosestCluster_(marker);
	                }
	              }
	            }

	            if (iLast < this.markers_.length) {
	              this.timerRefStatic = setTimeout(function () {
	                cMarkerClusterer.createClusters_(iLast);
	              }, 0);
	            } else {
	              // custom addition by ui-gmap
	              // update icon for all clusters
	              for (i = 0; i < this.clusters_.length; i++) {
	                this.clusters_[i].updateIcon_();
	              }

	              delete this.timerRefStatic;

	              /**
	               * This event is fired when the <code>MarkerClusterer</code> stops
	               *  clustering markers.
	               * @name MarkerClusterer#clusteringend
	               * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.
	               * @event
	               */
	              google.maps.event.trigger(this, 'clusteringend', this);
	            }
	          };

	          /**
	           * Adds a marker to a cluster, or creates a new cluster.
	           *
	           * @param {google.maps.Marker} marker The marker to add.
	           */
	          NgMapMarkerClusterer.prototype.addToClosestCluster_ = function (marker) {
	            var i, d, cluster, center;
	            var distance = 40000; // Some large number
	            var clusterToAddTo = null;
	            for (i = 0; i < this.clusters_.length; i++) {
	              cluster = this.clusters_[i];
	              center = cluster.getCenter();
	              if (center) {
	                d = this.distanceBetweenPoints_(center, marker.getPosition());
	                if (d < distance) {
	                  distance = d;
	                  clusterToAddTo = cluster;
	                }
	              }
	            }

	            if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {
	              clusterToAddTo.addMarker(marker);
	            } else {
	              cluster = new NgMapCluster(this);
	              cluster.addMarker(marker);
	              this.clusters_.push(cluster);
	            }
	          };

	          /**
	           * Redraws all the clusters.
	           */
	          NgMapMarkerClusterer.prototype.redraw_ = function () {
	            this.createClusters_(0);
	          };


	          /**
	           * Removes all clusters from the map. The markers are also removed from the map
	           *  if <code>opt_hide</code> is set to <code>true</code>.
	           *
	           * @param {boolean} [opt_hide] Set to <code>true</code> to also remove the markers
	           *  from the map.
	           */
	          NgMapMarkerClusterer.prototype.resetViewport_ = function (opt_hide) {
	            var i, marker;
	            // Remove all the clusters
	            for (i = 0; i < this.clusters_.length; i++) {
	              this.clusters_[i].remove();
	            }
	            this.clusters_ = [];

	            // Reset the markers to not be added and to be removed from the map.
	            this.markers_.each(function (marker) {
	              marker.isAdded = false;
	              if (opt_hide) {
	                marker.setMap(null);
	              }
	            });
	          };

	          /**
	           * Extends an object's prototype by another's.
	           *
	           * @param {Object} obj1 The object to be extended.
	           * @param {Object} obj2 The object to extend with.
	           * @return {Object} The new extended object.
	           * @ignore
	           */
	          NgMapMarkerClusterer.prototype.extend = function (obj1, obj2) {
	            return (function (object) {
	              var property;
	              for (property in object.prototype) {
	                if (property !== 'constructor')
	                  this.prototype[property] = object.prototype[property];
	              }
	              return this;
	            }).apply(obj1, [obj2]);
	          };
	          ////////////////////////////////////////////////////////////////////////////////
	          /*
	          Other overrides relevant to MarkerClusterPlus
	          */
	          ////////////////////////////////////////////////////////////////////////////////
	          /**
	          * Positions and shows the icon.
	          */
	          ClusterIcon.prototype.show = function () {
	            if (this.div_) {
	              var img = "";
	              // NOTE: values must be specified in px units
	              var bp = this.backgroundPosition_.split(" ");
	              var spriteH = parseInt(bp[0].trim(), 10);
	              var spriteV = parseInt(bp[1].trim(), 10);
	              var pos = this.getPosFromLatLng_(this.center_);
	              this.div_.style.cssText = this.createCss(pos);
	              img = "<img src='" + this.url_ + "' style='position: absolute; top: " + spriteV + "px; left: " + spriteH + "px; ";
	              if (!this.cluster_.getMarkerClusterer().enableRetinaIcons_) {
	                img += "clip: rect(" + (-1 * spriteV) + "px, " + ((-1 * spriteH) + this.width_) + "px, " +
	                ((-1 * spriteV) + this.height_) + "px, " + (-1 * spriteH) + "px);";
	              }
	              // ADDED FOR RETINA SUPPORT
	              else {
	                img += "width: " + this.width_ + "px;" + "height: " + this.height_ + "px;";
	              }
	              // END ADD
	              img += "'>";
	              this.div_.innerHTML = img + "<div style='" +
	              "position: absolute;" +
	              "top: " + this.anchorText_[0] + "px;" +
	              "left: " + this.anchorText_[1] + "px;" +
	              "color: " + this.textColor_ + ";" +
	              "font-size: " + this.textSize_ + "px;" +
	              "font-family: " + this.fontFamily_ + ";" +
	              "font-weight: " + this.fontWeight_ + ";" +
	              "font-style: " + this.fontStyle_ + ";" +
	              "text-decoration: " + this.textDecoration_ + ";" +
	              "text-align: center;" +
	              "width: " + this.width_ + "px;" +
	              "line-height:" + this.height_ + "px;" +
	              "'>" + this.sums_.text + "</div>";
	              if (typeof this.sums_.title === "undefined" || this.sums_.title === "") {
	                this.div_.title = this.cluster_.getMarkerClusterer().getTitle();
	              } else {
	                this.div_.title = this.sums_.title;
	              }
	              this.div_.style.display = "";
	            }
	            this.visible_ = true;
	          };
	          //END OTHER OVERRIDES
	          ////////////////////////////////////////////////////////////////////////////////

	          return NgMapMarkerClusterer;

	        })(MarkerClusterer);
	      }).call(this);
	    })
	  };
	}]);
	}( window,angular));

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	(function(root, factory) {
	if (true) {
	module.exports = factory(__webpack_require__(1));
	} else if (typeof define === "function" && define.amd) {
	define(['angular'], factory);
	} else{
	factory(root.angular);
	}
	}(this, function(angular) {
	/**
	 * AngularJS Google Maps Ver. 1.17.0
	 *
	 * The MIT License (MIT)
	 * 
	 * Copyright (c) 2014, 2015, 1016 Allen Kim
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
	 * this software and associated documentation files (the "Software"), to deal in
	 * the Software without restriction, including without limitation the rights to
	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	 * the Software, and to permit persons to whom the Software is furnished to do so,
	 * subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */
	angular.module('ngMap', []);

	/**
	 * @ngdoc controller
	 * @name MapController
	 */
	(function() {
	  'use strict';
	  var Attr2MapOptions;

	  var __MapController = function(
	      $scope, $element, $attrs, $parse, _Attr2MapOptions_, NgMap, NgMapPool
	    ) {
	    Attr2MapOptions = _Attr2MapOptions_;
	    var vm = this;

	    vm.mapOptions; /** @memberof __MapController */
	    vm.mapEvents;  /** @memberof __MapController */
	    vm.eventListeners;  /** @memberof __MapController */

	    /**
	     * Add an object to the collection of group
	     * @memberof __MapController
	     * @function addObject
	     * @param groupName the name of collection that object belongs to
	     * @param obj  an object to add into a collection, i.e. marker, shape
	     */
	    vm.addObject = function(groupName, obj) {
	      if (vm.map) {
	        vm.map[groupName] = vm.map[groupName] || {};
	        var len = Object.keys(vm.map[groupName]).length;
	        vm.map[groupName][obj.id || len] = obj;

	        if (vm.map instanceof google.maps.Map) {
	          //infoWindow.setMap works like infoWindow.open
	          if (groupName != "infoWindows" && obj.setMap) {
	            obj.setMap && obj.setMap(vm.map);
	          }
	          if (obj.centered && obj.position) {
	            vm.map.setCenter(obj.position);
	          }
	          (groupName == 'markers') && vm.objectChanged('markers');
	          (groupName == 'customMarkers') && vm.objectChanged('customMarkers');
	        }
	      }
	    };

	    /**
	     * Delete an object from the collection and remove from map
	     * @memberof __MapController
	     * @function deleteObject
	     * @param {Array} objs the collection of objects. i.e., map.markers
	     * @param {Object} obj the object to be removed. i.e., marker
	     */
	    vm.deleteObject = function(groupName, obj) {
	      /* delete from group */
	      if (obj.map) {
	        var objs = obj.map[groupName];
	        for (var name in objs) {
	          if (objs[name] === obj) {
	            void 0;
	            google.maps.event.clearInstanceListeners(obj);
	            delete objs[name];
	          }
	        }

	        /* delete from map */
	        obj.map && obj.setMap && obj.setMap(null);

	        (groupName == 'markers') && vm.objectChanged('markers');
	        (groupName == 'customMarkers') && vm.objectChanged('customMarkers');
	      }
	    };

	    /**
	     * @memberof __MapController
	     * @function observeAttrSetObj
	     * @param {Hash} orgAttrs attributes before its initialization
	     * @param {Hash} attrs    attributes after its initialization
	     * @param {Object} obj    map object that an action is to be done
	     * @description watch changes of attribute values and
	     * do appropriate action based on attribute name
	     */
	    vm.observeAttrSetObj = function(orgAttrs, attrs, obj) {
	      if (attrs.noWatcher) {
	        return false;
	      }
	      var attrsToObserve = Attr2MapOptions.getAttrsToObserve(orgAttrs);
	      for (var i=0; i<attrsToObserve.length; i++) {
	        var attrName = attrsToObserve[i];
	        attrs.$observe(attrName, NgMap.observeAndSet(attrName, obj));
	      }
	    };

	    /**
	     * @memberof __MapController
	     * @function zoomToIncludeMarkers
	     */
	    vm.zoomToIncludeMarkers = function() {
	      var bounds = new google.maps.LatLngBounds();
	      for (var k1 in vm.map.markers) {
	        bounds.extend(vm.map.markers[k1].getPosition());
	      }
	      for (var k2 in vm.map.customMarkers) {
	        bounds.extend(vm.map.customMarkers[k2].getPosition());
	      }
		  if (vm.mapOptions.maximumZoom) {
			  vm.enableMaximumZoomCheck = true; //enable zoom check after resizing for markers
		  }
	      vm.map.fitBounds(bounds);
	    };

	    /**
	     * @memberof __MapController
	     * @function objectChanged
	     * @param {String} group name of group e.g., markers
	     */
	    vm.objectChanged = function(group) {
	      if ( vm.map &&
	        (group == 'markers' || group == 'customMarkers') &&
	        vm.map.zoomToIncludeMarkers == 'auto'
	      ) {
	        vm.zoomToIncludeMarkers();
	      }
	    };

	    /**
	     * @memberof __MapController
	     * @function initializeMap
	     * @description
	     *  . initialize Google map on <div> tag
	     *  . set map options, events, and observers
	     *  . reset zoom to include all (custom)markers
	     */
	    vm.initializeMap = function() {
	      var mapOptions = vm.mapOptions,
	          mapEvents = vm.mapEvents;

	      var lazyInitMap = vm.map; //prepared for lazy init
	      vm.map = NgMapPool.getMapInstance($element[0]);
	      NgMap.setStyle($element[0]);

	      // set objects for lazyInit
	      if (lazyInitMap) {

	        /**
	         * rebuild mapOptions for lazyInit
	         * becasue attributes values might have been changed
	         */
	        var filtered = Attr2MapOptions.filter($attrs);
	        var options = Attr2MapOptions.getOptions(filtered);
	        var controlOptions = Attr2MapOptions.getControlOptions(filtered);
	        mapOptions = angular.extend(options, controlOptions);
	        void 0;

	        for (var group in lazyInitMap) {
	          var groupMembers = lazyInitMap[group]; //e.g. markers
	          if (typeof groupMembers == 'object') {
	            for (var id in groupMembers) {
	              vm.addObject(group, groupMembers[id]);
	            }
	          }
	        }
	        vm.map.showInfoWindow = vm.showInfoWindow;
	        vm.map.hideInfoWindow = vm.hideInfoWindow;
	      }

	      // set options
	      mapOptions.zoom = mapOptions.zoom || 15;
	      var center = mapOptions.center;
	      if (!mapOptions.center ||
	        ((typeof center === 'string') && center.match(/\{\{.*\}\}/))
	      ) {
	        mapOptions.center = new google.maps.LatLng(0, 0);
	      } else if (!(center instanceof google.maps.LatLng)) {
	        var geoCenter = mapOptions.center;
	        delete mapOptions.center;
	        NgMap.getGeoLocation(geoCenter, mapOptions.geoLocationOptions).
	          then(function (latlng) {
	            vm.map.setCenter(latlng);
	            var geoCallback = mapOptions.geoCallback;
	            geoCallback && $parse(geoCallback)($scope);
	          }, function () {
	            if (mapOptions.geoFallbackCenter) {
	              vm.map.setCenter(mapOptions.geoFallbackCenter);
	            }
	          });
	      }
	      vm.map.setOptions(mapOptions);

	      // set events
	      for (var eventName in mapEvents) {
	        var event = mapEvents[eventName];
	        var listener = google.maps.event.addListener(vm.map, eventName, event);
	        vm.eventListeners[eventName] = listener;
	      }

	      // set observers
	      vm.observeAttrSetObj(orgAttrs, $attrs, vm.map);
	      vm.singleInfoWindow = mapOptions.singleInfoWindow;

	      google.maps.event.trigger(vm.map, 'resize');

	      google.maps.event.addListenerOnce(vm.map, "idle", function () {
	        NgMap.addMap(vm);
	        if (mapOptions.zoomToIncludeMarkers) {
	          vm.zoomToIncludeMarkers();
	        }
	        //TODO: it's for backward compatibiliy. will be removed
	        $scope.map = vm.map;
	        $scope.$emit('mapInitialized', vm.map);

	        //callback
	        if ($attrs.mapInitialized) {
	          $parse($attrs.mapInitialized)($scope, {map: vm.map});
	        }
	      });
		  
		  //add maximum zoom listeners if zoom-to-include-markers and and maximum-zoom are valid attributes
		  if (mapOptions.zoomToIncludeMarkers && mapOptions.maximumZoom) {
		    google.maps.event.addListener(vm.map, 'zoom_changed', function() {
	          if (vm.enableMaximumZoomCheck == true) {
				vm.enableMaximumZoomCheck = false;
		        google.maps.event.addListenerOnce(vm.map, 'bounds_changed', function() { 
			      vm.map.setZoom(Math.min(mapOptions.maximumZoom, vm.map.getZoom())); 
			    });
		  	  }
		    });
		  }
	    };

	    $scope.google = google; //used by $scope.eval to avoid eval()

	    /**
	     * get map options and events
	     */
	    var orgAttrs = Attr2MapOptions.orgAttributes($element);
	    var filtered = Attr2MapOptions.filter($attrs);
	    var options = Attr2MapOptions.getOptions(filtered, {scope: $scope});
	    var controlOptions = Attr2MapOptions.getControlOptions(filtered);
	    var mapOptions = angular.extend(options, controlOptions);
	    var mapEvents = Attr2MapOptions.getEvents($scope, filtered);
	    void 0;
	    Object.keys(mapEvents).length && void 0;

	    vm.mapOptions = mapOptions;
	    vm.mapEvents = mapEvents;
	    vm.eventListeners = {};

	    if (options.lazyInit) { // allows controlled initialization
	      // parse angular expression for dynamic ids
	      if (!!$attrs.id && $attrs.id.startsWith('{{') && $attrs.id.endsWith('}}')) {
	        var idExpression = $attrs.id.slice(2,-2);
	        var mapId = $parse(idExpression)($scope);
	      } else {
	        var mapId = $attrs.id;
	      }
	      vm.map = {id: mapId}; //set empty, not real, map
	      NgMap.addMap(vm);
	    } else {
	      vm.initializeMap();
	    }

	    //Trigger Resize
	    if(options.triggerResize) {
	      google.maps.event.trigger(vm.map, 'resize');
	    }

	    $element.bind('$destroy', function() {
	      NgMapPool.returnMapInstance(vm.map);
	      NgMap.deleteMap(vm);
	    });
	  }; // __MapController

	  __MapController.$inject = [
	    '$scope', '$element', '$attrs', '$parse', 'Attr2MapOptions', 'NgMap', 'NgMapPool'
	  ];
	  angular.module('ngMap').controller('__MapController', __MapController);
	})();

	/**
	 * @ngdoc directive
	 * @name bicycling-layer
	 * @param Attr2Options {service}
	 *   convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <bicycling-layer></bicycling-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';
	  var parser;

	  var linkFunc = function(scope, element, attrs, mapController) {
	    mapController = mapController[0]||mapController[1];
	    var orgAttrs = parser.orgAttributes(element);
	    var filtered = parser.filter(attrs);
	    var options = parser.getOptions(filtered, {scope: scope});
	    var events = parser.getEvents(scope, filtered);

	    void 0;

	    var layer = getLayer(options, events);
	    mapController.addObject('bicyclingLayers', layer);
	    mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	    element.bind('$destroy', function() {
	      mapController.deleteObject('bicyclingLayers', layer);
	    });
	  };

	  var getLayer = function(options, events) {
	    var layer = new google.maps.BicyclingLayer(options);
	    for (var eventName in events) {
	      google.maps.event.addListener(layer, eventName, events[eventName]);
	    }
	    return layer;
	  };

	  var bicyclingLayer= function(Attr2MapOptions) {
	    parser = Attr2MapOptions;
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	     };
	  };
	  bicyclingLayer.$inject = ['Attr2MapOptions'];

	  angular.module('ngMap').directive('bicyclingLayer', bicyclingLayer);
	})();

	/**
	 * @ngdoc directive
	 * @name custom-control
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $compile {service} AngularJS $compile service
	 * @description
	 *   Build custom control and set to the map with position
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} position position of this control
	 *        i.e. TOP_RIGHT
	 * @attr {Number} index index of the control
	 * @example
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <custom-control id="home" position="TOP_LEFT" index="1">
	 *      <div style="background-color: white;">
	 *        <b>Home</b>
	 *      </div>
	 *    </custom-control>
	 *  </map>
	 *
	 */
	(function() {
	  'use strict';
	  var parser, $compile, NgMap;

	  var linkFunc = function(scope, element, attrs, mapController) {
	    mapController = mapController[0]||mapController[1];
	    var filtered = parser.filter(attrs);
	    var options = parser.getOptions(filtered, {scope: scope});
	    var events = parser.getEvents(scope, filtered);

	    /**
	     * build a custom control element
	     */
	    var customControlEl = element[0].parentElement.removeChild(element[0]);
	    $compile(customControlEl.innerHTML.trim())(scope);

	    /**
	     * set events
	     */
	    for (var eventName in events) {
	      google.maps.event.addDomListener(customControlEl, eventName, events[eventName]);
	    }

	    mapController.addObject('customControls', customControlEl);
	    var position = options.position;
	    mapController.map.controls[google.maps.ControlPosition[position]].push(customControlEl);

	    element.bind('$destroy', function() {
	      mapController.deleteObject('customControls', customControlEl);
	    });
	  };

	  var customControl =  function(Attr2MapOptions, _$compile_, _NgMap_)  {
	    parser = Attr2MapOptions, $compile = _$compile_, NgMap = _NgMap_;

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    }; // return
	  };
	  customControl.$inject = ['Attr2MapOptions', '$compile', 'NgMap'];

	  angular.module('ngMap').directive('customControl', customControl);
	})();

	/**
	 * @ngdoc directive
	 * @memberof ngmap
	 * @name custom-marker
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $timeout {service} AngularJS $timeout
	 * @description
	 *   Marker with html
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {String} position required, position on map
	 * @attr {Number} z-index optional
	 * @attr {Boolean} visible optional
	 * @example
	 *
	 * Example:
	 *   <map center="41.850033,-87.6500523" zoom="3">
	 *     <custom-marker position="41.850033,-87.6500523">
	 *       <div>
	 *         <b>Home</b>
	 *       </div>
	 *     </custom-marker>
	 *   </map>
	 *
	 */
	/* global document */
	(function() {
	  'use strict';
	  var parser, $timeout, $compile, NgMap;

	  var CustomMarker = function(options) {
	    options = options || {};

	    this.el = document.createElement('div');
	    this.el.style.display = 'inline-block';
	    this.el.style.visibility = "hidden";
	    this.visible = true;
	    for (var key in options) { /* jshint ignore:line */
	     this[key] = options[key];
	    }
	  };

	  var setCustomMarker = function() {

	    CustomMarker.prototype = new google.maps.OverlayView();

	    CustomMarker.prototype.setContent = function(html, scope) {
	      this.el.innerHTML = html;
	      this.el.style.position = 'absolute';
	      if (scope) {
	        $compile(angular.element(this.el).contents())(scope);
	      }
	    };

	    CustomMarker.prototype.getDraggable = function() {
	      return this.draggable;
	    };

	    CustomMarker.prototype.setDraggable = function(draggable) {
	      this.draggable = draggable;
	    };

	    CustomMarker.prototype.getPosition = function() {
	      return this.position;
	    };

	    CustomMarker.prototype.setPosition = function(position) {
	      position && (this.position = position); /* jshint ignore:line */

	      if (this.getProjection() && typeof this.position.lng == 'function') {
	        var posPixel = this.getProjection().fromLatLngToDivPixel(this.position);
	        var _this = this;
	        var setPosition = function() {
	          var x = Math.round(posPixel.x - (_this.el.offsetWidth/2));
	          var y = Math.round(posPixel.y - _this.el.offsetHeight - 10); // 10px for anchor
	          _this.el.style.left = x + "px";
	          _this.el.style.top = y + "px";
	          _this.el.style.visibility = "visible";
	        };
	        if (_this.el.offsetWidth && _this.el.offsetHeight) { 
	          setPosition();
	        } else {
	          //delayed left/top calculation when width/height are not set instantly
	          $timeout(setPosition, 300);
	        }
	      }
	    };

	    CustomMarker.prototype.setZIndex = function(zIndex) {
	      zIndex && (this.zIndex = zIndex); /* jshint ignore:line */
	      this.el.style.zIndex = this.zIndex;
	    };

	    CustomMarker.prototype.getVisible = function() {
	      return this.visible;
	    };

	    CustomMarker.prototype.setVisible = function(visible) {
	      this.el.style.display = visible ? 'inline-block' : 'none';
	      this.visible = visible;
	    };

	    CustomMarker.prototype.addClass = function(className) {
	      var classNames = this.el.className.trim().split(' ');
	      (classNames.indexOf(className) == -1) && classNames.push(className); /* jshint ignore:line */
	      this.el.className = classNames.join(' ');
	    };

	    CustomMarker.prototype.removeClass = function(className) {
	      var classNames = this.el.className.split(' ');
	      var index = classNames.indexOf(className);
	      (index > -1) && classNames.splice(index, 1); /* jshint ignore:line */
	      this.el.className = classNames.join(' ');
	    };

	    CustomMarker.prototype.onAdd = function() {
	      this.getPanes().overlayMouseTarget.appendChild(this.el);
	    };

	    CustomMarker.prototype.draw = function() {
	      this.setPosition();
	      this.setZIndex(this.zIndex);
	      this.setVisible(this.visible);
	    };

	    CustomMarker.prototype.onRemove = function() {
	      this.el.parentNode.removeChild(this.el);
	      //this.el = null;
	    };
	  };

	  var linkFunc = function(orgHtml, varsToWatch) {
	    //console.log('orgHtml', orgHtml, 'varsToWatch', varsToWatch);

	    return function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];
	      var orgAttrs = parser.orgAttributes(element);

	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);

	      /**
	       * build a custom marker element
	       */
	      element[0].style.display = 'none';
	      void 0;
	      var customMarker = new CustomMarker(options);

	      
		  scope.$watch('[' + varsToWatch.join(',') + ']', function() {
		    customMarker.setContent(orgHtml, scope);
		  }, true);

		  customMarker.setContent(element[0].innerHTML, scope);
		  var classNames = element[0].firstElementChild.className;
		  customMarker.addClass('custom-marker');
		  customMarker.addClass(classNames);
		  void 0;

		  if (!(options.position instanceof google.maps.LatLng)) {
		    NgMap.getGeoLocation(options.position).then(
			  function(latlng) {
			    customMarker.setPosition(latlng);
			  }
		    );
		  }

	      void 0;
	      for (var eventName in events) { /* jshint ignore:line */
	        google.maps.event.addDomListener(
	          customMarker.el, eventName, events[eventName]);
	      }
	      mapController.addObject('customMarkers', customMarker);

	      //set observers
	      mapController.observeAttrSetObj(orgAttrs, attrs, customMarker);

	      element.bind('$destroy', function() {
	        //Is it required to remove event listeners when DOM is removed?
	        mapController.deleteObject('customMarkers', customMarker);
	      });

	    }; // linkFunc
	  };


	  var customMarkerDirective = function(
	      _$timeout_, _$compile_, Attr2MapOptions, _NgMap_
	    )  {
	    parser = Attr2MapOptions;
	    $timeout = _$timeout_;
	    $compile = _$compile_;
	    NgMap = _NgMap_;

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      compile: function(element) {
	        setCustomMarker();
	        element[0].style.display ='none';
	        var orgHtml = element.html();
	        var matches = orgHtml.match(/{{([^}]+)}}/g);
	        var varsToWatch = [];
	        //filter out that contains '::', 'this.'
	        (matches || []).forEach(function(match) {
	          var toWatch = match.replace('{{','').replace('}}','');
	          if (match.indexOf('::') == -1 &&
	            match.indexOf('this.') == -1 &&
	            varsToWatch.indexOf(toWatch) == -1) {
	            varsToWatch.push(match.replace('{{','').replace('}}',''));
	          }
	        });

	        return linkFunc(orgHtml, varsToWatch);
	      }
	    }; // return
	  };// function
	  customMarkerDirective.$inject =
	    ['$timeout', '$compile', 'Attr2MapOptions', 'NgMap'];

	  angular.module('ngMap').directive('customMarker', customMarkerDirective);
	})();

	/**
	 * @ngdoc directive
	 * @name directions
	 * @description
	 *   Enable directions on map.
	 *   e.g., origin, destination, draggable, waypoints, etc
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} DirectionsRendererOptions
	 *   [Any DirectionsRendererOptions](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRendererOptions)
	 * @attr {String} DirectionsRequestOptions
	 *   [Any DirectionsRequest options](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest)
	 * @example
	 *  <map zoom="14" center="37.7699298, -122.4469157">
	 *    <directions
	 *      draggable="true"
	 *      panel="directions-panel"
	 *      travel-mode="{{travelMode}}"
	 *      waypoints="[{location:'kingston', stopover:true}]"
	 *      origin="{{origin}}"
	 *      destination="{{destination}}">
	 *    </directions>
	 *  </map>
	 */
	/* global document */
	(function() {
	  'use strict';
	  var NgMap, $timeout, NavigatorGeolocation;

	  var getDirectionsRenderer = function(options, events) {
	    if (options.panel) {
	      options.panel = document.getElementById(options.panel) ||
	        document.querySelector(options.panel);
	    }
	    var renderer = new google.maps.DirectionsRenderer(options);
	    for (var eventName in events) {
	      google.maps.event.addListener(renderer, eventName, events[eventName]);
	    }
	    return renderer;
	  };

	  var updateRoute = function(renderer, options) {
	    var directionsService = new google.maps.DirectionsService();

	    /* filter out valid keys only for DirectionsRequest object*/
	    var request = options;
	    request.travelMode = request.travelMode || 'DRIVING';
	    var validKeys = [
	      'origin', 'destination', 'travelMode', 'transitOptions', 'unitSystem',
	      'durationInTraffic', 'waypoints', 'optimizeWaypoints', 
	      'provideRouteAlternatives', 'avoidHighways', 'avoidTolls', 'region'
	    ];
	    for(var key in request){
	      (validKeys.indexOf(key) === -1) && (delete request[key]);
	    }

	    if(request.waypoints) {
	      // Check fo valid values
	      if(request.waypoints == "[]" || request.waypoints === "") {
	        delete request.waypoints;
	      }
	    }

	    var showDirections = function(request) {
	      directionsService.route(request, function(response, status) {
	        if (status == google.maps.DirectionsStatus.OK) {
	          $timeout(function() {
	            renderer.setDirections(response);
	          });
	        }
	      });
	    };

	    if (request.origin && request.destination) {
	      if (request.origin == 'current-location') {
	        NavigatorGeolocation.getCurrentPosition().then(function(ll) {
	          request.origin = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
	          showDirections(request);
	        });
	      } else if (request.destination == 'current-location') {
	        NavigatorGeolocation.getCurrentPosition().then(function(ll) {
	          request.destination = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
	          showDirections(request);
	        });
	      } else {
	        showDirections(request);
	      }
	    }
	  };

	  var directions = function(
	      Attr2MapOptions, _$timeout_, _NavigatorGeolocation_, _NgMap_) {
	    var parser = Attr2MapOptions;
	    NgMap = _NgMap_;
	    $timeout = _$timeout_;
	    NavigatorGeolocation = _NavigatorGeolocation_;

	    var linkFunc = function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];

	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);
	      var attrsToObserve = parser.getAttrsToObserve(orgAttrs);

	      var renderer = getDirectionsRenderer(options, events);
	      mapController.addObject('directionsRenderers', renderer);

	      attrsToObserve.forEach(function(attrName) {
	        (function(attrName) {
	          attrs.$observe(attrName, function(val) {
	            if (attrName == 'panel') {
	              $timeout(function(){
	                var panel =
	                  document.getElementById(val) || document.querySelector(val);
	                void 0;
	                panel && renderer.setPanel(panel);
	              });
	            } else if (options[attrName] !== val) { //apply only if changed
	              var optionValue = parser.toOptionValue(val, {key: attrName});
	              void 0;
	              options[attrName] = optionValue;
	              updateRoute(renderer, options);
	            }
	          });
	        })(attrName);
	      });

	      NgMap.getMap().then(function() {
	        updateRoute(renderer, options);
	      });
	      element.bind('$destroy', function() {
	        mapController.deleteObject('directionsRenderers', renderer);
	      });
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    };
	  }; // var directions
	  directions.$inject =
	    ['Attr2MapOptions', '$timeout', 'NavigatorGeolocation', 'NgMap'];

	  angular.module('ngMap').directive('directions', directions);
	})();


	/**
	 * @ngdoc directive
	 * @name drawing-manager
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="37.774546, -122.433523" map-type-id="SATELLITE">
	 *    <drawing-manager
	 *      on-overlaycomplete="onMapOverlayCompleted()"
	 *      position="ControlPosition.TOP_CENTER"
	 *      drawingModes="POLYGON,CIRCLE"
	 *      drawingControl="true"
	 *      circleOptions="fillColor: '#FFFF00';fillOpacity: 1;strokeWeight: 5;clickable: false;zIndex: 1;editable: true;" >
	 *    </drawing-manager>
	 *  </map>
	 *
	 *  TODO: Add remove button.
	 *  currently, for our solution, we have the shapes/markers in our own
	 *  controller, and we use some css classes to change the shape button
	 *  to a remove button (<div>X</div>) and have the remove operation in our own controller.
	 */
	(function() {
	  'use strict';
	  angular.module('ngMap').directive('drawingManager', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var controlOptions = parser.getControlOptions(filtered);
	        var events = parser.getEvents(scope, filtered);

	        /**
	         * set options
	         */
	        var drawingManager = new google.maps.drawing.DrawingManager({
	          drawingMode: options.drawingmode,
	          drawingControl: options.drawingcontrol,
	          drawingControlOptions: controlOptions.drawingControlOptions,
	          circleOptions:options.circleoptions,
	          markerOptions:options.markeroptions,
	          polygonOptions:options.polygonoptions,
	          polylineOptions:options.polylineoptions,
	          rectangleOptions:options.rectangleoptions
	        });

	        //Observers
	        attrs.$observe('drawingControlOptions', function (newValue) {
	          drawingManager.drawingControlOptions = parser.getControlOptions({drawingControlOptions: newValue}).drawingControlOptions;
	          drawingManager.setDrawingMode(null);
	          drawingManager.setMap(mapController.map);
	        });


	        /**
	         * set events
	         */
	        for (var eventName in events) {
	          google.maps.event.addListener(drawingManager, eventName, events[eventName]);
	        }

	        mapController.addObject('mapDrawingManager', drawingManager);

	        element.bind('$destroy', function() {
	          mapController.deleteObject('mapDrawingManager', drawingManager);
	        });
	      }
	    }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name dynamic-maps-engine-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *   <map zoom="14" center="[59.322506, 18.010025]">
	 *     <dynamic-maps-engine-layer
	 *       layer-id="06673056454046135537-08896501997766553811">
	 *     </dynamic-maps-engine-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('dynamicMapsEngineLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    var getDynamicMapsEngineLayer = function(options, events) {
	      var layer = new google.maps.visualization.DynamicMapsEngineLayer(options);

	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }

	      return layer;
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);

	        var layer = getDynamicMapsEngineLayer(options, events);
	        mapController.addObject('mapsEngineLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name fusion-tables-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *   <map zoom="11" center="41.850033, -87.6500523">
	 *     <fusion-tables-layer query="{
	 *       select: 'Geocodable address',
	 *       from: '1mZ53Z70NsChnBMm-qEYmSDOvLXgrreLTkQUvvg'}">
	 *     </fusion-tables-layer>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('fusionTablesLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    var getLayer = function(options, events) {
	      var layer = new google.maps.FusionTablesLayer(options);

	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }

	      return layer;
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('fusionTablesLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name heatmap-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 *
	 * <map zoom="11" center="[41.875696,-87.624207]">
	 *   <heatmap-layer data="taxiData"></heatmap-layer>
	 * </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('heatmapLayer', [
	    'Attr2MapOptions', '$window', function(Attr2MapOptions, $window) {
	    var parser = Attr2MapOptions;
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var filtered = parser.filter(attrs);

	        /**
	         * set options
	         */
	        var options = parser.getOptions(filtered, {scope: scope});
	        options.data = $window[attrs.data] || scope[attrs.data];
	        if (options.data instanceof Array) {
	          options.data = new google.maps.MVCArray(options.data);
	        } else {
	          throw "invalid heatmap data";
	        }
	        var layer = new google.maps.visualization.HeatmapLayer(options);

	        /**
	         * set events
	         */
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        mapController.addObject('heatmapLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name info-window
	 * @param Attr2MapOptions {service}
	 *   convert html attribute to Gogole map api options
	 * @param $compile {service} $compile service
	 * @description
	 *  Defines infoWindow and provides compile method
	 *
	 *  Requires:  map directive
	 *
	 *  Restrict To:  Element
	 *
	 *  NOTE: this directive should **NOT** be used with `ng-repeat`
	 *  because InfoWindow itself is a template, and a template must be
	 *  reused by each marker, thus, should not be redefined repeatedly
	 *  by `ng-repeat`.
	 *
	 * @attr {Boolean} visible
	 *   Indicates to show it when map is initialized
	 * @attr {Boolean} visible-on-marker
	 *   Indicates to show it on a marker when map is initialized
	 * @attr {Expression} geo-callback
	 *   if position is an address, the expression is will be performed
	 *   when geo-lookup is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;InfoWindowOption> Any InfoWindow options,
	 *   https://developers.google.com/maps/documentation/javascript/reference?csw=1#InfoWindowOptions
	 * @attr {String} &lt;InfoWindowEvent> Any InfoWindow events,
	 *   https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <info-window id="foo" ANY_OPTIONS ANY_EVENTS"></info-window>
	 *   </map>
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <info-window id="1" position="41.850033,-87.6500523" >
	 *      <div ng-non-bindable>
	 *        Chicago, IL<br/>
	 *        LatLng: {{chicago.lat()}}, {{chicago.lng()}}, <br/>
	 *        World Coordinate: {{worldCoordinate.x}}, {{worldCoordinate.y}}, <br/>
	 *        Pixel Coordinate: {{pixelCoordinate.x}}, {{pixelCoordinate.y}}, <br/>
	 *        Tile Coordinate: {{tileCoordinate.x}}, {{tileCoordinate.y}} at Zoom Level {{map.getZoom()}}
	 *      </div>
	 *    </info-window>
	 *  </map>
	 */
	/* global google */
	(function() {
	  'use strict';

	  var infoWindow = function(Attr2MapOptions, $compile, $timeout, $parse, NgMap)  {
	    var parser = Attr2MapOptions;

	    var getInfoWindow = function(options, events, element) {
	      var infoWindow;

	      /**
	       * set options
	       */
	      if (options.position && !(options.position instanceof google.maps.LatLng)) {
	        delete options.position;
	      }
	      infoWindow = new google.maps.InfoWindow(options);

	      /**
	       * set events
	       */
	      for (var eventName in events) {
	        if (eventName) {
	          google.maps.event.addListener(infoWindow, eventName, events[eventName]);
	        }
	      }

	      /**
	       * set template ane template-relate functions
	       * it must have a container element with ng-non-bindable
	       */
	      var template = element.html().trim();
	      if (angular.element(template).length != 1) {
	        throw "info-window working as a template must have a container";
	      }
	      infoWindow.__template = template.replace(/\s?ng-non-bindable[='"]+/,"");

	      infoWindow.__open = function(map, scope, anchor) {
	        $timeout(function() {
	          anchor && (scope.anchor = anchor);
	          var el = $compile(infoWindow.__template)(scope);
	          infoWindow.setContent(el[0]);
	          scope.$apply();
	          if (anchor && anchor.getPosition) {
	            infoWindow.open(map, anchor);
	          } else if (anchor && anchor instanceof google.maps.LatLng) {
	            infoWindow.open(map);
	            infoWindow.setPosition(anchor);
	          } else {
	            infoWindow.open(map);
	          }
	          var infoWindowContainerEl = infoWindow.content.parentElement.parentElement.parentElement;
	          infoWindowContainerEl.className = "ng-map-info-window";
	        });
	      };

	      return infoWindow;
	    };

	    var linkFunc = function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];

	      element.css('display','none');

	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);

	      var address;
	      if (options.position && !(options.position instanceof google.maps.LatLng)) {
	        address = options.position;
	      }
	      var infoWindow = getInfoWindow(options, events, element);
	      if (address) {
	        NgMap.getGeoLocation(address).then(function(latlng) {
	          infoWindow.setPosition(latlng);
	          infoWindow.__open(mapController.map, scope, latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }

	      mapController.addObject('infoWindows', infoWindow);
	      mapController.observeAttrSetObj(orgAttrs, attrs, infoWindow);

	      mapController.showInfoWindow = 
	      mapController.map.showInfoWindow = mapController.showInfoWindow ||
	        function(p1, p2, p3) { //event, id, marker
	          var id = typeof p1 == 'string' ? p1 : p2;
	          var marker = typeof p1 == 'string' ? p2 : p3;
	          if (typeof marker == 'string') {
	            //Check if markers if defined to avoid odd 'undefined' errors
	            if (typeof mapController.map.markers != "undefined"
	                && typeof mapController.map.markers[marker] != "undefined") {
	              marker = mapController.map.markers[marker];
	            } else if (
	                //additionally check if that marker is a custom marker
	            typeof mapController.map.customMarkers
	            && typeof mapController.map.customMarkers[marker] != "undefined") {
	              marker = mapController.map.customMarkers[marker];
	            } else {
	              //Better error output if marker with that id is not defined
	              throw new Error("Cant open info window for id " + marker + ". Marker or CustomMarker is not defined")
	            }
	          }

	          var infoWindow = mapController.map.infoWindows[id];
	          var anchor = marker ? marker : (this.getPosition ? this : null);
	          infoWindow.__open(mapController.map, scope, anchor);
	          if(mapController.singleInfoWindow) {
	            if(mapController.lastInfoWindow) {
	              scope.hideInfoWindow(mapController.lastInfoWindow);
	            }
	            mapController.lastInfoWindow = id;
	          }
	        };

	      mapController.hideInfoWindow =
	      mapController.map.hideInfoWindow = mapController.hideInfoWindow ||
	        function(p1, p2) {
	          var id = typeof p1 == 'string' ? p1 : p2;
	          var infoWindow = mapController.map.infoWindows[id];
	          infoWindow.close();
	        };

	      //TODO DEPRECATED
	      scope.showInfoWindow = mapController.map.showInfoWindow;
	      scope.hideInfoWindow = mapController.map.hideInfoWindow;

	      NgMap.getMap().then(function(map) {
	        infoWindow.visible && infoWindow.__open(map, scope);
	        if (infoWindow.visibleOnMarker) {
	          var markerId = infoWindow.visibleOnMarker;
	          infoWindow.__open(map, scope, map.markers[markerId]);
	        }
	      });

	    }; //link

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    };

	  }; // infoWindow
	  infoWindow.$inject =
	    ['Attr2MapOptions', '$compile', '$timeout', '$parse', 'NgMap'];

	  angular.module('ngMap').directive('infoWindow', infoWindow);
	})();

	/**
	 * @ngdoc directive
	 * @name kml-layer
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   renders Kml layer on a map
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {Url} url url of the kml layer
	 * @attr {KmlLayerOptions} KmlLayerOptions
	 *   (https://developers.google.com/maps/documentation/javascript/reference#KmlLayerOptions) 
	 * @attr {String} &lt;KmlLayerEvent> Any KmlLayer events,
	 *   https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <kml-layer ANY_KML_LAYER ANY_KML_LAYER_EVENTS"></kml-layer>
	 *   </map>
	 *
	 * Example:
	 *
	 * <map zoom="11" center="[41.875696,-87.624207]">
	 *   <kml-layer url="https://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml" >
	 *   </kml-layer>
	 * </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('kmlLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    var getKmlLayer = function(options, events) {
	      var kmlLayer = new google.maps.KmlLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(kmlLayer, eventName, events[eventName]);
	      }
	      return kmlLayer;
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var kmlLayer = getKmlLayer(options, events);
	        mapController.addObject('kmlLayers', kmlLayer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, kmlLayer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('kmlLayers', kmlLayer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name map-data
	 * @param Attr2MapOptions {service}
	 *   convert html attribute to Gogole map api options
	 * @description
	 *   set map data
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @wn {String} method-name, run map.data[method-name] with attribute value
	 * @example
	 * Example:
	 *
	 *  <map zoom="11" center="[41.875696,-87.624207]">
	 *    <map-data load-geo-json="https://storage.googleapis.com/maps-devrel/google.json"></map-data>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('mapData', [
	    'Attr2MapOptions', 'NgMap', function(Attr2MapOptions, NgMap) {
	    var parser = Attr2MapOptions;
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs) {
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);

	        void 0;
	        NgMap.getMap().then(function(map) {
	          //options
	          for (var key in options) {
	            var val = options[key];
	            if (typeof scope[val] === "function") {
	              map.data[key](scope[val]);
	            } else {
	              map.data[key](val);
	            }
	          }

	          //events
	          for (var eventName in events) {
	            map.data.addListener(eventName, events[eventName]);
	          }
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name map-lazy-load
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *  Requires: Delay the initialization of map directive
	 *    until the map is ready to be rendered
	 *  Restrict To: Attribute
	 *
	 * @attr {String} map-lazy-load
	 *    Maps api script source file location.
	 *    Example:
	 *      'https://maps.google.com/maps/api/js'
	 * @attr {String} map-lazy-load-params
	 *   Maps api script source file location via angular scope variable.
	 *   Also requires the map-lazy-load attribute to be present in the directive.
	 *   Example: In your controller, set
	 *     $scope.googleMapsURL = 'https://maps.google.com/maps/api/js?v=3.20&client=XXXXXenter-api-key-hereXXXX'
	 *
	 * @example
	 * Example:
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js"
	 *        map-lazy-load-params="{{googleMapsUrl}}">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 */
	/* global window, document */
	(function() {
	  'use strict';
	  var $timeout, $compile, src, savedHtml;

	  var preLinkFunc = function(scope, element, attrs) {
	    var mapsUrl = attrs.mapLazyLoadParams || attrs.mapLazyLoad;

	    window.lazyLoadCallback = function() {
	      void 0;
	      $timeout(function() { /* give some time to load */
	        element.html(savedHtml);
	        $compile(element.contents())(scope);
	      }, 100);
	    };

	    if(window.google === undefined || window.google.maps === undefined) {
	      var scriptEl = document.createElement('script');
	      void 0;

	      scriptEl.src = mapsUrl +
	        (mapsUrl.indexOf('?') > -1 ? '&' : '?') +
	        'callback=lazyLoadCallback';

	        if (!document.querySelector('script[src="' + scriptEl.src + '"]')) {
	          document.body.appendChild(scriptEl);
	        }
	    } else {
	      element.html(savedHtml);
	      $compile(element.contents())(scope);
	    }
	  };

	  var compileFunc = function(tElement, tAttrs) {

	    (!tAttrs.mapLazyLoad) && void 0;
	    savedHtml = tElement.html();
	    src = tAttrs.mapLazyLoad;

	    /**
	     * if already loaded, stop processing it
	     */
	    if(window.google !== undefined && window.google.maps !== undefined) {
	      return false;
	    }

	    tElement.html('');  // will compile again after script is loaded

	    return {
	      pre: preLinkFunc
	    };
	  };

	  var mapLazyLoad = function(_$compile_, _$timeout_) {
	    $compile = _$compile_, $timeout = _$timeout_;
	    return {
	      compile: compileFunc
	    };
	  };
	  mapLazyLoad.$inject = ['$compile','$timeout'];

	  angular.module('ngMap').directive('mapLazyLoad', mapLazyLoad);
	})();

	/**
	 * @ngdoc directive
	 * @name map-type
	 * @param Attr2MapOptions {service} 
	 *   convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <map-type name="coordinate" object="coordinateMapType"></map-type>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('mapType', ['$parse', 'NgMap',
	    function($parse, NgMap) {

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var mapTypeName = attrs.name, mapTypeObject;
	        if (!mapTypeName) {
	          throw "invalid map-type name";
	        }
	        mapTypeObject = $parse(attrs.object)(scope);
	        if (!mapTypeObject) {
	          throw "invalid map-type object";
	        }

	        NgMap.getMap().then(function(map) {
	          map.mapTypes.set(mapTypeName, mapTypeObject);
	        });
	        mapController.addObject('mapTypes', mapTypeObject);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @memberof ngMap
	 * @name ng-map
	 * @param Attr2Options {service}
	 *  convert html attribute to Gogole map api options
	 * @description
	 * Implementation of {@link __MapController}
	 * Initialize a Google map within a `<div>` tag
	 *   with given options and register events
	 *
	 * @attr {Expression} map-initialized
	 *   callback function when map is initialized
	 *   e.g., map-initialized="mycallback(map)"
	 * @attr {Expression} geo-callback if center is an address or current location,
	 *   the expression is will be executed when geo-lookup is successful.
	 *   e.g., geo-callback="showMyStoreInfo()"
	 * @attr {Array} geo-fallback-center
	 *   The center of map incase geolocation failed. i.e. [0,0]
	 * @attr {Object} geo-location-options
	 *  The navigator geolocation options.
	 *  e.g., { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
	 *  If none specified, { timeout: 5000 }.
	 *  If timeout not specified, timeout: 5000 added
	 * @attr {Boolean} zoom-to-include-markers
	 *  When true, map boundary will be changed automatially
	 *  to include all markers when initialized
	 * @attr {Boolean} default-style
	 *  When false, the default styling,
	 *  `display:block;height:300px`, will be ignored.
	 * @attr {String} &lt;MapOption> Any Google map options,
	 *  https://developers.google.com/maps/documentation/javascript/reference?csw=1#MapOptions
	 * @attr {String} &lt;MapEvent> Any Google map events,
	 *  https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/map_events.html
	 * @attr {Boolean} single-info-window
	 *  When true the map will only display one info window at the time,
	 *  if not set or false,
	 *  everytime an info window is open it will be displayed with the othe one.
	 * @attr {Boolean} trigger-resize
	 *  Default to false.  Set to true to trigger resize of the map.  Needs to be done anytime you resize the map
	 * @example
	 * Usage:
	 *   <map MAP_OPTIONS_OR_MAP_EVENTS ..>
	 *     ... Any children directives
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]" on-click="doThat()">
	 *   </map>
	 *
	 *   <map geo-fallback-center="[40.74, -74.18]" zoom-to-inlude-markers="true">
	 *   </map>
	 */
	(function () {
	  'use strict';

	  var mapDirective = function () {
	    return {
	      restrict: 'AE',
	      controller: '__MapController',
	      controllerAs: 'ngmap'
	    };
	  };

	  angular.module('ngMap').directive('map', [mapDirective]);
	  angular.module('ngMap').directive('ngMap', [mapDirective]);
	})();

	/**
	 * @ngdoc directive
	 * @name maps-engine-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *  <map zoom="14" center="[59.322506, 18.010025]">
	 *    <maps-engine-layer layer-id="06673056454046135537-08896501997766553811">
	 *    </maps-engine-layer>
	 *  </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('mapsEngineLayer', ['Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    var getMapsEngineLayer = function(options, events) {
	      var layer = new google.maps.visualization.MapsEngineLayer(options);

	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }

	      return layer;
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;

	        var layer = getMapsEngineLayer(options, events);
	        mapController.addObject('mapsEngineLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name marker
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param NavigatorGeolocation It is used to find the current location
	 * @description
	 *  Draw a Google map marker on a map with given options and register events
	 *
	 *  Requires:  map directive
	 *
	 *  Restrict To:  Element
	 *
	 * @attr {String} position address, 'current', or [latitude, longitude]
	 *  example:
	 *    '1600 Pennsylvania Ave, 20500  Washingtion DC',
	 *    'current position',
	 *    '[40.74, -74.18]'
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if position is an address,
	 *   the expression is will be performed when geo-lookup is successful.
	 *   e.g., geo-callback="showStoreInfo()"
	 * @attr {Boolean} no-watcher if true, no attribute observer is added.
	 *   Useful for many ng-repeat
	 * @attr {String} &lt;MarkerOption>
	 *   [Any Marker options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#MarkerOptions)
	 * @attr {String} &lt;MapEvent>
	 *   [Any Marker events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <marker ANY_MARKER_OPTIONS ANY_MARKER_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]">
	 *    <marker position="[40.74, -74.18]" on-click="myfunc()"></div>
	 *   </map>
	 *
	 *   <map center="the cn tower">
	 *    <marker position="the cn tower" on-click="myfunc()"></div>
	 *   </map>
	 */
	/* global google */
	(function() {
	  'use strict';
	  var parser, $parse, NgMap;

	  var getMarker = function(options, events) {
	    var marker;

	    if (NgMap.defaultOptions.marker) {
	      for (var key in NgMap.defaultOptions.marker) {
	        if (typeof options[key] == 'undefined') {
	          void 0;
	          options[key] = NgMap.defaultOptions.marker[key];
	        }
	      }
	    }

	    if (!(options.position instanceof google.maps.LatLng)) {
	      options.position = new google.maps.LatLng(0,0);
	    }
	    marker = new google.maps.Marker(options);

	    /**
	     * set events
	     */
	    if (Object.keys(events).length > 0) {
	      void 0;
	    }
	    for (var eventName in events) {
	      if (eventName) {
	        google.maps.event.addListener(marker, eventName, events[eventName]);
	      }
	    }

	    return marker;
	  };

	  var linkFunc = function(scope, element, attrs, mapController) {
	    mapController = mapController[0]||mapController[1];

	    var orgAttrs = parser.orgAttributes(element);
	    var filtered = parser.filter(attrs);
	    var markerOptions = parser.getOptions(filtered, scope, {scope: scope});
	    var markerEvents = parser.getEvents(scope, filtered);
	    void 0;

	    var address;
	    if (!(markerOptions.position instanceof google.maps.LatLng)) {
	      address = markerOptions.position;
	    }
	    var marker = getMarker(markerOptions, markerEvents);
	    mapController.addObject('markers', marker);
	    if (address) {
	      NgMap.getGeoLocation(address).then(function(latlng) {
	        marker.setPosition(latlng);
	        markerOptions.centered && marker.map.setCenter(latlng);
	        var geoCallback = attrs.geoCallback;
	        geoCallback && $parse(geoCallback)(scope);
	      });
	    }

	    //set observers
	    mapController.observeAttrSetObj(orgAttrs, attrs, marker); /* observers */

	    element.bind('$destroy', function() {
	      mapController.deleteObject('markers', marker);
	    });
	  };

	  var marker = function(Attr2MapOptions, _$parse_, _NgMap_) {
	    parser = Attr2MapOptions;
	    $parse = _$parse_;
	    NgMap = _NgMap_;

	    return {
	      restrict: 'E',
	      require: ['^?map','?^ngMap'],
	      link: linkFunc
	    };
	  };

	  marker.$inject = ['Attr2MapOptions', '$parse', 'NgMap'];
	  angular.module('ngMap').directive('marker', marker);

	})();

	/**
	 * @ngdoc directive
	 * @name overlay-map-type
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @param $window {service}
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 * <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *   <overlay-map-type index="0" object="coordinateMapType"></map-type>
	 * </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('overlayMapType', [
	    'NgMap', function(NgMap) {

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var initMethod = attrs.initMethod || "insertAt";
	        var overlayMapTypeObject = scope[attrs.object];

	        NgMap.getMap().then(function(map) {
	          if (initMethod == "insertAt") {
	            var index = parseInt(attrs.index, 10);
	            map.overlayMapTypes.insertAt(index, overlayMapTypeObject);
	          } else if (initMethod == "push") {
	            map.overlayMapTypes.push(overlayMapTypeObject);
	          }
	        });
	        mapController.addObject('overlayMapTypes', overlayMapTypeObject);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name places-auto-complete
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Provides address auto complete feature to an input element
	 *   Requires: input tag
	 *   Restrict To: Attribute
	 *
	 * @attr {AutoCompleteOptions}
	 *   [Any AutocompleteOptions](https://developers.google.com/maps/documentation/javascript/3.exp/reference#AutocompleteOptions)
	 *
	 * @example
	 * Example:
	 *   <script src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
	 *   <input places-auto-complete types="['geocode']" on-place-changed="myCallback(place)" />
	 */
	/* global google */
	(function() {
	  'use strict';

	  var placesAutoComplete = function(Attr2MapOptions, $timeout) {
	    var parser = Attr2MapOptions;

	    var linkFunc = function(scope, element, attrs, ngModelCtrl) {
	      if (attrs.placesAutoComplete ==='false') {
	        return false;
	      }
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);
	      var autocomplete = new google.maps.places.Autocomplete(element[0], options);
	      for (var eventName in events) {
	        google.maps.event.addListener(autocomplete, eventName, events[eventName]);
	      }

	      var updateModel = function() {
	        $timeout(function(){
	          ngModelCtrl && ngModelCtrl.$setViewValue(element.val());
	        },100);
	      };
	      google.maps.event.addListener(autocomplete, 'place_changed', updateModel);
	      element[0].addEventListener('change', updateModel);

	      attrs.$observe('types', function(val) {
	        if (val) {
	          var optionValue = parser.toOptionValue(val, {key: 'types'});
	          autocomplete.setTypes(optionValue);
	        }
	      });
	    };

	    return {
	      restrict: 'A',
	      require: '?ngModel',
	      link: linkFunc
	    };
	  };

	  placesAutoComplete.$inject = ['Attr2MapOptions', '$timeout'];
	  angular.module('ngMap').directive('placesAutoComplete', placesAutoComplete);

	})();

	/**
	 * @ngdoc directive
	 * @name shape
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Initialize a Google map shape in map with given options and register events
	 *   The shapes are:
	 *     . circle
	 *     . polygon
	 *     . polyline
	 *     . rectangle
	 *     . groundOverlay(or image)
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if shape is a circle and the center is
	 *   an address, the expression is will be performed when geo-lookup
	 *   is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;OPTIONS>
	 *   For circle, [any circle options](https://developers.google.com/maps/documentation/javascript/reference#CircleOptions)
	 *   For polygon, [any polygon options](https://developers.google.com/maps/documentation/javascript/reference#PolygonOptions)
	 *   For polyline, [any polyline options](https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions)
	 *   For rectangle, [any rectangle options](https://developers.google.com/maps/documentation/javascript/reference#RectangleOptions)
	 *   For image, [any groundOverlay options](https://developers.google.com/maps/documentation/javascript/reference#GroundOverlayOptions)
	 * @attr {String} &lt;MapEvent> [Any Shape events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <shape name=SHAPE_NAME ANY_SHAPE_OPTIONS ANY_SHAPE_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example:
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polyline" name="polyline" geodesic="true"
	 *       stroke-color="#FF0000" stroke-opacity="1.0" stroke-weight="2"
	 *       path="[[40.74,-74.18],[40.64,-74.10],[40.54,-74.05],[40.44,-74]]" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polygon" name="polygon" stroke-color="#FF0000"
	 *       stroke-opacity="1.0" stroke-weight="2"
	 *       paths="[[40.74,-74.18],[40.64,-74.18],[40.84,-74.08],[40.74,-74.18]]" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="rectangle" name="rectangle" stroke-color='#FF0000'
	 *       stroke-opacity="0.8" stroke-weight="2"
	 *       bounds="[[40.74,-74.18], [40.78,-74.14]]" editable="true" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="circle" name="circle" stroke-color='#FF0000'
	 *       stroke-opacity="0.8"stroke-weight="2"
	 *       center="[40.70,-74.14]" radius="4000" editable="true" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="image" name="image"
	 *       url="https://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg"
	 *       bounds="[[40.71,-74.22],[40.77,-74.12]]" opacity="0.7"
	 *       clickable="true">
	 *     </shape>
	 *   </map>
	 *
	 *  For full-working example, please visit
	 *    [shape example](https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/shape.html)
	 */
	/* global google */
	(function() {
	  'use strict';

	  var getShape = function(options, events) {
	    var shape;

	    var shapeName = options.name;
	    delete options.name;  //remove name bcoz it's not for options
	    void 0;

	    /**
	     * set options
	     */
	    switch(shapeName) {
	      case "circle":
	        if (!(options.center instanceof google.maps.LatLng)) {
	          options.center = new google.maps.LatLng(0,0);
	        } 
	        shape = new google.maps.Circle(options);
	        break;
	      case "polygon":
	        shape = new google.maps.Polygon(options);
	        break;
	      case "polyline":
	        shape = new google.maps.Polyline(options);
	        break;
	      case "rectangle":
	        shape = new google.maps.Rectangle(options);
	        break;
	      case "groundOverlay":
	      case "image":
	        var url = options.url;
	        var opts = {opacity: options.opacity, clickable: options.clickable, id:options.id};
	        shape = new google.maps.GroundOverlay(url, options.bounds, opts);
	        break;
	    }

	    /**
	     * set events
	     */
	    for (var eventName in events) {
	      if (events[eventName]) {
	        google.maps.event.addListener(shape, eventName, events[eventName]);
	      }
	    }
	    return shape;
	  };

	  var shape = function(Attr2MapOptions, $parse, NgMap) {
	    var parser = Attr2MapOptions;

	    var linkFunc = function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];

	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var shapeOptions = parser.getOptions(filtered, {scope: scope});
	      var shapeEvents = parser.getEvents(scope, filtered);

	      var address, shapeType;
	      shapeType = shapeOptions.name;
	      if (!(shapeOptions.center instanceof google.maps.LatLng)) {
	        address = shapeOptions.center;
	      }
	      var shape = getShape(shapeOptions, shapeEvents);
	      mapController.addObject('shapes', shape);

	      if (address && shapeType == 'circle') {
	        NgMap.getGeoLocation(address).then(function(latlng) {
	          shape.setCenter(latlng);
	          shape.centered && shape.map.setCenter(latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }

	      //set observers
	      mapController.observeAttrSetObj(orgAttrs, attrs, shape);
	      element.bind('$destroy', function() {
	        mapController.deleteObject('shapes', shape);
	      });
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	     }; // return
	  };
	  shape.$inject = ['Attr2MapOptions', '$parse', 'NgMap'];

	  angular.module('ngMap').directive('shape', shape);

	})();

	/**
	 * @ngdoc directive
	 * @name streetview-panorama
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr container Optional, id or css selector, if given, streetview will be in the given html element
	 * @attr {String} &lt;StreetViewPanoramaOption>
	 *   [Any Google StreetViewPanorama options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#StreetViewPanoramaOptions)
	 * @attr {String} &lt;StreetViewPanoramaEvent>
	 *   [Any Google StreetViewPanorama events](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama)
	 *
	 * @example
	 *   <map zoom="11" center="[40.688738,-74.043871]" >
	 *     <street-view-panorama
	 *       click-to-go="true"
	 *       disable-default-ui="true"
	 *       disable-double-click-zoom="true"
	 *       enable-close-button="true"
	 *       pano="my-pano"
	 *       position="40.688738,-74.043871"
	 *       pov="{heading:0, pitch: 90}"
	 *       scrollwheel="false"
	 *       visible="true">
	 *     </street-view-panorama>
	 *   </map>
	 */
	/* global google, document */
	(function() {
	  'use strict';

	  var streetViewPanorama = function(Attr2MapOptions, NgMap) {
	    var parser = Attr2MapOptions;

	    var getStreetViewPanorama = function(map, options, events) {
	      var svp, container;
	      if (options.container) {
	        container = document.getElementById(options.container);
	        container = container || document.querySelector(options.container);
	      }
	      if (container) {
	        svp = new google.maps.StreetViewPanorama(container, options);
	      } else {
	        svp = map.getStreetView();
	        svp.setOptions(options);
	      }

	      for (var eventName in events) {
	        eventName &&
	          google.maps.event.addListener(svp, eventName, events[eventName]);
	      }
	      return svp;
	    };

	    var linkFunc = function(scope, element, attrs) {
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var controlOptions = parser.getControlOptions(filtered);
	      var svpOptions = angular.extend(options, controlOptions);

	      var svpEvents = parser.getEvents(scope, filtered);
	      void 0;

	      NgMap.getMap().then(function(map) {
	        var svp = getStreetViewPanorama(map, svpOptions, svpEvents);

	        map.setStreetView(svp);
	        (!svp.getPosition()) && svp.setPosition(map.getCenter());
	        google.maps.event.addListener(svp, 'position_changed', function() {
	          if (svp.getPosition() !== map.getCenter()) {
	            map.setCenter(svp.getPosition());
	          }
	        });
	        //needed for geo-callback
	        var listener =
	          google.maps.event.addListener(map, 'center_changed', function() {
	            svp.setPosition(map.getCenter());
	            google.maps.event.removeListener(listener);
	          });
	      });

	    }; //link

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    };

	  };
	  streetViewPanorama.$inject = ['Attr2MapOptions', 'NgMap'];

	  angular.module('ngMap').directive('streetViewPanorama', streetViewPanorama);
	})();

	/**
	 * @ngdoc directive
	 * @name traffic-layer
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <traffic-layer></traffic-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('trafficLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    var getLayer = function(options, events) {
	      var layer = new google.maps.TrafficLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('trafficLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('trafficLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name transit-layer
	 * @param Attr2MapOptions {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *    <transit-layer></transit-layer>
	 *  </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('transitLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;

	    var getLayer = function(options, events) {
	      var layer = new google.maps.TransitLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };

	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],

	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];

	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('transitLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('transitLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc filter
	 * @name camel-case
	 * @description
	 *   Converts string to camel cased
	 */
	(function() {
	  'use strict';

	  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	  var MOZ_HACK_REGEXP = /^moz([A-Z])/;

	  var camelCaseFilter = function() {
	    return function(name) {
	      return name.
	        replace(SPECIAL_CHARS_REGEXP,
	          function(_, separator, letter, offset) {
	            return offset ? letter.toUpperCase() : letter;
	        }).
	        replace(MOZ_HACK_REGEXP, 'Moz$1');
	    };
	  };

	  angular.module('ngMap').filter('camelCase', camelCaseFilter);
	})();

	/**
	 * @ngdoc filter
	 * @name jsonize
	 * @description
	 *   Converts json-like string to json string
	 */
	(function() {
	  'use strict';

	  var jsonizeFilter = function() {
	    return function(str) {
	      try {       // if parsable already, return as it is
	        JSON.parse(str);
	        return str;
	      } catch(e) { // if not parsable, change little
	        return str
	          // wrap keys without quote with valid double quote
	          .replace(/([\$\w]+)\s*:/g,
	            function(_, $1) {
	              return '"'+$1+'":';
	            }
	          )
	          // replacing single quote wrapped ones to double quote
	          .replace(/'([^']+)'/g,
	            function(_, $1) {
	              return '"'+$1+'"';
	            }
	          );
	      }
	    };
	  };

	  angular.module('ngMap').filter('jsonize', jsonizeFilter);
	})();

	/**
	 * @ngdoc service
	 * @name Attr2MapOptions
	 * @description
	 *   Converts tag attributes to options used by google api v3 objects
	 */
	/* global google */
	(function() {
	  'use strict';

	  //i.e. "2015-08-12T06:12:40.858Z"
	  var isoDateRE =
	    /^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/;

	  var Attr2MapOptions = function(
	      $parse, $timeout, $log, NavigatorGeolocation, GeoCoder,
	      camelCaseFilter, jsonizeFilter
	    ) {

	    /**
	     * Returns the attributes of an element as hash
	     * @memberof Attr2MapOptions
	     * @param {HTMLElement} el html element
	     * @returns {Hash} attributes
	     */
	    var orgAttributes = function(el) {
	      (el.length > 0) && (el = el[0]);
	      var orgAttributes = {};
	      for (var i=0; i<el.attributes.length; i++) {
	        var attr = el.attributes[i];
	        orgAttributes[attr.name] = attr.value;
	      }
	      return orgAttributes;
	    };

	    var getJSON = function(input) {
	      var re =/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/; //lat,lng
	      if (input.match(re)) {
	        input = "["+input+"]";
	      }
	      return JSON.parse(jsonizeFilter(input));
	    };

	    var getLatLng = function(input) {
	      var output = input;
	      if (input[0].constructor == Array) { // [[1,2],[3,4]]
	        output = input.map(function(el) {
	          return new google.maps.LatLng(el[0], el[1]);
	        });
	      } else if(!isNaN(parseFloat(input[0])) && isFinite(input[0])) {
	        output = new google.maps.LatLng(output[0], output[1]);
	      }
	      return output;
	    };

	    var toOptionValue = function(input, options) {
	      var output;
	      try { // 1. Number?
	        output = getNumber(input);
	      } catch(err) {
	        try { // 2. JSON?
	          var output = getJSON(input);
	          if (output instanceof Array) {
	            // [{a:1}] : not lat/lng ones
	            if (output[0].constructor == Object) {
	              output = output;
	            } else { // [[1,2],[3,4]] or [1,2]
	              output = getLatLng(output);
	            }
	          }
	          // JSON is an object (not array or null)
	          else if (output === Object(output)) {
	            // check for nested hashes and convert to Google API options
	            var newOptions = options;
	            newOptions.doNotConverStringToNumber = true;
	            output = getOptions(output, newOptions);
	          }
	        } catch(err2) {
	          // 3. Google Map Object function Expression. i.e. LatLng(80,-49)
	          if (input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/)) {
	            try {
	              var exp = "new google.maps."+input;
	              output = eval(exp); /* jshint ignore:line */
	            } catch(e) {
	              output = input;
	            }
	          // 4. Google Map Object constant Expression. i.e. MayTypeId.HYBRID
	          } else if (input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/)) {
	            try {
	              var matches = input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);
	              output = google.maps[matches[1]][matches[2]];
	            } catch(e) {
	              output = input;
	            }
	          // 5. Google Map Object constant Expression. i.e. HYBRID
	          } else if (input.match(/^[A-Z]+$/)) {
	            try {
	              var capitalizedKey = options.key.charAt(0).toUpperCase() +
	                options.key.slice(1);
	              if (options.key.match(/temperatureUnit|windSpeedUnit|labelColor/)) {
	                capitalizedKey = capitalizedKey.replace(/s$/,"");
	                output = google.maps.weather[capitalizedKey][input];
	              } else {
	                output = google.maps[capitalizedKey][input];
	              }
	            } catch(e) {
	              output = input;
	            }
	          // 6. Date Object as ISO String
	          } else if (input.match(isoDateRE)) {
	            try {
	              output = new Date(input);
	            } catch(e) {
	              output = input;
	            }
	          // 7. evaluate dynamically bound values
	          } else if (input.match(/^{/) && options.scope) {
	            try {
	              var expr = input.replace(/{{/,'').replace(/}}/g,'');
	              output = options.scope.$eval(expr);
	            } catch (err) {
	              output = input;
	            }
	          } else {
	            output = input;
	          }
	        } // catch(err2)
	      } // catch(err)

	      // convert output more for center and position
	      if (
	        (options.key == 'center' || options.key == 'center') &&
	        output instanceof Array
	      ) {
	        output = new google.maps.LatLng(output[0], output[1]);
	      }

	      // convert output more for shape bounds
	      if (options.key == 'bounds' && output instanceof Array) {
	        output = new google.maps.LatLngBounds(output[0], output[1]);
	      }

	      // convert output more for shape icons
	      if (options.key == 'icons' && output instanceof Array) {

	        for (var i=0; i<output.length; i++) {
	          var el = output[i];
	          if (el.icon.path.match(/^[A-Z_]+$/)) {
	            el.icon.path =  google.maps.SymbolPath[el.icon.path];
	          }
	        }
	      }

	      // convert output more for marker icon
	      if (options.key == 'icon' && output instanceof Object) {
	        if ((""+output.path).match(/^[A-Z_]+$/)) {
	          output.path = google.maps.SymbolPath[output.path];
	        }
	        for (var key in output) { //jshint ignore:line
	          var arr = output[key];
	          if (key == "anchor" || key == "origin" || key == "labelOrigin") {
	            output[key] = new google.maps.Point(arr[0], arr[1]);
	          } else if (key == "size" || key == "scaledSize") {
	            output[key] = new google.maps.Size(arr[0], arr[1]);
	          }
	        }
	      }

	      return output;
	    };

	    var getAttrsToObserve = function(attrs) {
	      var attrsToObserve = [];

	      if (!attrs.noWatcher) {
	        for (var attrName in attrs) { //jshint ignore:line
	          var attrValue = attrs[attrName];
	          if (attrValue && attrValue.match(/\{\{.*\}\}/)) { // if attr value is {{..}}
	            attrsToObserve.push(camelCaseFilter(attrName));
	          }
	        }
	      }

	      return attrsToObserve;
	    };

	    /**
	     * filters attributes by skipping angularjs methods $.. $$..
	     * @memberof Attr2MapOptions
	     * @param {Hash} attrs tag attributes
	     * @returns {Hash} filterd attributes
	     */
	    var filter = function(attrs) {
	      var options = {};
	      for(var key in attrs) {
	        if (key.match(/^\$/) || key.match(/^ng[A-Z]/)) {
	          void(0);
	        } else {
	          options[key] = attrs[key];
	        }
	      }
	      return options;
	    };

	    /**
	     * converts attributes hash to Google Maps API v3 options
	     * ```
	     *  . converts numbers to number
	     *  . converts class-like string to google maps instance
	     *    i.e. `LatLng(1,1)` to `new google.maps.LatLng(1,1)`
	     *  . converts constant-like string to google maps constant
	     *    i.e. `MapTypeId.HYBRID` to `google.maps.MapTypeId.HYBRID`
	     *    i.e. `HYBRID"` to `google.maps.MapTypeId.HYBRID`
	     * ```
	     * @memberof Attr2MapOptions
	     * @param {Hash} attrs tag attributes
	     * @param {Hash} options
	     * @returns {Hash} options converted attributess
	     */
	    var getOptions = function(attrs, params) {
	      params = params || {};
	      var options = {};
	      for(var key in attrs) {
	        if (attrs[key] || attrs[key] === 0) {
	          if (key.match(/^on[A-Z]/)) { //skip events, i.e. on-click
	            continue;
	          } else if (key.match(/ControlOptions$/)) { // skip controlOptions
	            continue;
	          } else {
	            // nested conversions need to be typechecked
	            // (non-strings are fully converted)
	            if (typeof attrs[key] !== 'string') {
	              options[key] = attrs[key];
	            } else {
	              if (params.doNotConverStringToNumber &&
	                attrs[key].match(/^[0-9]+$/)
	              ) {
	                options[key] = attrs[key];
	              } else {
	                options[key] = toOptionValue(attrs[key], {key: key, scope: params.scope});
	              }
	            }
	          }
	        } // if (attrs[key])
	      } // for(var key in attrs)
	      return options;
	    };

	    /**
	     * converts attributes hash to scope-specific event function 
	     * @memberof Attr2MapOptions
	     * @param {scope} scope angularjs scope
	     * @param {Hash} attrs tag attributes
	     * @returns {Hash} events converted events
	     */
	    var getEvents = function(scope, attrs) {
	      var events = {};
	      var toLowercaseFunc = function($1){
	        return "_"+$1.toLowerCase();
	      };
	      var EventFunc = function(attrValue) {
	        // funcName(argsStr)
	        var matches = attrValue.match(/([^\(]+)\(([^\)]*)\)/);
	        var funcName = matches[1];
	        var argsStr = matches[2].replace(/event[ ,]*/,'');  //remove string 'event'
	        var argsExpr = $parse("["+argsStr+"]"); //for perf when triggering event
	        return function(event) {
	          var args = argsExpr(scope); //get args here to pass updated model values
	          function index(obj,i) {return obj[i];}
	          var f = funcName.split('.').reduce(index, scope);
	          f && f.apply(this, [event].concat(args));
	          $timeout( function() {
	            scope.$apply();
	          });
	        };
	      };

	      for(var key in attrs) {
	        if (attrs[key]) {
	          if (!key.match(/^on[A-Z]/)) { //skip if not events
	            continue;
	          }

	          //get event name as underscored. i.e. zoom_changed
	          var eventName = key.replace(/^on/,'');
	          eventName = eventName.charAt(0).toLowerCase() + eventName.slice(1);
	          eventName = eventName.replace(/([A-Z])/g, toLowercaseFunc);

	          var attrValue = attrs[key];
	          events[eventName] = new EventFunc(attrValue);
	        }
	      }
	      return events;
	    };

	    /**
	     * control means map controls, i.e streetview, pan, etc, not a general control
	     * @memberof Attr2MapOptions
	     * @param {Hash} filtered filtered tag attributes
	     * @returns {Hash} Google Map options
	     */
	    var getControlOptions = function(filtered) {
	      var controlOptions = {};
	      if (typeof filtered != 'object') {
	        return false;
	      }

	      for (var attr in filtered) {
	        if (filtered[attr]) {
	          if (!attr.match(/(.*)ControlOptions$/)) {
	            continue; // if not controlOptions, skip it
	          }

	          //change invalid json to valid one, i.e. {foo:1} to {"foo": 1}
	          var orgValue = filtered[attr];
	          var newValue = orgValue.replace(/'/g, '"');
	          newValue = newValue.replace(/([^"]+)|("[^"]+")/g, function($0, $1, $2) {
	            if ($1) {
	              return $1.replace(/([a-zA-Z0-9]+?):/g, '"$1":');
	            } else {
	              return $2;
	            }
	          });
	          try {
	            var options = JSON.parse(newValue);
	            for (var key in options) { //assign the right values
	              if (options[key]) {
	                var value = options[key];
	                if (typeof value === 'string') {
	                  value = value.toUpperCase();
	                } else if (key === "mapTypeIds") {
	                  value = value.map( function(str) {
	                    if (str.match(/^[A-Z]+$/)) { // if constant
	                      return google.maps.MapTypeId[str.toUpperCase()];
	                    } else { // else, custom map-type
	                      return str;
	                    }
	                  });
	                }

	                if (key === "style") {
	                  var str = attr.charAt(0).toUpperCase() + attr.slice(1);
	                  var objName = str.replace(/Options$/,'')+"Style";
	                  options[key] = google.maps[objName][value];
	                } else if (key === "position") {
	                  options[key] = google.maps.ControlPosition[value];
	                } else {
	                  options[key] = value;
	                }
	              }
	            }
	            controlOptions[attr] = options;
	          } catch (e) {
	            void 0;
	          }
	        }
	      } // for

	      return controlOptions;
	    };

	    return {
	      filter: filter,
	      getOptions: getOptions,
	      getEvents: getEvents,
	      getControlOptions: getControlOptions,
	      toOptionValue: toOptionValue,
	      getAttrsToObserve: getAttrsToObserve,
	      orgAttributes: orgAttributes
	    }; // return

	  };
	  Attr2MapOptions.$inject= [
	    '$parse', '$timeout', '$log', 'NavigatorGeolocation', 'GeoCoder',
	    'camelCaseFilter', 'jsonizeFilter'
	  ];

	  angular.module('ngMap').service('Attr2MapOptions', Attr2MapOptions);
	})();

	/**
	 * @ngdoc service
	 * @name GeoCoder
	 * @description
	 *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *   service for Google Geocoder service
	 */
	(function() {
	  'use strict';
	  var $q;
	  /**
	   * @memberof GeoCoder
	   * @param {Hash} options
	   *   https://developers.google.com/maps/documentation/geocoding/#geocoding
	   * @example
	   * ```
	   *   GeoCoder.geocode({address: 'the cn tower'}).then(function(result) {
	   *     //... do something with result
	   *   });
	   * ```
	   * @returns {HttpPromise} Future object
	   */
	  var geocodeFunc = function(options) {
	    var deferred = $q.defer();
	    var geocoder = new google.maps.Geocoder();
	    geocoder.geocode(options, function (results, status) {
	      if (status == google.maps.GeocoderStatus.OK) {
	        deferred.resolve(results);
	      } else {
	        deferred.reject(status);
	      }
	    });
	    return deferred.promise;
	  };

	  var GeoCoder = function(_$q_) {
	    $q = _$q_;
	    return {
	      geocode : geocodeFunc
	    };
	  };
	  GeoCoder.$inject = ['$q'];

	  angular.module('ngMap').service('GeoCoder', GeoCoder);
	})();

	/**
	 * @ngdoc service
	 * @name NavigatorGeolocation
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *  service for navigator.geolocation methods
	 */
	/* global google */
	(function() {
	  'use strict';
	  var $q;

	  /**
	   * @memberof NavigatorGeolocation
	   * @param {Object} geoLocationOptions the navigator geolocations options.
	   *  i.e. { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
	   *  If none specified, { timeout: 5000 }. 
	   *  If timeout not specified, timeout: 5000 added
	   * @param {function} success success callback function
	   * @param {function} failure failure callback function
	   * @example
	   * ```
	   *  NavigatorGeolocation.getCurrentPosition()
	   *    .then(function(position) {
	   *      var lat = position.coords.latitude, lng = position.coords.longitude;
	   *      .. do something lat and lng
	   *    });
	   * ```
	   * @returns {HttpPromise} Future object
	   */
	  var getCurrentPosition = function(geoLocationOptions) {
	    var deferred = $q.defer();
	    if (navigator.geolocation) {

	      if (geoLocationOptions === undefined) {
	        geoLocationOptions = { timeout: 5000 };
	      }
	      else if (geoLocationOptions.timeout === undefined) {
	        geoLocationOptions.timeout = 5000;
	      }

	      navigator.geolocation.getCurrentPosition(
	        function(position) {
	          deferred.resolve(position);
	        }, function(evt) {
	          void 0;
	          deferred.reject(evt);
	        },
	        geoLocationOptions
	      );
	    } else {
	      deferred.reject("Browser Geolocation service failed.");
	    }
	    return deferred.promise;
	  };

	  var NavigatorGeolocation = function(_$q_) {
	    $q = _$q_;
	    return {
	      getCurrentPosition: getCurrentPosition
	    };
	  };
	  NavigatorGeolocation.$inject = ['$q'];

	  angular.module('ngMap').
	    service('NavigatorGeolocation', NavigatorGeolocation);
	})();

	/**
	 * @ngdoc factory
	 * @name NgMapPool
	 * @description
	 *   Provide map instance to avoid memory leak
	 */
	(function() {
	  'use strict';
	  /**
	   * @memberof NgMapPool
	   * @desc map instance pool
	   */
	  var mapInstances = [];
	  var $window, $document, $timeout;

	  var add = function(el) {
	    var mapDiv = $document.createElement("div");
	    mapDiv.style.width = "100%";
	    mapDiv.style.height = "100%";
	    el.appendChild(mapDiv);
	    var map = new $window.google.maps.Map(mapDiv, {});
	    mapInstances.push(map);
	    return map;
	  };

	  var findById = function(el, id) {
	    var notInUseMap;
	    for (var i=0; i<mapInstances.length; i++) {
	      var map = mapInstances[i];
	      if (map.id == id && !map.inUse) {
	        var mapDiv = map.getDiv();
	        el.appendChild(mapDiv);
	        notInUseMap = map;
	        break;
	      }
	    }
	    return notInUseMap;
	  };

	  var findUnused = function(el) { //jshint ignore:line
	    var notInUseMap;
	    for (var i=0; i<mapInstances.length; i++) {
	      var map = mapInstances[i];
	      if (map.id) {
	        continue;
	      }
	      if (!map.inUse) {
	        var mapDiv = map.getDiv();
	        el.appendChild(mapDiv);
	        notInUseMap = map;
	        break;
	      }
	    }
	    return notInUseMap;
	  };

	  /**
	   * @memberof NgMapPool
	   * @function getMapInstance
	   * @param {HtmlElement} el map container element
	   * @return map instance for the given element
	   */
	  var getMapInstance = function(el) {
	    var map = findById(el, el.id) || findUnused(el);
	    if (!map) {
	      map = add(el);
	    } else {
	      /* firing map idle event, which is used by map controller */
	      $timeout(function() {
	        google.maps.event.trigger(map, 'idle');
	      }, 100);
	    }
	    map.inUse = true;
	    return map;
	  };

	  /**
	   * @memberof NgMapPool
	   * @function returnMapInstance
	   * @param {Map} an instance of google.maps.Map
	   * @desc sets the flag inUse of the given map instance to false, so that it 
	   * can be reused later
	   */
	  var returnMapInstance = function(map) {
	    map.inUse = false;
	  };
	  
	  /**
	   * @memberof NgMapPool
	   * @function resetMapInstances
	   * @desc resets mapInstance array
	   */
	  var resetMapInstances = function() {
	    for(var i = 0;i < mapInstances.length;i++) {
	        mapInstances[i] = null;
	    }
	    mapInstances = [];
	  };

	  var NgMapPool = function(_$document_, _$window_, _$timeout_) {
	    $document = _$document_[0], $window = _$window_, $timeout = _$timeout_;

	    return {
		  mapInstances: mapInstances,
	      resetMapInstances: resetMapInstances,
	      getMapInstance: getMapInstance,
	      returnMapInstance: returnMapInstance
	    };
	  };
	  NgMapPool.$inject = [ '$document', '$window', '$timeout'];

	  angular.module('ngMap').factory('NgMapPool', NgMapPool);

	})();

	/**
	 * @ngdoc provider
	 * @name NgMap
	 * @description
	 *  common utility service for ng-map
	 */
	(function() {
	  'use strict';
	  var $window, $document, $q;
	  var NavigatorGeolocation, Attr2MapOptions, GeoCoder, camelCaseFilter;

	  var mapControllers = {};

	  var getStyle = function(el, styleProp) {
	    var y;
	    if (el.currentStyle) {
	      y = el.currentStyle[styleProp];
	    } else if ($window.getComputedStyle) {
	      y = $document.defaultView.
	        getComputedStyle(el, null).
	        getPropertyValue(styleProp);
	    }
	    return y;
	  };

	  /**
	   * @memberof NgMap
	   * @function initMap
	   * @param id optional, id of the map. default 0
	   */
	  var initMap = function(id) {
	    var ctrl = mapControllers[id || 0];
	    if (!(ctrl.map instanceof google.maps.Map)) {
	      ctrl.initializeMap();
	      return ctrl.map;
	    } else {
	      void 0;
	    }
	  };

	  /**
	   * @memberof NgMap
	   * @function getMap
	   * @param {String} optional, id e.g., 'foo'
	   * @returns promise
	   */
	  var getMap = function(id) {
	    id = typeof id === 'object' ? id.id : id;

	    var deferred = $q.defer();
	    var timeout = 2000;

	    function waitForMap(timeElapsed){
	      if(mapControllers[id]){
	        deferred.resolve(mapControllers[id].map);
	      } else if (timeElapsed > timeout) {
	        deferred.reject('could not find map');
	      } else {
	        $window.setTimeout( function(){
	          waitForMap(timeElapsed+100);
	        }, 100);
	      }
	    }
	    waitForMap(0);

	    return deferred.promise;
	  };

	  /**
	   * @memberof NgMap
	   * @function addMap
	   * @param mapController {__MapContoller} a map controller
	   * @returns promise
	   */
	  var addMap = function(mapCtrl) {
	    if (mapCtrl.map) {
	      var len = Object.keys(mapControllers).length;
	      mapControllers[mapCtrl.map.id || len] = mapCtrl;
	    }
	  };

	  /**
	   * @memberof NgMap
	   * @function deleteMap
	   * @param mapController {__MapContoller} a map controller
	   */
	  var deleteMap = function(mapCtrl) {
	    var len = Object.keys(mapControllers).length - 1;
	    var mapId = mapCtrl.map.id || len;
	    if (mapCtrl.map) {
	      for (var eventName in mapCtrl.eventListeners) {
	        void 0;
	        var listener = mapCtrl.eventListeners[eventName];
	        google.maps.event.removeListener(listener);
	      }
	      if (mapCtrl.map.controls) {
	        mapCtrl.map.controls.forEach(function(ctrl) {
	          ctrl.clear();
	        });
	      }
	    }

	    //Remove Heatmap Layers
	    if (mapCtrl.map.heatmapLayers) {
	      Object.keys(mapCtrl.map.heatmapLayers).forEach(function (layer) {
	        mapCtrl.deleteObject('heatmapLayers', mapCtrl.map.heatmapLayers[layer]);
	      });
	    }

	    delete mapControllers[mapId];
	  };

	  /**
	   * @memberof NgMap
	   * @function getGeoLocation
	   * @param {String} address
	   * @param {Hash} options geo options
	   * @returns promise
	   */
	  var getGeoLocation = function(string, options) {
	    var deferred = $q.defer();
	    if (!string || string.match(/^current/i)) { // current location
	      NavigatorGeolocation.getCurrentPosition(options).then(
	        function(position) {
	          var lat = position.coords.latitude;
	          var lng = position.coords.longitude;
	          var latLng = new google.maps.LatLng(lat,lng);
	          deferred.resolve(latLng);
	        },
	        function(error) {
	          deferred.reject(error);
	        }
	      );
	    } else {
	      GeoCoder.geocode({address: string}).then(
	        function(results) {
	          deferred.resolve(results[0].geometry.location);
	        },
	        function(error) {
	          deferred.reject(error);
	        }
	      );
	    }

	    return deferred.promise;
	  };

	  /**
	   * @memberof NgMap
	   * @function observeAndSet
	   * @param {String} attrName attribute name
	   * @param {Object} object A Google maps object to be changed
	   * @returns attribue observe function
	   */
	  var observeAndSet = function(attrName, object) {
	    void 0;
	    return function(val) {
	      if (val) {
	        var setMethod = camelCaseFilter('set-'+attrName);
	        var optionValue = Attr2MapOptions.toOptionValue(val, {key: attrName});
	        if (object[setMethod]) { //if set method does exist
	          void 0;
	          /* if an location is being observed */
	          if (attrName.match(/center|position/) &&
	            typeof optionValue == 'string') {
	            getGeoLocation(optionValue).then(function(latlng) {
	              object[setMethod](latlng);
	            });
	          } else {
	            object[setMethod](optionValue);
	          }
	        }
	      }
	    };
	  };

	  /**
	   * @memberof NgMap
	   * @function setStyle
	   * @param {HtmlElement} map contriner element
	   * @desc set display, width, height of map container element
	   */
	  var setStyle = function(el) {
	    //if style is not given to the map element, set display and height
	    var defaultStyle = el.getAttribute('default-style');
	    if (defaultStyle == "true") {
	      el.style.display = 'block';
	      el.style.height = '300px';
	    } else {
	      if (getStyle(el, 'display') != "block") {
	        el.style.display = 'block';
	      }
	      if (getStyle(el, 'height').match(/^(0|auto)/)) {
	        el.style.height = '300px';
	      }
	    }
	  };

	  angular.module('ngMap').provider('NgMap', function() {
	    var defaultOptions = {};

	    /**
	     * @memberof NgMap
	     * @function setDefaultOptions
	     * @param {Hash} options
	     * @example
	     *  app.config(function(NgMapProvider) {
	     *    NgMapProvider.setDefaultOptions({
	     *      marker: {
	     *        optimized: false
	     *      }
	     *    });
	     *  });
	     */
	    this.setDefaultOptions = function(options) {
	      defaultOptions = options;
	    };

	    var NgMap = function(
	        _$window_, _$document_, _$q_,
	        _NavigatorGeolocation_, _Attr2MapOptions_,
	        _GeoCoder_, _camelCaseFilter_
	      ) {
	      $window = _$window_;
	      $document = _$document_[0];
	      $q = _$q_;
	      NavigatorGeolocation = _NavigatorGeolocation_;
	      Attr2MapOptions = _Attr2MapOptions_;
	      GeoCoder = _GeoCoder_;
	      camelCaseFilter = _camelCaseFilter_;

	      return {
	        defaultOptions: defaultOptions,
	        addMap: addMap,
	        deleteMap: deleteMap,
	        getMap: getMap,
	        initMap: initMap,
	        setStyle: setStyle,
	        getGeoLocation: getGeoLocation,
	        observeAndSet: observeAndSet
	      };
	    };
	    NgMap.$inject = [
	      '$window', '$document', '$q',
	      'NavigatorGeolocation', 'Attr2MapOptions',
	      'GeoCoder', 'camelCaseFilter'
	    ];

	    this.$get = NgMap;
	  });
	})();

	/**
	 * @ngdoc service
	 * @name StreetView
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *  service for [Google StreetViewService]
	 *  (https://developers.google.com/maps/documentation/javascript/streetview)
	 */
	(function() {
	  'use strict';
	  var $q;

	  /**
	   * Retrieves panorama id from the given map (and or position)
	   * @memberof StreetView
	   * @param {map} map Google map instance
	   * @param {LatLng} latlng Google LatLng instance
	   *   default: the center of the map
	   * @example
	   *   StreetView.getPanorama(map).then(function(panoId) {
	   *     $scope.panoId = panoId;
	   *   });
	   * @returns {HttpPromise} Future object
	   */
	  var getPanorama = function(map, latlng) {
	    latlng = latlng || map.getCenter();
	    var deferred = $q.defer();
	    var svs = new google.maps.StreetViewService();
	    svs.getPanoramaByLocation( (latlng||map.getCenter), 100,
	      function (data, status) {
	        // if streetView available
	        if (status === google.maps.StreetViewStatus.OK) {
	          deferred.resolve(data.location.pano);
	        } else {
	          // no street view available in this range, or some error occurred
	          deferred.resolve(false);
	          //deferred.reject('Geocoder failed due to: '+ status);
	        }
	      }
	    );
	    return deferred.promise;
	  };

	  /**
	   * Set panorama view on the given map with the panorama id
	   * @memberof StreetView
	   * @param {map} map Google map instance
	   * @param {String} panoId Panorama id fro getPanorama method
	   * @example
	   *   StreetView.setPanorama(map, panoId);
	   */
	  var setPanorama = function(map, panoId) {
	    var svp = new google.maps.StreetViewPanorama(
	      map.getDiv(), {enableCloseButton: true}
	    );
	    svp.setPano(panoId);
	  };

	  var StreetView = function(_$q_) {
	    $q = _$q_;

	    return {
	      getPanorama: getPanorama,
	      setPanorama: setPanorama
	    };
	  };
	  StreetView.$inject = ['$q'];

	  angular.module('ngMap').service('StreetView', StreetView);
	})();

	return 'ngMap';
	}));

/***/ },
/* 15 */
/***/ function(module, exports) {

	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports) {

		'use strict';
		
		//  angularModalService.js
		//
		//  Service for showing modal dialogs.
		
		/***** JSLint Config *****/
		/*global angular  */
		(function () {
		
		  'use strict';
		
		  var module = angular.module('angularModalService', []);
		
		  module.factory('ModalService', ['$animate', '$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateRequest', '$timeout', function ($animate, $document, $compile, $controller, $http, $rootScope, $q, $templateRequest, $timeout) {
		
		    function ModalService() {
		
		      var self = this;
		
		      //  Returns a promise which gets the template, either
		      //  from the template parameter or via a request to the
		      //  template url parameter.
		      var getTemplate = function getTemplate(template, templateUrl) {
		        var deferred = $q.defer();
		        if (template) {
		          deferred.resolve(template);
		        } else if (templateUrl) {
		          $templateRequest(templateUrl, true).then(function (template) {
		            deferred.resolve(template);
		          }, function (error) {
		            deferred.reject(error);
		          });
		        } else {
		          deferred.reject("No template or templateUrl has been specified.");
		        }
		        return deferred.promise;
		      };
		
		      //  Adds an element to the DOM as the last child of its container
		      //  like append, but uses $animate to handle animations. Returns a
		      //  promise that is resolved once all animation is complete.
		      var appendChild = function appendChild(parent, child) {
		        var children = parent.children();
		        if (children.length > 0) {
		          return $animate.enter(child, parent, children[children.length - 1]);
		        }
		        return $animate.enter(child, parent);
		      };
		
		      self.showModal = function (options) {
		
		        //  Get the body of the document, we'll add the modal to this.
		        var body = angular.element($document[0].body);
		
		        //  Create a deferred we'll resolve when the modal is ready.
		        var deferred = $q.defer();
		
		        //  Validate the input parameters.
		        var controllerName = options.controller;
		        if (!controllerName) {
		          deferred.reject("No controller has been specified.");
		          return deferred.promise;
		        }
		
		        //  Get the actual html of the template.
		        getTemplate(options.template, options.templateUrl).then(function (template) {
		
		          //  Create a new scope for the modal.
		          var modalScope = (options.scope || $rootScope).$new();
		          var rootScopeOnClose = $rootScope.$on('$locationChangeSuccess', cleanUpClose);
		
		          //  Create the inputs object to the controller - this will include
		          //  the scope, as well as all inputs provided.
		          //  We will also create a deferred that is resolved with a provided
		          //  close function. The controller can then call 'close(result)'.
		          //  The controller can also provide a delay for closing - this is
		          //  helpful if there are closing animations which must finish first.
		          var closeDeferred = $q.defer();
		          var closedDeferred = $q.defer();
		          var inputs = {
		            $scope: modalScope,
		            close: function close(result, delay) {
		              if (delay === undefined || delay === null) delay = 0;
		              $timeout(function () {
		
		                cleanUpClose(result);
		              }, delay);
		            }
		          };
		
		          //  If we have provided any inputs, pass them to the controller.
		          if (options.inputs) angular.extend(inputs, options.inputs);
		
		          //  Compile then link the template element, building the actual element.
		          //  Set the $element on the inputs so that it can be injected if required.
		          var linkFn = $compile(template);
		          var modalElement = linkFn(modalScope);
		          inputs.$element = modalElement;
		
		          //  Create the controller, explicitly specifying the scope to use.
		          var controllerObjBefore = modalScope[options.controllerAs];
		          var modalController = $controller(options.controller, inputs, false, options.controllerAs);
		
		          if (options.controllerAs && controllerObjBefore) {
		            angular.extend(modalController, controllerObjBefore);
		          }
		
		          //  Finally, append the modal to the dom.
		          if (options.appendElement) {
		            // append to custom append element
		            appendChild(options.appendElement, modalElement);
		          } else {
		            // append to body when no custom append element is specified
		            appendChild(body, modalElement);
		          }
		
		          //  We now have a modal object...
		          var modal = {
		            controller: modalController,
		            scope: modalScope,
		            element: modalElement,
		            close: closeDeferred.promise,
		            closed: closedDeferred.promise
		          };
		
		          //  ...which is passed to the caller via the promise.
		          deferred.resolve(modal);
		
		          function cleanUpClose(result) {
		
		            //  Resolve the 'close' promise.
		            closeDeferred.resolve(result);
		
		            //  Let angular remove the element and wait for animations to finish.
		            $animate.leave(modalElement).then(function () {
		              //  Resolve the 'closed' promise.
		              closedDeferred.resolve(result);
		
		              //  We can now clean up the scope
		              modalScope.$destroy();
		
		              //  Unless we null out all of these objects we seem to suffer
		              //  from memory leaks, if anyone can explain why then I'd
		              //  be very interested to know.
		              inputs.close = null;
		              deferred = null;
		              closeDeferred = null;
		              modal = null;
		              inputs = null;
		              modalElement = null;
		              modalScope = null;
		            });
		
		            // remove event watcher
		            rootScopeOnClose && rootScopeOnClose();
		          }
		        }).then(null, function (error) {
		          // 'catch' doesn't work in IE8.
		          deferred.reject(error);
		        });
		
		        return deferred.promise;
		      };
		    }
		
		    return new ModalService();
		  }]);
		})();

	/***/ }
	/******/ ]);
	//# sourceMappingURL=angular-modal-service.js.map

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(17);
	module.exports = 'toastr';



/***/ },
/* 17 */
/***/ function(module, exports) {

	(function() {
	  'use strict';

	  angular.module('toastr', [])
	    .factory('toastr', toastr);

	  toastr.$inject = ['$animate', '$injector', '$document', '$rootScope', '$sce', 'toastrConfig', '$q'];

	  function toastr($animate, $injector, $document, $rootScope, $sce, toastrConfig, $q) {
	    var container;
	    var index = 0;
	    var toasts = [];

	    var previousToastMessage = '';
	    var openToasts = {};

	    var containerDefer = $q.defer();

	    var toast = {
	      active: active,
	      clear: clear,
	      error: error,
	      info: info,
	      remove: remove,
	      success: success,
	      warning: warning
	    };

	    return toast;

	    /* Public API */
	    function active() {
	      return toasts.length;
	    }

	    function clear(toast) {
	      // Bit of a hack, I will remove this soon with a BC
	      if (arguments.length === 1 && !toast) { return; }

	      if (toast) {
	        remove(toast.toastId);
	      } else {
	        for (var i = 0; i < toasts.length; i++) {
	          remove(toasts[i].toastId);
	        }
	      }
	    }

	    function error(message, title, optionsOverride) {
	      var type = _getOptions().iconClasses.error;
	      return _buildNotification(type, message, title, optionsOverride);
	    }

	    function info(message, title, optionsOverride) {
	      var type = _getOptions().iconClasses.info;
	      return _buildNotification(type, message, title, optionsOverride);
	    }

	    function success(message, title, optionsOverride) {
	      var type = _getOptions().iconClasses.success;
	      return _buildNotification(type, message, title, optionsOverride);
	    }

	    function warning(message, title, optionsOverride) {
	      var type = _getOptions().iconClasses.warning;
	      return _buildNotification(type, message, title, optionsOverride);
	    }

	    function remove(toastId, wasClicked) {
	      var toast = findToast(toastId);

	      if (toast && ! toast.deleting) { // Avoid clicking when fading out
	        toast.deleting = true;
	        toast.isOpened = false;
	        $animate.leave(toast.el).then(function() {
	          if (toast.scope.options.onHidden) {
	            toast.scope.options.onHidden(!!wasClicked, toast);
	          }
	          toast.scope.$destroy();
	          var index = toasts.indexOf(toast);
	          delete openToasts[toast.scope.message];
	          toasts.splice(index, 1);
	          var maxOpened = toastrConfig.maxOpened;
	          if (maxOpened && toasts.length >= maxOpened) {
	            toasts[maxOpened - 1].open.resolve();
	          }
	          if (lastToast()) {
	            container.remove();
	            container = null;
	            containerDefer = $q.defer();
	          }
	        });
	      }

	      function findToast(toastId) {
	        for (var i = 0; i < toasts.length; i++) {
	          if (toasts[i].toastId === toastId) {
	            return toasts[i];
	          }
	        }
	      }

	      function lastToast() {
	        return !toasts.length;
	      }
	    }

	    /* Internal functions */
	    function _buildNotification(type, message, title, optionsOverride) {
	      if (angular.isObject(title)) {
	        optionsOverride = title;
	        title = null;
	      }

	      return _notify({
	        iconClass: type,
	        message: message,
	        optionsOverride: optionsOverride,
	        title: title
	      });
	    }

	    function _getOptions() {
	      return angular.extend({}, toastrConfig);
	    }

	    function _createOrGetContainer(options) {
	      if(container) { return containerDefer.promise; }

	      container = angular.element('<div></div>');
	      container.attr('id', options.containerId);
	      container.addClass(options.positionClass);
	      container.css({'pointer-events': 'auto'});

	      var target = angular.element(document.querySelector(options.target));

	      if ( ! target || ! target.length) {
	        throw 'Target for toasts doesn\'t exist';
	      }

	      $animate.enter(container, target).then(function() {
	        containerDefer.resolve();
	      });

	      return containerDefer.promise;
	    }

	    function _notify(map) {
	      var options = _getOptions();

	      if (shouldExit()) { return; }

	      var newToast = createToast();

	      toasts.push(newToast);

	      if (ifMaxOpenedAndAutoDismiss()) {
	        var oldToasts = toasts.slice(0, (toasts.length - options.maxOpened));
	        for (var i = 0, len = oldToasts.length; i < len; i++) {
	          remove(oldToasts[i].toastId);
	        }
	      }

	      if (maxOpenedNotReached()) {
	        newToast.open.resolve();
	      }

	      newToast.open.promise.then(function() {
	        _createOrGetContainer(options).then(function() {
	          newToast.isOpened = true;
	          if (options.newestOnTop) {
	            $animate.enter(newToast.el, container).then(function() {
	              newToast.scope.init();
	            });
	          } else {
	            var sibling = container[0].lastChild ? angular.element(container[0].lastChild) : null;
	            $animate.enter(newToast.el, container, sibling).then(function() {
	              newToast.scope.init();
	            });
	          }
	        });
	      });

	      return newToast;

	      function ifMaxOpenedAndAutoDismiss() {
	        return options.autoDismiss && options.maxOpened && toasts.length > options.maxOpened;
	      }

	      function createScope(toast, map, options) {
	        if (options.allowHtml) {
	          toast.scope.allowHtml = true;
	          toast.scope.title = $sce.trustAsHtml(map.title);
	          toast.scope.message = $sce.trustAsHtml(map.message);
	        } else {
	          toast.scope.title = map.title;
	          toast.scope.message = map.message;
	        }

	        toast.scope.toastType = toast.iconClass;
	        toast.scope.toastId = toast.toastId;
	        toast.scope.extraData = options.extraData;

	        toast.scope.options = {
	          extendedTimeOut: options.extendedTimeOut,
	          messageClass: options.messageClass,
	          onHidden: options.onHidden,
	          onShown: generateEvent('onShown'),
	          onTap: generateEvent('onTap'),
	          progressBar: options.progressBar,
	          tapToDismiss: options.tapToDismiss,
	          timeOut: options.timeOut,
	          titleClass: options.titleClass,
	          toastClass: options.toastClass
	        };

	        if (options.closeButton) {
	          toast.scope.options.closeHtml = options.closeHtml;
	        }

	        function generateEvent(event) {
	          if (options[event]) {
	            return function() {
	              options[event](toast);
	            };
	          }
	        }
	      }

	      function createToast() {
	        var newToast = {
	          toastId: index++,
	          isOpened: false,
	          scope: $rootScope.$new(),
	          open: $q.defer()
	        };
	        newToast.iconClass = map.iconClass;
	        if (map.optionsOverride) {
	          angular.extend(options, cleanOptionsOverride(map.optionsOverride));
	          newToast.iconClass = map.optionsOverride.iconClass || newToast.iconClass;
	        }

	        createScope(newToast, map, options);

	        newToast.el = createToastEl(newToast.scope);

	        return newToast;

	        function cleanOptionsOverride(options) {
	          var badOptions = ['containerId', 'iconClasses', 'maxOpened', 'newestOnTop',
	                            'positionClass', 'preventDuplicates', 'preventOpenDuplicates', 'templates'];
	          for (var i = 0, l = badOptions.length; i < l; i++) {
	            delete options[badOptions[i]];
	          }

	          return options;
	        }
	      }

	      function createToastEl(scope) {
	        var angularDomEl = angular.element('<div toast></div>'),
	          $compile = $injector.get('$compile');
	        return $compile(angularDomEl)(scope);
	      }

	      function maxOpenedNotReached() {
	        return options.maxOpened && toasts.length <= options.maxOpened || !options.maxOpened;
	      }

	      function shouldExit() {
	        var isDuplicateOfLast = options.preventDuplicates && map.message === previousToastMessage;
	        var isDuplicateOpen = options.preventOpenDuplicates && openToasts[map.message];

	        if (isDuplicateOfLast || isDuplicateOpen) {
	          return true;
	        }

	        previousToastMessage = map.message;
	        openToasts[map.message] = true;

	        return false;
	      }
	    }
	  }
	}());

	(function() {
	  'use strict';

	  angular.module('toastr')
	    .constant('toastrConfig', {
	      allowHtml: false,
	      autoDismiss: false,
	      closeButton: false,
	      closeHtml: '<button>&times;</button>',
	      containerId: 'toast-container',
	      extendedTimeOut: 1000,
	      iconClasses: {
	        error: 'toast-error',
	        info: 'toast-info',
	        success: 'toast-success',
	        warning: 'toast-warning'
	      },
	      maxOpened: 0,
	      messageClass: 'toast-message',
	      newestOnTop: true,
	      onHidden: null,
	      onShown: null,
	      onTap: null,
	      positionClass: 'toast-top-right',
	      preventDuplicates: false,
	      preventOpenDuplicates: false,
	      progressBar: false,
	      tapToDismiss: true,
	      target: 'body',
	      templates: {
	        toast: 'directives/toast/toast.html',
	        progressbar: 'directives/progressbar/progressbar.html'
	      },
	      timeOut: 5000,
	      titleClass: 'toast-title',
	      toastClass: 'toast'
	    });
	}());

	(function() {
	  'use strict';

	  angular.module('toastr')
	    .directive('progressBar', progressBar);

	  progressBar.$inject = ['toastrConfig'];

	  function progressBar(toastrConfig) {
	    return {
	      replace: true,
	      require: '^toast',
	      templateUrl: function() {
	        return toastrConfig.templates.progressbar;
	      },
	      link: linkFunction
	    };

	    function linkFunction(scope, element, attrs, toastCtrl) {
	      var intervalId, currentTimeOut, hideTime;

	      toastCtrl.progressBar = scope;

	      scope.start = function(duration) {
	        if (intervalId) {
	          clearInterval(intervalId);
	        }

	        currentTimeOut = parseFloat(duration);
	        hideTime = new Date().getTime() + currentTimeOut;
	        intervalId = setInterval(updateProgress, 10);
	      };

	      scope.stop = function() {
	        if (intervalId) {
	          clearInterval(intervalId);
	        }
	      };

	      function updateProgress() {
	        var percentage = ((hideTime - (new Date().getTime())) / currentTimeOut) * 100;
	        element.css('width', percentage + '%');
	      }

	      scope.$on('$destroy', function() {
	        // Failsafe stop
	        clearInterval(intervalId);
	      });
	    }
	  }
	}());

	(function() {
	  'use strict';

	  angular.module('toastr')
	    .controller('ToastController', ToastController);

	  function ToastController() {
	    this.progressBar = null;

	    this.startProgressBar = function(duration) {
	      if (this.progressBar) {
	        this.progressBar.start(duration);
	      }
	    };

	    this.stopProgressBar = function() {
	      if (this.progressBar) {
	        this.progressBar.stop();
	      }
	    };
	  }
	}());

	(function() {
	  'use strict';

	  angular.module('toastr')
	    .directive('toast', toast);

	  toast.$inject = ['$injector', '$interval', 'toastrConfig', 'toastr'];

	  function toast($injector, $interval, toastrConfig, toastr) {
	    return {
	      replace: true,
	      templateUrl: function() {
	        return toastrConfig.templates.toast;
	      },
	      controller: 'ToastController',
	      link: toastLinkFunction
	    };

	    function toastLinkFunction(scope, element, attrs, toastCtrl) {
	      var timeout;

	      scope.toastClass = scope.options.toastClass;
	      scope.titleClass = scope.options.titleClass;
	      scope.messageClass = scope.options.messageClass;
	      scope.progressBar = scope.options.progressBar;

	      if (wantsCloseButton()) {
	        var button = angular.element(scope.options.closeHtml),
	          $compile = $injector.get('$compile');
	        button.addClass('toast-close-button');
	        button.attr('ng-click', 'close(true, $event)');
	        $compile(button)(scope);
	        element.prepend(button);
	      }

	      scope.init = function() {
	        if (scope.options.timeOut) {
	          timeout = createTimeout(scope.options.timeOut);
	        }
	        if (scope.options.onShown) {
	          scope.options.onShown();
	        }
	      };

	      element.on('mouseenter', function() {
	        hideAndStopProgressBar();
	        if (timeout) {
	          $interval.cancel(timeout);
	        }
	      });

	      scope.tapToast = function () {
	        if (angular.isFunction(scope.options.onTap)) {
	          scope.options.onTap();
	        }
	        if (scope.options.tapToDismiss) {
	          scope.close(true);
	        }
	      };

	      scope.close = function (wasClicked, $event) {
	        if ($event && angular.isFunction($event.stopPropagation)) {
	          $event.stopPropagation();
	        }
	        toastr.remove(scope.toastId, wasClicked);
	      };

	      element.on('mouseleave', function() {
	        if (scope.options.timeOut === 0 && scope.options.extendedTimeOut === 0) { return; }
	        scope.$apply(function() {
	          scope.progressBar = scope.options.progressBar;
	        });
	        timeout = createTimeout(scope.options.extendedTimeOut);
	      });

	      function createTimeout(time) {
	        toastCtrl.startProgressBar(time);
	        return $interval(function() {
	          toastCtrl.stopProgressBar();
	          toastr.remove(scope.toastId);
	        }, time, 1);
	      }

	      function hideAndStopProgressBar() {
	        scope.progressBar = false;
	        toastCtrl.stopProgressBar();
	      }

	      function wantsCloseButton() {
	        return scope.options.closeHtml;
	      }
	    }
	  }
	}());

	angular.module("toastr").run(["$templateCache", function($templateCache) {$templateCache.put("directives/progressbar/progressbar.html","<div class=\"toast-progress\"></div>\n");
	$templateCache.put("directives/toast/toast.html","<div class=\"{{toastClass}} {{toastType}}\" ng-click=\"tapToast()\">\n  <div ng-switch on=\"allowHtml\">\n    <div ng-switch-default ng-if=\"title\" class=\"{{titleClass}}\" aria-label=\"{{title}}\">{{title}}</div>\n    <div ng-switch-default class=\"{{messageClass}}\" aria-label=\"{{message}}\">{{message}}</div>\n    <div ng-switch-when=\"true\" ng-if=\"title\" class=\"{{titleClass}}\" ng-bind-html=\"title\"></div>\n    <div ng-switch-when=\"true\" class=\"{{messageClass}}\" ng-bind-html=\"message\"></div>\n  </div>\n  <progress-bar ng-if=\"progressBar\"></progress-bar>\n</div>\n");}]);

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// import Navbar from './navbar/navbar'
	module.exports = "app.common";

	var commonModule = angular.module(module.exports, [__webpack_require__(19), __webpack_require__(21)]);

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _navbar = __webpack_require__(20);

	var _navbar2 = _interopRequireDefault(_navbar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = "app.common.navbar";

	var navbarModule = angular.module(module.exports, []);

	navbarModule.directive('navbar', function ($state, Auth) {
	    return {
	        restrict: 'E',
	        replace: true,
	        template: _navbar2.default,
	        link: function link(scope, elem, attrs) {
	            scope.isAdmin = Auth.isAdmin;

	            scope.logout = function () {
	                Auth.logout();
	                $state.go('login');
	            };
	        }
	    };
	});

	exports.default = navbarModule;

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = "<nav class=\"nav\">\n  <div class=\"nav__wrapper\">\n    <a class=\"nav__wrapper__items\" ui-sref=\"main.routes\"> Today's route</a>\n    <a class=\"nav__wrapper__items\" ui-sref=\"main.history\"> History </a>\n    <a class=\"nav__wrapper__items\"> Statistic </a>\n    <a class=\"nav__wrapper__items\"> Leaderboard </a>\n    <a ng-show=\"isAdmin()\" class=\"nav__wrapper__items\" ui-sref=\"main.admin.users\"> Admin </a>\n    <a class=\"nav__wrapper__items\" ng-click=\"logout()\"> Logout </a>\n  </div>\n</nav>\n\n";

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _header = __webpack_require__(22);

	var _header2 = _interopRequireDefault(_header);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = "app.common.header";

	var headerModule = angular.module(module.exports, []);

	headerModule.directive('header', function ($state, Auth) {
	    return {
	        restrict: 'E',
	        replace: true,
	        template: _header2.default,
	        link: function link(scope, elem, attrs) {

	            scope.user = Auth.getCurrentUser();
	            scope.is_open = false;

	            scope.hamburger_menu_clicked = function () {
	                if (scope.is_open) {
	                    angular.element(document.querySelector('.nav')).removeClass('nav--open');
	                } else {
	                    angular.element(document.querySelector('.nav')).addClass('nav--open');
	                }
	                scope.is_open = !scope.is_open;
	            };
	        }
	    };
	});

	exports.default = headerModule;

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = "<div class=\"main_header\">\n    <a class=\"hamburger_menu\" ng-class=\"{'hamburger_menu--open':is_open}\" ng-click=\"hamburger_menu_clicked();\"><img ng-src=\"/assets/images/1x/hamburger_menu_white@1x.png\"></img></a>\n\t<h3>Discoshare</h3>\n    <h3>{{user.name}}</h3>\n</div>\n";

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(24);

	module.exports = 'app.routes';
	var app = angular.module(module.exports, ['ui.router', __webpack_require__(25), __webpack_require__(26), __webpack_require__(29), __webpack_require__(30), __webpack_require__(31)]);

	app.config(function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
	  var ROOT_URL = '';

	  $stateProvider.state('login', {
	    url: ROOT_URL + '/login',
	    template: __webpack_require__(32),
	    controller: 'LoginController'
	  }).state('main', {
	    abstract: true,
	    url: ROOT_URL + '',
	    template: __webpack_require__(33),
	    controller: 'MainController',
	    authenticate: true,
	    resolve: {
	      currentUser: function currentUser(Auth) {
	        return Auth.getCurrentUser();
	      }
	    }
	  }).state('main.routes', {
	    url: ROOT_URL + '/routes',
	    template: __webpack_require__(34),
	    controller: 'RoutesController',
	    authenticate: true,
	    resolve: {
	      routes: function routes(routeService) {
	        return routeService.fetchRoutes();
	      }
	    }
	  }).state('main.admin', {
	    abstract: true,
	    url: ROOT_URL + '/admin',
	    template: __webpack_require__(35),
	    controller: 'AdminController',
	    authenticate: true,
	    admin: true,
	    resolve: {
	      users: function users(singletonService, User) {
	        return User.query().$promise;
	      }
	    }
	  }).state('main.admin.new', {
	    url: ROOT_URL + '/users/new',
	    template: __webpack_require__(36),
	    controller: 'NewUserController',
	    authenticate: true,
	    resolve: {
	      user: function user(User) {
	        return new User();
	      }
	    }
	  }).state('main.admin.edit', {
	    url: ROOT_URL + '/users/{user_id}',
	    template: __webpack_require__(36),
	    controller: 'EditUserController',
	    authenticate: true,
	    resolve: {
	      user: function user(singletonService, $stateParams, User) {
	        return User.get({ 'id': $stateParams.user_id }).$promise.then(function (user) {
	          return user;
	        }).catch(function () {
	          return new User();
	        });
	      }
	    }
	  }).state('main.admin.users', {
	    url: ROOT_URL + '/users',
	    template: __webpack_require__(37),
	    authenticate: true
	  }).state('main.history', {
	    url: ROOT_URL + '/history',
	    template: __webpack_require__(38),
	    controller: 'HistoryController',
	    authenticate: true
	  }).state('main.history.test', {
	    url: ROOT_URL + '/history/test',
	    template: __webpack_require__(39),
	    controller: 'HistoryController',
	    authenticate: true
	  });

	  // $httpProvider.defaults.useXDomain = true
	  // delete $httpProvider.defaults.headers.common['X-Requested-With'];
	  $httpProvider.interceptors.push('authInterceptor');
	  $locationProvider.html5Mode(true);
	  $urlRouterProvider.otherwise('/routes');
	});

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * State-based routing for AngularJS
	 * @version v0.3.1
	 * @link http://angular-ui.github.com/
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */

	/* commonjs package manager support (eg componentjs) */
	if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
	  module.exports = 'ui.router';
	}

	(function (window, angular, undefined) {
	/*jshint globalstrict:true*/
	/*global angular:false*/
	'use strict';

	var isDefined = angular.isDefined,
	    isFunction = angular.isFunction,
	    isString = angular.isString,
	    isObject = angular.isObject,
	    isArray = angular.isArray,
	    forEach = angular.forEach,
	    extend = angular.extend,
	    copy = angular.copy,
	    toJson = angular.toJson;

	function inherit(parent, extra) {
	  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
	}

	function merge(dst) {
	  forEach(arguments, function(obj) {
	    if (obj !== dst) {
	      forEach(obj, function(value, key) {
	        if (!dst.hasOwnProperty(key)) dst[key] = value;
	      });
	    }
	  });
	  return dst;
	}

	/**
	 * Finds the common ancestor path between two states.
	 *
	 * @param {Object} first The first state.
	 * @param {Object} second The second state.
	 * @return {Array} Returns an array of state names in descending order, not including the root.
	 */
	function ancestors(first, second) {
	  var path = [];

	  for (var n in first.path) {
	    if (first.path[n] !== second.path[n]) break;
	    path.push(first.path[n]);
	  }
	  return path;
	}

	/**
	 * IE8-safe wrapper for `Object.keys()`.
	 *
	 * @param {Object} object A JavaScript object.
	 * @return {Array} Returns the keys of the object as an array.
	 */
	function objectKeys(object) {
	  if (Object.keys) {
	    return Object.keys(object);
	  }
	  var result = [];

	  forEach(object, function(val, key) {
	    result.push(key);
	  });
	  return result;
	}

	/**
	 * IE8-safe wrapper for `Array.prototype.indexOf()`.
	 *
	 * @param {Array} array A JavaScript array.
	 * @param {*} value A value to search the array for.
	 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
	 */
	function indexOf(array, value) {
	  if (Array.prototype.indexOf) {
	    return array.indexOf(value, Number(arguments[2]) || 0);
	  }
	  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
	  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

	  if (from < 0) from += len;

	  for (; from < len; from++) {
	    if (from in array && array[from] === value) return from;
	  }
	  return -1;
	}

	/**
	 * Merges a set of parameters with all parameters inherited between the common parents of the
	 * current state and a given destination state.
	 *
	 * @param {Object} currentParams The value of the current state parameters ($stateParams).
	 * @param {Object} newParams The set of parameters which will be composited with inherited params.
	 * @param {Object} $current Internal definition of object representing the current state.
	 * @param {Object} $to Internal definition of object representing state to transition to.
	 */
	function inheritParams(currentParams, newParams, $current, $to) {
	  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

	  for (var i in parents) {
	    if (!parents[i] || !parents[i].params) continue;
	    parentParams = objectKeys(parents[i].params);
	    if (!parentParams.length) continue;

	    for (var j in parentParams) {
	      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
	      inheritList.push(parentParams[j]);
	      inherited[parentParams[j]] = currentParams[parentParams[j]];
	    }
	  }
	  return extend({}, inherited, newParams);
	}

	/**
	 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	 *
	 * @param {Object} a The first object.
	 * @param {Object} b The second object.
	 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
	 *                     it defaults to the list of keys in `a`.
	 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
	 */
	function equalForKeys(a, b, keys) {
	  if (!keys) {
	    keys = [];
	    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
	  }

	  for (var i=0; i<keys.length; i++) {
	    var k = keys[i];
	    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
	  }
	  return true;
	}

	/**
	 * Returns the subset of an object, based on a list of keys.
	 *
	 * @param {Array} keys
	 * @param {Object} values
	 * @return {Boolean} Returns a subset of `values`.
	 */
	function filterByKeys(keys, values) {
	  var filtered = {};

	  forEach(keys, function (name) {
	    filtered[name] = values[name];
	  });
	  return filtered;
	}

	// like _.indexBy
	// when you know that your index values will be unique, or you want last-one-in to win
	function indexBy(array, propName) {
	  var result = {};
	  forEach(array, function(item) {
	    result[item[propName]] = item;
	  });
	  return result;
	}

	// extracted from underscore.js
	// Return a copy of the object only containing the whitelisted properties.
	function pick(obj) {
	  var copy = {};
	  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	  forEach(keys, function(key) {
	    if (key in obj) copy[key] = obj[key];
	  });
	  return copy;
	}

	// extracted from underscore.js
	// Return a copy of the object omitting the blacklisted properties.
	function omit(obj) {
	  var copy = {};
	  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	  for (var key in obj) {
	    if (indexOf(keys, key) == -1) copy[key] = obj[key];
	  }
	  return copy;
	}

	function pluck(collection, key) {
	  var result = isArray(collection) ? [] : {};

	  forEach(collection, function(val, i) {
	    result[i] = isFunction(key) ? key(val) : val[key];
	  });
	  return result;
	}

	function filter(collection, callback) {
	  var array = isArray(collection);
	  var result = array ? [] : {};
	  forEach(collection, function(val, i) {
	    if (callback(val, i)) {
	      result[array ? result.length : i] = val;
	    }
	  });
	  return result;
	}

	function map(collection, callback) {
	  var result = isArray(collection) ? [] : {};

	  forEach(collection, function(val, i) {
	    result[i] = callback(val, i);
	  });
	  return result;
	}

	/**
	 * @ngdoc overview
	 * @name ui.router.util
	 *
	 * @description
	 * # ui.router.util sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 *
	 */
	angular.module('ui.router.util', ['ng']);

	/**
	 * @ngdoc overview
	 * @name ui.router.router
	 * 
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.router sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 */
	angular.module('ui.router.router', ['ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router.state
	 * 
	 * @requires ui.router.router
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.state sub-module
	 *
	 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 * 
	 */
	angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router
	 *
	 * @requires ui.router.state
	 *
	 * @description
	 * # ui.router
	 * 
	 * ## The main module for ui.router 
	 * There are several sub-modules included with the ui.router module, however only this module is needed
	 * as a dependency within your angular app. The other modules are for organization purposes. 
	 *
	 * The modules are:
	 * * ui.router - the main "umbrella" module
	 * * ui.router.router - 
	 * 
	 * *You'll need to include **only** this module as the dependency within your angular app.*
	 * 
	 * <pre>
	 * <!doctype html>
	 * <html ng-app="myApp">
	 * <head>
	 *   <script src="js/angular.js"></script>
	 *   <!-- Include the ui-router script -->
	 *   <script src="js/angular-ui-router.min.js"></script>
	 *   <script>
	 *     // ...and add 'ui.router' as a dependency
	 *     var myApp = angular.module('myApp', ['ui.router']);
	 *   </script>
	 * </head>
	 * <body>
	 * </body>
	 * </html>
	 * </pre>
	 */
	angular.module('ui.router', ['ui.router.state']);

	angular.module('ui.router.compat', ['ui.router']);

	/**
	 * @ngdoc object
	 * @name ui.router.util.$resolve
	 *
	 * @requires $q
	 * @requires $injector
	 *
	 * @description
	 * Manages resolution of (acyclic) graphs of promises.
	 */
	$Resolve.$inject = ['$q', '$injector'];
	function $Resolve(  $q,    $injector) {
	  
	  var VISIT_IN_PROGRESS = 1,
	      VISIT_DONE = 2,
	      NOTHING = {},
	      NO_DEPENDENCIES = [],
	      NO_LOCALS = NOTHING,
	      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
	  

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$resolve#study
	   * @methodOf ui.router.util.$resolve
	   *
	   * @description
	   * Studies a set of invocables that are likely to be used multiple times.
	   * <pre>
	   * $resolve.study(invocables)(locals, parent, self)
	   * </pre>
	   * is equivalent to
	   * <pre>
	   * $resolve.resolve(invocables, locals, parent, self)
	   * </pre>
	   * but the former is more efficient (in fact `resolve` just calls `study` 
	   * internally).
	   *
	   * @param {object} invocables Invocable objects
	   * @return {function} a function to pass in locals, parent and self
	   */
	  this.study = function (invocables) {
	    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
	    var invocableKeys = objectKeys(invocables || {});
	    
	    // Perform a topological sort of invocables to build an ordered plan
	    var plan = [], cycle = [], visited = {};
	    function visit(value, key) {
	      if (visited[key] === VISIT_DONE) return;
	      
	      cycle.push(key);
	      if (visited[key] === VISIT_IN_PROGRESS) {
	        cycle.splice(0, indexOf(cycle, key));
	        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
	      }
	      visited[key] = VISIT_IN_PROGRESS;
	      
	      if (isString(value)) {
	        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
	      } else {
	        var params = $injector.annotate(value);
	        forEach(params, function (param) {
	          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
	        });
	        plan.push(key, value, params);
	      }
	      
	      cycle.pop();
	      visited[key] = VISIT_DONE;
	    }
	    forEach(invocables, visit);
	    invocables = cycle = visited = null; // plan is all that's required
	    
	    function isResolve(value) {
	      return isObject(value) && value.then && value.$$promises;
	    }
	    
	    return function (locals, parent, self) {
	      if (isResolve(locals) && self === undefined) {
	        self = parent; parent = locals; locals = null;
	      }
	      if (!locals) locals = NO_LOCALS;
	      else if (!isObject(locals)) {
	        throw new Error("'locals' must be an object");
	      }       
	      if (!parent) parent = NO_PARENT;
	      else if (!isResolve(parent)) {
	        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
	      }
	      
	      // To complete the overall resolution, we have to wait for the parent
	      // promise and for the promise for each invokable in our plan.
	      var resolution = $q.defer(),
	          result = resolution.promise,
	          promises = result.$$promises = {},
	          values = extend({}, locals),
	          wait = 1 + plan.length/3,
	          merged = false;
	          
	      function done() {
	        // Merge parent values we haven't got yet and publish our own $$values
	        if (!--wait) {
	          if (!merged) merge(values, parent.$$values); 
	          result.$$values = values;
	          result.$$promises = result.$$promises || true; // keep for isResolve()
	          delete result.$$inheritedValues;
	          resolution.resolve(values);
	        }
	      }
	      
	      function fail(reason) {
	        result.$$failure = reason;
	        resolution.reject(reason);
	      }

	      // Short-circuit if parent has already failed
	      if (isDefined(parent.$$failure)) {
	        fail(parent.$$failure);
	        return result;
	      }
	      
	      if (parent.$$inheritedValues) {
	        merge(values, omit(parent.$$inheritedValues, invocableKeys));
	      }

	      // Merge parent values if the parent has already resolved, or merge
	      // parent promises and wait if the parent resolve is still in progress.
	      extend(promises, parent.$$promises);
	      if (parent.$$values) {
	        merged = merge(values, omit(parent.$$values, invocableKeys));
	        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
	        done();
	      } else {
	        if (parent.$$inheritedValues) {
	          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
	        }        
	        parent.then(done, fail);
	      }
	      
	      // Process each invocable in the plan, but ignore any where a local of the same name exists.
	      for (var i=0, ii=plan.length; i<ii; i+=3) {
	        if (locals.hasOwnProperty(plan[i])) done();
	        else invoke(plan[i], plan[i+1], plan[i+2]);
	      }
	      
	      function invoke(key, invocable, params) {
	        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
	        var invocation = $q.defer(), waitParams = 0;
	        function onfailure(reason) {
	          invocation.reject(reason);
	          fail(reason);
	        }
	        // Wait for any parameter that we have a promise for (either from parent or from this
	        // resolve; in that case study() will have made sure it's ordered before us in the plan).
	        forEach(params, function (dep) {
	          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
	            waitParams++;
	            promises[dep].then(function (result) {
	              values[dep] = result;
	              if (!(--waitParams)) proceed();
	            }, onfailure);
	          }
	        });
	        if (!waitParams) proceed();
	        function proceed() {
	          if (isDefined(result.$$failure)) return;
	          try {
	            invocation.resolve($injector.invoke(invocable, self, values));
	            invocation.promise.then(function (result) {
	              values[key] = result;
	              done();
	            }, onfailure);
	          } catch (e) {
	            onfailure(e);
	          }
	        }
	        // Publish promise synchronously; invocations further down in the plan may depend on it.
	        promises[key] = invocation.promise;
	      }
	      
	      return result;
	    };
	  };
	  
	  /**
	   * @ngdoc function
	   * @name ui.router.util.$resolve#resolve
	   * @methodOf ui.router.util.$resolve
	   *
	   * @description
	   * Resolves a set of invocables. An invocable is a function to be invoked via 
	   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
	   * An invocable can either return a value directly,
	   * or a `$q` promise. If a promise is returned it will be resolved and the 
	   * resulting value will be used instead. Dependencies of invocables are resolved 
	   * (in this order of precedence)
	   *
	   * - from the specified `locals`
	   * - from another invocable that is part of this `$resolve` call
	   * - from an invocable that is inherited from a `parent` call to `$resolve` 
	   *   (or recursively
	   * - from any ancestor `$resolve` of that parent).
	   *
	   * The return value of `$resolve` is a promise for an object that contains 
	   * (in this order of precedence)
	   *
	   * - any `locals` (if specified)
	   * - the resolved return values of all injectables
	   * - any values inherited from a `parent` call to `$resolve` (if specified)
	   *
	   * The promise will resolve after the `parent` promise (if any) and all promises 
	   * returned by injectables have been resolved. If any invocable 
	   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
	   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
	   * same error. A rejection of a `parent` promise (if specified) will likewise be 
	   * propagated immediately. Once the `$resolve` promise has been rejected, no 
	   * further invocables will be called.
	   * 
	   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
	   * to throw an error. As a special case, an injectable can depend on a parameter 
	   * with the same name as the injectable, which will be fulfilled from the `parent` 
	   * injectable of the same name. This allows inherited values to be decorated. 
	   * Note that in this case any other injectable in the same `$resolve` with the same
	   * dependency would see the decorated value, not the inherited value.
	   *
	   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
	   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
	   * exception.
	   *
	   * Invocables are invoked eagerly as soon as all dependencies are available. 
	   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
	   *
	   * As a special case, an invocable can be a string, in which case it is taken to 
	   * be a service name to be passed to `$injector.get()`. This is supported primarily 
	   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
	   * routes.
	   *
	   * @param {object} invocables functions to invoke or 
	   * `$injector` services to fetch.
	   * @param {object} locals  values to make available to the injectables
	   * @param {object} parent  a promise returned by another call to `$resolve`.
	   * @param {object} self  the `this` for the invoked methods
	   * @return {object} Promise for an object that contains the resolved return value
	   * of all invocables, as well as any inherited and local values.
	   */
	  this.resolve = function (invocables, locals, parent, self) {
	    return this.study(invocables)(locals, parent, self);
	  };
	}

	angular.module('ui.router.util').service('$resolve', $Resolve);


	/**
	 * @ngdoc object
	 * @name ui.router.util.$templateFactory
	 *
	 * @requires $http
	 * @requires $templateCache
	 * @requires $injector
	 *
	 * @description
	 * Service. Manages loading of templates.
	 */
	$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
	function $TemplateFactory(  $http,   $templateCache,   $injector) {

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromConfig
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template from a configuration object. 
	   *
	   * @param {object} config Configuration object for which to load a template. 
	   * The following properties are search in the specified order, and the first one 
	   * that is defined is used to create the template:
	   *
	   * @param {string|object} config.template html string template or function to 
	   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
	   * @param {string|object} config.templateUrl url to load or a function returning 
	   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
	   * @param {Function} config.templateProvider function to invoke via 
	   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
	   * @param {object} params  Parameters to pass to the template function.
	   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
	   * via a `templateProvider`. Defaults to `{ params: params }`.
	   *
	   * @return {string|object}  The template html as a string, or a promise for 
	   * that string,or `null` if no template is configured.
	   */
	  this.fromConfig = function (config, params, locals) {
	    return (
	      isDefined(config.template) ? this.fromString(config.template, params) :
	      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
	      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
	      null
	    );
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromString
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template from a string or a function returning a string.
	   *
	   * @param {string|object} template html template as a string or function that 
	   * returns an html template as a string.
	   * @param {object} params Parameters to pass to the template function.
	   *
	   * @return {string|object} The template html as a string, or a promise for that 
	   * string.
	   */
	  this.fromString = function (template, params) {
	    return isFunction(template) ? template(params) : template;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromUrl
	   * @methodOf ui.router.util.$templateFactory
	   * 
	   * @description
	   * Loads a template from the a URL via `$http` and `$templateCache`.
	   *
	   * @param {string|Function} url url of the template to load, or a function 
	   * that returns a url.
	   * @param {Object} params Parameters to pass to the url function.
	   * @return {string|Promise.<string>} The template html as a string, or a promise 
	   * for that string.
	   */
	  this.fromUrl = function (url, params) {
	    if (isFunction(url)) url = url(params);
	    if (url == null) return null;
	    else return $http
	        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
	        .then(function(response) { return response.data; });
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromProvider
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template by invoking an injectable provider function.
	   *
	   * @param {Function} provider Function to invoke via `$injector.invoke`
	   * @param {Object} params Parameters for the template.
	   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
	   * `{ params: params }`.
	   * @return {string|Promise.<string>} The template html as a string, or a promise 
	   * for that string.
	   */
	  this.fromProvider = function (provider, params, locals) {
	    return $injector.invoke(provider, null, locals || { params: params });
	  };
	}

	angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

	var $$UMFP; // reference to $UrlMatcherFactoryProvider

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Matches URLs against patterns and extracts named parameters from the path or the search
	 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
	 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
	 * do not influence whether or not a URL is matched, but their values are passed through into
	 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
	 *
	 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
	 * syntax, which optionally allows a regular expression for the parameter to be specified:
	 *
	 * * `':'` name - colon placeholder
	 * * `'*'` name - catch-all placeholder
	 * * `'{' name '}'` - curly placeholder
	 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
	 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
	 *
	 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
	 * must be unique within the pattern (across both path and search parameters). For colon
	 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
	 * number of characters other than '/'. For catch-all placeholders the path parameter matches
	 * any number of characters.
	 *
	 * Examples:
	 *
	 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
	 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
	 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
	 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
	 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
	 * * `'/user/{id:[^/]*}'` - Same as the previous example.
	 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
	 *   parameter consists of 1 to 8 hex digits.
	 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
	 *   path into the parameter 'path'.
	 * * `'/files/*path'` - ditto.
	 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
	 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
	 *
	 * @param {string} pattern  The pattern to compile into a matcher.
	 * @param {Object} config  A configuration object hash:
	 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
	 *   an existing UrlMatcher
	 *
	 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
	 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
	 *
	 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
	 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
	 *   non-null) will start with this prefix.
	 *
	 * @property {string} source  The pattern that was passed into the constructor
	 *
	 * @property {string} sourcePath  The path portion of the source property
	 *
	 * @property {string} sourceSearch  The search portion of the source property
	 *
	 * @property {string} regex  The constructed regex that will be used to match against the url when
	 *   it is time to determine which url will match.
	 *
	 * @returns {Object}  New `UrlMatcher` object
	 */
	function UrlMatcher(pattern, config, parentMatcher) {
	  config = extend({ params: {} }, isObject(config) ? config : {});

	  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
	  //   '*' name
	  //   ':' name
	  //   '{' name '}'
	  //   '{' name ':' regexp '}'
	  // The regular expression is somewhat complicated due to the need to allow curly braces
	  // inside the regular expression. The placeholder regexp breaks down as follows:
	  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
	  //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
	  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
	  //    [^{}\\]+                       - anything other than curly braces or backslash
	  //    \\.                            - a backslash escape
	  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
	  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	      searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	      compiled = '^', last = 0, m,
	      segments = this.segments = [],
	      parentParams = parentMatcher ? parentMatcher.params : {},
	      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
	      paramNames = [];

	  function addParameter(id, type, config, location) {
	    paramNames.push(id);
	    if (parentParams[id]) return parentParams[id];
	    if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
	    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
	    params[id] = new $$UMFP.Param(id, type, config, location);
	    return params[id];
	  }

	  function quoteRegExp(string, pattern, squash, optional) {
	    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
	    if (!pattern) return result;
	    switch(squash) {
	      case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
	      case true:
	        result = result.replace(/\/$/, '');
	        surroundPattern = ['(?:\/(', ')|\/)?'];
	      break;
	      default:    surroundPattern = ['(' + squash + "|", ')?']; break;
	    }
	    return result + surroundPattern[0] + pattern + surroundPattern[1];
	  }

	  this.source = pattern;

	  // Split into static segments separated by path parameter placeholders.
	  // The number of segments is always 1 more than the number of parameters.
	  function matchDetails(m, isSearch) {
	    var id, regexp, segment, type, cfg, arrayMode;
	    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
	    cfg         = config.params[id];
	    segment     = pattern.substring(last, m.index);
	    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);

	    if (regexp) {
	      type      = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
	    }

	    return {
	      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
	    };
	  }

	  var p, param, segment;
	  while ((m = placeholder.exec(pattern))) {
	    p = matchDetails(m, false);
	    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

	    param = addParameter(p.id, p.type, p.cfg, "path");
	    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
	    segments.push(p.segment);
	    last = placeholder.lastIndex;
	  }
	  segment = pattern.substring(last);

	  // Find any search parameter names and remove them from the last segment
	  var i = segment.indexOf('?');

	  if (i >= 0) {
	    var search = this.sourceSearch = segment.substring(i);
	    segment = segment.substring(0, i);
	    this.sourcePath = pattern.substring(0, last + i);

	    if (search.length > 0) {
	      last = 0;
	      while ((m = searchPlaceholder.exec(search))) {
	        p = matchDetails(m, true);
	        param = addParameter(p.id, p.type, p.cfg, "search");
	        last = placeholder.lastIndex;
	        // check if ?&
	      }
	    }
	  } else {
	    this.sourcePath = pattern;
	    this.sourceSearch = '';
	  }

	  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
	  segments.push(segment);

	  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
	  this.prefix = segments[0];
	  this.$$paramNames = paramNames;
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#concat
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns a new matcher for a pattern constructed by appending the path part and adding the
	 * search parameters of the specified pattern to this pattern. The current pattern is not
	 * modified. This can be understood as creating a pattern for URLs that are relative to (or
	 * suffixes of) the current pattern.
	 *
	 * @example
	 * The following two matchers are equivalent:
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').concat('/details?date');
	 * new UrlMatcher('/user/{id}/details?q&date');
	 * </pre>
	 *
	 * @param {string} pattern  The pattern to append.
	 * @param {Object} config  An object hash of the configuration for the matcher.
	 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
	 */
	UrlMatcher.prototype.concat = function (pattern, config) {
	  // Because order of search parameters is irrelevant, we can add our own search
	  // parameters to the end of the new pattern. Parse the new pattern by itself
	  // and then join the bits together, but it's much easier to do this on a string level.
	  var defaultConfig = {
	    caseInsensitive: $$UMFP.caseInsensitive(),
	    strict: $$UMFP.strictMode(),
	    squash: $$UMFP.defaultSquashPolicy()
	  };
	  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
	};

	UrlMatcher.prototype.toString = function () {
	  return this.source;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#exec
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Tests the specified path against this matcher, and returns an object containing the captured
	 * parameter values, or null if the path does not match. The returned object contains the values
	 * of any search parameters that are mentioned in the pattern, but their value may be null if
	 * they are not present in `searchParams`. This means that search parameters are always treated
	 * as optional.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	 *   x: '1', q: 'hello'
	 * });
	 * // returns { id: 'bob', q: 'hello', r: null }
	 * </pre>
	 *
	 * @param {string} path  The URL path to match, e.g. `$location.path()`.
	 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
	 * @returns {Object}  The captured parameter values.
	 */
	UrlMatcher.prototype.exec = function (path, searchParams) {
	  var m = this.regexp.exec(path);
	  if (!m) return null;
	  searchParams = searchParams || {};

	  var paramNames = this.parameters(), nTotal = paramNames.length,
	    nPath = this.segments.length - 1,
	    values = {}, i, j, cfg, paramName;

	  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

	  function decodePathArray(string) {
	    function reverseString(str) { return str.split("").reverse().join(""); }
	    function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

	    var split = reverseString(string).split(/-(?!\\)/);
	    var allReversed = map(split, reverseString);
	    return map(allReversed, unquoteDashes).reverse();
	  }

	  var param, paramVal;
	  for (i = 0; i < nPath; i++) {
	    paramName = paramNames[i];
	    param = this.params[paramName];
	    paramVal = m[i+1];
	    // if the param value matches a pre-replace pair, replace the value before decoding.
	    for (j = 0; j < param.replace.length; j++) {
	      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	    }
	    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
	    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	    values[paramName] = param.value(paramVal);
	  }
	  for (/**/; i < nTotal; i++) {
	    paramName = paramNames[i];
	    values[paramName] = this.params[paramName].value(searchParams[paramName]);
	    param = this.params[paramName];
	    paramVal = searchParams[paramName];
	    for (j = 0; j < param.replace.length; j++) {
	      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	    }
	    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
	    values[paramName] = param.value(paramVal);
	  }

	  return values;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#parameters
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns the names of all path and search parameters of this pattern in an unspecified order.
	 *
	 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
	 *    pattern has no parameters, an empty array is returned.
	 */
	UrlMatcher.prototype.parameters = function (param) {
	  if (!isDefined(param)) return this.$$paramNames;
	  return this.params[param] || null;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#validates
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Checks an object hash of parameters to validate their correctness according to the parameter
	 * types of this `UrlMatcher`.
	 *
	 * @param {Object} params The object hash of parameters to validate.
	 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
	 */
	UrlMatcher.prototype.validates = function (params) {
	  return this.params.$$validates(params);
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#format
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Creates a URL that matches this pattern by substituting the specified values
	 * for the path and search parameters. Null values for path parameters are
	 * treated as empty strings.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
	 * // returns '/user/bob?q=yes'
	 * </pre>
	 *
	 * @param {Object} values  the values to substitute for the parameters in this pattern.
	 * @returns {string}  the formatted URL (path and optionally search part).
	 */
	UrlMatcher.prototype.format = function (values) {
	  values = values || {};
	  var segments = this.segments, params = this.parameters(), paramset = this.params;
	  if (!this.validates(values)) return null;

	  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

	  function encodeDashes(str) { // Replace dashes with encoded "\-"
	    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
	  }

	  for (i = 0; i < nTotal; i++) {
	    var isPathParam = i < nPath;
	    var name = params[i], param = paramset[name], value = param.value(values[name]);
	    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
	    var squash = isDefaultValue ? param.squash : false;
	    var encoded = param.type.encode(value);

	    if (isPathParam) {
	      var nextSegment = segments[i + 1];
	      var isFinalPathParam = i + 1 === nPath;

	      if (squash === false) {
	        if (encoded != null) {
	          if (isArray(encoded)) {
	            result += map(encoded, encodeDashes).join("-");
	          } else {
	            result += encodeURIComponent(encoded);
	          }
	        }
	        result += nextSegment;
	      } else if (squash === true) {
	        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
	        result += nextSegment.match(capture)[1];
	      } else if (isString(squash)) {
	        result += squash + nextSegment;
	      }

	      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
	    } else {
	      if (encoded == null || (isDefaultValue && squash !== false)) continue;
	      if (!isArray(encoded)) encoded = [ encoded ];
	      if (encoded.length === 0) continue;
	      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
	      result += (search ? '&' : '?') + (name + '=' + encoded);
	      search = true;
	    }
	  }

	  return result;
	};

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:Type
	 *
	 * @description
	 * Implements an interface to define custom parameter types that can be decoded from and encoded to
	 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
	 * objects when matching or formatting URLs, or comparing or validating parameter values.
	 *
	 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
	 * information on registering custom types.
	 *
	 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
	 *        properties will override the default methods and/or pattern in `Type`'s public interface.
	 * @example
	 * <pre>
	 * {
	 *   decode: function(val) { return parseInt(val, 10); },
	 *   encode: function(val) { return val && val.toString(); },
	 *   equals: function(a, b) { return this.is(a) && a === b; },
	 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	 *   pattern: /\d+/
	 * }
	 * </pre>
	 *
	 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
	 *           coming from a substring of a URL.
	 *
	 * @returns {Object}  Returns a new `Type` object.
	 */
	function Type(config) {
	  extend(this, config);
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#is
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Detects whether a value is of a particular type. Accepts a native (decoded) value
	 * and determines whether it matches the current `Type` object.
	 *
	 * @param {*} val  The value to check.
	 * @param {string} key  Optional. If the type check is happening in the context of a specific
	 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
	 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
	 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
	 */
	Type.prototype.is = function(val, key) {
	  return true;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#encode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
	 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
	 * only needs to be a representation of `val` that has been coerced to a string.
	 *
	 * @param {*} val  The value to encode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
	 */
	Type.prototype.encode = function(val, key) {
	  return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#decode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Converts a parameter value (from URL string or transition param) to a custom/native value.
	 *
	 * @param {string} val  The URL parameter value to decode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {*}  Returns a custom representation of the URL parameter value.
	 */
	Type.prototype.decode = function(val, key) {
	  return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#equals
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Determines whether two decoded values are equivalent.
	 *
	 * @param {*} a  A value to compare against.
	 * @param {*} b  A value to compare against.
	 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
	 */
	Type.prototype.equals = function(a, b) {
	  return a == b;
	};

	Type.prototype.$subPattern = function() {
	  var sub = this.pattern.toString();
	  return sub.substr(1, sub.length - 2);
	};

	Type.prototype.pattern = /.*/;

	Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

	/** Given an encoded string, or a decoded object, returns a decoded object */
	Type.prototype.$normalize = function(val) {
	  return this.is(val) ? val : this.decode(val);
	};

	/*
	 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
	 * e.g.:
	 * - urlmatcher pattern "/path?{queryParam[]:int}"
	 * - url: "/path?queryParam=1&queryParam=2
	 * - $stateParams.queryParam will be [1, 2]
	 * if `mode` is "auto", then
	 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
	 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
	 */
	Type.prototype.$asArray = function(mode, isSearch) {
	  if (!mode) return this;
	  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

	  function ArrayType(type, mode) {
	    function bindTo(type, callbackName) {
	      return function() {
	        return type[callbackName].apply(type, arguments);
	      };
	    }

	    // Wrap non-array value as array
	    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
	    // Unwrap array value for "auto" mode. Return undefined for empty array.
	    function arrayUnwrap(val) {
	      switch(val.length) {
	        case 0: return undefined;
	        case 1: return mode === "auto" ? val[0] : val;
	        default: return val;
	      }
	    }
	    function falsey(val) { return !val; }

	    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
	    function arrayHandler(callback, allTruthyMode) {
	      return function handleArray(val) {
	        if (isArray(val) && val.length === 0) return val;
	        val = arrayWrap(val);
	        var result = map(val, callback);
	        if (allTruthyMode === true)
	          return filter(result, falsey).length === 0;
	        return arrayUnwrap(result);
	      };
	    }

	    // Wraps type (.equals) functions to operate on each value of an array
	    function arrayEqualsHandler(callback) {
	      return function handleArray(val1, val2) {
	        var left = arrayWrap(val1), right = arrayWrap(val2);
	        if (left.length !== right.length) return false;
	        for (var i = 0; i < left.length; i++) {
	          if (!callback(left[i], right[i])) return false;
	        }
	        return true;
	      };
	    }

	    this.encode = arrayHandler(bindTo(type, 'encode'));
	    this.decode = arrayHandler(bindTo(type, 'decode'));
	    this.is     = arrayHandler(bindTo(type, 'is'), true);
	    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
	    this.pattern = type.pattern;
	    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
	    this.name = type.name;
	    this.$arrayMode = mode;
	  }

	  return new ArrayType(this, mode);
	};



	/**
	 * @ngdoc object
	 * @name ui.router.util.$urlMatcherFactory
	 *
	 * @description
	 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
	 * is also available to providers under the name `$urlMatcherFactoryProvider`.
	 */
	function $UrlMatcherFactory() {
	  $$UMFP = this;

	  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

	  // Use tildes to pre-encode slashes.
	  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
	  // and bidirectional encoding/decoding fails.
	  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
	  function valToString(val) { return val != null ? val.toString().replace(/~/g, "~~").replace(/\//g, "~2F") : val; }
	  function valFromString(val) { return val != null ? val.toString().replace(/~2F/g, "/").replace(/~~/g, "~") : val; }

	  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
	    "string": {
	      encode: valToString,
	      decode: valFromString,
	      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
	      // In 0.2.x, string params are optional by default for backwards compat
	      is: function(val) { return val == null || !isDefined(val) || typeof val === "string"; },
	      pattern: /[^/]*/
	    },
	    "int": {
	      encode: valToString,
	      decode: function(val) { return parseInt(val, 10); },
	      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
	      pattern: /\d+/
	    },
	    "bool": {
	      encode: function(val) { return val ? 1 : 0; },
	      decode: function(val) { return parseInt(val, 10) !== 0; },
	      is: function(val) { return val === true || val === false; },
	      pattern: /0|1/
	    },
	    "date": {
	      encode: function (val) {
	        if (!this.is(val))
	          return undefined;
	        return [ val.getFullYear(),
	          ('0' + (val.getMonth() + 1)).slice(-2),
	          ('0' + val.getDate()).slice(-2)
	        ].join("-");
	      },
	      decode: function (val) {
	        if (this.is(val)) return val;
	        var match = this.capture.exec(val);
	        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
	      },
	      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
	      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
	      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
	      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
	    },
	    "json": {
	      encode: angular.toJson,
	      decode: angular.fromJson,
	      is: angular.isObject,
	      equals: angular.equals,
	      pattern: /[^/]*/
	    },
	    "any": { // does not encode/decode
	      encode: angular.identity,
	      decode: angular.identity,
	      equals: angular.equals,
	      pattern: /.*/
	    }
	  };

	  function getDefaultConfig() {
	    return {
	      strict: isStrictMode,
	      caseInsensitive: isCaseInsensitive
	    };
	  }

	  function isInjectable(value) {
	    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
	  }

	  /**
	   * [Internal] Get the default value of a parameter, which may be an injectable function.
	   */
	  $UrlMatcherFactory.$$getDefaultValue = function(config) {
	    if (!isInjectable(config.value)) return config.value;
	    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	    return injector.invoke(config.value);
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Defines whether URL matching should be case sensitive (the default behavior), or not.
	   *
	   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
	   * @returns {boolean} the current value of caseInsensitive
	   */
	  this.caseInsensitive = function(value) {
	    if (isDefined(value))
	      isCaseInsensitive = value;
	    return isCaseInsensitive;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#strictMode
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Defines whether URLs should match trailing slashes, or not (the default behavior).
	   *
	   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
	   * @returns {boolean} the current value of strictMode
	   */
	  this.strictMode = function(value) {
	    if (isDefined(value))
	      isStrictMode = value;
	    return isStrictMode;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Sets the default behavior when generating or matching URLs with default parameter values.
	   *
	   * @param {string} value A string that defines the default parameter URL squashing behavior.
	   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
	   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
	   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
	   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
	   *             the parameter value from the URL and replace it with this string.
	   */
	  this.defaultSquashPolicy = function(value) {
	    if (!isDefined(value)) return defaultSquashPolicy;
	    if (value !== true && value !== false && !isString(value))
	      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
	    defaultSquashPolicy = value;
	    return value;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#compile
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
	   *
	   * @param {string} pattern  The URL pattern.
	   * @param {Object} config  The config object hash.
	   * @returns {UrlMatcher}  The UrlMatcher.
	   */
	  this.compile = function (pattern, config) {
	    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#isMatcher
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
	   *
	   * @param {Object} object  The object to perform the type check against.
	   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
	   *          implementing all the same methods.
	   */
	  this.isMatcher = function (o) {
	    if (!isObject(o)) return false;
	    var result = true;

	    forEach(UrlMatcher.prototype, function(val, name) {
	      if (isFunction(val)) {
	        result = result && (isDefined(o[name]) && isFunction(o[name]));
	      }
	    });
	    return result;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#type
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
	   * generate URLs with typed parameters.
	   *
	   * @param {string} name  The type name.
	   * @param {Object|Function} definition   The type definition. See
	   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
	   *        runtime starts.  The result of this function is merged into the existing `definition`.
	   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	   *
	   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
	   *
	   * @example
	   * This is a simple example of a custom type that encodes and decodes items from an
	   * array, using the array index as the URL-encoded value:
	   *
	   * <pre>
	   * var list = ['John', 'Paul', 'George', 'Ringo'];
	   *
	   * $urlMatcherFactoryProvider.type('listItem', {
	   *   encode: function(item) {
	   *     // Represent the list item in the URL using its corresponding index
	   *     return list.indexOf(item);
	   *   },
	   *   decode: function(item) {
	   *     // Look up the list item by index
	   *     return list[parseInt(item, 10)];
	   *   },
	   *   is: function(item) {
	   *     // Ensure the item is valid by checking to see that it appears
	   *     // in the list
	   *     return list.indexOf(item) > -1;
	   *   }
	   * });
	   *
	   * $stateProvider.state('list', {
	   *   url: "/list/{item:listItem}",
	   *   controller: function($scope, $stateParams) {
	   *     console.log($stateParams.item);
	   *   }
	   * });
	   *
	   * // ...
	   *
	   * // Changes URL to '/list/3', logs "Ringo" to the console
	   * $state.go('list', { item: "Ringo" });
	   * </pre>
	   *
	   * This is a more complex example of a type that relies on dependency injection to
	   * interact with services, and uses the parameter name from the URL to infer how to
	   * handle encoding and decoding parameter values:
	   *
	   * <pre>
	   * // Defines a custom type that gets a value from a service,
	   * // where each service gets different types of values from
	   * // a backend API:
	   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
	   *
	   *   // Matches up services to URL parameter names
	   *   var services = {
	   *     user: Users,
	   *     post: Posts
	   *   };
	   *
	   *   return {
	   *     encode: function(object) {
	   *       // Represent the object in the URL using its unique ID
	   *       return object.id;
	   *     },
	   *     decode: function(value, key) {
	   *       // Look up the object by ID, using the parameter
	   *       // name (key) to call the correct service
	   *       return services[key].findById(value);
	   *     },
	   *     is: function(object, key) {
	   *       // Check that object is a valid dbObject
	   *       return angular.isObject(object) && object.id && services[key];
	   *     }
	   *     equals: function(a, b) {
	   *       // Check the equality of decoded objects by comparing
	   *       // their unique IDs
	   *       return a.id === b.id;
	   *     }
	   *   };
	   * });
	   *
	   * // In a config() block, you can then attach URLs with
	   * // type-annotated parameters:
	   * $stateProvider.state('users', {
	   *   url: "/users",
	   *   // ...
	   * }).state('users.item', {
	   *   url: "/{user:dbObject}",
	   *   controller: function($scope, $stateParams) {
	   *     // $stateParams.user will now be an object returned from
	   *     // the Users service
	   *   },
	   *   // ...
	   * });
	   * </pre>
	   */
	  this.type = function (name, definition, definitionFn) {
	    if (!isDefined(definition)) return $types[name];
	    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

	    $types[name] = new Type(extend({ name: name }, definition));
	    if (definitionFn) {
	      typeQueue.push({ name: name, def: definitionFn });
	      if (!enqueue) flushTypeQueue();
	    }
	    return this;
	  };

	  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
	  function flushTypeQueue() {
	    while(typeQueue.length) {
	      var type = typeQueue.shift();
	      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
	      angular.extend($types[type.name], injector.invoke(type.def));
	    }
	  }

	  // Register default types. Store them in the prototype of $types.
	  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
	  $types = inherit($types, {});

	  /* No need to document $get, since it returns this */
	  this.$get = ['$injector', function ($injector) {
	    injector = $injector;
	    enqueue = false;
	    flushTypeQueue();

	    forEach(defaultTypes, function(type, name) {
	      if (!$types[name]) $types[name] = new Type(type);
	    });
	    return this;
	  }];

	  this.Param = function Param(id, type, config, location) {
	    var self = this;
	    config = unwrapShorthand(config);
	    type = getType(config, type, location);
	    var arrayMode = getArrayMode();
	    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
	    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
	      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
	    var isOptional = config.value !== undefined;
	    var squash = getSquashPolicy(config, isOptional);
	    var replace = getReplace(config, arrayMode, isOptional, squash);

	    function unwrapShorthand(config) {
	      var keys = isObject(config) ? objectKeys(config) : [];
	      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
	                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
	      if (isShorthand) config = { value: config };
	      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
	      return config;
	    }

	    function getType(config, urlType, location) {
	      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
	      if (urlType) return urlType;
	      if (!config.type) return (location === "config" ? $types.any : $types.string);

	      if (angular.isString(config.type))
	        return $types[config.type];
	      if (config.type instanceof Type)
	        return config.type;
	      return new Type(config.type);
	    }

	    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
	    function getArrayMode() {
	      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
	      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
	      return extend(arrayDefaults, arrayParamNomenclature, config).array;
	    }

	    /**
	     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
	     */
	    function getSquashPolicy(config, isOptional) {
	      var squash = config.squash;
	      if (!isOptional || squash === false) return false;
	      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
	      if (squash === true || isString(squash)) return squash;
	      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
	    }

	    function getReplace(config, arrayMode, isOptional, squash) {
	      var replace, configuredKeys, defaultPolicy = [
	        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
	        { from: null, to: (isOptional || arrayMode ? undefined : "") }
	      ];
	      replace = isArray(config.replace) ? config.replace : [];
	      if (isString(squash))
	        replace.push({ from: squash, to: undefined });
	      configuredKeys = map(replace, function(item) { return item.from; } );
	      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
	    }

	    /**
	     * [Internal] Get the default value of a parameter, which may be an injectable function.
	     */
	    function $$getDefaultValue() {
	      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	      var defaultValue = injector.invoke(config.$$fn);
	      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
	        throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
	      return defaultValue;
	    }

	    /**
	     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
	     * default value, which may be the result of an injectable function.
	     */
	    function $value(value) {
	      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
	      function $replace(value) {
	        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
	        return replacement.length ? replacement[0] : value;
	      }
	      value = $replace(value);
	      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
	    }

	    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

	    extend(this, {
	      id: id,
	      type: type,
	      location: location,
	      array: arrayMode,
	      squash: squash,
	      replace: replace,
	      isOptional: isOptional,
	      value: $value,
	      dynamic: undefined,
	      config: config,
	      toString: toString
	    });
	  };

	  function ParamSet(params) {
	    extend(this, params || {});
	  }

	  ParamSet.prototype = {
	    $$new: function() {
	      return inherit(this, extend(new ParamSet(), { $$parent: this}));
	    },
	    $$keys: function () {
	      var keys = [], chain = [], parent = this,
	        ignore = objectKeys(ParamSet.prototype);
	      while (parent) { chain.push(parent); parent = parent.$$parent; }
	      chain.reverse();
	      forEach(chain, function(paramset) {
	        forEach(objectKeys(paramset), function(key) {
	            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
	        });
	      });
	      return keys;
	    },
	    $$values: function(paramValues) {
	      var values = {}, self = this;
	      forEach(self.$$keys(), function(key) {
	        values[key] = self[key].value(paramValues && paramValues[key]);
	      });
	      return values;
	    },
	    $$equals: function(paramValues1, paramValues2) {
	      var equal = true, self = this;
	      forEach(self.$$keys(), function(key) {
	        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
	        if (!self[key].type.equals(left, right)) equal = false;
	      });
	      return equal;
	    },
	    $$validates: function $$validate(paramValues) {
	      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
	      for (i = 0; i < keys.length; i++) {
	        param = this[keys[i]];
	        rawVal = paramValues[keys[i]];
	        if ((rawVal === undefined || rawVal === null) && param.isOptional)
	          break; // There was no parameter value, but the param is optional
	        normalized = param.type.$normalize(rawVal);
	        if (!param.type.is(normalized))
	          return false; // The value was not of the correct Type, and could not be decoded to the correct Type
	        encoded = param.type.encode(normalized);
	        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
	          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
	      }
	      return true;
	    },
	    $$parent: undefined
	  };

	  this.ParamSet = ParamSet;
	}

	// Register as a provider so it's available to other providers
	angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
	angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

	/**
	 * @ngdoc object
	 * @name ui.router.router.$urlRouterProvider
	 *
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 * @requires $locationProvider
	 *
	 * @description
	 * `$urlRouterProvider` has the responsibility of watching `$location`. 
	 * When `$location` changes it runs through a list of rules one by one until a 
	 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
	 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
	 *
	 * There are several methods on `$urlRouterProvider` that make it useful to use directly
	 * in your module config.
	 */
	$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
	function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
	  var rules = [], otherwise = null, interceptDeferred = false, listener;

	  // Returns a string that is a prefix of all strings matching the RegExp
	  function regExpPrefix(re) {
	    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
	    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
	  }

	  // Interpolates matched values into a String.replace()-style pattern
	  function interpolate(pattern, match) {
	    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
	      return match[what === '$' ? 0 : Number(what)];
	    });
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#rule
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Defines rules that are used by `$urlRouterProvider` to find matches for
	   * specific URLs.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   // Here's an example of how you might allow case insensitive urls
	   *   $urlRouterProvider.rule(function ($injector, $location) {
	   *     var path = $location.path(),
	   *         normalized = path.toLowerCase();
	   *
	   *     if (path !== normalized) {
	   *       return normalized;
	   *     }
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {function} rule Handler function that takes `$injector` and `$location`
	   * services as arguments. You can use them to return a valid path as a string.
	   *
	   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	   */
	  this.rule = function (rule) {
	    if (!isFunction(rule)) throw new Error("'rule' must be a function");
	    rules.push(rule);
	    return this;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouterProvider#otherwise
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Defines a path that is used when an invalid route is requested.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   // if the path doesn't match any of the urls you configured
	   *   // otherwise will take care of routing the user to the
	   *   // specified url
	   *   $urlRouterProvider.otherwise('/index');
	   *
	   *   // Example of using function rule as param
	   *   $urlRouterProvider.otherwise(function ($injector, $location) {
	   *     return '/a/valid/url';
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {string|function} rule The url path you want to redirect to or a function 
	   * rule that returns the url path. The function version is passed two params: 
	   * `$injector` and `$location` services, and must return a url string.
	   *
	   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	   */
	  this.otherwise = function (rule) {
	    if (isString(rule)) {
	      var redirect = rule;
	      rule = function () { return redirect; };
	    }
	    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
	    otherwise = rule;
	    return this;
	  };


	  function handleIfMatch($injector, handler, match) {
	    if (!match) return false;
	    var result = $injector.invoke(handler, handler, { $match: match });
	    return isDefined(result) ? result : true;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#when
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Registers a handler for a given url matching. 
	   * 
	   * If the handler is a string, it is
	   * treated as a redirect, and is interpolated according to the syntax of match
	   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
	   *
	   * If the handler is a function, it is injectable. It gets invoked if `$location`
	   * matches. You have the option of inject the match object as `$match`.
	   *
	   * The handler can return
	   *
	   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
	   *   will continue trying to find another one that matches.
	   * - **string** which is treated as a redirect and passed to `$location.url()`
	   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
	   *     if ($state.$current.navigable !== state ||
	   *         !equalForKeys($match, $stateParams) {
	   *      $state.transitionTo(state, $match, false);
	   *     }
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {string|object} what The incoming path that you want to redirect.
	   * @param {string|function} handler The path you want to redirect your user to.
	   */
	  this.when = function (what, handler) {
	    var redirect, handlerIsString = isString(handler);
	    if (isString(what)) what = $urlMatcherFactory.compile(what);

	    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
	      throw new Error("invalid 'handler' in when()");

	    var strategies = {
	      matcher: function (what, handler) {
	        if (handlerIsString) {
	          redirect = $urlMatcherFactory.compile(handler);
	          handler = ['$match', function ($match) { return redirect.format($match); }];
	        }
	        return extend(function ($injector, $location) {
	          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
	        }, {
	          prefix: isString(what.prefix) ? what.prefix : ''
	        });
	      },
	      regex: function (what, handler) {
	        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

	        if (handlerIsString) {
	          redirect = handler;
	          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
	        }
	        return extend(function ($injector, $location) {
	          return handleIfMatch($injector, handler, what.exec($location.path()));
	        }, {
	          prefix: regExpPrefix(what)
	        });
	      }
	    };

	    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

	    for (var n in check) {
	      if (check[n]) return this.rule(strategies[n](what, handler));
	    }

	    throw new Error("invalid 'what' in when()");
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#deferIntercept
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Disables (or enables) deferring location change interception.
	   *
	   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
	   * defer a transition but maintain the current URL), call this method at configuration time.
	   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
	   * `$locationChangeSuccess` event handler.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *
	   *   // Prevent $urlRouter from automatically intercepting URL changes;
	   *   // this allows you to configure custom behavior in between
	   *   // location changes and route synchronization:
	   *   $urlRouterProvider.deferIntercept();
	   *
	   * }).run(function ($rootScope, $urlRouter, UserService) {
	   *
	   *   $rootScope.$on('$locationChangeSuccess', function(e) {
	   *     // UserService is an example service for managing user state
	   *     if (UserService.isLoggedIn()) return;
	   *
	   *     // Prevent $urlRouter's default handler from firing
	   *     e.preventDefault();
	   *
	   *     UserService.handleLogin().then(function() {
	   *       // Once the user has logged in, sync the current URL
	   *       // to the router:
	   *       $urlRouter.sync();
	   *     });
	   *   });
	   *
	   *   // Configures $urlRouter's listener *after* your custom listener
	   *   $urlRouter.listen();
	   * });
	   * </pre>
	   *
	   * @param {boolean} defer Indicates whether to defer location change interception. Passing
	            no parameter is equivalent to `true`.
	   */
	  this.deferIntercept = function (defer) {
	    if (defer === undefined) defer = true;
	    interceptDeferred = defer;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouter
	   *
	   * @requires $location
	   * @requires $rootScope
	   * @requires $injector
	   * @requires $browser
	   *
	   * @description
	   *
	   */
	  this.$get = $get;
	  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
	  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {

	    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

	    function appendBasePath(url, isHtml5, absolute) {
	      if (baseHref === '/') return url;
	      if (isHtml5) return baseHref.slice(0, -1) + url;
	      if (absolute) return baseHref.slice(1) + url;
	      return url;
	    }

	    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
	    function update(evt) {
	      if (evt && evt.defaultPrevented) return;
	      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
	      lastPushedUrl = undefined;
	      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
	      //if (ignoreUpdate) return true;

	      function check(rule) {
	        var handled = rule($injector, $location);

	        if (!handled) return false;
	        if (isString(handled)) $location.replace().url(handled);
	        return true;
	      }
	      var n = rules.length, i;

	      for (i = 0; i < n; i++) {
	        if (check(rules[i])) return;
	      }
	      // always check otherwise last to allow dynamic updates to the set of rules
	      if (otherwise) check(otherwise);
	    }

	    function listen() {
	      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
	      return listener;
	    }

	    if (!interceptDeferred) listen();

	    return {
	      /**
	       * @ngdoc function
	       * @name ui.router.router.$urlRouter#sync
	       * @methodOf ui.router.router.$urlRouter
	       *
	       * @description
	       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
	       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
	       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
	       * with the transition by calling `$urlRouter.sync()`.
	       *
	       * @example
	       * <pre>
	       * angular.module('app', ['ui.router'])
	       *   .run(function($rootScope, $urlRouter) {
	       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
	       *       // Halt state change from even starting
	       *       evt.preventDefault();
	       *       // Perform custom logic
	       *       var meetsRequirement = ...
	       *       // Continue with the update and state transition if logic allows
	       *       if (meetsRequirement) $urlRouter.sync();
	       *     });
	       * });
	       * </pre>
	       */
	      sync: function() {
	        update();
	      },

	      listen: function() {
	        return listen();
	      },

	      update: function(read) {
	        if (read) {
	          location = $location.url();
	          return;
	        }
	        if ($location.url() === location) return;

	        $location.url(location);
	        $location.replace();
	      },

	      push: function(urlMatcher, params, options) {
	         var url = urlMatcher.format(params || {});

	        // Handle the special hash param, if needed
	        if (url !== null && params && params['#']) {
	            url += '#' + params['#'];
	        }

	        $location.url(url);
	        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
	        if (options && options.replace) $location.replace();
	      },

	      /**
	       * @ngdoc function
	       * @name ui.router.router.$urlRouter#href
	       * @methodOf ui.router.router.$urlRouter
	       *
	       * @description
	       * A URL generation method that returns the compiled URL for a given
	       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
	       *
	       * @example
	       * <pre>
	       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
	       *   person: "bob"
	       * });
	       * // $bob == "/about/bob";
	       * </pre>
	       *
	       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
	       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	       *
	       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
	       */
	      href: function(urlMatcher, params, options) {
	        if (!urlMatcher.validates(params)) return null;

	        var isHtml5 = $locationProvider.html5Mode();
	        if (angular.isObject(isHtml5)) {
	          isHtml5 = isHtml5.enabled;
	        }

	        isHtml5 = isHtml5 && $sniffer.history;
	        
	        var url = urlMatcher.format(params);
	        options = options || {};

	        if (!isHtml5 && url !== null) {
	          url = "#" + $locationProvider.hashPrefix() + url;
	        }

	        // Handle special hash param, if needed
	        if (url !== null && params && params['#']) {
	          url += '#' + params['#'];
	        }

	        url = appendBasePath(url, isHtml5, options.absolute);

	        if (!options.absolute || !url) {
	          return url;
	        }

	        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
	        port = (port === 80 || port === 443 ? '' : ':' + port);

	        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
	      }
	    };
	  }
	}

	angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$stateProvider
	 *
	 * @requires ui.router.router.$urlRouterProvider
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 *
	 * @description
	 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
	 * on state.
	 *
	 * A state corresponds to a "place" in the application in terms of the overall UI and
	 * navigation. A state describes (via the controller / template / view properties) what
	 * the UI looks like and does at that place.
	 *
	 * States often have things in common, and the primary way of factoring out these
	 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
	 * nested states.
	 *
	 * The `$stateProvider` provides interfaces to declare these states for your app.
	 */
	$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
	function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

	  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

	  // Builds state properties from definition passed to registerState()
	  var stateBuilder = {

	    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
	    // state.children = [];
	    // if (parent) parent.children.push(state);
	    parent: function(state) {
	      if (isDefined(state.parent) && state.parent) return findState(state.parent);
	      // regex matches any valid composite state name
	      // would match "contact.list" but not "contacts"
	      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
	      return compositeName ? findState(compositeName[1]) : root;
	    },

	    // inherit 'data' from parent and override by own values (if any)
	    data: function(state) {
	      if (state.parent && state.parent.data) {
	        state.data = state.self.data = inherit(state.parent.data, state.data);
	      }
	      return state.data;
	    },

	    // Build a URLMatcher if necessary, either via a relative or absolute URL
	    url: function(state) {
	      var url = state.url, config = { params: state.params || {} };

	      if (isString(url)) {
	        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
	        return (state.parent.navigable || root).url.concat(url, config);
	      }

	      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
	      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
	    },

	    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
	    navigable: function(state) {
	      return state.url ? state : (state.parent ? state.parent.navigable : null);
	    },

	    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
	    ownParams: function(state) {
	      var params = state.url && state.url.params || new $$UMFP.ParamSet();
	      forEach(state.params || {}, function(config, id) {
	        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
	      });
	      return params;
	    },

	    // Derive parameters for this state and ensure they're a super-set of parent's parameters
	    params: function(state) {
	      var ownParams = pick(state.ownParams, state.ownParams.$$keys());
	      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
	    },

	    // If there is no explicit multi-view configuration, make one up so we don't have
	    // to handle both cases in the view directive later. Note that having an explicit
	    // 'views' property will mean the default unnamed view properties are ignored. This
	    // is also a good time to resolve view names to absolute names, so everything is a
	    // straight lookup at link time.
	    views: function(state) {
	      var views = {};

	      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
	        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
	        view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
	        views[name] = view;
	      });
	      return views;
	    },

	    // Keep a full path from the root down to this state as this is needed for state activation.
	    path: function(state) {
	      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
	    },

	    // Speed up $state.contains() as it's used a lot
	    includes: function(state) {
	      var includes = state.parent ? extend({}, state.parent.includes) : {};
	      includes[state.name] = true;
	      return includes;
	    },

	    $delegates: {}
	  };

	  function isRelative(stateName) {
	    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
	  }

	  function findState(stateOrName, base) {
	    if (!stateOrName) return undefined;

	    var isStr = isString(stateOrName),
	        name  = isStr ? stateOrName : stateOrName.name,
	        path  = isRelative(name);

	    if (path) {
	      if (!base) throw new Error("No reference point given for path '"  + name + "'");
	      base = findState(base);
	      
	      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

	      for (; i < pathLength; i++) {
	        if (rel[i] === "" && i === 0) {
	          current = base;
	          continue;
	        }
	        if (rel[i] === "^") {
	          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
	          current = current.parent;
	          continue;
	        }
	        break;
	      }
	      rel = rel.slice(i).join(".");
	      name = current.name + (current.name && rel ? "." : "") + rel;
	    }
	    var state = states[name];

	    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
	      return state;
	    }
	    return undefined;
	  }

	  function queueState(parentName, state) {
	    if (!queue[parentName]) {
	      queue[parentName] = [];
	    }
	    queue[parentName].push(state);
	  }

	  function flushQueuedChildren(parentName) {
	    var queued = queue[parentName] || [];
	    while(queued.length) {
	      registerState(queued.shift());
	    }
	  }

	  function registerState(state) {
	    // Wrap a new object around the state so we can store our private details easily.
	    state = inherit(state, {
	      self: state,
	      resolve: state.resolve || {},
	      toString: function() { return this.name; }
	    });

	    var name = state.name;
	    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
	    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");

	    // Get parent name
	    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
	        : (isString(state.parent)) ? state.parent
	        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
	        : '';

	    // If parent is not registered yet, add state to queue and register later
	    if (parentName && !states[parentName]) {
	      return queueState(parentName, state.self);
	    }

	    for (var key in stateBuilder) {
	      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
	    }
	    states[name] = state;

	    // Register the state in the global state list and with $urlRouter if necessary.
	    if (!state[abstractKey] && state.url) {
	      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
	        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
	          $state.transitionTo(state, $match, { inherit: true, location: false });
	        }
	      }]);
	    }

	    // Register any queued children
	    flushQueuedChildren(name);

	    return state;
	  }

	  // Checks text to see if it looks like a glob.
	  function isGlob (text) {
	    return text.indexOf('*') > -1;
	  }

	  // Returns true if glob matches current $state name.
	  function doesStateMatchGlob (glob) {
	    var globSegments = glob.split('.'),
	        segments = $state.$current.name.split('.');

	    //match single stars
	    for (var i = 0, l = globSegments.length; i < l; i++) {
	      if (globSegments[i] === '*') {
	        segments[i] = '*';
	      }
	    }

	    //match greedy starts
	    if (globSegments[0] === '**') {
	       segments = segments.slice(indexOf(segments, globSegments[1]));
	       segments.unshift('**');
	    }
	    //match greedy ends
	    if (globSegments[globSegments.length - 1] === '**') {
	       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
	       segments.push('**');
	    }

	    if (globSegments.length != segments.length) {
	      return false;
	    }

	    return segments.join('') === globSegments.join('');
	  }


	  // Implicit root state that is always active
	  root = registerState({
	    name: '',
	    url: '^',
	    views: null,
	    'abstract': true
	  });
	  root.navigable = null;


	  /**
	   * @ngdoc function
	   * @name ui.router.state.$stateProvider#decorator
	   * @methodOf ui.router.state.$stateProvider
	   *
	   * @description
	   * Allows you to extend (carefully) or override (at your own peril) the 
	   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
	   * to add custom functionality to ui-router, for example inferring templateUrl 
	   * based on the state name.
	   *
	   * When passing only a name, it returns the current (original or decorated) builder
	   * function that matches `name`.
	   *
	   * The builder functions that can be decorated are listed below. Though not all
	   * necessarily have a good use case for decoration, that is up to you to decide.
	   *
	   * In addition, users can attach custom decorators, which will generate new 
	   * properties within the state's internal definition. There is currently no clear 
	   * use-case for this beyond accessing internal states (i.e. $state.$current), 
	   * however, expect this to become increasingly relevant as we introduce additional 
	   * meta-programming features.
	   *
	   * **Warning**: Decorators should not be interdependent because the order of 
	   * execution of the builder functions in non-deterministic. Builder functions 
	   * should only be dependent on the state definition object and super function.
	   *
	   *
	   * Existing builder functions and current return values:
	   *
	   * - **parent** `{object}` - returns the parent state object.
	   * - **data** `{object}` - returns state data, including any inherited data that is not
	   *   overridden by own values (if any).
	   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
	   *   or `null`.
	   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
	   *   navigable).
	   * - **params** `{object}` - returns an array of state params that are ensured to 
	   *   be a super-set of parent's params.
	   * - **views** `{object}` - returns a views object where each key is an absolute view 
	   *   name (i.e. "viewName@stateName") and each value is the config object 
	   *   (template, controller) for the view. Even when you don't use the views object 
	   *   explicitly on a state config, one is still created for you internally.
	   *   So by decorating this builder function you have access to decorating template 
	   *   and controller properties.
	   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
	   *   not including any params defined by ancestor states.
	   * - **path** `{string}` - returns the full path from the root down to this state. 
	   *   Needed for state activation.
	   * - **includes** `{object}` - returns an object that includes every state that 
	   *   would pass a `$state.includes()` test.
	   *
	   * @example
	   * <pre>
	   * // Override the internal 'views' builder with a function that takes the state
	   * // definition, and a reference to the internal function being overridden:
	   * $stateProvider.decorator('views', function (state, parent) {
	   *   var result = {},
	   *       views = parent(state);
	   *
	   *   angular.forEach(views, function (config, name) {
	   *     var autoName = (state.name + '.' + name).replace('.', '/');
	   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
	   *     result[name] = config;
	   *   });
	   *   return result;
	   * });
	   *
	   * $stateProvider.state('home', {
	   *   views: {
	   *     'contact.list': { controller: 'ListController' },
	   *     'contact.item': { controller: 'ItemController' }
	   *   }
	   * });
	   *
	   * // ...
	   *
	   * $state.go('home');
	   * // Auto-populates list and item views with /partials/home/contact/list.html,
	   * // and /partials/home/contact/item.html, respectively.
	   * </pre>
	   *
	   * @param {string} name The name of the builder function to decorate. 
	   * @param {object} func A function that is responsible for decorating the original 
	   * builder function. The function receives two parameters:
	   *
	   *   - `{object}` - state - The state config object.
	   *   - `{object}` - super - The original builder function.
	   *
	   * @return {object} $stateProvider - $stateProvider instance
	   */
	  this.decorator = decorator;
	  function decorator(name, func) {
	    /*jshint validthis: true */
	    if (isString(name) && !isDefined(func)) {
	      return stateBuilder[name];
	    }
	    if (!isFunction(func) || !isString(name)) {
	      return this;
	    }
	    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
	      stateBuilder.$delegates[name] = stateBuilder[name];
	    }
	    stateBuilder[name] = func;
	    return this;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.state.$stateProvider#state
	   * @methodOf ui.router.state.$stateProvider
	   *
	   * @description
	   * Registers a state configuration under a given state name. The stateConfig object
	   * has the following acceptable properties.
	   *
	   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
	   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
	   * @param {object} stateConfig State configuration object.
	   * @param {string|function=} stateConfig.template
	   * <a id='template'></a>
	   *   html template as a string or a function that returns
	   *   an html template as a string which should be used by the uiView directives. This property 
	   *   takes precedence over templateUrl.
	   *   
	   *   If `template` is a function, it will be called with the following parameters:
	   *
	   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
	   *     applying the current state
	   *
	   * <pre>template:
	   *   "<h1>inline template definition</h1>" +
	   *   "<div ui-view></div>"</pre>
	   * <pre>template: function(params) {
	   *       return "<h1>generated template</h1>"; }</pre>
	   * </div>
	   *
	   * @param {string|function=} stateConfig.templateUrl
	   * <a id='templateUrl'></a>
	   *
	   *   path or function that returns a path to an html
	   *   template that should be used by uiView.
	   *   
	   *   If `templateUrl` is a function, it will be called with the following parameters:
	   *
	   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
	   *     applying the current state
	   *
	   * <pre>templateUrl: "home.html"</pre>
	   * <pre>templateUrl: function(params) {
	   *     return myTemplates[params.pageId]; }</pre>
	   *
	   * @param {function=} stateConfig.templateProvider
	   * <a id='templateProvider'></a>
	   *    Provider function that returns HTML content string.
	   * <pre> templateProvider:
	   *       function(MyTemplateService, params) {
	   *         return MyTemplateService.getTemplate(params.pageId);
	   *       }</pre>
	   *
	   * @param {string|function=} stateConfig.controller
	   * <a id='controller'></a>
	   *
	   *  Controller fn that should be associated with newly
	   *   related scope or the name of a registered controller if passed as a string.
	   *   Optionally, the ControllerAs may be declared here.
	   * <pre>controller: "MyRegisteredController"</pre>
	   * <pre>controller:
	   *     "MyRegisteredController as fooCtrl"}</pre>
	   * <pre>controller: function($scope, MyService) {
	   *     $scope.data = MyService.getData(); }</pre>
	   *
	   * @param {function=} stateConfig.controllerProvider
	   * <a id='controllerProvider'></a>
	   *
	   * Injectable provider function that returns the actual controller or string.
	   * <pre>controllerProvider:
	   *   function(MyResolveData) {
	   *     if (MyResolveData.foo)
	   *       return "FooCtrl"
	   *     else if (MyResolveData.bar)
	   *       return "BarCtrl";
	   *     else return function($scope) {
	   *       $scope.baz = "Qux";
	   *     }
	   *   }</pre>
	   *
	   * @param {string=} stateConfig.controllerAs
	   * <a id='controllerAs'></a>
	   * 
	   * A controller alias name. If present the controller will be
	   *   published to scope under the controllerAs name.
	   * <pre>controllerAs: "myCtrl"</pre>
	   *
	   * @param {string|object=} stateConfig.parent
	   * <a id='parent'></a>
	   * Optionally specifies the parent state of this state.
	   *
	   * <pre>parent: 'parentState'</pre>
	   * <pre>parent: parentState // JS variable</pre>
	   *
	   * @param {object=} stateConfig.resolve
	   * <a id='resolve'></a>
	   *
	   * An optional map&lt;string, function&gt; of dependencies which
	   *   should be injected into the controller. If any of these dependencies are promises, 
	   *   the router will wait for them all to be resolved before the controller is instantiated.
	   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
	   *   and the values of the resolved promises are injected into any controllers that reference them.
	   *   If any  of the promises are rejected the $stateChangeError event is fired.
	   *
	   *   The map object is:
	   *   
	   *   - key - {string}: name of dependency to be injected into controller
	   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
	   *     it is injected and return value it treated as dependency. If result is a promise, it is 
	   *     resolved before its value is injected into controller.
	   *
	   * <pre>resolve: {
	   *     myResolve1:
	   *       function($http, $stateParams) {
	   *         return $http.get("/api/foos/"+stateParams.fooID);
	   *       }
	   *     }</pre>
	   *
	   * @param {string=} stateConfig.url
	   * <a id='url'></a>
	   *
	   *   A url fragment with optional parameters. When a state is navigated or
	   *   transitioned to, the `$stateParams` service will be populated with any 
	   *   parameters that were passed.
	   *
	   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
	   *   more details on acceptable patterns )
	   *
	   * examples:
	   * <pre>url: "/home"
	   * url: "/users/:userid"
	   * url: "/books/{bookid:[a-zA-Z_-]}"
	   * url: "/books/{categoryid:int}"
	   * url: "/books/{publishername:string}/{categoryid:int}"
	   * url: "/messages?before&after"
	   * url: "/messages?{before:date}&{after:date}"
	   * url: "/messages/:mailboxid?{before:date}&{after:date}"
	   * </pre>
	   *
	   * @param {object=} stateConfig.views
	   * <a id='views'></a>
	   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
	   * manually/explicitly.
	   *
	   * Examples:
	   *
	   * Targets three named `ui-view`s in the parent state's template
	   * <pre>views: {
	   *     header: {
	   *       controller: "headerCtrl",
	   *       templateUrl: "header.html"
	   *     }, body: {
	   *       controller: "bodyCtrl",
	   *       templateUrl: "body.html"
	   *     }, footer: {
	   *       controller: "footCtrl",
	   *       templateUrl: "footer.html"
	   *     }
	   *   }</pre>
	   *
	   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
	   * <pre>views: {
	   *     'header@top': {
	   *       controller: "msgHeaderCtrl",
	   *       templateUrl: "msgHeader.html"
	   *     }, 'body': {
	   *       controller: "messagesCtrl",
	   *       templateUrl: "messages.html"
	   *     }
	   *   }</pre>
	   *
	   * @param {boolean=} [stateConfig.abstract=false]
	   * <a id='abstract'></a>
	   * An abstract state will never be directly activated,
	   *   but can provide inherited properties to its common children states.
	   * <pre>abstract: true</pre>
	   *
	   * @param {function=} stateConfig.onEnter
	   * <a id='onEnter'></a>
	   *
	   * Callback function for when a state is entered. Good way
	   *   to trigger an action or dispatch an event, such as opening a dialog.
	   * If minifying your scripts, make sure to explicitly annotate this function,
	   * because it won't be automatically annotated by your build tools.
	   *
	   * <pre>onEnter: function(MyService, $stateParams) {
	   *     MyService.foo($stateParams.myParam);
	   * }</pre>
	   *
	   * @param {function=} stateConfig.onExit
	   * <a id='onExit'></a>
	   *
	   * Callback function for when a state is exited. Good way to
	   *   trigger an action or dispatch an event, such as opening a dialog.
	   * If minifying your scripts, make sure to explicitly annotate this function,
	   * because it won't be automatically annotated by your build tools.
	   *
	   * <pre>onExit: function(MyService, $stateParams) {
	   *     MyService.cleanup($stateParams.myParam);
	   * }</pre>
	   *
	   * @param {boolean=} [stateConfig.reloadOnSearch=true]
	   * <a id='reloadOnSearch'></a>
	   *
	   * If `false`, will not retrigger the same state
	   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
	   *   Useful for when you'd like to modify $location.search() without triggering a reload.
	   * <pre>reloadOnSearch: false</pre>
	   *
	   * @param {object=} stateConfig.data
	   * <a id='data'></a>
	   *
	   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
	   *   prototypally inherited.  In other words, adding a data property to a state adds it to
	   *   the entire subtree via prototypal inheritance.
	   *
	   * <pre>data: {
	   *     requiredRole: 'foo'
	   * } </pre>
	   *
	   * @param {object=} stateConfig.params
	   * <a id='params'></a>
	   *
	   * A map which optionally configures parameters declared in the `url`, or
	   *   defines additional non-url parameters.  For each parameter being
	   *   configured, add a configuration object keyed to the name of the parameter.
	   *
	   *   Each parameter configuration object may contain the following properties:
	   *
	   *   - ** value ** - {object|function=}: specifies the default value for this
	   *     parameter.  This implicitly sets this parameter as optional.
	   *
	   *     When UI-Router routes to a state and no value is
	   *     specified for this parameter in the URL or transition, the
	   *     default value will be used instead.  If `value` is a function,
	   *     it will be injected and invoked, and the return value used.
	   *
	   *     *Note*: `undefined` is treated as "no default value" while `null`
	   *     is treated as "the default value is `null`".
	   *
	   *     *Shorthand*: If you only need to configure the default value of the
	   *     parameter, you may use a shorthand syntax.   In the **`params`**
	   *     map, instead mapping the param name to a full parameter configuration
	   *     object, simply set map it to the default parameter value, e.g.:
	   *
	   * <pre>// define a parameter's default value
	   * params: {
	   *     param1: { value: "defaultValue" }
	   * }
	   * // shorthand default values
	   * params: {
	   *     param1: "defaultValue",
	   *     param2: "param2Default"
	   * }</pre>
	   *
	   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
	   *     treated as an array of values.  If you specified a Type, the value will be
	   *     treated as an array of the specified Type.  Note: query parameter values
	   *     default to a special `"auto"` mode.
	   *
	   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
	   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
	   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
	   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
	   *     value (e.g.: `{ foo: '1' }`).
	   *
	   * <pre>params: {
	   *     param1: { array: true }
	   * }</pre>
	   *
	   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
	   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
	   *     configured default squash policy.
	   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
	   *
	   *   There are three squash settings:
	   *
	   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
	   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
	   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
	   *       This can allow for cleaner looking URLs.
	   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
	   *
	   * <pre>params: {
	   *     param1: {
	   *       value: "defaultId",
	   *       squash: true
	   * } }
	   * // squash "defaultValue" to "~"
	   * params: {
	   *     param1: {
	   *       value: "defaultValue",
	   *       squash: "~"
	   * } }
	   * </pre>
	   *
	   *
	   * @example
	   * <pre>
	   * // Some state name examples
	   *
	   * // stateName can be a single top-level name (must be unique).
	   * $stateProvider.state("home", {});
	   *
	   * // Or it can be a nested state name. This state is a child of the
	   * // above "home" state.
	   * $stateProvider.state("home.newest", {});
	   *
	   * // Nest states as deeply as needed.
	   * $stateProvider.state("home.newest.abc.xyz.inception", {});
	   *
	   * // state() returns $stateProvider, so you can chain state declarations.
	   * $stateProvider
	   *   .state("home", {})
	   *   .state("about", {})
	   *   .state("contacts", {});
	   * </pre>
	   *
	   */
	  this.state = state;
	  function state(name, definition) {
	    /*jshint validthis: true */
	    if (isObject(name)) definition = name;
	    else definition.name = name;
	    registerState(definition);
	    return this;
	  }

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$state
	   *
	   * @requires $rootScope
	   * @requires $q
	   * @requires ui.router.state.$view
	   * @requires $injector
	   * @requires ui.router.util.$resolve
	   * @requires ui.router.state.$stateParams
	   * @requires ui.router.router.$urlRouter
	   *
	   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
	   * you'd like to test against the current active state.
	   * @property {object} current A reference to the state's config object. However 
	   * you passed it in. Useful for accessing custom data.
	   * @property {object} transition Currently pending transition. A promise that'll 
	   * resolve or reject.
	   *
	   * @description
	   * `$state` service is responsible for representing states as well as transitioning
	   * between them. It also provides interfaces to ask for current state or even states
	   * you're coming from.
	   */
	  this.$get = $get;
	  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
	  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

	    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
	    var TransitionPrevented = $q.reject(new Error('transition prevented'));
	    var TransitionAborted = $q.reject(new Error('transition aborted'));
	    var TransitionFailed = $q.reject(new Error('transition failed'));

	    // Handles the case where a state which is the target of a transition is not found, and the user
	    // can optionally retry or defer the transition
	    function handleRedirect(redirect, state, params, options) {
	      /**
	       * @ngdoc event
	       * @name ui.router.state.$state#$stateNotFound
	       * @eventOf ui.router.state.$state
	       * @eventType broadcast on root scope
	       * @description
	       * Fired when a requested state **cannot be found** using the provided state name during transition.
	       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
	       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
	       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
	       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
	       *
	       * @param {Object} event Event object.
	       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
	       * @param {State} fromState Current state object.
	       * @param {Object} fromParams Current state params.
	       *
	       * @example
	       *
	       * <pre>
	       * // somewhere, assume lazy.state has not been defined
	       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
	       *
	       * // somewhere else
	       * $scope.$on('$stateNotFound',
	       * function(event, unfoundState, fromState, fromParams){
	       *     console.log(unfoundState.to); // "lazy.state"
	       *     console.log(unfoundState.toParams); // {a:1, b:2}
	       *     console.log(unfoundState.options); // {inherit:false} + default options
	       * })
	       * </pre>
	       */
	      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

	      if (evt.defaultPrevented) {
	        $urlRouter.update();
	        return TransitionAborted;
	      }

	      if (!evt.retry) {
	        return null;
	      }

	      // Allow the handler to return a promise to defer state lookup retry
	      if (options.$retry) {
	        $urlRouter.update();
	        return TransitionFailed;
	      }
	      var retryTransition = $state.transition = $q.when(evt.retry);

	      retryTransition.then(function() {
	        if (retryTransition !== $state.transition) return TransitionSuperseded;
	        redirect.options.$retry = true;
	        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
	      }, function() {
	        return TransitionAborted;
	      });
	      $urlRouter.update();

	      return retryTransition;
	    }

	    root.locals = { resolve: null, globals: { $stateParams: {} } };

	    $state = {
	      params: {},
	      current: root.self,
	      $current: root,
	      transition: null
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#reload
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A method that force reloads the current state. All resolves are re-resolved,
	     * controllers reinstantiated, and events re-fired.
	     *
	     * @example
	     * <pre>
	     * var app angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     $state.reload();
	     *   }
	     * });
	     * </pre>
	     *
	     * `reload()` is just an alias for:
	     * <pre>
	     * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
	     * </pre>
	     *
	     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
	     * @example
	     * <pre>
	     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
	     * //and current state is 'contacts.detail.item'
	     * var app angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     //will reload 'contact.detail' and 'contact.detail.item' states
	     *     $state.reload('contact.detail');
	     *   }
	     * });
	     * </pre>
	     *
	     * `reload()` is just an alias for:
	     * <pre>
	     * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
	     * </pre>

	     * @returns {promise} A promise representing the state of the new transition. See
	     * {@link ui.router.state.$state#methods_go $state.go}.
	     */
	    $state.reload = function reload(state) {
	      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#go
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Convenience method for transitioning to a new state. `$state.go` calls 
	     * `$state.transitionTo` internally but automatically sets options to 
	     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
	     * This allows you to easily use an absolute or relative to path and specify 
	     * only the parameters you'd like to update (while letting unspecified parameters 
	     * inherit from the currently active ancestor states).
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.go('contact.detail');
	     *   };
	     * });
	     * </pre>
	     * <img src='../ngdoc_assets/StateGoExamples.png'/>
	     *
	     * @param {string} to Absolute state name or relative state path. Some examples:
	     *
	     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
	     * - `$state.go('^')` - will go to a parent state
	     * - `$state.go('^.sibling')` - will go to a sibling state
	     * - `$state.go('.child.grandchild')` - will go to grandchild state
	     *
	     * @param {object=} params A map of the parameters that will be sent to the state, 
	     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
	     * defined parameters. Only parameters specified in the state definition can be overridden, new 
	     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
	     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
	     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
	     * will get you all current parameters, etc.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
	     *    have changed.  It will reload the resolves and views of the current state and parent states.
	     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
	     *    the transition reloads the resolves and views for that matched state, and all its children states.
	     *
	     * @returns {promise} A promise representing the state of the new transition.
	     *
	     * Possible success values:
	     *
	     * - $state.current
	     *
	     * <br/>Possible rejection values:
	     *
	     * - 'transition superseded' - when a newer transition has been started after this one
	     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
	     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
	     *   when a `$stateNotFound` `event.retry` promise errors.
	     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
	     * - *resolve error* - when an error has occurred with a `resolve`
	     *
	     */
	    $state.go = function go(to, params, options) {
	      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#transitionTo
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
	     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.transitionTo('contact.detail');
	     *   };
	     * });
	     * </pre>
	     *
	     * @param {string} to State name.
	     * @param {object=} toParams A map of the parameters that will be sent to the state,
	     * will populate $stateParams.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
	     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
	     *    use this when you want to force a reload when *everything* is the same, including search params.
	     *    if String, then will reload the state with the name given in reload, and any children.
	     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
	     *
	     * @returns {promise} A promise representing the state of the new transition. See
	     * {@link ui.router.state.$state#methods_go $state.go}.
	     */
	    $state.transitionTo = function transitionTo(to, toParams, options) {
	      toParams = toParams || {};
	      options = extend({
	        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
	      }, options || {});

	      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
	      var evt, toState = findState(to, options.relative);

	      // Store the hash param for later (since it will be stripped out by various methods)
	      var hash = toParams['#'];

	      if (!isDefined(toState)) {
	        var redirect = { to: to, toParams: toParams, options: options };
	        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

	        if (redirectResult) {
	          return redirectResult;
	        }

	        // Always retry once if the $stateNotFound was not prevented
	        // (handles either redirect changed or state lazy-definition)
	        to = redirect.to;
	        toParams = redirect.toParams;
	        options = redirect.options;
	        toState = findState(to, options.relative);

	        if (!isDefined(toState)) {
	          if (!options.relative) throw new Error("No such state '" + to + "'");
	          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
	        }
	      }
	      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
	      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
	      if (!toState.params.$$validates(toParams)) return TransitionFailed;

	      toParams = toState.params.$$values(toParams);
	      to = toState;

	      var toPath = to.path;

	      // Starting from the root of the path, keep all levels that haven't changed
	      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

	      if (!options.reload) {
	        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
	          locals = toLocals[keep] = state.locals;
	          keep++;
	          state = toPath[keep];
	        }
	      } else if (isString(options.reload) || isObject(options.reload)) {
	        if (isObject(options.reload) && !options.reload.name) {
	          throw new Error('Invalid reload state object');
	        }
	        
	        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
	        if (options.reload && !reloadState) {
	          throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
	        }

	        while (state && state === fromPath[keep] && state !== reloadState) {
	          locals = toLocals[keep] = state.locals;
	          keep++;
	          state = toPath[keep];
	        }
	      }

	      // If we're going to the same state and all locals are kept, we've got nothing to do.
	      // But clear 'transition', as we still want to cancel any other pending transitions.
	      // TODO: We may not want to bump 'transition' if we're called from a location change
	      // that we've initiated ourselves, because we might accidentally abort a legitimate
	      // transition initiated from code?
	      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
	        if (hash) toParams['#'] = hash;
	        $state.params = toParams;
	        copy($state.params, $stateParams);
	        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
	        if (options.location && to.navigable && to.navigable.url) {
	          $urlRouter.push(to.navigable.url, toParams, {
	            $$avoidResync: true, replace: options.location === 'replace'
	          });
	          $urlRouter.update(true);
	        }
	        $state.transition = null;
	        return $q.when($state.current);
	      }

	      // Filter parameters before we pass them to event handlers etc.
	      toParams = filterByKeys(to.params.$$keys(), toParams || {});
	      
	      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
	      if (hash) toParams['#'] = hash;
	      
	      // Broadcast start event and cancel the transition if requested
	      if (options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeStart
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when the state transition **begins**. You can use `event.preventDefault()`
	         * to prevent the transition from happening and then the transition promise will be
	         * rejected with a `'transition prevented'` value.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         *
	         * @example
	         *
	         * <pre>
	         * $rootScope.$on('$stateChangeStart',
	         * function(event, toState, toParams, fromState, fromParams){
	         *     event.preventDefault();
	         *     // transitionTo() promise will be rejected with
	         *     // a 'transition prevented' error
	         * })
	         * </pre>
	         */
	        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
	          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
	          //Don't update and resync url if there's been a new transition started. see issue #2238, #600
	          if ($state.transition == null) $urlRouter.update();
	          return TransitionPrevented;
	        }
	      }

	      // Resolve locals for the remaining states, but don't update any global state just
	      // yet -- if anything fails to resolve the current state needs to remain untouched.
	      // We also set up an inheritance chain for the locals here. This allows the view directive
	      // to quickly look up the correct definition for each view in the current state. Even
	      // though we create the locals object itself outside resolveState(), it is initially
	      // empty and gets filled asynchronously. We need to keep track of the promise for the
	      // (fully resolved) current locals, and pass this down the chain.
	      var resolved = $q.when(locals);

	      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
	        locals = toLocals[l] = inherit(locals);
	        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
	      }

	      // Once everything is resolved, we are ready to perform the actual transition
	      // and return a promise for the new state. We also keep track of what the
	      // current promise is, so that we can detect overlapping transitions and
	      // keep only the outcome of the last transition.
	      var transition = $state.transition = resolved.then(function () {
	        var l, entering, exiting;

	        if ($state.transition !== transition) return TransitionSuperseded;

	        // Exit 'from' states not kept
	        for (l = fromPath.length - 1; l >= keep; l--) {
	          exiting = fromPath[l];
	          if (exiting.self.onExit) {
	            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
	          }
	          exiting.locals = null;
	        }

	        // Enter 'to' states not kept
	        for (l = keep; l < toPath.length; l++) {
	          entering = toPath[l];
	          entering.locals = toLocals[l];
	          if (entering.self.onEnter) {
	            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
	          }
	        }

	        // Run it again, to catch any transitions in callbacks
	        if ($state.transition !== transition) return TransitionSuperseded;

	        // Update globals in $state
	        $state.$current = to;
	        $state.current = to.self;
	        $state.params = toParams;
	        copy($state.params, $stateParams);
	        $state.transition = null;

	        if (options.location && to.navigable) {
	          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
	            $$avoidResync: true, replace: options.location === 'replace'
	          });
	        }

	        if (options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeSuccess
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired once the state transition is **complete**.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         */
	          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
	        }
	        $urlRouter.update(true);

	        return $state.current;
	      }).then(null, function (error) {
	        if ($state.transition !== transition) return TransitionSuperseded;

	        $state.transition = null;
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeError
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when an **error occurs** during transition. It's important to note that if you
	         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
	         * they will not throw traditionally. You must listen for this $stateChangeError event to
	         * catch **ALL** errors.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         * @param {Error} error The resolve error object.
	         */
	        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

	        if (!evt.defaultPrevented) {
	            $urlRouter.update();
	        }

	        return $q.reject(error);
	      });

	      return transition;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#is
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
	     * but only checks for the full state name. If params is supplied then it will be
	     * tested for strict equality against the current active params object, so all params
	     * must match with none missing and no extras.
	     *
	     * @example
	     * <pre>
	     * $state.$current.name = 'contacts.details.item';
	     *
	     * // absolute name
	     * $state.is('contact.details.item'); // returns true
	     * $state.is(contactDetailItemStateObject); // returns true
	     *
	     * // relative name (. and ^), typically from a template
	     * // E.g. from the 'contacts.details' template
	     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
	     * </pre>
	     *
	     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
	     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
	     * to test against the current active state.
	     * @param {object=} options An options object.  The options are:
	     *
	     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
	     * test relative to `options.relative` state (or name).
	     *
	     * @returns {boolean} Returns true if it is the state.
	     */
	    $state.is = function is(stateOrName, params, options) {
	      options = extend({ relative: $state.$current }, options || {});
	      var state = findState(stateOrName, options.relative);

	      if (!isDefined(state)) { return undefined; }
	      if ($state.$current !== state) { return false; }
	      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#includes
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A method to determine if the current active state is equal to or is the child of the
	     * state stateName. If any params are passed then they will be tested for a match as well.
	     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
	     *
	     * @example
	     * Partial and relative names
	     * <pre>
	     * $state.$current.name = 'contacts.details.item';
	     *
	     * // Using partial names
	     * $state.includes("contacts"); // returns true
	     * $state.includes("contacts.details"); // returns true
	     * $state.includes("contacts.details.item"); // returns true
	     * $state.includes("contacts.list"); // returns false
	     * $state.includes("about"); // returns false
	     *
	     * // Using relative names (. and ^), typically from a template
	     * // E.g. from the 'contacts.details' template
	     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
	     * </pre>
	     *
	     * Basic globbing patterns
	     * <pre>
	     * $state.$current.name = 'contacts.details.item.url';
	     *
	     * $state.includes("*.details.*.*"); // returns true
	     * $state.includes("*.details.**"); // returns true
	     * $state.includes("**.item.**"); // returns true
	     * $state.includes("*.details.item.url"); // returns true
	     * $state.includes("*.details.*.url"); // returns true
	     * $state.includes("*.details.*"); // returns false
	     * $state.includes("item.**"); // returns false
	     * </pre>
	     *
	     * @param {string} stateOrName A partial name, relative name, or glob pattern
	     * to be searched for within the current state name.
	     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
	     * that you'd like to test against the current active state.
	     * @param {object=} options An options object.  The options are:
	     *
	     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
	     * .includes will test relative to `options.relative` state (or name).
	     *
	     * @returns {boolean} Returns true if it does include the state
	     */
	    $state.includes = function includes(stateOrName, params, options) {
	      options = extend({ relative: $state.$current }, options || {});
	      if (isString(stateOrName) && isGlob(stateOrName)) {
	        if (!doesStateMatchGlob(stateOrName)) {
	          return false;
	        }
	        stateOrName = $state.$current.name;
	      }

	      var state = findState(stateOrName, options.relative);
	      if (!isDefined(state)) { return undefined; }
	      if (!isDefined($state.$current.includes[state.name])) { return false; }
	      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
	    };


	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#href
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A url generation method that returns the compiled url for the given state populated with the given params.
	     *
	     * @example
	     * <pre>
	     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
	     * </pre>
	     *
	     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
	     * @param {object=} params An object of parameter values to fill the state's required parameters.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
	     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
	     *    ancestor with a valid url).
	     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	     * 
	     * @returns {string} compiled state url
	     */
	    $state.href = function href(stateOrName, params, options) {
	      options = extend({
	        lossy:    true,
	        inherit:  true,
	        absolute: false,
	        relative: $state.$current
	      }, options || {});

	      var state = findState(stateOrName, options.relative);

	      if (!isDefined(state)) return null;
	      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
	      
	      var nav = (state && options.lossy) ? state.navigable : state;

	      if (!nav || nav.url === undefined || nav.url === null) {
	        return null;
	      }
	      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
	        absolute: options.absolute
	      });
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#get
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Returns the state configuration object for any specific state or all states.
	     *
	     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
	     * the requested state. If not provided, returns an array of ALL state configs.
	     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
	     * @returns {Object|Array} State configuration object or array of all objects.
	     */
	    $state.get = function (stateOrName, context) {
	      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
	      var state = findState(stateOrName, context || $state.$current);
	      return (state && state.self) ? state.self : null;
	    };

	    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
	      // Make a restricted $stateParams with only the parameters that apply to this state if
	      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
	      // we also need $stateParams to be available for any $injector calls we make during the
	      // dependency resolution process.
	      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
	      var locals = { $stateParams: $stateParams };

	      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
	      // We're also including $stateParams in this; that way the parameters are restricted
	      // to the set that should be visible to the state, and are independent of when we update
	      // the global $state and $stateParams values.
	      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
	      var promises = [dst.resolve.then(function (globals) {
	        dst.globals = globals;
	      })];
	      if (inherited) promises.push(inherited);

	      function resolveViews() {
	        var viewsPromises = [];

	        // Resolve template and dependencies for all views.
	        forEach(state.views, function (view, name) {
	          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
	          injectables.$template = [ function () {
	            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
	          }];

	          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
	            // References to the controller (only instantiated at link time)
	            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
	              var injectLocals = angular.extend({}, injectables, dst.globals);
	              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
	            } else {
	              result.$$controller = view.controller;
	            }
	            // Provide access to the state itself for internal use
	            result.$$state = state;
	            result.$$controllerAs = view.controllerAs;
	            result.$$resolveAs = view.resolveAs;
	            dst[name] = result;
	          }));
	        });

	        return $q.all(viewsPromises).then(function(){
	          return dst.globals;
	        });
	      }

	      // Wait for all the promises and then return the activation object
	      return $q.all(promises).then(resolveViews).then(function (values) {
	        return dst;
	      });
	    }

	    return $state;
	  }

	  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
	    // Return true if there are no differences in non-search (path/object) params, false if there are differences
	    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
	      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
	      function notSearchParam(key) {
	        return fromAndToState.params[key].location != "search";
	      }
	      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
	      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
	      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
	      return nonQueryParamSet.$$equals(fromParams, toParams);
	    }

	    // If reload was not explicitly requested
	    // and we're transitioning to the same state we're already in
	    // and    the locals didn't change
	    //     or they changed in a way that doesn't merit reloading
	    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
	    // Then return true.
	    if (!options.reload && to === from &&
	      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
	      return true;
	    }
	  }
	}

	angular.module('ui.router.state')
	  .factory('$stateParams', function () { return {}; })
	  .constant("$state.runtime", { autoinject: true })
	  .provider('$state', $StateProvider)
	  // Inject $state to initialize when entering runtime. #2574
	  .run(['$injector', function ($injector) {
	    // Allow tests (stateSpec.js) to turn this off by defining this constant
	    if ($injector.get("$state.runtime").autoinject) {
	      $injector.get('$state');
	    }
	  }]);


	$ViewProvider.$inject = [];
	function $ViewProvider() {

	  this.$get = $get;
	  /**
	   * @ngdoc object
	   * @name ui.router.state.$view
	   *
	   * @requires ui.router.util.$templateFactory
	   * @requires $rootScope
	   *
	   * @description
	   *
	   */
	  $get.$inject = ['$rootScope', '$templateFactory'];
	  function $get(   $rootScope,   $templateFactory) {
	    return {
	      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$view#load
	       * @methodOf ui.router.state.$view
	       *
	       * @description
	       *
	       * @param {string} name name
	       * @param {object} options option object.
	       */
	      load: function load(name, options) {
	        var result, defaults = {
	          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
	        };
	        options = extend(defaults, options);

	        if (options.view) {
	          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
	        }
	        return result;
	      }
	    };
	  }
	}

	angular.module('ui.router.state').provider('$view', $ViewProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$uiViewScrollProvider
	 *
	 * @description
	 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
	 */
	function $ViewScrollProvider() {

	  var useAnchorScroll = false;

	  /**
	   * @ngdoc function
	   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
	   * @methodOf ui.router.state.$uiViewScrollProvider
	   *
	   * @description
	   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
	   * scrolling based on the url anchor.
	   */
	  this.useAnchorScroll = function () {
	    useAnchorScroll = true;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$uiViewScroll
	   *
	   * @requires $anchorScroll
	   * @requires $timeout
	   *
	   * @description
	   * When called with a jqLite element, it scrolls the element into view (after a
	   * `$timeout` so the DOM has time to refresh).
	   *
	   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
	   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
	   */
	  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
	    if (useAnchorScroll) {
	      return $anchorScroll;
	    }

	    return function ($element) {
	      return $timeout(function () {
	        $element[0].scrollIntoView();
	      }, 0, false);
	    };
	  }];
	}

	angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-view
	 *
	 * @requires ui.router.state.$state
	 * @requires $compile
	 * @requires $controller
	 * @requires $injector
	 * @requires ui.router.state.$uiViewScroll
	 * @requires $document
	 *
	 * @restrict ECA
	 *
	 * @description
	 * The ui-view directive tells $state where to place your templates.
	 *
	 * @param {string=} name A view name. The name should be unique amongst the other views in the
	 * same state. You can have views of the same name that live in different states.
	 *
	 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
	 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
	 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
	 * scroll ui-view elements into view when they are populated during a state activation.
	 *
	 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
	 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
	 *
	 * @param {string=} onload Expression to evaluate whenever the view updates.
	 *
	 * @example
	 * A view can be unnamed or named.
	 * <pre>
	 * <!-- Unnamed -->
	 * <div ui-view></div>
	 *
	 * <!-- Named -->
	 * <div ui-view="viewName"></div>
	 * </pre>
	 *
	 * You can only have one unnamed view within any template (or root html). If you are only using a
	 * single view and it is unnamed then you can populate it like so:
	 * <pre>
	 * <div ui-view></div>
	 * $stateProvider.state("home", {
	 *   template: "<h1>HELLO!</h1>"
	 * })
	 * </pre>
	 *
	 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}
	 * config property, by name, in this case an empty name:
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * But typically you'll only use the views property if you name your view or have more than one view
	 * in the same template. There's not really a compelling reason to name a view if its the only one,
	 * but you could if you wanted, like so:
	 * <pre>
	 * <div ui-view="main"></div>
	 * </pre>
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "main": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * Really though, you'll use views to set up multiple views:
	 * <pre>
	 * <div ui-view></div>
	 * <div ui-view="chart"></div>
	 * <div ui-view="data"></div>
	 * </pre>
	 *
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     },
	 *     "chart": {
	 *       template: "<chart_thing/>"
	 *     },
	 *     "data": {
	 *       template: "<data_thing/>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * Examples for `autoscroll`:
	 *
	 * <pre>
	 * <!-- If autoscroll present with no expression,
	 *      then scroll ui-view into view -->
	 * <ui-view autoscroll/>
	 *
	 * <!-- If autoscroll present with valid expression,
	 *      then scroll ui-view into view if expression evaluates to true -->
	 * <ui-view autoscroll='true'/>
	 * <ui-view autoscroll='false'/>
	 * <ui-view autoscroll='scopeVariable'/>
	 * </pre>
	 *
	 * Resolve data:
	 *
	 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
	 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
	 *
	 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
	 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
	 * depends on `$resolve` data.
	 *
	 * Example usage of $resolve in a view template
	 * <pre>
	 * $stateProvider.state('home', {
	 *   template: '<my-component user="$resolve.user"></my-component>',
	 *   resolve: {
	 *     user: function(UserService) { return UserService.fetchUser(); }
	 *   }
	 * });
	 * </pre>
	 */
	$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];
	function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate,   $q) {

	  function getService() {
	    return ($injector.has) ? function(service) {
	      return $injector.has(service) ? $injector.get(service) : null;
	    } : function(service) {
	      try {
	        return $injector.get(service);
	      } catch (e) {
	        return null;
	      }
	    };
	  }

	  var service = getService(),
	      $animator = service('$animator'),
	      $animate = service('$animate');

	  // Returns a set of DOM manipulation functions based on which Angular version
	  // it should use
	  function getRenderer(attrs, scope) {
	    var statics = function() {
	      return {
	        enter: function (element, target, cb) { target.after(element); cb(); },
	        leave: function (element, cb) { element.remove(); cb(); }
	      };
	    };

	    if ($animate) {
	      return {
	        enter: function(element, target, cb) {
	          if (angular.version.minor > 2) {
	            $animate.enter(element, null, target).then(cb);
	          } else {
	            $animate.enter(element, null, target, cb);
	          }
	        },
	        leave: function(element, cb) {
	          if (angular.version.minor > 2) {
	            $animate.leave(element).then(cb);
	          } else {
	            $animate.leave(element, cb);
	          }
	        }
	      };
	    }

	    if ($animator) {
	      var animate = $animator && $animator(scope, attrs);

	      return {
	        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
	        leave: function(element, cb) { animate.leave(element); cb(); }
	      };
	    }

	    return statics();
	  }

	  var directive = {
	    restrict: 'ECA',
	    terminal: true,
	    priority: 400,
	    transclude: 'element',
	    compile: function (tElement, tAttrs, $transclude) {
	      return function (scope, $element, attrs) {
	        var previousEl, currentEl, currentScope, latestLocals,
	            onloadExp     = attrs.onload || '',
	            autoScrollExp = attrs.autoscroll,
	            renderer      = getRenderer(attrs, scope),
	            inherited     = $element.inheritedData('$uiView');

	        scope.$on('$stateChangeSuccess', function() {
	          updateView(false);
	        });

	        updateView(true);

	        function cleanupLastView() {
	          if (previousEl) {
	            previousEl.remove();
	            previousEl = null;
	          }

	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }

	          if (currentEl) {
	            var $uiViewData = currentEl.data('$uiViewAnim');
	            renderer.leave(currentEl, function() {
	              $uiViewData.$$animLeave.resolve();
	              previousEl = null;
	            });

	            previousEl = currentEl;
	            currentEl = null;
	          }
	        }

	        function updateView(firstTime) {
	          var newScope,
	              name            = getUiViewName(scope, attrs, $element, $interpolate),
	              previousLocals  = name && $state.$current && $state.$current.locals[name];

	          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
	          newScope = scope.$new();
	          latestLocals = $state.$current.locals[name];

	          /**
	           * @ngdoc event
	           * @name ui.router.state.directive:ui-view#$viewContentLoading
	           * @eventOf ui.router.state.directive:ui-view
	           * @eventType emits on ui-view directive scope
	           * @description
	           *
	           * Fired once the view **begins loading**, *before* the DOM is rendered.
	           *
	           * @param {Object} event Event object.
	           * @param {string} viewName Name of the view.
	           */
	          newScope.$emit('$viewContentLoading', name);

	          var clone = $transclude(newScope, function(clone) {
	            var animEnter = $q.defer(), animLeave = $q.defer();
	            var viewAnimData = {
	              $animEnter: animEnter.promise,
	              $animLeave: animLeave.promise,
	              $$animLeave: animLeave
	            };

	            clone.data('$uiViewAnim', viewAnimData);
	            renderer.enter(clone, $element, function onUiViewEnter() {
	              animEnter.resolve();
	              if(currentScope) {
	                currentScope.$emit('$viewContentAnimationEnded');
	              }

	              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
	                $uiViewScroll(clone);
	              }
	            });
	            cleanupLastView();
	          });

	          currentEl = clone;
	          currentScope = newScope;
	          /**
	           * @ngdoc event
	           * @name ui.router.state.directive:ui-view#$viewContentLoaded
	           * @eventOf ui.router.state.directive:ui-view
	           * @eventType emits on ui-view directive scope
	           * @description
	           * Fired once the view is **loaded**, *after* the DOM is rendered.
	           *
	           * @param {Object} event Event object.
	           * @param {string} viewName Name of the view.
	           */
	          currentScope.$emit('$viewContentLoaded', name);
	          currentScope.$eval(onloadExp);
	        }
	      };
	    }
	  };

	  return directive;
	}

	$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
	function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
	  return {
	    restrict: 'ECA',
	    priority: -400,
	    compile: function (tElement) {
	      var initial = tElement.html();
	      return function (scope, $element, attrs) {
	        var current = $state.$current,
	            name = getUiViewName(scope, attrs, $element, $interpolate),
	            locals  = current && current.locals[name];

	        if (! locals) {
	          return;
	        }

	        $element.data('$uiView', { name: name, state: locals.$$state });
	        $element.html(locals.$template ? locals.$template : initial);

	        var resolveData = angular.extend({}, locals);
	        scope[locals.$$resolveAs] = resolveData;

	        var link = $compile($element.contents());

	        if (locals.$$controller) {
	          locals.$scope = scope;
	          locals.$element = $element;
	          var controller = $controller(locals.$$controller, locals);
	          if (locals.$$controllerAs) {
	            scope[locals.$$controllerAs] = controller;
	            scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
	          }
	          if (isFunction(controller.$onInit)) controller.$onInit();
	          $element.data('$ngControllerController', controller);
	          $element.children().data('$ngControllerController', controller);
	        }

	        link(scope);
	      };
	    }
	  };
	}

	/**
	 * Shared ui-view code for both directives:
	 * Given scope, element, and its attributes, return the view's name
	 */
	function getUiViewName(scope, attrs, element, $interpolate) {
	  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
	  var uiViewCreatedBy = element.inheritedData('$uiView');
	  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : ''));
	}

	angular.module('ui.router.state').directive('uiView', $ViewDirective);
	angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

	function parseStateRef(ref, current) {
	  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
	  if (preparsed) ref = current + '(' + preparsed[1] + ')';
	  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
	  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
	  return { state: parsed[1], paramExpr: parsed[3] || null };
	}

	function stateContext(el) {
	  var stateData = el.parent().inheritedData('$uiView');

	  if (stateData && stateData.state && stateData.state.name) {
	    return stateData.state;
	  }
	}

	function getTypeInfo(el) {
	  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
	  var isForm = el[0].nodeName === "FORM";

	  return {
	    attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
	    isAnchor: el.prop("tagName").toUpperCase() === "A",
	    clickable: !isForm
	  };
	}

	function clickHook(el, $state, $timeout, type, current) {
	  return function(e) {
	    var button = e.which || e.button, target = current();

	    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
	      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
	      var transition = $timeout(function() {
	        $state.go(target.state, target.params, target.options);
	      });
	      e.preventDefault();

	      // if the state has no URL, ignore one preventDefault from the <a> directive.
	      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;

	      e.preventDefault = function() {
	        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
	      };
	    }
	  };
	}

	function defaultOpts(el, $state) {
	  return { relative: stateContext(el) || $state.$current, inherit: true };
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref
	 *
	 * @requires ui.router.state.$state
	 * @requires $timeout
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
	 * URL, the directive will automatically generate & update the `href` attribute via
	 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
	 * the link will trigger a state transition with optional parameters.
	 *
	 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
	 * handled natively by the browser.
	 *
	 * You can also use relative state paths within ui-sref, just like the relative
	 * paths passed to `$state.go()`. You just need to be aware that the path is relative
	 * to the state that the link lives in, in other words the state that loaded the
	 * template containing the link.
	 *
	 * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
	 * and `reload`.
	 *
	 * @example
	 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
	 * following template:
	 * <pre>
	 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
	 *
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
	 *     </li>
	 * </ul>
	 * </pre>
	 *
	 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
	 * <pre>
	 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
	 *
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
	 *     </li>
	 * </ul>
	 *
	 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
	 * </pre>
	 *
	 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	 */
	$StateRefDirective.$inject = ['$state', '$timeout'];
	function $StateRefDirective($state, $timeout) {
	  return {
	    restrict: 'A',
	    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	    link: function(scope, element, attrs, uiSrefActive) {
	      var ref    = parseStateRef(attrs.uiSref, $state.current.name);
	      var def    = { state: ref.state, href: null, params: null };
	      var type   = getTypeInfo(element);
	      var active = uiSrefActive[1] || uiSrefActive[0];
	      var unlinkInfoFn = null;
	      var hookFn;

	      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});

	      var update = function(val) {
	        if (val) def.params = angular.copy(val);
	        def.href = $state.href(ref.state, def.params, def.options);

	        if (unlinkInfoFn) unlinkInfoFn();
	        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
	        if (def.href !== null) attrs.$set(type.attr, def.href);
	      };

	      if (ref.paramExpr) {
	        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);
	        def.params = angular.copy(scope.$eval(ref.paramExpr));
	      }
	      update();

	      if (!type.clickable) return;
	      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });
	      element.bind("click", hookFn);
	      scope.$on('$destroy', function() {
	        element.unbind("click", hookFn);
	      });
	    }
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-state
	 *
	 * @requires ui.router.state.uiSref
	 *
	 * @restrict A
	 *
	 * @description
	 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
	 * params and override options.
	 *
	 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}
	 * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
	 */
	$StateRefDynamicDirective.$inject = ['$state', '$timeout'];
	function $StateRefDynamicDirective($state, $timeout) {
	  return {
	    restrict: 'A',
	    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	    link: function(scope, element, attrs, uiSrefActive) {
	      var type   = getTypeInfo(element);
	      var active = uiSrefActive[1] || uiSrefActive[0];
	      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
	      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';
	      var def    = { state: null, params: null, options: null, href: null };
	      var unlinkInfoFn = null;
	      var hookFn;

	      function runStateRefLink (group) {
	        def.state = group[0]; def.params = group[1]; def.options = group[2];
	        def.href = $state.href(def.state, def.params, def.options);

	        if (unlinkInfoFn) unlinkInfoFn();
	        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
	        if (def.href) attrs.$set(type.attr, def.href);
	      }

	      scope.$watch(watch, runStateRefLink, true);
	      runStateRefLink(scope.$eval(watch));

	      if (!type.clickable) return;
	      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });
	      element.bind("click", hookFn);
	      scope.$on('$destroy', function() {
	        element.unbind("click", hookFn);
	      });
	    }
	  };
	}


	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive working alongside ui-sref to add classes to an element when the
	 * related ui-sref directive's state is active, and removing them when it is inactive.
	 * The primary use-case is to simplify the special appearance of navigation menus
	 * relying on `ui-sref`, by having the "active" state's menu button appear different,
	 * distinguishing it from the inactive menu items.
	 *
	 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
	 * ui-sref-active found at the same level or above the ui-sref will be used.
	 *
	 * Will activate when the ui-sref's target state or any child state is active. If you
	 * need to activate only when the ui-sref target state is active and *not* any of
	 * it's children, then you will use
	 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
	 *
	 * @example
	 * Given the following template:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item">
	 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 *
	 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
	 * the resulting HTML will appear as (note the 'active' class):
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item active">
	 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * The class name is interpolated **once** during the directives link time (any further changes to the
	 * interpolated value are ignored).
	 *
	 * Multiple classes may be specified in a space-separated format:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active='class1 class2 class3'>
	 *     <a ui-sref="app.user">link</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * It is also possible to pass ui-sref-active an expression that evaluates
	 * to an object hash, whose keys represent active class names and whose
	 * values represent the respective state names/globs.
	 * ui-sref-active will match if the current active state **includes** any of
	 * the specified state names/globs, even the abstract ones.
	 *
	 * @Example
	 * Given the following template, with "admin" being an abstract state:
	 * <pre>
	 * <div ui-sref-active="{'active': 'admin.*'}">
	 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
	 * </div>
	 * </pre>
	 *
	 * When the current state is "admin.roles" the "active" class will be applied
	 * to both the <div> and <a> elements. It is important to note that the state
	 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
	 */

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active-eq
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
	 * when the exact target state used in the `ui-sref` is active; no child states.
	 *
	 */
	$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
	function $StateRefActiveDirective($state, $stateParams, $interpolate) {
	  return  {
	    restrict: "A",
	    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
	      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;

	      // There probably isn't much point in $observing this
	      // uiSrefActive and uiSrefActiveEq share the same directive object with some
	      // slight difference in logic routing
	      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);

	      try {
	        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
	      } catch (e) {
	        // Do nothing. uiSrefActive is not a valid expression.
	        // Fall back to using $interpolate below
	      }
	      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
	      if (isObject(uiSrefActive)) {
	        forEach(uiSrefActive, function(stateOrName, activeClass) {
	          if (isString(stateOrName)) {
	            var ref = parseStateRef(stateOrName, $state.current.name);
	            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
	          }
	        });
	      }

	      // Allow uiSref to communicate with uiSrefActive[Equals]
	      this.$$addStateInfo = function (newState, newParams) {
	        // we already got an explicit state provided by ui-sref-active, so we
	        // shadow the one that comes from ui-sref
	        if (isObject(uiSrefActive) && states.length > 0) {
	          return;
	        }
	        var deregister = addState(newState, newParams, uiSrefActive);
	        update();
	        return deregister;
	      };

	      $scope.$on('$stateChangeSuccess', update);

	      function addState(stateName, stateParams, activeClass) {
	        var state = $state.get(stateName, stateContext($element));
	        var stateHash = createStateHash(stateName, stateParams);

	        var stateInfo = {
	          state: state || { name: stateName },
	          params: stateParams,
	          hash: stateHash
	        };

	        states.push(stateInfo);
	        activeClasses[stateHash] = activeClass;

	        return function removeState() {
	          var idx = states.indexOf(stateInfo);
	          if (idx !== -1) states.splice(idx, 1);
	        };
	      }

	      /**
	       * @param {string} state
	       * @param {Object|string} [params]
	       * @return {string}
	       */
	      function createStateHash(state, params) {
	        if (!isString(state)) {
	          throw new Error('state should be a string');
	        }
	        if (isObject(params)) {
	          return state + toJson(params);
	        }
	        params = $scope.$eval(params);
	        if (isObject(params)) {
	          return state + toJson(params);
	        }
	        return state;
	      }

	      // Update route state
	      function update() {
	        for (var i = 0; i < states.length; i++) {
	          if (anyMatch(states[i].state, states[i].params)) {
	            addClass($element, activeClasses[states[i].hash]);
	          } else {
	            removeClass($element, activeClasses[states[i].hash]);
	          }

	          if (exactMatch(states[i].state, states[i].params)) {
	            addClass($element, activeEqClass);
	          } else {
	            removeClass($element, activeEqClass);
	          }
	        }
	      }

	      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
	      function removeClass(el, className) { el.removeClass(className); }
	      function anyMatch(state, params) { return $state.includes(state.name, params); }
	      function exactMatch(state, params) { return $state.is(state.name, params); }

	      update();
	    }]
	  };
	}

	angular.module('ui.router.state')
	  .directive('uiSref', $StateRefDirective)
	  .directive('uiSrefActive', $StateRefActiveDirective)
	  .directive('uiSrefActiveEq', $StateRefActiveDirective)
	  .directive('uiState', $StateRefDynamicDirective);

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:isState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
	 */
	$IsStateFilter.$inject = ['$state'];
	function $IsStateFilter($state) {
	  var isFilter = function (state, params) {
	    return $state.is(state, params);
	  };
	  isFilter.$stateful = true;
	  return isFilter;
	}

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:includedByState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
	 */
	$IncludedByStateFilter.$inject = ['$state'];
	function $IncludedByStateFilter($state) {
	  var includesFilter = function (state, params, options) {
	    return $state.includes(state, params, options);
	  };
	  includesFilter.$stateful = true;
	  return  includesFilter;
	}

	angular.module('ui.router.state')
	  .filter('isState', $IsStateFilter)
	  .filter('includedByState', $IncludedByStateFilter);
	})(window, window.angular);

/***/ },
/* 25 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.controllers.MainController';

	var app = angular.module(module.exports, []);

	app.controller('MainController', function ($scope, $state, translationService, currentUser) {
	    console.log("MainController");
	    console.log("currentUser:", currentUser);
	});

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _modal = __webpack_require__(27);

	var _modal2 = _interopRequireDefault(_modal);

	var _modalDetails = __webpack_require__(28);

	var _modalDetails2 = _interopRequireDefault(_modalDetails);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = 'app.controllers.RoutesController';

	var app = angular.module(module.exports, []);

	/*
		ModalFullRouteController
	*/
	app.controller('ModalFullRouteController', function ($scope, $timeout, wayPoints, singletonService) {
		console.log("Full route controller");
		$scope.googleMapsUrl = "https://maps.googleapis.com/maps/api/js?key=AIzaSyBLI-qaqPxlWNIkeekT31KZBPdrdkYnub4";
		$scope.render_map = false;

		// Waypoints of the map and the map settings
		var way_points = wayPoints.map(function (route) {
			return { location: { lat: route.lat, lng: route.lng }, stopover: true };
		});
		$scope.maps_options = {
			center: {
				latitude: wayPoints[0].lat,
				longitude: wayPoints[0].lng
			},
			travelMode: "WALKING",
			destination: wayPoints[way_points.length - 1].address,
			wayPoints: way_points.slice(1, way_points.length - 1)
		};

		// Do we already have the user current position ?
		if (!singletonService.getCurrentPosition().latitude) {
			// Get the current location of the user and wait for it before rendering the map
			var geoSuccess = function geoSuccess(position) {
				singletonService.setCurrentPosition(position.coords);

				$scope.origin = {
					'lat': position.coords.latitude,
					'lng': position.coords.longitude
				};

				$timeout(function () {
					$scope.render_map = true;
				}, 1000);
			};
			navigator.geolocation.getCurrentPosition(geoSuccess);
		} else {
			$scope.origin = {
				'lat': singletonService.getCurrentPosition().latitude,
				'lng': singletonService.getCurrentPosition().longitude
			};
			$timeout(function () {
				$scope.render_map = true;
			}, 1000);
		}
	});

	/*
		ModalRouteDetailController
	*/
	app.controller('ModalRouteDetailController', function ($scope, route, config, $uibModalInstance) {
		console.log("Modal Route Detail Controller");
		$scope.route = route;
		$scope.statuses = config.statuses;

		$scope.submit_route_detail = function (form) {
			$uibModalInstance.close($scope.lead);
		};

		$scope.cancel = function () {
			$uibModalInstance.dismiss(false);
		};
	});

	/*
		RoutesController
	*/
	app.controller('RoutesController', function ($scope, $state, $http, envService, routes, ModalService, $uibModal, toastr) {
		console.log("RoutesController : ", routes);
		$scope.routes = Array.isArray(routes) ? routes : routes.data;
		$scope.is_searching_routes = false;

		// ModalService.showModal({
		//   template: modalTemplate,
		//   controller: 'YesNoController'
		// }).then(function(modal) {
		//   // The modal object has the element built, if this is a bootstrap modal
		//   // you can call 'modal' to show it, if it's a custom modal just show or hide
		//   // it as you need to.
		//   modal.element.modal();
		//   modal.close.then(function(result) {
		//     $scope.message = result ? "You said Yes" : "You said No";
		//   });
		// });

		$scope.show_full_route = function () {
			var modalInstance = $uibModal.open({
				animation: true,
				template: _modal2.default,
				controller: 'ModalFullRouteController',
				size: "big",
				resolve: {
					wayPoints: function wayPoints() {
						return $scope.routes;
					}
				}
			});

			modalInstance.result.then(function () {});
		};

		$scope.generates_lead = function () {
			$scope.is_searching_routes = true;
			var term = new Date().getTime() % 2 == 0 ? "bars" : "restaurants";

			$http.get(envService.read('endpoint') + '/api/leads?term=' + term + '&location=montreal').success(function (result) {
				console.log("RESULT:", result);
				$scope.is_searching_routes = false;
				$scope.routes = result;
			}).error(function (error) {
				console.log("ERROR:", error);
				$scope.is_searching_routes = false;
			});
		};

		$scope.add_note_to_route = function (_route) {
			var modalInstance = $uibModal.open({
				animation: true,
				template: _modalDetails2.default,
				controller: 'ModalRouteDetailController',
				size: "big",
				resolve: {
					route: function route() {
						return _route;
					}
				}
			});

			modalInstance.result.then(function (lead_details) {
				toastr.success("Success update");
			});
		};
	});

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = "<!-- <div class=\"modal\"> -->\n    <div map-lazy-load=\"https://maps.google.com/maps/api/js\" map-lazy-load-params=\"{{googleMapsUrl}}\" style=\"height:100%;\">\n        <ng-map class=\"\" zoom=\"14\" center=\"maps_options.center\" ng-if=\"render_map\" style=\"height:500px;\">\n            <directions\n            draggable=\"false\"\n            panel=\"directions-panel\"\n            travel-mode=\"{{maps_options.travelMode}}\"\n            waypoints=\"{{maps_options.wayPoints}}\"\n            origin=\"{{origin}}\"\n            destination=\"{{maps_options.destination}}\">\n            </directions>\n        </ng-map>\n    </div>\n<!-- </div> -->\n";

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal-header\">\n    <h3 class=\"modal-title\">Route details</h3>\n</div>\n    <div class=\"modal-body\">\n        <form class=\"row row--column d_form\" name=\"route_detail_form\" ng-submit=\"submit_route_detail(route_detail_form)\">\n            <div class=\"col s12 d_form__item\">\n                <label> Status </label>\n                <select class=\"\" ng-model=\"lead.status\" ng-options=\"status.slug as status.title for status in statuses\" required>\n                    <option value=\"\"> Select one </option>\n                </select>\n            </div>\n\n            <div class=\"col s12 d_form__item\">\n                <label> Note </label>\n                <textarea placeholder=\"Enter your note here\" rows=\"10\" ng-model=\"lead.note\"></textarea>\n                <span class=\"d_form__errors\"> {{errors.email}} </span>\n            </div>\n\n            <div class=\"col s12 d_form__item\">\n                <button type=\"submit\"> Save </button>\n                <button class=\"\" type=\"button\" ng-click=\"cancel()\">Cancel</button>\n            </div>\n        </form>\n    </div>\n    <pre>{{lead|json}}</pre>\n</div>\n";

/***/ },
/* 29 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.controllers.LoginController';

	var app = angular.module(module.exports, []);

	app.controller('LoginController', function ($scope, $state, translationService, Auth) {
	  console.log("LoginController");
	  $scope.user = {};
	  $scope.errors = {};

	  $scope.login = function (user) {
	    Auth.login(user, function (err) {
	      console.log("ERROR:", err);
	    }).then(function () {
	      // Logged in, redirect to home
	      $state.go('main.routes');
	    }).catch(function (err) {
	      $scope.errors.other = err.message;
	    });
	  };
	});

/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.controllers.AdminController';

	var app = angular.module(module.exports, []);

	app.controller('AdminController', function ($scope, $state, translationService, User, $uibModal, $http, config, envService, modalService, toastr, users, singletonService) {
	    console.log("AdminController:");
	    console.log("The fetched users:", users);
	    singletonService.setUsers(users);
	    $scope.user = {}; //(envService.get() === "development") ? {name:"Name",email:"email@email.com",location:"Montreal",term:"bars",password:"12345",role:"sale"} : {};
	    $scope.users = users;
	    $scope.terms = ["bars", "restaurants", "club", "hotels"];
	    $scope.errors = {};

	    $scope.goTo = function (state, params) {
	        $state.go(state, params);
	    };

	    $scope.delete_user = function (user) {
	        console.log("test:", user.email);
	        if (user.email === "admin@admin.com" || user.name === "Admin") return toastr.error("Don't delete me", "I'm the Admin");

	        var index = $scope.users.indexOf(user);
	        if (index > -1) {
	            modalService.confirm('Are you sure you want to delete ' + user.name, "This can't be reversed", function (response) {
	                if (response) {
	                    $http.delete(envService.read('endpoint') + '/api/users/' + user._id).success(function (result) {
	                        toastr.success("Success", user.name + " was correctly deleted");
	                        $scope.users.splice(index, 1);
	                    }).error(function (error) {
	                        console.log("ERROR:", error);
	                    });
	                }
	            });
	        }
	    };

	    $scope.edit_user = function () {
	        $state.go('main');
	    };
	});

	app.controller('EditUserController', function (user, User, $scope, toastr) {
	    console.log("User to edit:", user);
	    $scope.user = user;

	    $scope.generate_random = function () {
	        $scope.user = new User({ name: "Name", email: "email@email.com", location: "Montreal", term: "bars", password: "12345", role: "sale" });
	    };

	    $scope.submit_user_form = function (form) {
	        console.log("Submitting this user: ", $scope.user);
	        $scope.user.$save(function (user) {
	            toastr.success("Success", user.name + " was correctly created");
	            $scope.user = user;
	        }, function (error) {
	            console.log("ERROR:", error);
	            error = error.data ? error.data : null;
	            if (error && error.errors) {
	                $scope.errors.email = error.errors.email ? error.errors.email.message : "";
	                $scope.errors.password = error.errors.password ? error.errors.password.message : "";
	                $scope.errors.name = error.errors.name ? error.errors.name.message : "";
	                $scope.errors.location = error.errors.location ? error.errors.location.message : "";
	            }
	        });
	    };
	});

	app.controller('NewUserController', function (user, User, $scope, toastr) {
	    console.log("User to create:", user);
	    $scope.user = user;

	    $scope.submit_user_form = function (form) {
	        console.log("Submitting this user: ", $scope.user);
	        $scope.user.$save(function (user) {
	            toastr.success("Success", user.name + " was correctly created");
	            $scope.$parent.users.push(user);
	            $scope.user = new User();
	        }, function (error) {
	            console.log("ERROR:", error);
	            error = error.data ? error.data : null;
	            if (error && error.errors) {
	                $scope.errors.email = error.errors.email ? error.errors.email.message : "";
	                $scope.errors.password = error.errors.password ? error.errors.password.message : "";
	                $scope.errors.name = error.errors.name ? error.errors.name.message : "";
	                $scope.errors.location = error.errors.location ? error.errors.location.message : "";
	            }
	        });
	    };
	});

/***/ },
/* 31 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.controllers.HistoryController';

	var app = angular.module(module.exports, []);

	app.controller('HistoryController', function ($scope, $state, translationService, Auth) {
	  console.log("HistoryController");
	  $scope.user = {};
	  $scope.errors = {};

	  $scope.login = function (user) {
	    Auth.login(user, function (err) {
	      console.log("ERROR:", err);
	    }).then(function () {
	      // Logged in, redirect to home
	      $state.go('main.routes');
	    }).catch(function (err) {
	      $scope.errors.other = err.message;
	    });
	  };
	});

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = "<div class=\"login\">\n\t<form class=\"login__wrapper\">\n\t\t<div class=\"form_group\">\n\t\t\t<label>Email</label>\n\t\t\t<input type=\"email\" name=\"\" ng-model=\"user.email\">\n\t\t</div>\n\t\t<div class=\"form_group\">\n\t\t\t<label>Password</label>\n\t\t\t<input type=\"password\" name=\"\" ng-model=\"user.password\">\n\t\t</div>\n\n        <!--error-->\n        <div class=\"form-group has-error\">\n          <p class=\"help-block\" ng-show=\"form.email.$error.required && form.password.$error.required && submitted\">\n             Please enter your email and password.\n          </p>\n          <p class=\"help-block\" ng-show=\"form.email.$error.email && submitted\">\n             Please enter a valid email.\n          </p>\n\n          <p class=\"help-block\">{{ errors.other }}</p>\n        </div>\n\n\t\t<button ng-click=\"login(user);\"> Login </button>\n\t</form>\n</div>\n";

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = " <header></header>\n <div class=\"main\">\n    <navbar></navbar>\n    <ui-view class=\"content\" ></ui-view>\n </div>\n <pre ng-show=\"debug\"> {{ currentUser | json }} </pre>\n";

/***/ },
/* 34 */
/***/ function(module, exports) {

	module.exports = "<div class=\"content__header\">\n\t<div class=\"content__header__left col s12\">\n\t\t<span class=\"content__header__left__title\">Today's Route</span><br>\n\t\t<span class=\"content__header__left__today\"> 2016 June 19</span>\n\t</div>\n\t<div class=\"content__header__right col s12\">\n\t\t<a ng-click=\"show_full_route()\" style=\"flex:1\"> See full routes</a>\n        <button ng-show=\"!is_searching_routes\" ng-click=\"generates_lead()\"> Generates leads </button>\n        <div ng-show=\"is_searching_routes\" class=\"loader\"></div>\n\t</div>\n</div>\n\n<div class=\"content__body\">\n\n    <table class=\"responstable\">\n        <tr>\n            <th> Name </th>\n            <th> Address</th>\n            <th>City</th>\n            <th>Type of business</th>\n            <th>Status</th>\n            <th>Details</th>\n            <th>Actions</th>\n        </tr>\n\n        <tr ng-repeat=\"route in routes\">\n            <td>{{route.name}}</td>\n            <td>{{route.address}}</td>\n            <td>{{route.city}}</td>\n            <td>{{route.term}}</td>\n            <td>{{route.status}}</td>\n            <td>{{route.notes}}</td>\n            <td>\n                <button ng-click=\"add_note_to_route(route);\">Add</button>\n            </td>\n        </tr>\n    </table>\n\n</div>\n\n";

/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = "<div class=\"content__header\">\n\t<div class=\"content__header__left col s12\">\n\t\t<span class=\"content__header__left__title\">Admin panel</span><br>\n\t\t<span class=\"content__header__left__today\"> </span>\n\t</div>\n\t<div class=\"content__header__right col s12\">\n\t\t<button ng-click=\"goTo('main.admin.new', {user_id:'new'})\"> Add user </button>\n        <button ng-click=\"goTo('main.admin.users')\"> List users </button>\n\t</div>\n</div>\n\n<ui-view></ui-view>\n\n\n\n\n\n\n\n";

/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = "<button ng-click=\"generate_random();\"> Generate random </button>\n\n<div class=\"content__body content__body--with_padding\">\n  <form class=\"row row--column d_form\" name=\"form\" ng-submit=\"submit_user_form(form)\">\n\n   <div class=\"col-xs-12 col-md-6 d_form__item\">\n      <label> Name </label>\n      <input type=\"text\" name=\"\" ng-model=\"user.name\" required placeholder=\"Enter your name\">\n      <span class=\"d_form__errors\"> {{errors.name}} </span>\n    </div>\n\n    <div class=\"col-xs-12 col-md-6 d_form__item\">\n      <label> Email </label>\n      <input type=\"email\" name=\"\" ng-model=\"user.email\" required placeholder=\"Enter your email\">\n      <span class=\"d_form__errors\"> {{errors.email}} </span>\n    </div>\n\n    <div class=\"col-xs-12 col-md-6 d_form__item\">\n      <label> Password </label>\n      <input type=\"password\" name=\"\" ng-model=\"user.password\" placeholder=\"Enter your password\">\n      <span class=\"d_form__errors\"> {{errors.password}} </span>\n    </div>\n\n    <div class=\"col-xs-12 col-md-6 d_form__item\">\n        <label> Location </label>\n        <input type=\"text\" name=\"\" ng-model=\"user.location\" required placeholder=\"Enter your location\">\n        <span class=\"d_form__errors\"> {{errors.location}} </span>\n    </div>\n\n    <div class=\"col-xs-12 col-md-6 d_form__item\">\n      <label> Term </label>\n      <select class=\"\" ng-model=\"user.term\" ng-options=\"term as term for term in terms\">\n        <option value=\"\"> Select one </option>\n      </select>\n    </div>\n\n    <div class=\"col-xs-12 col-md-6 d_form__item\">\n        <label style=\"width:auto\"> Role </label>\n        Sale <input style=\"width:auto; margin-right:10px;\" type=\"radio\" name=\"gender\" value=\"sale\" checked ng-model=\"user.role\">\n        Admin <input style=\"width:auto\" type=\"radio\" name=\"gender\" value=\"admin\" ng-model=\"user.role\">\n    </div>\n\n\n    <div class=\"col-xs-12 col-md-6 d_form__item\">\n        <button type=\"submit\"> Save user </button>\n    </div>\n  </form>\n</div>\n";

/***/ },
/* 37 */
/***/ function(module, exports) {

	module.exports = "<div class=\"content__body\">\n  <table class=\"responstable\">\n        <tr>\n            <th> Name </th>\n            <th> Email</th>\n            <th> Location </th>\n            <th> Term </th>\n            <th> Sales </th>\n            <th> Notes </th>\n            <th> Action </th>\n        </tr>\n\n        <tr ng-repeat=\"user in users\">\n            <td>{{user.name}}</td>\n            <td>{{user.email}}</td>\n            <td>{{user.location}}</td>\n            <td>{{user.term}}</td>\n            <td>{{user.number_of_sales}}</td>\n            <td>\n                <span ng-show=\"user.notes.length > 0\">{{user.notes}}</span>\n                <span ng-show=\"user.notes.length === 0\"> <em>No notes</em> </span>\n            </td>\n            <td>\n                <button ng-click=\"delete_user(user);\">Delete</button>\n                <button ng-click=\"goTo('main.admin.edit', {user_id: user._id})\"> Edit </button>\n            </td>\n        </tr>\n    </table>\n</div>\n\n\n";

/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = "<div class=\"content__header\">\n\t<div class=\"content__header__left col s12\">\n\t\t<span class=\"content__header__left__title\">sssHistory</span><br>\n\t\t<span class=\"content__header__left__today\"> From a long long time ago</span>\n\t</div>\n\t<div class=\"content__header__right col s12\">\n\t\t<a ui-sref=\"main.history.test\">test</a>\n\t</div>\n</div>\n\n<ui-view></ui-view>\n\n<div class=\"content__body\">\n\t<table class=\"responstable\">\n\t\t<tr>\n\t\t\t<th> Name </th>\n\t\t\t<th> Address</th>\n\t\t\t<th>City</th>\n\t\t\t<th>Type of business</th>\n\t\t\t<th>Status</th>\n\t\t\t<th>Details</th>\n\t\t\t<th>Actions</th>\n\t\t</tr>\n\n\t\t<tr ng-repeat=\"history in histories\">\n\t\t\t<td>{{route.name}}</td>\n\t\t\t<td>{{route.address}}</td>\n\t\t\t<td>{{route.city}}</td>\n\t\t\t<td>{{route.term}}</td>\n\t\t\t<td>{{route.status}}</td>\n\t\t\t<td>{{route.notes}}</td>\n\t\t\t<td>\n\t\t\t\t<button ng-click=\"add_note_to_route(route);\">Add</button>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\n</div>\n";

/***/ },
/* 39 */
/***/ function(module, exports) {

	module.exports = "test\n";

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _translation = __webpack_require__(41);

	var _translation2 = _interopRequireDefault(_translation);

	var _auth = __webpack_require__(42);

	var _auth2 = _interopRequireDefault(_auth);

	var _user = __webpack_require__(43);

	var _user2 = _interopRequireDefault(_user);

	var _lead = __webpack_require__(44);

	var _lead2 = _interopRequireDefault(_lead);

	var _route = __webpack_require__(45);

	var _route2 = _interopRequireDefault(_route);

	var _modal = __webpack_require__(46);

	var _modal2 = _interopRequireDefault(_modal);

	var _singleton = __webpack_require__(48);

	var _singleton2 = _interopRequireDefault(_singleton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = 'app.services';
	var app = angular.module(module.exports, [_translation2.default, _auth2.default, _user2.default, _lead2.default, _route2.default, _modal2.default, _singleton2.default]);

/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';

	// This service will be used to translate all the text in the app.

	module.exports = 'app.services.translation';
	var app = angular.module(module.exports, []);

	app.factory('translationService', function () {
		return {
			getText: function getText(text) {
				return text;
			}
		};
	});

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.services.auth';
	var app = angular.module(module.exports, []);

	app.factory('Auth', function Auth($location, $rootScope, $http, User, $cookieStore, $q, envService) {
	  var currentUser = {};
	  if ($cookieStore.get('token')) {
	    currentUser = User.get();
	  }
	  return {

	    /**
	     * Authenticate user and save token
	     *
	     * @param  {Object}   user     - login info
	     * @param  {Function} callback - optional
	     * @return {Promise}
	     */
	    login: function login(user, callback) {
	      var cb = callback || angular.noop;
	      var deferred = $q.defer();

	      $http.post(envService.read('endpoint') + '/auth/local', {
	        email: user.email,
	        password: user.password
	      }).success(function (data) {
	        $cookieStore.put('token', data.token);
	        currentUser = User.get();
	        deferred.resolve(data);
	        return cb();
	      }).error(function (err) {
	        this.logout();
	        deferred.reject(err);
	        return cb(err);
	      }.bind(this));

	      return deferred.promise;
	    },

	    /**
	     * Delete access token and user info
	     *
	     * @param  {Function}
	     */
	    logout: function logout() {
	      $cookieStore.remove('token');
	      currentUser = {};
	    },

	    /**
	     * Create a new user
	     *
	     * @param  {Object}   user     - user info
	     * @param  {Function} callback - optional
	     * @return {Promise}
	     */
	    createUser: function createUser(user, callback) {
	      var cb = callback || angular.noop;

	      return User.save(user, function (data) {
	        $cookieStore.put('token', data.token);
	        currentUser = User.get();
	        return cb(user);
	      }, function (err) {
	        this.logout();
	        return cb(err);
	      }.bind(this)).$promise;
	    },

	    /**
	     * Change password
	     *
	     * @param  {String}   oldPassword
	     * @param  {String}   newPassword
	     * @param  {Function} callback    - optional
	     * @return {Promise}
	     */
	    changePassword: function changePassword(oldPassword, newPassword, callback) {
	      var cb = callback || angular.noop;

	      return User.changePassword({ id: currentUser._id }, {
	        oldPassword: oldPassword,
	        newPassword: newPassword
	      }, function (user) {
	        return cb(user);
	      }, function (err) {
	        return cb(err);
	      }).$promise;
	    },

	    /**
	     * Gets all available info on authenticated user
	     *
	     * @return {Object} user
	     */
	    getCurrentUser: function getCurrentUser() {
	      return currentUser;
	    },

	    /**
	     * Check if a user is logged in
	     *
	     * @return {Boolean}
	     */
	    isLoggedIn: function isLoggedIn() {
	      return currentUser.hasOwnProperty('_id');
	    },

	    /**
	     * Waits for currentUser to resolve before checking if user is logged in
	     */
	    isLoggedInAsync: function isLoggedInAsync(cb) {
	      if (currentUser.hasOwnProperty('$promise')) {
	        currentUser.$promise.then(function () {
	          cb(true);
	        }).catch(function () {
	          cb(false);
	        });
	      } else if (currentUser.hasOwnProperty('_id')) {
	        cb(true);
	      } else {
	        cb(false);
	      }
	    },

	    /**
	     * Check if a user is an admin
	     *
	     * @return {Boolean}
	     */
	    isAdmin: function isAdmin() {
	      return currentUser.role === 'admin';
	    },

	    /**
	     * Get auth token
	     */
	    getToken: function getToken() {
	      return $cookieStore.get('token');
	    }
	  };
	});

/***/ },
/* 43 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.services.user';
	var app = angular.module(module.exports, []);

	app.factory('User', function ($resource, envService) {
	  return $resource(envService.read('endpoint') + '/api/users/:id/:controller', {
	    id: '@_id'
	  }, {
	    changePassword: {
	      method: 'PUT',
	      params: {
	        controller: 'password'
	      }
	    },
	    get: {
	      method: 'GET',
	      params: {
	        id: 'me'
	      }
	    }
	  });
	});

/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.services.lead';
	var app = angular.module(module.exports, []);

	app.factory('Lead', function ($resource, envService) {
	    return $resource(envService.read('endpoint') + '/api/leads/:id', {
	        id: '@_id'
	    });
	});

/***/ },
/* 45 */
/***/ function(module, exports) {

	'use strict';

	// This service will be used to translate all the text in the app.

	module.exports = 'app.services.route';
	var app = angular.module(module.exports, []);

	app.factory('routeService', function ($http, envService) {
		var _routes = [];

		return {
			fetchRoutes: function fetchRoutes() {
				if (_routes.length == 0) {
					if (envService.is('development')) {
						return [{ name: 'Dominion Square Tavern',
							arrival: 0,
							distance: 0,
							lng: -73.57145,
							lat: 45.5006,
							address: '1243 Rue Metcalfe' }, { name: 'N Sur Mackay',
							arrival: 2,
							distance: 1.4,
							lng: -73.5762235,
							lat: 45.4953075,
							address: '1244 Rue Mackay' }, { name: 'Grumpy\'s Bar',
							arrival: 2,
							distance: 1.5,
							lng: -73.57585,
							lat: 45.49601,
							address: '1242 Rue Bishop' }, { name: 'Bar Cloakroom',
							arrival: 3,
							distance: 2.1,
							lng: -73.57777,
							lat: 45.49951,
							address: '2175 Rue de la Montagne' }, { name: 'Pullman',
							arrival: 4,
							distance: 3.3,
							lng: -73.5721,
							lat: 45.50845,
							address: '3424 Avenue du Parc' }, { name: 'Nyks Bistro Pub',
							arrival: 5,
							distance: 4,
							lng: -73.56667,
							lat: 45.50601,
							address: '1250, rue de Bleury' }, { name: 'Notkins',
							arrival: 6,
							distance: 4.3,
							lng: -73.5637947,
							lat: 45.504985,
							address: '1101 Rue Bleury' }, { name: 'Mimi La Nuit',
							arrival: 7,
							distance: 5.5,
							lng: -73.5534445159386,
							lat: 45.5059189542855,
							address: '22 Rue Saint-Paul E' }, { name: 'Le Mal Nécessaire',
							arrival: 8,
							distance: 6.3,
							lng: -73.5612698,
							lat: 45.5085754,
							address: '1106B Saint Laurent Boulevard' }, { name: 'Le Sainte-Elisabeth',
							arrival: 9,
							distance: 6.9,
							lng: -73.5621467,
							lat: 45.5121952,
							address: '1412 Rue Sainte-Elisabeth' }];
					}

					return $http.get(envService.read('endpoint') + '/api/leads?term=bars&location=montreal').success(function (result) {
						_routes = result;
						return result;
					}).error(function (error) {
						console.log("ERROR:", error);
						return error;
					});
				} else {
					return _routes;
				}
			}

		};
	});

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _modalConfirm = __webpack_require__(47);

	var _modalConfirm2 = _interopRequireDefault(_modalConfirm);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = 'app.services.modal';
	var app = angular.module(module.exports, []);

	app.controller('ModalConfirmController', function ($scope, $uibModalInstance, title, body) {
	    console.log("Modal confirm controller");
	    $scope.title = title;
	    $scope.body = body;

	    $scope.ok = function () {
	        $uibModalInstance.close(true);
	    };

	    $scope.cancel = function () {
	        $uibModalInstance.dismiss(false);
	    };
	});

	app.factory('modalService', function ($uibModal) {
	    return {
	        confirm: function confirm(_title, _body, cb) {
	            var modalInstance = $uibModal.open({
	                animation: true,
	                template: _modalConfirm2.default,
	                controller: 'ModalConfirmController',
	                size: "big",
	                resolve: {
	                    title: function title() {
	                        return _title;
	                    },
	                    body: function body() {
	                        return _body;
	                    }
	                }
	            });

	            modalInstance.result.then(function (response) {
	                cb(response);
	            });
	        }
	    };
	});

/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = "<div class=\"modal-header\">\n    <h3 class=\"modal-title\">{{title}}</h3>\n</div>\n    <div class=\"modal-body\">\n       <p>{{body}}</p>\n    </div>\n<div class=\"modal-footer\">\n    <button class=\"\" type=\"button\" ng-click=\"ok()\">Confirm</button>\n    <button class=\"\" type=\"button\" ng-click=\"cancel()\">Cancel</button>\n</div>\n";

/***/ },
/* 48 */
/***/ function(module, exports) {

	'use strict';

	module.exports = 'app.services.singleton';
	var app = angular.module(module.exports, []);

	app.factory('singletonService', function (User) {
		var _users = [];
		var _current_coords = {}; //longitude, latitude

		return {
			getUsers: function getUsers() {
				console.log("getUsers", _users);
				if (_users.length == 0) {
					return User.query(function (users) {
						console.log("test:", users);
						_users = users;
						return _users;
					});
				} else {
					return _users;
				}
			},
			setUsers: function setUsers(users) {
				_users = users;
			},
			getUserById: function getUserById(user_id) {
				return User.get({ 'id': user_id }, function (user) {
					console.log("user:", user);
				});
				// console.log("Find user in this list:", _users)
				// return _users.find((user) => {return user._id === user_id});
			},
			setCurrentPosition: function setCurrentPosition(coords) {
				_current_coords = coords;
			},
			getCurrentPosition: function getCurrentPosition() {
				return _current_coords;
			}
		};
	});

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(50);

	module.exports = 'ui.bootstrap';


/***/ },
/* 50 */
/***/ function(module, exports) {

	/*
	 * angular-ui-bootstrap
	 * http://angular-ui.github.io/bootstrap/

	 * Version: 1.3.3 - 2016-05-22
	 * License: MIT
	 */angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
	angular.module("ui.bootstrap.tpls", ["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/backdrop.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]);
	angular.module('ui.bootstrap.collapse', [])

	  .directive('uibCollapse', ['$animate', '$q', '$parse', '$injector', function($animate, $q, $parse, $injector) {
	    var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null;
	    return {
	      link: function(scope, element, attrs) {
	        var expandingExpr = $parse(attrs.expanding),
	            expandedExpr = $parse(attrs.expanded),
	            collapsingExpr = $parse(attrs.collapsing),
	            collapsedExpr = $parse(attrs.collapsed);

	        if (!scope.$eval(attrs.uibCollapse)) {
	          element.addClass('in')
	            .addClass('collapse')
	            .attr('aria-expanded', true)
	            .attr('aria-hidden', false)
	            .css({height: 'auto'});
	        }

	        function expand() {
	          if (element.hasClass('collapse') && element.hasClass('in')) {
	            return;
	          }

	          $q.resolve(expandingExpr(scope))
	            .then(function() {
	              element.removeClass('collapse')
	                .addClass('collapsing')
	                .attr('aria-expanded', true)
	                .attr('aria-hidden', false);

	              if ($animateCss) {
	                $animateCss(element, {
	                  addClass: 'in',
	                  easing: 'ease',
	                  to: { height: element[0].scrollHeight + 'px' }
	                }).start()['finally'](expandDone);
	              } else {
	                $animate.addClass(element, 'in', {
	                  to: { height: element[0].scrollHeight + 'px' }
	                }).then(expandDone);
	              }
	            });
	        }

	        function expandDone() {
	          element.removeClass('collapsing')
	            .addClass('collapse')
	            .css({height: 'auto'});
	          expandedExpr(scope);
	        }

	        function collapse() {
	          if (!element.hasClass('collapse') && !element.hasClass('in')) {
	            return collapseDone();
	          }

	          $q.resolve(collapsingExpr(scope))
	            .then(function() {
	              element
	                // IMPORTANT: The height must be set before adding "collapsing" class.
	                // Otherwise, the browser attempts to animate from height 0 (in
	                // collapsing class) to the given height here.
	                .css({height: element[0].scrollHeight + 'px'})
	                // initially all panel collapse have the collapse class, this removal
	                // prevents the animation from jumping to collapsed state
	                .removeClass('collapse')
	                .addClass('collapsing')
	                .attr('aria-expanded', false)
	                .attr('aria-hidden', true);

	              if ($animateCss) {
	                $animateCss(element, {
	                  removeClass: 'in',
	                  to: {height: '0'}
	                }).start()['finally'](collapseDone);
	              } else {
	                $animate.removeClass(element, 'in', {
	                  to: {height: '0'}
	                }).then(collapseDone);
	              }
	            });
	        }

	        function collapseDone() {
	          element.css({height: '0'}); // Required so that collapse works when animation is disabled
	          element.removeClass('collapsing')
	            .addClass('collapse');
	          collapsedExpr(scope);
	        }

	        scope.$watch(attrs.uibCollapse, function(shouldCollapse) {
	          if (shouldCollapse) {
	            collapse();
	          } else {
	            expand();
	          }
	        });
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

	.constant('uibAccordionConfig', {
	  closeOthers: true
	})

	.controller('UibAccordionController', ['$scope', '$attrs', 'uibAccordionConfig', function($scope, $attrs, accordionConfig) {
	  // This array keeps track of the accordion groups
	  this.groups = [];

	  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
	  this.closeOthers = function(openGroup) {
	    var closeOthers = angular.isDefined($attrs.closeOthers) ?
	      $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
	    if (closeOthers) {
	      angular.forEach(this.groups, function(group) {
	        if (group !== openGroup) {
	          group.isOpen = false;
	        }
	      });
	    }
	  };

	  // This is called from the accordion-group directive to add itself to the accordion
	  this.addGroup = function(groupScope) {
	    var that = this;
	    this.groups.push(groupScope);

	    groupScope.$on('$destroy', function(event) {
	      that.removeGroup(groupScope);
	    });
	  };

	  // This is called from the accordion-group directive when to remove itself
	  this.removeGroup = function(group) {
	    var index = this.groups.indexOf(group);
	    if (index !== -1) {
	      this.groups.splice(index, 1);
	    }
	  };
	}])

	// The accordion directive simply sets up the directive controller
	// and adds an accordion CSS class to itself element.
	.directive('uibAccordion', function() {
	  return {
	    controller: 'UibAccordionController',
	    controllerAs: 'accordion',
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/accordion/accordion.html';
	    }
	  };
	})

	// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
	.directive('uibAccordionGroup', function() {
	  return {
	    require: '^uibAccordion',         // We need this directive to be inside an accordion
	    transclude: true,              // It transcludes the contents of the directive into the template
	    replace: true,                // The element containing the directive will be replaced with the template
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/accordion/accordion-group.html';
	    },
	    scope: {
	      heading: '@',               // Interpolate the heading attribute onto this scope
	      panelClass: '@?',           // Ditto with panelClass
	      isOpen: '=?',
	      isDisabled: '=?'
	    },
	    controller: function() {
	      this.setHeading = function(element) {
	        this.heading = element;
	      };
	    },
	    link: function(scope, element, attrs, accordionCtrl) {
	      accordionCtrl.addGroup(scope);

	      scope.openClass = attrs.openClass || 'panel-open';
	      scope.panelClass = attrs.panelClass || 'panel-default';
	      scope.$watch('isOpen', function(value) {
	        element.toggleClass(scope.openClass, !!value);
	        if (value) {
	          accordionCtrl.closeOthers(scope);
	        }
	      });

	      scope.toggleOpen = function($event) {
	        if (!scope.isDisabled) {
	          if (!$event || $event.which === 32) {
	            scope.isOpen = !scope.isOpen;
	          }
	        }
	      };

	      var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	      scope.headingId = id + '-tab';
	      scope.panelId = id + '-panel';
	    }
	  };
	})

	// Use accordion-heading below an accordion-group to provide a heading containing HTML
	.directive('uibAccordionHeading', function() {
	  return {
	    transclude: true,   // Grab the contents to be used as the heading
	    template: '',       // In effect remove this element!
	    replace: true,
	    require: '^uibAccordionGroup',
	    link: function(scope, element, attrs, accordionGroupCtrl, transclude) {
	      // Pass the heading to the accordion-group controller
	      // so that it can be transcluded into the right place in the template
	      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
	      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
	    }
	  };
	})

	// Use in the accordion-group template to indicate where you want the heading to be transcluded
	// You must provide the property on the accordion-group controller that will hold the transcluded element
	.directive('uibAccordionTransclude', function() {
	  return {
	    require: '^uibAccordionGroup',
	    link: function(scope, element, attrs, controller) {
	      scope.$watch(function() { return controller[attrs.uibAccordionTransclude]; }, function(heading) {
	        if (heading) {
	          var elem = angular.element(element[0].querySelector(getHeaderSelectors()));
	          elem.html('');
	          elem.append(heading);
	        }
	      });
	    }
	  };

	  function getHeaderSelectors() {
	      return 'uib-accordion-header,' +
	          'data-uib-accordion-header,' +
	          'x-uib-accordion-header,' +
	          'uib\\:accordion-header,' +
	          '[uib-accordion-header],' +
	          '[data-uib-accordion-header],' +
	          '[x-uib-accordion-header]';
	  }
	});

	angular.module('ui.bootstrap.alert', [])

	.controller('UibAlertController', ['$scope', '$attrs', '$interpolate', '$timeout', function($scope, $attrs, $interpolate, $timeout) {
	  $scope.closeable = !!$attrs.close;

	  var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout) ?
	    $interpolate($attrs.dismissOnTimeout)($scope.$parent) : null;

	  if (dismissOnTimeout) {
	    $timeout(function() {
	      $scope.close();
	    }, parseInt(dismissOnTimeout, 10));
	  }
	}])

	.directive('uibAlert', function() {
	  return {
	    controller: 'UibAlertController',
	    controllerAs: 'alert',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/alert/alert.html';
	    },
	    transclude: true,
	    replace: true,
	    scope: {
	      type: '@',
	      close: '&'
	    }
	  };
	});

	angular.module('ui.bootstrap.buttons', [])

	.constant('uibButtonConfig', {
	  activeClass: 'active',
	  toggleEvent: 'click'
	})

	.controller('UibButtonsController', ['uibButtonConfig', function(buttonConfig) {
	  this.activeClass = buttonConfig.activeClass || 'active';
	  this.toggleEvent = buttonConfig.toggleEvent || 'click';
	}])

	.directive('uibBtnRadio', ['$parse', function($parse) {
	  return {
	    require: ['uibBtnRadio', 'ngModel'],
	    controller: 'UibButtonsController',
	    controllerAs: 'buttons',
	    link: function(scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
	      var uncheckableExpr = $parse(attrs.uibUncheckable);

	      element.find('input').css({display: 'none'});

	      //model -> UI
	      ngModelCtrl.$render = function() {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio)));
	      };

	      //ui->model
	      element.on(buttonsCtrl.toggleEvent, function() {
	        if (attrs.disabled) {
	          return;
	        }

	        var isActive = element.hasClass(buttonsCtrl.activeClass);

	        if (!isActive || angular.isDefined(attrs.uncheckable)) {
	          scope.$apply(function() {
	            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio));
	            ngModelCtrl.$render();
	          });
	        }
	      });

	      if (attrs.uibUncheckable) {
	        scope.$watch(uncheckableExpr, function(uncheckable) {
	          attrs.$set('uncheckable', uncheckable ? '' : undefined);
	        });
	      }
	    }
	  };
	}])

	.directive('uibBtnCheckbox', function() {
	  return {
	    require: ['uibBtnCheckbox', 'ngModel'],
	    controller: 'UibButtonsController',
	    controllerAs: 'button',
	    link: function(scope, element, attrs, ctrls) {
	      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      element.find('input').css({display: 'none'});

	      function getTrueValue() {
	        return getCheckboxValue(attrs.btnCheckboxTrue, true);
	      }

	      function getFalseValue() {
	        return getCheckboxValue(attrs.btnCheckboxFalse, false);
	      }

	      function getCheckboxValue(attribute, defaultValue) {
	        return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue;
	      }

	      //model -> UI
	      ngModelCtrl.$render = function() {
	        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
	      };

	      //ui->model
	      element.on(buttonsCtrl.toggleEvent, function() {
	        if (attrs.disabled) {
	          return;
	        }

	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
	          ngModelCtrl.$render();
	        });
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.carousel', [])

	.controller('UibCarouselController', ['$scope', '$element', '$interval', '$timeout', '$animate', function($scope, $element, $interval, $timeout, $animate) {
	  var self = this,
	    slides = self.slides = $scope.slides = [],
	    SLIDE_DIRECTION = 'uib-slideDirection',
	    currentIndex = $scope.active,
	    currentInterval, isPlaying, bufferedTransitions = [];

	  var destroyed = false;

	  self.addSlide = function(slide, element) {
	    slides.push({
	      slide: slide,
	      element: element
	    });
	    slides.sort(function(a, b) {
	      return +a.slide.index - +b.slide.index;
	    });
	    //if this is the first slide or the slide is set to active, select it
	    if (slide.index === $scope.active || slides.length === 1 && !angular.isNumber($scope.active)) {
	      if ($scope.$currentTransition) {
	        $scope.$currentTransition = null;
	      }

	      currentIndex = slide.index;
	      $scope.active = slide.index;
	      setActive(currentIndex);
	      self.select(slides[findSlideIndex(slide)]);
	      if (slides.length === 1) {
	        $scope.play();
	      }
	    }
	  };

	  self.getCurrentIndex = function() {
	    for (var i = 0; i < slides.length; i++) {
	      if (slides[i].slide.index === currentIndex) {
	        return i;
	      }
	    }
	  };

	  self.next = $scope.next = function() {
	    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

	    if (newIndex === 0 && $scope.noWrap()) {
	      $scope.pause();
	      return;
	    }

	    return self.select(slides[newIndex], 'next');
	  };

	  self.prev = $scope.prev = function() {
	    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

	    if ($scope.noWrap() && newIndex === slides.length - 1) {
	      $scope.pause();
	      return;
	    }

	    return self.select(slides[newIndex], 'prev');
	  };

	  self.removeSlide = function(slide) {
	    var index = findSlideIndex(slide);

	    var bufferedIndex = bufferedTransitions.indexOf(slides[index]);
	    if (bufferedIndex !== -1) {
	      bufferedTransitions.splice(bufferedIndex, 1);
	    }

	    //get the index of the slide inside the carousel
	    slides.splice(index, 1);
	    if (slides.length > 0 && currentIndex === index) {
	      if (index >= slides.length) {
	        currentIndex = slides.length - 1;
	        $scope.active = currentIndex;
	        setActive(currentIndex);
	        self.select(slides[slides.length - 1]);
	      } else {
	        currentIndex = index;
	        $scope.active = currentIndex;
	        setActive(currentIndex);
	        self.select(slides[index]);
	      }
	    } else if (currentIndex > index) {
	      currentIndex--;
	      $scope.active = currentIndex;
	    }

	    //clean the active value when no more slide
	    if (slides.length === 0) {
	      currentIndex = null;
	      $scope.active = null;
	      clearBufferedTransitions();
	    }
	  };

	  /* direction: "prev" or "next" */
	  self.select = $scope.select = function(nextSlide, direction) {
	    var nextIndex = findSlideIndex(nextSlide.slide);
	    //Decide direction if it's not given
	    if (direction === undefined) {
	      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
	    }
	    //Prevent this user-triggered transition from occurring if there is already one in progress
	    if (nextSlide.slide.index !== currentIndex &&
	      !$scope.$currentTransition) {
	      goNext(nextSlide.slide, nextIndex, direction);
	    } else if (nextSlide && nextSlide.slide.index !== currentIndex && $scope.$currentTransition) {
	      bufferedTransitions.push(slides[nextIndex]);
	    }
	  };

	  /* Allow outside people to call indexOf on slides array */
	  $scope.indexOfSlide = function(slide) {
	    return +slide.slide.index;
	  };

	  $scope.isActive = function(slide) {
	    return $scope.active === slide.slide.index;
	  };

	  $scope.isPrevDisabled = function() {
	    return $scope.active === 0 && $scope.noWrap();
	  };

	  $scope.isNextDisabled = function() {
	    return $scope.active === slides.length - 1 && $scope.noWrap();
	  };

	  $scope.pause = function() {
	    if (!$scope.noPause) {
	      isPlaying = false;
	      resetTimer();
	    }
	  };

	  $scope.play = function() {
	    if (!isPlaying) {
	      isPlaying = true;
	      restartTimer();
	    }
	  };

	  $scope.$on('$destroy', function() {
	    destroyed = true;
	    resetTimer();
	  });

	  $scope.$watch('noTransition', function(noTransition) {
	    $animate.enabled($element, !noTransition);
	  });

	  $scope.$watch('interval', restartTimer);

	  $scope.$watchCollection('slides', resetTransition);

	  $scope.$watch('active', function(index) {
	    if (angular.isNumber(index) && currentIndex !== index) {
	      for (var i = 0; i < slides.length; i++) {
	        if (slides[i].slide.index === index) {
	          index = i;
	          break;
	        }
	      }

	      var slide = slides[index];
	      if (slide) {
	        setActive(index);
	        self.select(slides[index]);
	        currentIndex = index;
	      }
	    }
	  });

	  function clearBufferedTransitions() {
	    while (bufferedTransitions.length) {
	      bufferedTransitions.shift();
	    }
	  }

	  function getSlideByIndex(index) {
	    for (var i = 0, l = slides.length; i < l; ++i) {
	      if (slides[i].index === index) {
	        return slides[i];
	      }
	    }
	  }

	  function setActive(index) {
	    for (var i = 0; i < slides.length; i++) {
	      slides[i].slide.active = i === index;
	    }
	  }

	  function goNext(slide, index, direction) {
	    if (destroyed) {
	      return;
	    }

	    angular.extend(slide, {direction: direction});
	    angular.extend(slides[currentIndex].slide || {}, {direction: direction});
	    if ($animate.enabled($element) && !$scope.$currentTransition &&
	      slides[index].element && self.slides.length > 1) {
	      slides[index].element.data(SLIDE_DIRECTION, slide.direction);
	      var currentIdx = self.getCurrentIndex();

	      if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
	        slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction);
	      }

	      $scope.$currentTransition = true;
	      $animate.on('addClass', slides[index].element, function(element, phase) {
	        if (phase === 'close') {
	          $scope.$currentTransition = null;
	          $animate.off('addClass', element);
	          if (bufferedTransitions.length) {
	            var nextSlide = bufferedTransitions.pop().slide;
	            var nextIndex = nextSlide.index;
	            var nextDirection = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
	            clearBufferedTransitions();

	            goNext(nextSlide, nextIndex, nextDirection);
	          }
	        }
	      });
	    }

	    $scope.active = slide.index;
	    currentIndex = slide.index;
	    setActive(index);

	    //every time you change slides, reset the timer
	    restartTimer();
	  }

	  function findSlideIndex(slide) {
	    for (var i = 0; i < slides.length; i++) {
	      if (slides[i].slide === slide) {
	        return i;
	      }
	    }
	  }

	  function resetTimer() {
	    if (currentInterval) {
	      $interval.cancel(currentInterval);
	      currentInterval = null;
	    }
	  }

	  function resetTransition(slides) {
	    if (!slides.length) {
	      $scope.$currentTransition = null;
	      clearBufferedTransitions();
	    }
	  }

	  function restartTimer() {
	    resetTimer();
	    var interval = +$scope.interval;
	    if (!isNaN(interval) && interval > 0) {
	      currentInterval = $interval(timerFn, interval);
	    }
	  }

	  function timerFn() {
	    var interval = +$scope.interval;
	    if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
	      $scope.next();
	    } else {
	      $scope.pause();
	    }
	  }
	}])

	.directive('uibCarousel', function() {
	  return {
	    transclude: true,
	    replace: true,
	    controller: 'UibCarouselController',
	    controllerAs: 'carousel',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/carousel/carousel.html';
	    },
	    scope: {
	      active: '=',
	      interval: '=',
	      noTransition: '=',
	      noPause: '=',
	      noWrap: '&'
	    }
	  };
	})

	.directive('uibSlide', function() {
	  return {
	    require: '^uibCarousel',
	    transclude: true,
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/carousel/slide.html';
	    },
	    scope: {
	      actual: '=?',
	      index: '=?'
	    },
	    link: function (scope, element, attrs, carouselCtrl) {
	      carouselCtrl.addSlide(scope, element);
	      //when the scope is destroyed then remove the slide from the current slides array
	      scope.$on('$destroy', function() {
	        carouselCtrl.removeSlide(scope);
	      });
	    }
	  };
	})

	.animation('.item', ['$animateCss',
	function($animateCss) {
	  var SLIDE_DIRECTION = 'uib-slideDirection';

	  function removeClass(element, className, callback) {
	    element.removeClass(className);
	    if (callback) {
	      callback();
	    }
	  }

	  return {
	    beforeAddClass: function(element, className, done) {
	      if (className === 'active') {
	        var stopped = false;
	        var direction = element.data(SLIDE_DIRECTION);
	        var directionClass = direction === 'next' ? 'left' : 'right';
	        var removeClassFn = removeClass.bind(this, element,
	          directionClass + ' ' + direction, done);
	        element.addClass(direction);

	        $animateCss(element, {addClass: directionClass})
	          .start()
	          .done(removeClassFn);

	        return function() {
	          stopped = true;
	        };
	      }
	      done();
	    },
	    beforeRemoveClass: function (element, className, done) {
	      if (className === 'active') {
	        var stopped = false;
	        var direction = element.data(SLIDE_DIRECTION);
	        var directionClass = direction === 'next' ? 'left' : 'right';
	        var removeClassFn = removeClass.bind(this, element, directionClass, done);

	        $animateCss(element, {addClass: directionClass})
	          .start()
	          .done(removeClassFn);

	        return function() {
	          stopped = true;
	        };
	      }
	      done();
	    }
	  };
	}]);

	angular.module('ui.bootstrap.dateparser', [])

	.service('uibDateParser', ['$log', '$locale', 'dateFilter', 'orderByFilter', function($log, $locale, dateFilter, orderByFilter) {
	  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
	  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

	  var localeId;
	  var formatCodeToRegex;

	  this.init = function() {
	    localeId = $locale.id;

	    this.parsers = {};
	    this.formatters = {};

	    formatCodeToRegex = [
	      {
	        key: 'yyyy',
	        regex: '\\d{4}',
	        apply: function(value) { this.year = +value; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'yyyy');
	        }
	      },
	      {
	        key: 'yy',
	        regex: '\\d{2}',
	        apply: function(value) { value = +value; this.year = value < 69 ? value + 2000 : value + 1900; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'yy');
	        }
	      },
	      {
	        key: 'y',
	        regex: '\\d{1,4}',
	        apply: function(value) { this.year = +value; },
	        formatter: function(date) {
	          var _date = new Date();
	          _date.setFullYear(Math.abs(date.getFullYear()));
	          return dateFilter(_date, 'y');
	        }
	      },
	      {
	        key: 'M!',
	        regex: '0?[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) {
	          var value = date.getMonth();
	          if (/^[0-9]$/.test(value)) {
	            return dateFilter(date, 'MM');
	          }

	          return dateFilter(date, 'M');
	        }
	      },
	      {
	        key: 'MMMM',
	        regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'MMMM'); }
	      },
	      {
	        key: 'MMM',
	        regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
	        apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); },
	        formatter: function(date) { return dateFilter(date, 'MMM'); }
	      },
	      {
	        key: 'MM',
	        regex: '0[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) { return dateFilter(date, 'MM'); }
	      },
	      {
	        key: 'M',
	        regex: '[1-9]|1[0-2]',
	        apply: function(value) { this.month = value - 1; },
	        formatter: function(date) { return dateFilter(date, 'M'); }
	      },
	      {
	        key: 'd!',
	        regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) {
	          var value = date.getDate();
	          if (/^[1-9]$/.test(value)) {
	            return dateFilter(date, 'dd');
	          }

	          return dateFilter(date, 'd');
	        }
	      },
	      {
	        key: 'dd',
	        regex: '[0-2][0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) { return dateFilter(date, 'dd'); }
	      },
	      {
	        key: 'd',
	        regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
	        apply: function(value) { this.date = +value; },
	        formatter: function(date) { return dateFilter(date, 'd'); }
	      },
	      {
	        key: 'EEEE',
	        regex: $locale.DATETIME_FORMATS.DAY.join('|'),
	        formatter: function(date) { return dateFilter(date, 'EEEE'); }
	      },
	      {
	        key: 'EEE',
	        regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
	        formatter: function(date) { return dateFilter(date, 'EEE'); }
	      },
	      {
	        key: 'HH',
	        regex: '(?:0|1)[0-9]|2[0-3]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'HH'); }
	      },
	      {
	        key: 'hh',
	        regex: '0[0-9]|1[0-2]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'hh'); }
	      },
	      {
	        key: 'H',
	        regex: '1?[0-9]|2[0-3]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'H'); }
	      },
	      {
	        key: 'h',
	        regex: '[0-9]|1[0-2]',
	        apply: function(value) { this.hours = +value; },
	        formatter: function(date) { return dateFilter(date, 'h'); }
	      },
	      {
	        key: 'mm',
	        regex: '[0-5][0-9]',
	        apply: function(value) { this.minutes = +value; },
	        formatter: function(date) { return dateFilter(date, 'mm'); }
	      },
	      {
	        key: 'm',
	        regex: '[0-9]|[1-5][0-9]',
	        apply: function(value) { this.minutes = +value; },
	        formatter: function(date) { return dateFilter(date, 'm'); }
	      },
	      {
	        key: 'sss',
	        regex: '[0-9][0-9][0-9]',
	        apply: function(value) { this.milliseconds = +value; },
	        formatter: function(date) { return dateFilter(date, 'sss'); }
	      },
	      {
	        key: 'ss',
	        regex: '[0-5][0-9]',
	        apply: function(value) { this.seconds = +value; },
	        formatter: function(date) { return dateFilter(date, 'ss'); }
	      },
	      {
	        key: 's',
	        regex: '[0-9]|[1-5][0-9]',
	        apply: function(value) { this.seconds = +value; },
	        formatter: function(date) { return dateFilter(date, 's'); }
	      },
	      {
	        key: 'a',
	        regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
	        apply: function(value) {
	          if (this.hours === 12) {
	            this.hours = 0;
	          }

	          if (value === 'PM') {
	            this.hours += 12;
	          }
	        },
	        formatter: function(date) { return dateFilter(date, 'a'); }
	      },
	      {
	        key: 'Z',
	        regex: '[+-]\\d{4}',
	        apply: function(value) {
	          var matches = value.match(/([+-])(\d{2})(\d{2})/),
	            sign = matches[1],
	            hours = matches[2],
	            minutes = matches[3];
	          this.hours += toInt(sign + hours);
	          this.minutes += toInt(sign + minutes);
	        },
	        formatter: function(date) {
	          return dateFilter(date, 'Z');
	        }
	      },
	      {
	        key: 'ww',
	        regex: '[0-4][0-9]|5[0-3]',
	        formatter: function(date) { return dateFilter(date, 'ww'); }
	      },
	      {
	        key: 'w',
	        regex: '[0-9]|[1-4][0-9]|5[0-3]',
	        formatter: function(date) { return dateFilter(date, 'w'); }
	      },
	      {
	        key: 'GGGG',
	        regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
	        formatter: function(date) { return dateFilter(date, 'GGGG'); }
	      },
	      {
	        key: 'GGG',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'GGG'); }
	      },
	      {
	        key: 'GG',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'GG'); }
	      },
	      {
	        key: 'G',
	        regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
	        formatter: function(date) { return dateFilter(date, 'G'); }
	      }
	    ];
	  };

	  this.init();

	  function createParser(format, func) {
	    var map = [], regex = format.split('');

	    // check for literal values
	    var quoteIndex = format.indexOf('\'');
	    if (quoteIndex > -1) {
	      var inLiteral = false;
	      format = format.split('');
	      for (var i = quoteIndex; i < format.length; i++) {
	        if (inLiteral) {
	          if (format[i] === '\'') {
	            if (i + 1 < format.length && format[i+1] === '\'') { // escaped single quote
	              format[i+1] = '$';
	              regex[i+1] = '';
	            } else { // end of literal
	              regex[i] = '';
	              inLiteral = false;
	            }
	          }
	          format[i] = '$';
	        } else {
	          if (format[i] === '\'') { // start of literal
	            format[i] = '$';
	            regex[i] = '';
	            inLiteral = true;
	          }
	        }
	      }

	      format = format.join('');
	    }

	    angular.forEach(formatCodeToRegex, function(data) {
	      var index = format.indexOf(data.key);

	      if (index > -1) {
	        format = format.split('');

	        regex[index] = '(' + data.regex + ')';
	        format[index] = '$'; // Custom symbol to define consumed part of format
	        for (var i = index + 1, n = index + data.key.length; i < n; i++) {
	          regex[i] = '';
	          format[i] = '$';
	        }
	        format = format.join('');

	        map.push({
	          index: index,
	          key: data.key,
	          apply: data[func],
	          matcher: data.regex
	        });
	      }
	    });

	    return {
	      regex: new RegExp('^' + regex.join('') + '$'),
	      map: orderByFilter(map, 'index')
	    };
	  }

	  this.filter = function(date, format) {
	    if (!angular.isDate(date) || isNaN(date) || !format) {
	      return '';
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;

	    if ($locale.id !== localeId) {
	      this.init();
	    }

	    if (!this.formatters[format]) {
	      this.formatters[format] = createParser(format, 'formatter');
	    }

	    var parser = this.formatters[format],
	      map = parser.map;

	    var _format = format;

	    return map.reduce(function(str, mapper, i) {
	      var match = _format.match(new RegExp('(.*)' + mapper.key));
	      if (match && angular.isString(match[1])) {
	        str += match[1];
	        _format = _format.replace(match[1] + mapper.key, '');
	      }

	      var endStr = i === map.length - 1 ? _format : '';

	      if (mapper.apply) {
	        return str + mapper.apply.call(null, date) + endStr;
	      }

	      return str + endStr;
	    }, '');
	  };

	  this.parse = function(input, format, baseDate) {
	    if (!angular.isString(input) || !format) {
	      return input;
	    }

	    format = $locale.DATETIME_FORMATS[format] || format;
	    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

	    if ($locale.id !== localeId) {
	      this.init();
	    }

	    if (!this.parsers[format]) {
	      this.parsers[format] = createParser(format, 'apply');
	    }

	    var parser = this.parsers[format],
	        regex = parser.regex,
	        map = parser.map,
	        results = input.match(regex),
	        tzOffset = false;
	    if (results && results.length) {
	      var fields, dt;
	      if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
	        fields = {
	          year: baseDate.getFullYear(),
	          month: baseDate.getMonth(),
	          date: baseDate.getDate(),
	          hours: baseDate.getHours(),
	          minutes: baseDate.getMinutes(),
	          seconds: baseDate.getSeconds(),
	          milliseconds: baseDate.getMilliseconds()
	        };
	      } else {
	        if (baseDate) {
	          $log.warn('dateparser:', 'baseDate is not a valid date');
	        }
	        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
	      }

	      for (var i = 1, n = results.length; i < n; i++) {
	        var mapper = map[i - 1];
	        if (mapper.matcher === 'Z') {
	          tzOffset = true;
	        }

	        if (mapper.apply) {
	          mapper.apply.call(fields, results[i]);
	        }
	      }

	      var datesetter = tzOffset ? Date.prototype.setUTCFullYear :
	        Date.prototype.setFullYear;
	      var timesetter = tzOffset ? Date.prototype.setUTCHours :
	        Date.prototype.setHours;

	      if (isValid(fields.year, fields.month, fields.date)) {
	        if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
	          dt = new Date(baseDate);
	          datesetter.call(dt, fields.year, fields.month, fields.date);
	          timesetter.call(dt, fields.hours, fields.minutes,
	            fields.seconds, fields.milliseconds);
	        } else {
	          dt = new Date(0);
	          datesetter.call(dt, fields.year, fields.month, fields.date);
	          timesetter.call(dt, fields.hours || 0, fields.minutes || 0,
	            fields.seconds || 0, fields.milliseconds || 0);
	        }
	      }

	      return dt;
	    }
	  };

	  // Check if date is valid for specific month (and year for February).
	  // Month: 0 = Jan, 1 = Feb, etc
	  function isValid(year, month, date) {
	    if (date < 1) {
	      return false;
	    }

	    if (month === 1 && date > 28) {
	      return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
	    }

	    if (month === 3 || month === 5 || month === 8 || month === 10) {
	      return date < 31;
	    }

	    return true;
	  }

	  function toInt(str) {
	    return parseInt(str, 10);
	  }

	  this.toTimezone = toTimezone;
	  this.fromTimezone = fromTimezone;
	  this.timezoneToOffset = timezoneToOffset;
	  this.addDateMinutes = addDateMinutes;
	  this.convertTimezoneToLocal = convertTimezoneToLocal;

	  function toTimezone(date, timezone) {
	    return date && timezone ? convertTimezoneToLocal(date, timezone) : date;
	  }

	  function fromTimezone(date, timezone) {
	    return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date;
	  }

	  //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207
	  function timezoneToOffset(timezone, fallback) {
	    timezone = timezone.replace(/:/g, '');
	    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	  }

	  function addDateMinutes(date, minutes) {
	    date = new Date(date.getTime());
	    date.setMinutes(date.getMinutes() + minutes);
	    return date;
	  }

	  function convertTimezoneToLocal(date, timezone, reverse) {
	    reverse = reverse ? -1 : 1;
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	  }
	}]);

	// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
	// at most one element.
	angular.module('ui.bootstrap.isClass', [])
	.directive('uibIsClass', [
	         '$animate',
	function ($animate) {
	  //                    11111111          22222222
	  var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/;
	  //                    11111111           22222222
	  var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;

	  var dataPerTracked = {};

	  return {
	    restrict: 'A',
	    compile: function(tElement, tAttrs) {
	      var linkedScopes = [];
	      var instances = [];
	      var expToData = {};
	      var lastActivated = null;
	      var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP);
	      var onExp = onExpMatches[2];
	      var expsStr = onExpMatches[1];
	      var exps = expsStr.split(',');

	      return linkFn;

	      function linkFn(scope, element, attrs) {
	        linkedScopes.push(scope);
	        instances.push({
	          scope: scope,
	          element: element
	        });

	        exps.forEach(function(exp, k) {
	          addForExp(exp, scope);
	        });

	        scope.$on('$destroy', removeScope);
	      }

	      function addForExp(exp, scope) {
	        var matches = exp.match(IS_REGEXP);
	        var clazz = scope.$eval(matches[1]);
	        var compareWithExp = matches[2];
	        var data = expToData[exp];
	        if (!data) {
	          var watchFn = function(compareWithVal) {
	            var newActivated = null;
	            instances.some(function(instance) {
	              var thisVal = instance.scope.$eval(onExp);
	              if (thisVal === compareWithVal) {
	                newActivated = instance;
	                return true;
	              }
	            });
	            if (data.lastActivated !== newActivated) {
	              if (data.lastActivated) {
	                $animate.removeClass(data.lastActivated.element, clazz);
	              }
	              if (newActivated) {
	                $animate.addClass(newActivated.element, clazz);
	              }
	              data.lastActivated = newActivated;
	            }
	          };
	          expToData[exp] = data = {
	            lastActivated: null,
	            scope: scope,
	            watchFn: watchFn,
	            compareWithExp: compareWithExp,
	            watcher: scope.$watch(compareWithExp, watchFn)
	          };
	        }
	        data.watchFn(scope.$eval(compareWithExp));
	      }

	      function removeScope(e) {
	        var removedScope = e.targetScope;
	        var index = linkedScopes.indexOf(removedScope);
	        linkedScopes.splice(index, 1);
	        instances.splice(index, 1);
	        if (linkedScopes.length) {
	          var newWatchScope = linkedScopes[0];
	          angular.forEach(expToData, function(data) {
	            if (data.scope === removedScope) {
	              data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn);
	              data.scope = newWatchScope;
	            }
	          });
	        } else {
	          expToData = {};
	        }
	      }
	    }
	  };
	}]);
	angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

	.value('$datepickerSuppressError', false)

	.value('$datepickerLiteralWarning', true)

	.constant('uibDatepickerConfig', {
	  datepickerMode: 'day',
	  formatDay: 'dd',
	  formatMonth: 'MMMM',
	  formatYear: 'yyyy',
	  formatDayHeader: 'EEE',
	  formatDayTitle: 'MMMM yyyy',
	  formatMonthTitle: 'yyyy',
	  maxDate: null,
	  maxMode: 'year',
	  minDate: null,
	  minMode: 'day',
	  ngModelOptions: {},
	  shortcutPropagation: false,
	  showWeeks: true,
	  yearColumns: 5,
	  yearRows: 4
	})

	.controller('UibDatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$locale', '$log', 'dateFilter', 'uibDatepickerConfig', '$datepickerLiteralWarning', '$datepickerSuppressError', 'uibDateParser',
	  function($scope, $attrs, $parse, $interpolate, $locale, $log, dateFilter, datepickerConfig, $datepickerLiteralWarning, $datepickerSuppressError, dateParser) {
	  var self = this,
	      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
	      ngModelOptions = {},
	      watchListeners = [],
	      optionsUsed = !!$attrs.datepickerOptions;

	  if (!$scope.datepickerOptions) {
	    $scope.datepickerOptions = {};
	  }

	  // Modes chain
	  this.modes = ['day', 'month', 'year'];

	  [
	    'customClass',
	    'dateDisabled',
	    'datepickerMode',
	    'formatDay',
	    'formatDayHeader',
	    'formatDayTitle',
	    'formatMonth',
	    'formatMonthTitle',
	    'formatYear',
	    'maxDate',
	    'maxMode',
	    'minDate',
	    'minMode',
	    'showWeeks',
	    'shortcutPropagation',
	    'startingDay',
	    'yearColumns',
	    'yearRows'
	  ].forEach(function(key) {
	    switch (key) {
	      case 'customClass':
	      case 'dateDisabled':
	        $scope[key] = $scope.datepickerOptions[key] || angular.noop;
	        break;
	      case 'datepickerMode':
	        $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode) ?
	          $scope.datepickerOptions.datepickerMode : datepickerConfig.datepickerMode;
	        break;
	      case 'formatDay':
	      case 'formatDayHeader':
	      case 'formatDayTitle':
	      case 'formatMonth':
	      case 'formatMonthTitle':
	      case 'formatYear':
	        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
	          $interpolate($scope.datepickerOptions[key])($scope.$parent) :
	          datepickerConfig[key];
	        break;
	      case 'showWeeks':
	      case 'shortcutPropagation':
	      case 'yearColumns':
	      case 'yearRows':
	        self[key] = angular.isDefined($scope.datepickerOptions[key]) ?
	          $scope.datepickerOptions[key] : datepickerConfig[key];
	        break;
	      case 'startingDay':
	        if (angular.isDefined($scope.datepickerOptions.startingDay)) {
	          self.startingDay = $scope.datepickerOptions.startingDay;
	        } else if (angular.isNumber(datepickerConfig.startingDay)) {
	          self.startingDay = datepickerConfig.startingDay;
	        } else {
	          self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;
	        }

	        break;
	      case 'maxDate':
	      case 'minDate':
	        $scope.$watch('datepickerOptions.' + key, function(value) {
	          if (value) {
	            if (angular.isDate(value)) {
	              self[key] = dateParser.fromTimezone(new Date(value), ngModelOptions.timezone);
	            } else {
	              if ($datepickerLiteralWarning) {
	                $log.warn('Literal date support has been deprecated, please switch to date object usage');
	              }

	              self[key] = new Date(dateFilter(value, 'medium'));
	            }
	          } else {
	            self[key] = datepickerConfig[key] ?
	              dateParser.fromTimezone(new Date(datepickerConfig[key]), ngModelOptions.timezone) :
	              null;
	          }

	          self.refreshView();
	        });

	        break;
	      case 'maxMode':
	      case 'minMode':
	        if ($scope.datepickerOptions[key]) {
	          $scope.$watch(function() { return $scope.datepickerOptions[key]; }, function(value) {
	            self[key] = $scope[key] = angular.isDefined(value) ? value : datepickerOptions[key];
	            if (key === 'minMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) < self.modes.indexOf(self[key]) ||
	              key === 'maxMode' && self.modes.indexOf($scope.datepickerOptions.datepickerMode) > self.modes.indexOf(self[key])) {
	              $scope.datepickerMode = self[key];
	              $scope.datepickerOptions.datepickerMode = self[key];
	            }
	          });
	        } else {
	          self[key] = $scope[key] = datepickerConfig[key] || null;
	        }

	        break;
	    }
	  });

	  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

	  $scope.disabled = angular.isDefined($attrs.disabled) || false;
	  if (angular.isDefined($attrs.ngDisabled)) {
	    watchListeners.push($scope.$parent.$watch($attrs.ngDisabled, function(disabled) {
	      $scope.disabled = disabled;
	      self.refreshView();
	    }));
	  }

	  $scope.isActive = function(dateObject) {
	    if (self.compare(dateObject.date, self.activeDate) === 0) {
	      $scope.activeDateId = dateObject.uid;
	      return true;
	    }
	    return false;
	  };

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelOptions = ngModelCtrl_.$options || datepickerConfig.ngModelOptions;
	    if ($scope.datepickerOptions.initDate) {
	      self.activeDate = dateParser.fromTimezone($scope.datepickerOptions.initDate, ngModelOptions.timezone) || new Date();
	      $scope.$watch('datepickerOptions.initDate', function(initDate) {
	        if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
	          self.activeDate = dateParser.fromTimezone(initDate, ngModelOptions.timezone);
	          self.refreshView();
	        }
	      });
	    } else {
	      self.activeDate = new Date();
	    }

	    var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date();
	    this.activeDate = !isNaN(date) ?
	      dateParser.fromTimezone(date, ngModelOptions.timezone) :
	      dateParser.fromTimezone(new Date(), ngModelOptions.timezone);

	    ngModelCtrl.$render = function() {
	      self.render();
	    };
	  };

	  this.render = function() {
	    if (ngModelCtrl.$viewValue) {
	      var date = new Date(ngModelCtrl.$viewValue),
	          isValid = !isNaN(date);

	      if (isValid) {
	        this.activeDate = dateParser.fromTimezone(date, ngModelOptions.timezone);
	      } else if (!$datepickerSuppressError) {
	        $log.error('Datepicker directive: "ng-model" value must be a Date object');
	      }
	    }
	    this.refreshView();
	  };

	  this.refreshView = function() {
	    if (this.element) {
	      $scope.selectedDt = null;
	      this._refreshView();
	      if ($scope.activeDt) {
	        $scope.activeDateId = $scope.activeDt.uid;
	      }

	      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
	      date = dateParser.fromTimezone(date, ngModelOptions.timezone);
	      ngModelCtrl.$setValidity('dateDisabled', !date ||
	        this.element && !this.isDisabled(date));
	    }
	  };

	  this.createDateObject = function(date, format) {
	    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
	    model = dateParser.fromTimezone(model, ngModelOptions.timezone);
	    var today = new Date();
	    today = dateParser.fromTimezone(today, ngModelOptions.timezone);
	    var time = this.compare(date, today);
	    var dt = {
	      date: date,
	      label: dateParser.filter(date, format),
	      selected: model && this.compare(date, model) === 0,
	      disabled: this.isDisabled(date),
	      past: time < 0,
	      current: time === 0,
	      future: time > 0,
	      customClass: this.customClass(date) || null
	    };

	    if (model && this.compare(date, model) === 0) {
	      $scope.selectedDt = dt;
	    }

	    if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
	      $scope.activeDt = dt;
	    }

	    return dt;
	  };

	  this.isDisabled = function(date) {
	    return $scope.disabled ||
	      this.minDate && this.compare(date, this.minDate) < 0 ||
	      this.maxDate && this.compare(date, this.maxDate) > 0 ||
	      $scope.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode});
	  };

	  this.customClass = function(date) {
	    return $scope.customClass({date: date, mode: $scope.datepickerMode});
	  };

	  // Split array into smaller arrays
	  this.split = function(arr, size) {
	    var arrays = [];
	    while (arr.length > 0) {
	      arrays.push(arr.splice(0, size));
	    }
	    return arrays;
	  };

	  $scope.select = function(date) {
	    if ($scope.datepickerMode === self.minMode) {
	      var dt = ngModelCtrl.$viewValue ? dateParser.fromTimezone(new Date(ngModelCtrl.$viewValue), ngModelOptions.timezone) : new Date(0, 0, 0, 0, 0, 0, 0);
	      dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	      dt = dateParser.toTimezone(dt, ngModelOptions.timezone);
	      ngModelCtrl.$setViewValue(dt);
	      ngModelCtrl.$render();
	    } else {
	      self.activeDate = date;
	      setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1]);

	      $scope.$emit('uib:datepicker.mode');
	    }

	    $scope.$broadcast('uib:datepicker.focus');
	  };

	  $scope.move = function(direction) {
	    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
	        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
	    self.activeDate.setFullYear(year, month, 1);
	    self.refreshView();
	  };

	  $scope.toggleMode = function(direction) {
	    direction = direction || 1;

	    if ($scope.datepickerMode === self.maxMode && direction === 1 ||
	      $scope.datepickerMode === self.minMode && direction === -1) {
	      return;
	    }

	    setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction]);

	    $scope.$emit('uib:datepicker.mode');
	  };

	  // Key event mapper
	  $scope.keys = { 13: 'enter', 32: 'space', 33: 'pageup', 34: 'pagedown', 35: 'end', 36: 'home', 37: 'left', 38: 'up', 39: 'right', 40: 'down' };

	  var focusElement = function() {
	    self.element[0].focus();
	  };

	  // Listen for focus requests from popup directive
	  $scope.$on('uib:datepicker.focus', focusElement);

	  $scope.keydown = function(evt) {
	    var key = $scope.keys[evt.which];

	    if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
	      return;
	    }

	    evt.preventDefault();
	    if (!self.shortcutPropagation) {
	      evt.stopPropagation();
	    }

	    if (key === 'enter' || key === 'space') {
	      if (self.isDisabled(self.activeDate)) {
	        return; // do nothing
	      }
	      $scope.select(self.activeDate);
	    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
	      $scope.toggleMode(key === 'up' ? 1 : -1);
	    } else {
	      self.handleKeyDown(key, evt);
	      self.refreshView();
	    }
	  };

	  $scope.$on('$destroy', function() {
	    //Clear all watch listeners on destroy
	    while (watchListeners.length) {
	      watchListeners.shift()();
	    }
	  });

	  function setMode(mode) {
	    $scope.datepickerMode = mode;
	    $scope.datepickerOptions.datepickerMode = mode;
	  }
	}])

	.controller('UibDaypickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

	  this.step = { months: 1 };
	  this.element = $element;
	  function getDaysInMonth(year, month) {
	    return month === 1 && year % 4 === 0 &&
	      (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
	  }

	  this.init = function(ctrl) {
	    angular.extend(ctrl, this);
	    scope.showWeeks = ctrl.showWeeks;
	    ctrl.refreshView();
	  };

	  this.getDates = function(startDate, n) {
	    var dates = new Array(n), current = new Date(startDate), i = 0, date;
	    while (i < n) {
	      date = new Date(current);
	      dates[i++] = date;
	      current.setDate(current.getDate() + 1);
	    }
	    return dates;
	  };

	  this._refreshView = function() {
	    var year = this.activeDate.getFullYear(),
	      month = this.activeDate.getMonth(),
	      firstDayOfMonth = new Date(this.activeDate);

	    firstDayOfMonth.setFullYear(year, month, 1);

	    var difference = this.startingDay - firstDayOfMonth.getDay(),
	      numDisplayedFromPreviousMonth = difference > 0 ?
	        7 - difference : - difference,
	      firstDate = new Date(firstDayOfMonth);

	    if (numDisplayedFromPreviousMonth > 0) {
	      firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
	    }

	    // 42 is the number of days on a six-week calendar
	    var days = this.getDates(firstDate, 42);
	    for (var i = 0; i < 42; i ++) {
	      days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
	        secondary: days[i].getMonth() !== month,
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.labels = new Array(7);
	    for (var j = 0; j < 7; j++) {
	      scope.labels[j] = {
	        abbr: dateFilter(days[j].date, this.formatDayHeader),
	        full: dateFilter(days[j].date, 'EEEE')
	      };
	    }

	    scope.title = dateFilter(this.activeDate, this.formatDayTitle);
	    scope.rows = this.split(days, 7);

	    if (scope.showWeeks) {
	      scope.weekNumbers = [];
	      var thursdayIndex = (4 + 7 - this.startingDay) % 7,
	          numWeeks = scope.rows.length;
	      for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
	        scope.weekNumbers.push(
	          getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
	      }
	    }
	  };

	  this.compare = function(date1, date2) {
	    var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
	    var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
	    _date1.setFullYear(date1.getFullYear());
	    _date2.setFullYear(date2.getFullYear());
	    return _date1 - _date2;
	  };

	  function getISO8601WeekNumber(date) {
	    var checkDate = new Date(date);
	    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
	    var time = checkDate.getTime();
	    checkDate.setMonth(0); // Compare with Jan 1
	    checkDate.setDate(1);
	    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	  }

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getDate();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - 7;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + 7;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      var month = this.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
	      this.activeDate.setMonth(month, 1);
	      date = Math.min(getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()), date);
	    } else if (key === 'home') {
	      date = 1;
	    } else if (key === 'end') {
	      date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth());
	    }
	    this.activeDate.setDate(date);
	  };
	}])

	.controller('UibMonthpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  this.step = { years: 1 };
	  this.element = $element;

	  this.init = function(ctrl) {
	    angular.extend(ctrl, this);
	    ctrl.refreshView();
	  };

	  this._refreshView = function() {
	    var months = new Array(12),
	        year = this.activeDate.getFullYear(),
	        date;

	    for (var i = 0; i < 12; i++) {
	      date = new Date(this.activeDate);
	      date.setFullYear(year, i, 1);
	      months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.title = dateFilter(this.activeDate, this.formatMonthTitle);
	    scope.rows = this.split(months, 3);
	  };

	  this.compare = function(date1, date2) {
	    var _date1 = new Date(date1.getFullYear(), date1.getMonth());
	    var _date2 = new Date(date2.getFullYear(), date2.getMonth());
	    _date1.setFullYear(date1.getFullYear());
	    _date2.setFullYear(date2.getFullYear());
	    return _date1 - _date2;
	  };

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getMonth();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - 3;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + 3;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      var year = this.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
	      this.activeDate.setFullYear(year);
	    } else if (key === 'home') {
	      date = 0;
	    } else if (key === 'end') {
	      date = 11;
	    }
	    this.activeDate.setMonth(date);
	  };
	}])

	.controller('UibYearpickerController', ['$scope', '$element', 'dateFilter', function(scope, $element, dateFilter) {
	  var columns, range;
	  this.element = $element;

	  function getStartingYear(year) {
	    return parseInt((year - 1) / range, 10) * range + 1;
	  }

	  this.yearpickerInit = function() {
	    columns = this.yearColumns;
	    range = this.yearRows * columns;
	    this.step = { years: range };
	  };

	  this._refreshView = function() {
	    var years = new Array(range), date;

	    for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
	      date = new Date(this.activeDate);
	      date.setFullYear(start + i, 0, 1);
	      years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
	        uid: scope.uniqueId + '-' + i
	      });
	    }

	    scope.title = [years[0].label, years[range - 1].label].join(' - ');
	    scope.rows = this.split(years, columns);
	    scope.columns = columns;
	  };

	  this.compare = function(date1, date2) {
	    return date1.getFullYear() - date2.getFullYear();
	  };

	  this.handleKeyDown = function(key, evt) {
	    var date = this.activeDate.getFullYear();

	    if (key === 'left') {
	      date = date - 1;
	    } else if (key === 'up') {
	      date = date - columns;
	    } else if (key === 'right') {
	      date = date + 1;
	    } else if (key === 'down') {
	      date = date + columns;
	    } else if (key === 'pageup' || key === 'pagedown') {
	      date += (key === 'pageup' ? - 1 : 1) * range;
	    } else if (key === 'home') {
	      date = getStartingYear(this.activeDate.getFullYear());
	    } else if (key === 'end') {
	      date = getStartingYear(this.activeDate.getFullYear()) + range - 1;
	    }
	    this.activeDate.setFullYear(date);
	  };
	}])

	.directive('uibDatepicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/datepicker.html';
	    },
	    scope: {
	      datepickerOptions: '=?'
	    },
	    require: ['uibDatepicker', '^ngModel'],
	    controller: 'UibDatepickerController',
	    controllerAs: 'datepicker',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      datepickerCtrl.init(ngModelCtrl);
	    }
	  };
	})

	.directive('uibDaypicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/day.html';
	    },
	    require: ['^uibDatepicker', 'uibDaypicker'],
	    controller: 'UibDaypickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0],
	        daypickerCtrl = ctrls[1];

	      daypickerCtrl.init(datepickerCtrl);
	    }
	  };
	})

	.directive('uibMonthpicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/month.html';
	    },
	    require: ['^uibDatepicker', 'uibMonthpicker'],
	    controller: 'UibMonthpickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var datepickerCtrl = ctrls[0],
	        monthpickerCtrl = ctrls[1];

	      monthpickerCtrl.init(datepickerCtrl);
	    }
	  };
	})

	.directive('uibYearpicker', function() {
	  return {
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepicker/year.html';
	    },
	    require: ['^uibDatepicker', 'uibYearpicker'],
	    controller: 'UibYearpickerController',
	    link: function(scope, element, attrs, ctrls) {
	      var ctrl = ctrls[0];
	      angular.extend(ctrl, ctrls[1]);
	      ctrl.yearpickerInit();

	      ctrl.refreshView();
	    }
	  };
	});

	angular.module('ui.bootstrap.position', [])

	/**
	 * A set of utility methods for working with the DOM.
	 * It is meant to be used where we need to absolute-position elements in
	 * relation to another element (this is the case for tooltips, popovers,
	 * typeahead suggestions etc.).
	 */
	  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
	    /**
	     * Used by scrollbarWidth() function to cache scrollbar's width.
	     * Do not access this variable directly, use scrollbarWidth() instead.
	     */
	    var SCROLLBAR_WIDTH;
	    /**
	     * scrollbar on body and html element in IE and Edge overlay
	     * content and should be considered 0 width.
	     */
	    var BODY_SCROLLBAR_WIDTH;
	    var OVERFLOW_REGEX = {
	      normal: /(auto|scroll)/,
	      hidden: /(auto|scroll|hidden)/
	    };
	    var PLACEMENT_REGEX = {
	      auto: /\s?auto?\s?/i,
	      primary: /^(top|bottom|left|right)$/,
	      secondary: /^(top|bottom|left|right|center)$/,
	      vertical: /^(top|bottom)$/
	    };
	    var BODY_REGEX = /(HTML|BODY)/;

	    return {

	      /**
	       * Provides a raw DOM element from a jQuery/jQLite element.
	       *
	       * @param {element} elem - The element to convert.
	       *
	       * @returns {element} A HTML element.
	       */
	      getRawNode: function(elem) {
	        return elem.nodeName ? elem : elem[0] || elem;
	      },

	      /**
	       * Provides a parsed number for a style property.  Strips
	       * units and casts invalid numbers to 0.
	       *
	       * @param {string} value - The style value to parse.
	       *
	       * @returns {number} A valid number.
	       */
	      parseStyle: function(value) {
	        value = parseFloat(value);
	        return isFinite(value) ? value : 0;
	      },

	      /**
	       * Provides the closest positioned ancestor.
	       *
	       * @param {element} element - The element to get the offest parent for.
	       *
	       * @returns {element} The closest positioned ancestor.
	       */
	      offsetParent: function(elem) {
	        elem = this.getRawNode(elem);

	        var offsetParent = elem.offsetParent || $document[0].documentElement;

	        function isStaticPositioned(el) {
	          return ($window.getComputedStyle(el).position || 'static') === 'static';
	        }

	        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
	          offsetParent = offsetParent.offsetParent;
	        }

	        return offsetParent || $document[0].documentElement;
	      },

	      /**
	       * Provides the scrollbar width, concept from TWBS measureScrollbar()
	       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
	       * In IE and Edge, scollbar on body and html element overlay and should
	       * return a width of 0.
	       *
	       * @returns {number} The width of the browser scollbar.
	       */
	      scrollbarWidth: function(isBody) {
	        if (isBody) {
	          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
	            var bodyElem = $document.find('body');
	            bodyElem.addClass('uib-position-body-scrollbar-measure');
	            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
	            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
	            bodyElem.removeClass('uib-position-body-scrollbar-measure');
	          }
	          return BODY_SCROLLBAR_WIDTH;
	        }

	        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
	          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
	          $document.find('body').append(scrollElem);
	          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
	          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
	          scrollElem.remove();
	        }

	        return SCROLLBAR_WIDTH;
	      },

	      /**
	       * Provides the padding required on an element to replace the scrollbar.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
	       *     <li>**widthOverflow**: whether the the width is overflowing</li>
	       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
	       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
	       *     <li>**heightOverflow**: whether the the height is overflowing</li>
	       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
	       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
	       *   </ul>
	       */
	      scrollbarPadding: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemStyle = $window.getComputedStyle(elem);
	        var paddingRight = this.parseStyle(elemStyle.paddingRight);
	        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
	        var scrollParent = this.scrollParent(elem, false, true);
	        var scrollbarWidth = this.scrollbarWidth(scrollParent, BODY_REGEX.test(scrollParent.tagName));

	        return {
	          scrollbarWidth: scrollbarWidth,
	          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
	          right: paddingRight + scrollbarWidth,
	          originalRight: paddingRight,
	          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
	          bottom: paddingBottom + scrollbarWidth,
	          originalBottom: paddingBottom
	         };
	      },

	      /**
	       * Checks to see if the element is scrollable.
	       *
	       * @param {element} elem - The element to check.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       *
	       * @returns {boolean} Whether the element is scrollable.
	       */
	      isScrollable: function(elem, includeHidden) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var elemStyle = $window.getComputedStyle(elem);
	        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
	      },

	      /**
	       * Provides the closest scrollable ancestor.
	       * A port of the jQuery UI scrollParent method:
	       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
	       *
	       * @param {element} elem - The element to find the scroll parent of.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       * @param {boolean=} [includeSelf=false] - Should the element being passed be
	       * included in the scrollable llokup.
	       *
	       * @returns {element} A HTML element.
	       */
	      scrollParent: function(elem, includeHidden, includeSelf) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var documentEl = $document[0].documentElement;
	        var elemStyle = $window.getComputedStyle(elem);
	        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
	          return elem;
	        }
	        var excludeStatic = elemStyle.position === 'absolute';
	        var scrollParent = elem.parentElement || documentEl;

	        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
	          return documentEl;
	        }

	        while (scrollParent.parentElement && scrollParent !== documentEl) {
	          var spStyle = $window.getComputedStyle(scrollParent);
	          if (excludeStatic && spStyle.position !== 'static') {
	            excludeStatic = false;
	          }

	          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
	            break;
	          }
	          scrollParent = scrollParent.parentElement;
	        }

	        return scrollParent;
	      },

	      /**
	       * Provides read-only equivalent of jQuery's position function:
	       * http://api.jquery.com/position/ - distance to closest positioned
	       * ancestor.  Does not account for margins by default like jQuery position.
	       *
	       * @param {element} elem - The element to caclulate the position on.
	       * @param {boolean=} [includeMargins=false] - Should margins be accounted
	       * for, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of offset parent</li>
	       *     <li>**left**: distance to left edge of offset parent</li>
	       *   </ul>
	       */
	      position: function(elem, includeMagins) {
	        elem = this.getRawNode(elem);

	        var elemOffset = this.offset(elem);
	        if (includeMagins) {
	          var elemStyle = $window.getComputedStyle(elem);
	          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
	          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
	        }
	        var parent = this.offsetParent(elem);
	        var parentOffset = {top: 0, left: 0};

	        if (parent !== $document[0].documentElement) {
	          parentOffset = this.offset(parent);
	          parentOffset.top += parent.clientTop - parent.scrollTop;
	          parentOffset.left += parent.clientLeft - parent.scrollLeft;
	        }

	        return {
	          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
	          top: Math.round(elemOffset.top - parentOffset.top),
	          left: Math.round(elemOffset.left - parentOffset.left)
	        };
	      },

	      /**
	       * Provides read-only equivalent of jQuery's offset function:
	       * http://api.jquery.com/offset/ - distance to viewport.  Does
	       * not account for borders, margins, or padding on the body
	       * element.
	       *
	       * @param {element} elem - The element to calculate the offset on.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of viewport</li>
	       *     <li>**right**: distance to bottom edge of viewport</li>
	       *   </ul>
	       */
	      offset: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemBCR = elem.getBoundingClientRect();
	        return {
	          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
	          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
	          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
	        };
	      },

	      /**
	       * Provides offset distance to the closest scrollable ancestor
	       * or viewport.  Accounts for border and scrollbar width.
	       *
	       * Right and bottom dimensions represent the distance to the
	       * respective edge of the viewport element.  If the element
	       * edge extends beyond the viewport, a negative value will be
	       * reported.
	       *
	       * @param {element} elem - The element to get the viewport offset for.
	       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
	       * of the first scrollable element, default is false.
	       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
	       * be accounted for, default is true.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: distance to the top content edge of viewport element</li>
	       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
	       *     <li>**left**: distance to the left content edge of viewport element</li>
	       *     <li>**right**: distance to the right content edge of viewport element</li>
	       *   </ul>
	       */
	      viewportOffset: function(elem, useDocument, includePadding) {
	        elem = this.getRawNode(elem);
	        includePadding = includePadding !== false ? true : false;

	        var elemBCR = elem.getBoundingClientRect();
	        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

	        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
	        var offsetParentBCR = offsetParent.getBoundingClientRect();

	        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
	        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
	        if (offsetParent === $document[0].documentElement) {
	          offsetBCR.top += $window.pageYOffset;
	          offsetBCR.left += $window.pageXOffset;
	        }
	        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
	        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

	        if (includePadding) {
	          var offsetParentStyle = $window.getComputedStyle(offsetParent);
	          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
	          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
	          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
	          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
	        }

	        return {
	          top: Math.round(elemBCR.top - offsetBCR.top),
	          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
	          left: Math.round(elemBCR.left - offsetBCR.left),
	          right: Math.round(offsetBCR.right - elemBCR.right)
	        };
	      },

	      /**
	       * Provides an array of placement values parsed from a placement string.
	       * Along with the 'auto' indicator, supported placement strings are:
	       *   <ul>
	       *     <li>top: element on top, horizontally centered on host element.</li>
	       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
	       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
	       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
	       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
	       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
	       *     <li>left: element on left, vertically centered on host element.</li>
	       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
	       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
	       *     <li>right: element on right, vertically centered on host element.</li>
	       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
	       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
	       *   </ul>
	       * A placement string with an 'auto' indicator is expected to be
	       * space separated from the placement, i.e: 'auto bottom-left'  If
	       * the primary and secondary placement values do not match 'top,
	       * bottom, left, right' then 'top' will be the primary placement and
	       * 'center' will be the secondary placement.  If 'auto' is passed, true
	       * will be returned as the 3rd value of the array.
	       *
	       * @param {string} placement - The placement string to parse.
	       *
	       * @returns {array} An array with the following values
	       * <ul>
	       *   <li>**[0]**: The primary placement.</li>
	       *   <li>**[1]**: The secondary placement.</li>
	       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
	       * </ul>
	       */
	      parsePlacement: function(placement) {
	        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
	        if (autoPlace) {
	          placement = placement.replace(PLACEMENT_REGEX.auto, '');
	        }

	        placement = placement.split('-');

	        placement[0] = placement[0] || 'top';
	        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
	          placement[0] = 'top';
	        }

	        placement[1] = placement[1] || 'center';
	        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
	          placement[1] = 'center';
	        }

	        if (autoPlace) {
	          placement[2] = true;
	        } else {
	          placement[2] = false;
	        }

	        return placement;
	      },

	      /**
	       * Provides coordinates for an element to be positioned relative to
	       * another element.  Passing 'auto' as part of the placement parameter
	       * will enable smart placement - where the element fits. i.e:
	       * 'auto left-top' will check to see if there is enough space to the left
	       * of the hostElem to fit the targetElem, if not place right (same for secondary
	       * top placement).  Available space is calculated using the viewportOffset
	       * function.
	       *
	       * @param {element} hostElem - The element to position against.
	       * @param {element} targetElem - The element to position.
	       * @param {string=} [placement=top] - The placement for the targetElem,
	       *   default is 'top'. 'center' is assumed as secondary placement for
	       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
	       *   <ul>
	       *     <li>top</li>
	       *     <li>top-right</li>
	       *     <li>top-left</li>
	       *     <li>bottom</li>
	       *     <li>bottom-left</li>
	       *     <li>bottom-right</li>
	       *     <li>left</li>
	       *     <li>left-top</li>
	       *     <li>left-bottom</li>
	       *     <li>right</li>
	       *     <li>right-top</li>
	       *     <li>right-bottom</li>
	       *   </ul>
	       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
	       *   be calculated from the body element, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: Value for targetElem top.</li>
	       *     <li>**left**: Value for targetElem left.</li>
	       *     <li>**placement**: The resolved placement.</li>
	       *   </ul>
	       */
	      positionElements: function(hostElem, targetElem, placement, appendToBody) {
	        hostElem = this.getRawNode(hostElem);
	        targetElem = this.getRawNode(targetElem);

	        // need to read from prop to support tests.
	        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
	        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

	        placement = this.parsePlacement(placement);

	        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
	        var targetElemPos = {top: 0, left: 0, placement: ''};

	        if (placement[2]) {
	          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

	          var targetElemStyle = $window.getComputedStyle(targetElem);
	          var adjustedSize = {
	            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
	            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
	          };

	          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
	                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
	                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
	                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
	                         placement[0];

	          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
	                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
	                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
	                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
	                         placement[1];

	          if (placement[1] === 'center') {
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
	              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
	                placement[1] = 'left';
	              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
	                placement[1] = 'right';
	              }
	            } else {
	              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
	              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
	                placement[1] = 'top';
	              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
	                placement[1] = 'bottom';
	              }
	            }
	          }
	        }

	        switch (placement[0]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top - targetHeight;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left - targetWidth;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width;
	            break;
	        }

	        switch (placement[1]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
	            break;
	          case 'center':
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
	            } else {
	              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
	            }
	            break;
	        }

	        targetElemPos.top = Math.round(targetElemPos.top);
	        targetElemPos.left = Math.round(targetElemPos.left);
	        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

	        return targetElemPos;
	      },

	      /**
	      * Provides a way for positioning tooltip & dropdown
	      * arrows when using placement options beyond the standard
	      * left, right, top, or bottom.
	      *
	      * @param {element} elem - The tooltip/dropdown element.
	      * @param {string} placement - The placement for the elem.
	      */
	      positionArrow: function(elem, placement) {
	        elem = this.getRawNode(elem);

	        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
	        if (!innerElem) {
	          return;
	        }

	        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

	        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
	        if (!arrowElem) {
	          return;
	        }

	        var arrowCss = {
	          top: '',
	          bottom: '',
	          left: '',
	          right: ''
	        };

	        placement = this.parsePlacement(placement);
	        if (placement[1] === 'center') {
	          // no adjustment necessary - just reset styles
	          angular.element(arrowElem).css(arrowCss);
	          return;
	        }

	        var borderProp = 'border-' + placement[0] + '-width';
	        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

	        var borderRadiusProp = 'border-';
	        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	          borderRadiusProp += placement[0] + '-' + placement[1];
	        } else {
	          borderRadiusProp += placement[1] + '-' + placement[0];
	        }
	        borderRadiusProp += '-radius';
	        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

	        switch (placement[0]) {
	          case 'top':
	            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'bottom':
	            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'left':
	            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'right':
	            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
	            break;
	        }

	        arrowCss[placement[1]] = borderRadius;

	        angular.element(arrowElem).css(arrowCss);
	      }
	    };
	  }]);

	angular.module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

	.value('$datepickerPopupLiteralWarning', true)

	.constant('uibDatepickerPopupConfig', {
	  altInputFormats: [],
	  appendToBody: false,
	  clearText: 'Clear',
	  closeOnDateSelection: true,
	  closeText: 'Done',
	  currentText: 'Today',
	  datepickerPopup: 'yyyy-MM-dd',
	  datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
	  datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
	  html5Types: {
	    date: 'yyyy-MM-dd',
	    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
	    'month': 'yyyy-MM'
	  },
	  onOpenFocus: true,
	  showButtonBar: true,
	  placement: 'auto bottom-left'
	})

	.controller('UibDatepickerPopupController', ['$scope', '$element', '$attrs', '$compile', '$log', '$parse', '$window', '$document', '$rootScope', '$uibPosition', 'dateFilter', 'uibDateParser', 'uibDatepickerPopupConfig', '$timeout', 'uibDatepickerConfig', '$datepickerPopupLiteralWarning',
	function($scope, $element, $attrs, $compile, $log, $parse, $window, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout, datepickerConfig, $datepickerPopupLiteralWarning) {
	  var cache = {},
	    isHtml5DateInput = false;
	  var dateFormat, closeOnDateSelection, appendToBody, onOpenFocus,
	    datepickerPopupTemplateUrl, datepickerTemplateUrl, popupEl, datepickerEl, scrollParentEl,
	    ngModel, ngModelOptions, $popup, altInputFormats, watchListeners = [],
	    timezone;

	  this.init = function(_ngModel_) {
	    ngModel = _ngModel_;
	    ngModelOptions = _ngModel_.$options;
	    closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection) ?
	      $scope.$parent.$eval($attrs.closeOnDateSelection) :
	      datepickerPopupConfig.closeOnDateSelection;
	    appendToBody = angular.isDefined($attrs.datepickerAppendToBody) ?
	      $scope.$parent.$eval($attrs.datepickerAppendToBody) :
	      datepickerPopupConfig.appendToBody;
	    onOpenFocus = angular.isDefined($attrs.onOpenFocus) ?
	      $scope.$parent.$eval($attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus;
	    datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl) ?
	      $attrs.datepickerPopupTemplateUrl :
	      datepickerPopupConfig.datepickerPopupTemplateUrl;
	    datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl) ?
	      $attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl;
	    altInputFormats = angular.isDefined($attrs.altInputFormats) ?
	      $scope.$parent.$eval($attrs.altInputFormats) :
	      datepickerPopupConfig.altInputFormats;

	    $scope.showButtonBar = angular.isDefined($attrs.showButtonBar) ?
	      $scope.$parent.$eval($attrs.showButtonBar) :
	      datepickerPopupConfig.showButtonBar;

	    if (datepickerPopupConfig.html5Types[$attrs.type]) {
	      dateFormat = datepickerPopupConfig.html5Types[$attrs.type];
	      isHtml5DateInput = true;
	    } else {
	      dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup;
	      $attrs.$observe('uibDatepickerPopup', function(value, oldValue) {
	        var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
	        // Invalidate the $modelValue to ensure that formatters re-run
	        // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
	        if (newDateFormat !== dateFormat) {
	          dateFormat = newDateFormat;
	          ngModel.$modelValue = null;

	          if (!dateFormat) {
	            throw new Error('uibDatepickerPopup must have a date format specified.');
	          }
	        }
	      });
	    }

	    if (!dateFormat) {
	      throw new Error('uibDatepickerPopup must have a date format specified.');
	    }

	    if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
	      throw new Error('HTML5 date input types do not support custom formats.');
	    }

	    // popup element used to display calendar
	    popupEl = angular.element('<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>');
	    if (ngModelOptions) {
	      timezone = ngModelOptions.timezone;
	      $scope.ngModelOptions = angular.copy(ngModelOptions);
	      $scope.ngModelOptions.timezone = null;
	      if ($scope.ngModelOptions.updateOnDefault === true) {
	        $scope.ngModelOptions.updateOn = $scope.ngModelOptions.updateOn ?
	          $scope.ngModelOptions.updateOn + ' default' : 'default';
	      }

	      popupEl.attr('ng-model-options', 'ngModelOptions');
	    } else {
	      timezone = null;
	    }

	    popupEl.attr({
	      'ng-model': 'date',
	      'ng-change': 'dateSelection(date)',
	      'template-url': datepickerPopupTemplateUrl
	    });

	    // datepicker element
	    datepickerEl = angular.element(popupEl.children()[0]);
	    datepickerEl.attr('template-url', datepickerTemplateUrl);

	    if (!$scope.datepickerOptions) {
	      $scope.datepickerOptions = {};
	    }

	    if (isHtml5DateInput) {
	      if ($attrs.type === 'month') {
	        $scope.datepickerOptions.datepickerMode = 'month';
	        $scope.datepickerOptions.minMode = 'month';
	      }
	    }

	    datepickerEl.attr('datepicker-options', 'datepickerOptions');

	    if (!isHtml5DateInput) {
	      // Internal API to maintain the correct ng-invalid-[key] class
	      ngModel.$$parserName = 'date';
	      ngModel.$validators.date = validator;
	      ngModel.$parsers.unshift(parseDate);
	      ngModel.$formatters.push(function(value) {
	        if (ngModel.$isEmpty(value)) {
	          $scope.date = value;
	          return value;
	        }

	        if (angular.isNumber(value)) {
	          value = new Date(value);
	        }

	        $scope.date = dateParser.fromTimezone(value, timezone);

	        return dateParser.filter($scope.date, dateFormat);
	      });
	    } else {
	      ngModel.$formatters.push(function(value) {
	        $scope.date = dateParser.fromTimezone(value, timezone);
	        return value;
	      });
	    }

	    // Detect changes in the view from the text box
	    ngModel.$viewChangeListeners.push(function() {
	      $scope.date = parseDateString(ngModel.$viewValue);
	    });

	    $element.on('keydown', inputKeydownBind);

	    $popup = $compile(popupEl)($scope);
	    // Prevent jQuery cache memory leak (template is now redundant after linking)
	    popupEl.remove();

	    if (appendToBody) {
	      $document.find('body').append($popup);
	    } else {
	      $element.after($popup);
	    }

	    $scope.$on('$destroy', function() {
	      if ($scope.isOpen === true) {
	        if (!$rootScope.$$phase) {
	          $scope.$apply(function() {
	            $scope.isOpen = false;
	          });
	        }
	      }

	      $popup.remove();
	      $element.off('keydown', inputKeydownBind);
	      $document.off('click', documentClickBind);
	      if (scrollParentEl) {
	        scrollParentEl.off('scroll', positionPopup);
	      }
	      angular.element($window).off('resize', positionPopup);

	      //Clear all watch listeners on destroy
	      while (watchListeners.length) {
	        watchListeners.shift()();
	      }
	    });
	  };

	  $scope.getText = function(key) {
	    return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
	  };

	  $scope.isDisabled = function(date) {
	    if (date === 'today') {
	      date = dateParser.fromTimezone(new Date(), timezone);
	    }

	    var dates = {};
	    angular.forEach(['minDate', 'maxDate'], function(key) {
	      if (!$scope.datepickerOptions[key]) {
	        dates[key] = null;
	      } else if (angular.isDate($scope.datepickerOptions[key])) {
	        dates[key] = dateParser.fromTimezone(new Date($scope.datepickerOptions[key]), timezone);
	      } else {
	        if ($datepickerPopupLiteralWarning) {
	          $log.warn('Literal date support has been deprecated, please switch to date object usage');
	        }

	        dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'));
	      }
	    });

	    return $scope.datepickerOptions &&
	      dates.minDate && $scope.compare(date, dates.minDate) < 0 ||
	      dates.maxDate && $scope.compare(date, dates.maxDate) > 0;
	  };

	  $scope.compare = function(date1, date2) {
	    return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
	  };

	  // Inner change
	  $scope.dateSelection = function(dt) {
	    if (angular.isDefined(dt)) {
	      $scope.date = dt;
	    }
	    var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null; // Setting to NULL is necessary for form validators to function
	    $element.val(date);
	    ngModel.$setViewValue(date);

	    if (closeOnDateSelection) {
	      $scope.isOpen = false;
	      $element[0].focus();
	    }
	  };

	  $scope.keydown = function(evt) {
	    if (evt.which === 27) {
	      evt.stopPropagation();
	      $scope.isOpen = false;
	      $element[0].focus();
	    }
	  };

	  $scope.select = function(date, evt) {
	    evt.stopPropagation();

	    if (date === 'today') {
	      var today = new Date();
	      if (angular.isDate($scope.date)) {
	        date = new Date($scope.date);
	        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
	      } else {
	        date = new Date(today.setHours(0, 0, 0, 0));
	      }
	    }
	    $scope.dateSelection(date);
	  };

	  $scope.close = function(evt) {
	    evt.stopPropagation();

	    $scope.isOpen = false;
	    $element[0].focus();
	  };

	  $scope.disabled = angular.isDefined($attrs.disabled) || false;
	  if ($attrs.ngDisabled) {
	    watchListeners.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(disabled) {
	      $scope.disabled = disabled;
	    }));
	  }

	  $scope.$watch('isOpen', function(value) {
	    if (value) {
	      if (!$scope.disabled) {
	        $timeout(function() {
	          positionPopup();

	          if (onOpenFocus) {
	            $scope.$broadcast('uib:datepicker.focus');
	          }

	          $document.on('click', documentClickBind);

	          var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
	          if (appendToBody || $position.parsePlacement(placement)[2]) {
	            scrollParentEl = scrollParentEl || angular.element($position.scrollParent($element));
	            if (scrollParentEl) {
	              scrollParentEl.on('scroll', positionPopup);
	            }
	          } else {
	            scrollParentEl = null;
	          }

	          angular.element($window).on('resize', positionPopup);
	        }, 0, false);
	      } else {
	        $scope.isOpen = false;
	      }
	    } else {
	      $document.off('click', documentClickBind);
	      if (scrollParentEl) {
	        scrollParentEl.off('scroll', positionPopup);
	      }
	      angular.element($window).off('resize', positionPopup);
	    }
	  });

	  function cameltoDash(string) {
	    return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
	  }

	  function parseDateString(viewValue) {
	    var date = dateParser.parse(viewValue, dateFormat, $scope.date);
	    if (isNaN(date)) {
	      for (var i = 0; i < altInputFormats.length; i++) {
	        date = dateParser.parse(viewValue, altInputFormats[i], $scope.date);
	        if (!isNaN(date)) {
	          return date;
	        }
	      }
	    }
	    return date;
	  }

	  function parseDate(viewValue) {
	    if (angular.isNumber(viewValue)) {
	      // presumably timestamp to date object
	      viewValue = new Date(viewValue);
	    }

	    if (!viewValue) {
	      return null;
	    }

	    if (angular.isDate(viewValue) && !isNaN(viewValue)) {
	      return viewValue;
	    }

	    if (angular.isString(viewValue)) {
	      var date = parseDateString(viewValue);
	      if (!isNaN(date)) {
	        return dateParser.toTimezone(date, timezone);
	      }
	    }

	    return ngModel.$options && ngModel.$options.allowInvalid ? viewValue : undefined;
	  }

	  function validator(modelValue, viewValue) {
	    var value = modelValue || viewValue;

	    if (!$attrs.ngRequired && !value) {
	      return true;
	    }

	    if (angular.isNumber(value)) {
	      value = new Date(value);
	    }

	    if (!value) {
	      return true;
	    }

	    if (angular.isDate(value) && !isNaN(value)) {
	      return true;
	    }

	    if (angular.isString(value)) {
	      return !isNaN(parseDateString(viewValue));
	    }

	    return false;
	  }

	  function documentClickBind(event) {
	    if (!$scope.isOpen && $scope.disabled) {
	      return;
	    }

	    var popup = $popup[0];
	    var dpContainsTarget = $element[0].contains(event.target);
	    // The popup node may not be an element node
	    // In some browsers (IE) only element nodes have the 'contains' function
	    var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target);
	    if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
	      $scope.$apply(function() {
	        $scope.isOpen = false;
	      });
	    }
	  }

	  function inputKeydownBind(evt) {
	    if (evt.which === 27 && $scope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.$apply(function() {
	        $scope.isOpen = false;
	      });
	      $element[0].focus();
	    } else if (evt.which === 40 && !$scope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.$apply(function() {
	        $scope.isOpen = true;
	      });
	    }
	  }

	  function positionPopup() {
	    if ($scope.isOpen) {
	      var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'));
	      var placement = $attrs.popupPlacement ? $attrs.popupPlacement : datepickerPopupConfig.placement;
	      var position = $position.positionElements($element, dpElement, placement, appendToBody);
	      dpElement.css({top: position.top + 'px', left: position.left + 'px'});
	      if (dpElement.hasClass('uib-position-measure')) {
	        dpElement.removeClass('uib-position-measure');
	      }
	    }
	  }

	  $scope.$on('uib:datepicker.mode', function() {
	    $timeout(positionPopup, 0, false);
	  });
	}])

	.directive('uibDatepickerPopup', function() {
	  return {
	    require: ['ngModel', 'uibDatepickerPopup'],
	    controller: 'UibDatepickerPopupController',
	    scope: {
	      datepickerOptions: '=?',
	      isOpen: '=?',
	      currentText: '@',
	      clearText: '@',
	      closeText: '@'
	    },
	    link: function(scope, element, attrs, ctrls) {
	      var ngModel = ctrls[0],
	        ctrl = ctrls[1];

	      ctrl.init(ngModel);
	    }
	  };
	})

	.directive('uibDatepickerPopupWrap', function() {
	  return {
	    replace: true,
	    transclude: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html';
	    }
	  };
	});

	angular.module('ui.bootstrap.debounce', [])
	/**
	 * A helper, internal service that debounces a function
	 */
	  .factory('$$debounce', ['$timeout', function($timeout) {
	    return function(callback, debounceTime) {
	      var timeoutPromise;

	      return function() {
	        var self = this;
	        var args = Array.prototype.slice.call(arguments);
	        if (timeoutPromise) {
	          $timeout.cancel(timeoutPromise);
	        }

	        timeoutPromise = $timeout(function() {
	          callback.apply(self, args);
	        }, debounceTime);
	      };
	    };
	  }]);

	angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])

	.constant('uibDropdownConfig', {
	  appendToOpenClass: 'uib-dropdown-open',
	  openClass: 'open'
	})

	.service('uibDropdownService', ['$document', '$rootScope', function($document, $rootScope) {
	  var openScope = null;

	  this.open = function(dropdownScope, element) {
	    if (!openScope) {
	      $document.on('click', closeDropdown);
	      element.on('keydown', keybindFilter);
	    }

	    if (openScope && openScope !== dropdownScope) {
	      openScope.isOpen = false;
	    }

	    openScope = dropdownScope;
	  };

	  this.close = function(dropdownScope, element) {
	    if (openScope === dropdownScope) {
	      openScope = null;
	      $document.off('click', closeDropdown);
	      element.off('keydown', keybindFilter);
	    }
	  };

	  var closeDropdown = function(evt) {
	    // This method may still be called during the same mouse event that
	    // unbound this event handler. So check openScope before proceeding.
	    if (!openScope) { return; }

	    if (evt && openScope.getAutoClose() === 'disabled') { return; }

	    if (evt && evt.which === 3) { return; }

	    var toggleElement = openScope.getToggleElement();
	    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
	      return;
	    }

	    var dropdownElement = openScope.getDropdownElement();
	    if (evt && openScope.getAutoClose() === 'outsideClick' &&
	      dropdownElement && dropdownElement[0].contains(evt.target)) {
	      return;
	    }

	    openScope.isOpen = false;

	    if (!$rootScope.$$phase) {
	      openScope.$apply();
	    }
	  };

	  var keybindFilter = function(evt) {
	    if (evt.which === 27) {
	      evt.stopPropagation();
	      openScope.focusToggleElement();
	      closeDropdown();
	    } else if (openScope.isKeynavEnabled() && [38, 40].indexOf(evt.which) !== -1 && openScope.isOpen) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      openScope.focusDropdownEntry(evt.which);
	    }
	  };
	}])

	.controller('UibDropdownController', ['$scope', '$element', '$attrs', '$parse', 'uibDropdownConfig', 'uibDropdownService', '$animate', '$uibPosition', '$document', '$compile', '$templateRequest', function($scope, $element, $attrs, $parse, dropdownConfig, uibDropdownService, $animate, $position, $document, $compile, $templateRequest) {
	  var self = this,
	    scope = $scope.$new(), // create a child scope so we are not polluting original one
	    templateScope,
	    appendToOpenClass = dropdownConfig.appendToOpenClass,
	    openClass = dropdownConfig.openClass,
	    getIsOpen,
	    setIsOpen = angular.noop,
	    toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
	    appendToBody = false,
	    appendTo = null,
	    keynavEnabled = false,
	    selectedOption = null,
	    body = $document.find('body');

	  $element.addClass('dropdown');

	  this.init = function() {
	    if ($attrs.isOpen) {
	      getIsOpen = $parse($attrs.isOpen);
	      setIsOpen = getIsOpen.assign;

	      $scope.$watch(getIsOpen, function(value) {
	        scope.isOpen = !!value;
	      });
	    }

	    if (angular.isDefined($attrs.dropdownAppendTo)) {
	      var appendToEl = $parse($attrs.dropdownAppendTo)(scope);
	      if (appendToEl) {
	        appendTo = angular.element(appendToEl);
	      }
	    }

	    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);
	    keynavEnabled = angular.isDefined($attrs.keyboardNav);

	    if (appendToBody && !appendTo) {
	      appendTo = body;
	    }

	    if (appendTo && self.dropdownMenu) {
	      appendTo.append(self.dropdownMenu);
	      $element.on('$destroy', function handleDestroyEvent() {
	        self.dropdownMenu.remove();
	      });
	    }
	  };

	  this.toggle = function(open) {
	    scope.isOpen = arguments.length ? !!open : !scope.isOpen;
	    if (angular.isFunction(setIsOpen)) {
	      setIsOpen(scope, scope.isOpen);
	    }

	    return scope.isOpen;
	  };

	  // Allow other directives to watch status
	  this.isOpen = function() {
	    return scope.isOpen;
	  };

	  scope.getToggleElement = function() {
	    return self.toggleElement;
	  };

	  scope.getAutoClose = function() {
	    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
	  };

	  scope.getElement = function() {
	    return $element;
	  };

	  scope.isKeynavEnabled = function() {
	    return keynavEnabled;
	  };

	  scope.focusDropdownEntry = function(keyCode) {
	    var elems = self.dropdownMenu ? //If append to body is used.
	      angular.element(self.dropdownMenu).find('a') :
	      $element.find('ul').eq(0).find('a');

	    switch (keyCode) {
	      case 40: {
	        if (!angular.isNumber(self.selectedOption)) {
	          self.selectedOption = 0;
	        } else {
	          self.selectedOption = self.selectedOption === elems.length - 1 ?
	            self.selectedOption :
	            self.selectedOption + 1;
	        }
	        break;
	      }
	      case 38: {
	        if (!angular.isNumber(self.selectedOption)) {
	          self.selectedOption = elems.length - 1;
	        } else {
	          self.selectedOption = self.selectedOption === 0 ?
	            0 : self.selectedOption - 1;
	        }
	        break;
	      }
	    }
	    elems[self.selectedOption].focus();
	  };

	  scope.getDropdownElement = function() {
	    return self.dropdownMenu;
	  };

	  scope.focusToggleElement = function() {
	    if (self.toggleElement) {
	      self.toggleElement[0].focus();
	    }
	  };

	  scope.$watch('isOpen', function(isOpen, wasOpen) {
	    if (appendTo && self.dropdownMenu) {
	      var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
	        css,
	        rightalign,
	        scrollbarWidth;

	      css = {
	        top: pos.top + 'px',
	        display: isOpen ? 'block' : 'none'
	      };

	      rightalign = self.dropdownMenu.hasClass('dropdown-menu-right');
	      if (!rightalign) {
	        css.left = pos.left + 'px';
	        css.right = 'auto';
	      } else {
	        css.left = 'auto';
	        scrollbarWidth = $position.scrollbarWidth(true);
	        css.right = window.innerWidth - scrollbarWidth -
	          (pos.left + $element.prop('offsetWidth')) + 'px';
	      }

	      // Need to adjust our positioning to be relative to the appendTo container
	      // if it's not the body element
	      if (!appendToBody) {
	        var appendOffset = $position.offset(appendTo);

	        css.top = pos.top - appendOffset.top + 'px';

	        if (!rightalign) {
	          css.left = pos.left - appendOffset.left + 'px';
	        } else {
	          css.right = window.innerWidth -
	            (pos.left - appendOffset.left + $element.prop('offsetWidth')) + 'px';
	        }
	      }

	      self.dropdownMenu.css(css);
	    }

	    var openContainer = appendTo ? appendTo : $element;
	    var hasOpenClass = openContainer.hasClass(appendTo ? appendToOpenClass : openClass);

	    if (hasOpenClass === !isOpen) {
	      $animate[isOpen ? 'addClass' : 'removeClass'](openContainer, appendTo ? appendToOpenClass : openClass).then(function() {
	        if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
	          toggleInvoker($scope, { open: !!isOpen });
	        }
	      });
	    }

	    if (isOpen) {
	      if (self.dropdownMenuTemplateUrl) {
	        $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
	          templateScope = scope.$new();
	          $compile(tplContent.trim())(templateScope, function(dropdownElement) {
	            var newEl = dropdownElement;
	            self.dropdownMenu.replaceWith(newEl);
	            self.dropdownMenu = newEl;
	          });
	        });
	      }

	      scope.focusToggleElement();
	      uibDropdownService.open(scope, $element);
	    } else {
	      if (self.dropdownMenuTemplateUrl) {
	        if (templateScope) {
	          templateScope.$destroy();
	        }
	        var newEl = angular.element('<ul class="dropdown-menu"></ul>');
	        self.dropdownMenu.replaceWith(newEl);
	        self.dropdownMenu = newEl;
	      }

	      uibDropdownService.close(scope, $element);
	      self.selectedOption = null;
	    }

	    if (angular.isFunction(setIsOpen)) {
	      setIsOpen($scope, isOpen);
	    }
	  });
	}])

	.directive('uibDropdown', function() {
	  return {
	    controller: 'UibDropdownController',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      dropdownCtrl.init();
	    }
	  };
	})

	.directive('uibDropdownMenu', function() {
	  return {
	    restrict: 'A',
	    require: '?^uibDropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
	        return;
	      }

	      element.addClass('dropdown-menu');

	      var tplUrl = attrs.templateUrl;
	      if (tplUrl) {
	        dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
	      }

	      if (!dropdownCtrl.dropdownMenu) {
	        dropdownCtrl.dropdownMenu = element;
	      }
	    }
	  };
	})

	.directive('uibDropdownToggle', function() {
	  return {
	    require: '?^uibDropdown',
	    link: function(scope, element, attrs, dropdownCtrl) {
	      if (!dropdownCtrl) {
	        return;
	      }

	      element.addClass('dropdown-toggle');

	      dropdownCtrl.toggleElement = element;

	      var toggleDropdown = function(event) {
	        event.preventDefault();

	        if (!element.hasClass('disabled') && !attrs.disabled) {
	          scope.$apply(function() {
	            dropdownCtrl.toggle();
	          });
	        }
	      };

	      element.bind('click', toggleDropdown);

	      // WAI-ARIA
	      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
	      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
	        element.attr('aria-expanded', !!isOpen);
	      });

	      scope.$on('$destroy', function() {
	        element.unbind('click', toggleDropdown);
	      });
	    }
	  };
	});

	angular.module('ui.bootstrap.stackedMap', [])
	/**
	 * A helper, internal data structure that acts as a map but also allows getting / removing
	 * elements in the LIFO order
	 */
	  .factory('$$stackedMap', function() {
	    return {
	      createNew: function() {
	        var stack = [];

	        return {
	          add: function(key, value) {
	            stack.push({
	              key: key,
	              value: value
	            });
	          },
	          get: function(key) {
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                return stack[i];
	              }
	            }
	          },
	          keys: function() {
	            var keys = [];
	            for (var i = 0; i < stack.length; i++) {
	              keys.push(stack[i].key);
	            }
	            return keys;
	          },
	          top: function() {
	            return stack[stack.length - 1];
	          },
	          remove: function(key) {
	            var idx = -1;
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                idx = i;
	                break;
	              }
	            }
	            return stack.splice(idx, 1)[0];
	          },
	          removeTop: function() {
	            return stack.splice(stack.length - 1, 1)[0];
	          },
	          length: function() {
	            return stack.length;
	          }
	        };
	      }
	    };
	  });
	angular.module('ui.bootstrap.modal', ['ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
	/**
	 * A helper, internal data structure that stores all references attached to key
	 */
	  .factory('$$multiMap', function() {
	    return {
	      createNew: function() {
	        var map = {};

	        return {
	          entries: function() {
	            return Object.keys(map).map(function(key) {
	              return {
	                key: key,
	                value: map[key]
	              };
	            });
	          },
	          get: function(key) {
	            return map[key];
	          },
	          hasKey: function(key) {
	            return !!map[key];
	          },
	          keys: function() {
	            return Object.keys(map);
	          },
	          put: function(key, value) {
	            if (!map[key]) {
	              map[key] = [];
	            }

	            map[key].push(value);
	          },
	          remove: function(key, value) {
	            var values = map[key];

	            if (!values) {
	              return;
	            }

	            var idx = values.indexOf(value);

	            if (idx !== -1) {
	              values.splice(idx, 1);
	            }

	            if (!values.length) {
	              delete map[key];
	            }
	          }
	        };
	      }
	    };
	  })

	/**
	 * Pluggable resolve mechanism for the modal resolve resolution
	 * Supports UI Router's $resolve service
	 */
	  .provider('$uibResolve', function() {
	    var resolve = this;
	    this.resolver = null;

	    this.setResolver = function(resolver) {
	      this.resolver = resolver;
	    };

	    this.$get = ['$injector', '$q', function($injector, $q) {
	      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
	      return {
	        resolve: function(invocables, locals, parent, self) {
	          if (resolver) {
	            return resolver.resolve(invocables, locals, parent, self);
	          }

	          var promises = [];

	          angular.forEach(invocables, function(value) {
	            if (angular.isFunction(value) || angular.isArray(value)) {
	              promises.push($q.resolve($injector.invoke(value)));
	            } else if (angular.isString(value)) {
	              promises.push($q.resolve($injector.get(value)));
	            } else {
	              promises.push($q.resolve(value));
	            }
	          });

	          return $q.all(promises).then(function(resolves) {
	            var resolveObj = {};
	            var resolveIter = 0;
	            angular.forEach(invocables, function(value, key) {
	              resolveObj[key] = resolves[resolveIter++];
	            });

	            return resolveObj;
	          });
	        }
	      };
	    }];
	  })

	/**
	 * A helper directive for the $modal service. It creates a backdrop element.
	 */
	  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
	  function($animate, $injector, $modalStack) {
	    return {
	      replace: true,
	      templateUrl: 'uib/template/modal/backdrop.html',
	      compile: function(tElement, tAttrs) {
	        tElement.addClass(tAttrs.backdropClass);
	        return linkFn;
	      }
	    };

	    function linkFn(scope, element, attrs) {
	      if (attrs.modalInClass) {
	        $animate.addClass(element, attrs.modalInClass);

	        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	          var done = setIsAsync();
	          if (scope.modalOptions.animation) {
	            $animate.removeClass(element, attrs.modalInClass).then(done);
	          } else {
	            done();
	          }
	        });
	      }
	    }
	  }])

	  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
	  function($modalStack, $q, $animateCss, $document) {
	    return {
	      scope: {
	        index: '@'
	      },
	      replace: true,
	      transclude: true,
	      templateUrl: function(tElement, tAttrs) {
	        return tAttrs.templateUrl || 'uib/template/modal/window.html';
	      },
	      link: function(scope, element, attrs) {
	        element.addClass(attrs.windowClass || '');
	        element.addClass(attrs.windowTopClass || '');
	        scope.size = attrs.size;

	        scope.close = function(evt) {
	          var modal = $modalStack.getTop();
	          if (modal && modal.value.backdrop &&
	            modal.value.backdrop !== 'static' &&
	            evt.target === evt.currentTarget) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            $modalStack.dismiss(modal.key, 'backdrop click');
	          }
	        };

	        // moved from template to fix issue #2280
	        element.on('click', scope.close);

	        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
	        // We can detect that by using this property in the template associated with this directive and then use
	        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
	        scope.$isRendered = true;

	        // Deferred object that will be resolved when this modal is render.
	        var modalRenderDeferObj = $q.defer();
	        // Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.
	        // In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.
	        attrs.$observe('modalRender', function(value) {
	          if (value === 'true') {
	            modalRenderDeferObj.resolve();
	          }
	        });

	        modalRenderDeferObj.promise.then(function() {
	          var animationPromise = null;

	          if (attrs.modalInClass) {
	            animationPromise = $animateCss(element, {
	              addClass: attrs.modalInClass
	            }).start();

	            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	              var done = setIsAsync();
	              $animateCss(element, {
	                removeClass: attrs.modalInClass
	              }).start().then(done);
	            });
	          }


	          $q.when(animationPromise).then(function() {
	            // Notify {@link $modalStack} that modal is rendered.
	            var modal = $modalStack.getTop();
	            if (modal) {
	              $modalStack.modalRendered(modal.key);
	            }

	            /**
	             * If something within the freshly-opened modal already has focus (perhaps via a
	             * directive that causes focus). then no need to try and focus anything.
	             */
	            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
	              var inputWithAutofocus = element[0].querySelector('[autofocus]');
	              /**
	               * Auto-focusing of a freshly-opened modal element causes any child elements
	               * with the autofocus attribute to lose focus. This is an issue on touch
	               * based devices which will show and then hide the onscreen keyboard.
	               * Attempts to refocus the autofocus element via JavaScript will not reopen
	               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
	               * the modal element if the modal does not contain an autofocus element.
	               */
	              if (inputWithAutofocus) {
	                inputWithAutofocus.focus();
	              } else {
	                element[0].focus();
	              }
	            }
	          });
	        });
	      }
	    };
	  }])

	  .directive('uibModalAnimationClass', function() {
	    return {
	      compile: function(tElement, tAttrs) {
	        if (tAttrs.modalAnimation) {
	          tElement.addClass(tAttrs.uibModalAnimationClass);
	        }
	      }
	    };
	  })

	  .directive('uibModalTransclude', function() {
	    return {
	      link: function(scope, element, attrs, controller, transclude) {
	        transclude(scope.$parent, function(clone) {
	          element.empty();
	          element.append(clone);
	        });
	      }
	    };
	  })

	  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
	    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
	    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
	      var OPENED_MODAL_CLASS = 'modal-open';

	      var backdropDomEl, backdropScope;
	      var openedWindows = $$stackedMap.createNew();
	      var openedClasses = $$multiMap.createNew();
	      var $modalStack = {
	        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
	      };
	      var topModalIndex = 0;
	      var previousTopOpenedModal = null;

	      //Modal focus behavior
	      var tabableSelector = 'a[href], area[href], input:not([disabled]), ' +
	        'button:not([disabled]),select:not([disabled]), textarea:not([disabled]), ' +
	        'iframe, object, embed, *[tabindex], *[contenteditable=true]';
	      var scrollbarPadding;

	      function isVisible(element) {
	        return !!(element.offsetWidth ||
	          element.offsetHeight ||
	          element.getClientRects().length);
	      }

	      function backdropIndex() {
	        var topBackdropIndex = -1;
	        var opened = openedWindows.keys();
	        for (var i = 0; i < opened.length; i++) {
	          if (openedWindows.get(opened[i]).value.backdrop) {
	            topBackdropIndex = i;
	          }
	        }

	        // If any backdrop exist, ensure that it's index is always
	        // right below the top modal
	        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
	          topBackdropIndex = topModalIndex;
	        }
	        return topBackdropIndex;
	      }

	      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
	        if (backdropScope) {
	          backdropScope.index = newBackdropIndex;
	        }
	      });

	      function removeModalWindow(modalInstance, elementToReceiveFocus) {
	        var modalWindow = openedWindows.get(modalInstance).value;
	        var appendToElement = modalWindow.appendTo;

	        //clean up the stack
	        openedWindows.remove(modalInstance);
	        previousTopOpenedModal = openedWindows.top();
	        if (previousTopOpenedModal) {
	          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
	        }

	        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
	          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
	          openedClasses.remove(modalBodyClass, modalInstance);
	          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
	          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
	          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            if (scrollbarPadding.originalRight) {
	              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
	            } else {
	              appendToElement.css({paddingRight: ''});
	            }
	            scrollbarPadding = null;
	          }
	          toggleTopWindowClass(true);
	        }, modalWindow.closedDeferred);
	        checkRemoveBackdrop();

	        //move focus to specified element if available, or else to body
	        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
	          elementToReceiveFocus.focus();
	        } else if (appendToElement.focus) {
	          appendToElement.focus();
	        }
	      }

	      // Add or remove "windowTopClass" from the top window in the stack
	      function toggleTopWindowClass(toggleSwitch) {
	        var modalWindow;

	        if (openedWindows.length() > 0) {
	          modalWindow = openedWindows.top().value;
	          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
	        }
	      }

	      function checkRemoveBackdrop() {
	        //remove backdrop if no longer needed
	        if (backdropDomEl && backdropIndex() === -1) {
	          var backdropScopeRef = backdropScope;
	          removeAfterAnimate(backdropDomEl, backdropScope, function() {
	            backdropScopeRef = null;
	          });
	          backdropDomEl = undefined;
	          backdropScope = undefined;
	        }
	      }

	      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
	        var asyncDeferred;
	        var asyncPromise = null;
	        var setIsAsync = function() {
	          if (!asyncDeferred) {
	            asyncDeferred = $q.defer();
	            asyncPromise = asyncDeferred.promise;
	          }

	          return function asyncDone() {
	            asyncDeferred.resolve();
	          };
	        };
	        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

	        // Note that it's intentional that asyncPromise might be null.
	        // That's when setIsAsync has not been called during the
	        // NOW_CLOSING_EVENT broadcast.
	        return $q.when(asyncPromise).then(afterAnimating);

	        function afterAnimating() {
	          if (afterAnimating.done) {
	            return;
	          }
	          afterAnimating.done = true;

	          $animate.leave(domEl).then(function() {
	            domEl.remove();
	            if (closedDeferred) {
	              closedDeferred.resolve();
	            }
	          });

	          scope.$destroy();
	          if (done) {
	            done();
	          }
	        }
	      }

	      $document.on('keydown', keydownListener);

	      $rootScope.$on('$destroy', function() {
	        $document.off('keydown', keydownListener);
	      });

	      function keydownListener(evt) {
	        if (evt.isDefaultPrevented()) {
	          return evt;
	        }

	        var modal = openedWindows.top();
	        if (modal) {
	          switch (evt.which) {
	            case 27: {
	              if (modal.value.keyboard) {
	                evt.preventDefault();
	                $rootScope.$apply(function() {
	                  $modalStack.dismiss(modal.key, 'escape key press');
	                });
	              }
	              break;
	            }
	            case 9: {
	              var list = $modalStack.loadFocusElementList(modal);
	              var focusChanged = false;
	              if (evt.shiftKey) {
	                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
	                  focusChanged = $modalStack.focusLastFocusableElement(list);
	                }
	              } else {
	                if ($modalStack.isFocusInLastItem(evt, list)) {
	                  focusChanged = $modalStack.focusFirstFocusableElement(list);
	                }
	              }

	              if (focusChanged) {
	                evt.preventDefault();
	                evt.stopPropagation();
	              }

	              break;
	            }
	          }
	        }
	      }

	      $modalStack.open = function(modalInstance, modal) {
	        var modalOpener = $document[0].activeElement,
	          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

	        toggleTopWindowClass(false);

	        // Store the current top first, to determine what index we ought to use
	        // for the current top modal
	        previousTopOpenedModal = openedWindows.top();

	        openedWindows.add(modalInstance, {
	          deferred: modal.deferred,
	          renderDeferred: modal.renderDeferred,
	          closedDeferred: modal.closedDeferred,
	          modalScope: modal.scope,
	          backdrop: modal.backdrop,
	          keyboard: modal.keyboard,
	          openedClass: modal.openedClass,
	          windowTopClass: modal.windowTopClass,
	          animation: modal.animation,
	          appendTo: modal.appendTo
	        });

	        openedClasses.put(modalBodyClass, modalInstance);

	        var appendToElement = modal.appendTo,
	            currBackdropIndex = backdropIndex();

	        if (!appendToElement.length) {
	          throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
	        }

	        if (currBackdropIndex >= 0 && !backdropDomEl) {
	          backdropScope = $rootScope.$new(true);
	          backdropScope.modalOptions = modal;
	          backdropScope.index = currBackdropIndex;
	          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
	          backdropDomEl.attr('backdrop-class', modal.backdropClass);
	          if (modal.animation) {
	            backdropDomEl.attr('modal-animation', 'true');
	          }
	          $compile(backdropDomEl)(backdropScope);
	          $animate.enter(backdropDomEl, appendToElement);
	          scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
	          if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
	          }
	        }

	        // Set the top modal index based on the index of the previous top modal
	        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
	        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
	        angularDomEl.attr({
	          'template-url': modal.windowTemplateUrl,
	          'window-class': modal.windowClass,
	          'window-top-class': modal.windowTopClass,
	          'size': modal.size,
	          'index': topModalIndex,
	          'animate': 'animate'
	        }).html(modal.content);
	        if (modal.animation) {
	          angularDomEl.attr('modal-animation', 'true');
	        }

	        appendToElement.addClass(modalBodyClass);
	        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

	        openedWindows.top().value.modalDomEl = angularDomEl;
	        openedWindows.top().value.modalOpener = modalOpener;
	      };

	      function broadcastClosing(modalWindow, resultOrReason, closing) {
	        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
	      }

	      $modalStack.close = function(modalInstance, result) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.resolve(result);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismiss = function(modalInstance, reason) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.reject(reason);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismissAll = function(reason) {
	        var topModal = this.getTop();
	        while (topModal && this.dismiss(topModal.key, reason)) {
	          topModal = this.getTop();
	        }
	      };

	      $modalStack.getTop = function() {
	        return openedWindows.top();
	      };

	      $modalStack.modalRendered = function(modalInstance) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow) {
	          modalWindow.value.renderDeferred.resolve();
	        }
	      };

	      $modalStack.focusFirstFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[0].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.focusLastFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[list.length - 1].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.isModalFocused = function(evt, modalWindow) {
	        if (evt && modalWindow) {
	          var modalDomEl = modalWindow.value.modalDomEl;
	          if (modalDomEl && modalDomEl.length) {
	            return (evt.target || evt.srcElement) === modalDomEl[0];
	          }
	        }
	        return false;
	      };

	      $modalStack.isFocusInFirstItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[0];
	        }
	        return false;
	      };

	      $modalStack.isFocusInLastItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[list.length - 1];
	        }
	        return false;
	      };

	      $modalStack.loadFocusElementList = function(modalWindow) {
	        if (modalWindow) {
	          var modalDomE1 = modalWindow.value.modalDomEl;
	          if (modalDomE1 && modalDomE1.length) {
	            var elements = modalDomE1[0].querySelectorAll(tabableSelector);
	            return elements ?
	              Array.prototype.filter.call(elements, function(element) {
	                return isVisible(element);
	              }) : elements;
	          }
	        }
	      };

	      return $modalStack;
	    }])

	  .provider('$uibModal', function() {
	    var $modalProvider = {
	      options: {
	        animation: true,
	        backdrop: true, //can also be false or 'static'
	        keyboard: true
	      },
	      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
	        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
	          var $modal = {};

	          function getTemplatePromise(options) {
	            return options.template ? $q.when(options.template) :
	              $templateRequest(angular.isFunction(options.templateUrl) ?
	                options.templateUrl() : options.templateUrl);
	          }

	          var promiseChain = null;
	          $modal.getPromiseChain = function() {
	            return promiseChain;
	          };

	          $modal.open = function(modalOptions) {
	            var modalResultDeferred = $q.defer();
	            var modalOpenedDeferred = $q.defer();
	            var modalClosedDeferred = $q.defer();
	            var modalRenderDeferred = $q.defer();

	            //prepare an instance of a modal to be injected into controllers and returned to a caller
	            var modalInstance = {
	              result: modalResultDeferred.promise,
	              opened: modalOpenedDeferred.promise,
	              closed: modalClosedDeferred.promise,
	              rendered: modalRenderDeferred.promise,
	              close: function (result) {
	                return $modalStack.close(modalInstance, result);
	              },
	              dismiss: function (reason) {
	                return $modalStack.dismiss(modalInstance, reason);
	              }
	            };

	            //merge and clean up options
	            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
	            modalOptions.resolve = modalOptions.resolve || {};
	            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

	            //verify options
	            if (!modalOptions.template && !modalOptions.templateUrl) {
	              throw new Error('One of template or templateUrl options is required.');
	            }

	            var templateAndResolvePromise =
	              $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);

	            function resolveWithTemplate() {
	              return templateAndResolvePromise;
	            }

	            // Wait for the resolution of the existing promise chain.
	            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
	            // Then add to $modalStack and resolve opened.
	            // Finally clean up the chain variable if no subsequent modal has overwritten it.
	            var samePromise;
	            samePromise = promiseChain = $q.all([promiseChain])
	              .then(resolveWithTemplate, resolveWithTemplate)
	              .then(function resolveSuccess(tplAndVars) {
	                var providedScope = modalOptions.scope || $rootScope;

	                var modalScope = providedScope.$new();
	                modalScope.$close = modalInstance.close;
	                modalScope.$dismiss = modalInstance.dismiss;

	                modalScope.$on('$destroy', function() {
	                  if (!modalScope.$$uibDestructionScheduled) {
	                    modalScope.$dismiss('$uibUnscheduledDestruction');
	                  }
	                });

	                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

	                //controllers
	                if (modalOptions.controller) {
	                  ctrlLocals.$scope = modalScope;
	                  ctrlLocals.$scope.$resolve = {};
	                  ctrlLocals.$uibModalInstance = modalInstance;
	                  angular.forEach(tplAndVars[1], function(value, key) {
	                    ctrlLocals[key] = value;
	                    ctrlLocals.$scope.$resolve[key] = value;
	                  });

	                  // the third param will make the controller instantiate later,private api
	                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
	                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
	                  if (modalOptions.controllerAs && modalOptions.bindToController) {
	                    ctrlInstance = ctrlInstantiate.instance;
	                    ctrlInstance.$close = modalScope.$close;
	                    ctrlInstance.$dismiss = modalScope.$dismiss;
	                    angular.extend(ctrlInstance, {
	                      $resolve: ctrlLocals.$scope.$resolve
	                    }, providedScope);
	                  }

	                  ctrlInstance = ctrlInstantiate();

	                  if (angular.isFunction(ctrlInstance.$onInit)) {
	                    ctrlInstance.$onInit();
	                  }
	                }

	                $modalStack.open(modalInstance, {
	                  scope: modalScope,
	                  deferred: modalResultDeferred,
	                  renderDeferred: modalRenderDeferred,
	                  closedDeferred: modalClosedDeferred,
	                  content: tplAndVars[0],
	                  animation: modalOptions.animation,
	                  backdrop: modalOptions.backdrop,
	                  keyboard: modalOptions.keyboard,
	                  backdropClass: modalOptions.backdropClass,
	                  windowTopClass: modalOptions.windowTopClass,
	                  windowClass: modalOptions.windowClass,
	                  windowTemplateUrl: modalOptions.windowTemplateUrl,
	                  size: modalOptions.size,
	                  openedClass: modalOptions.openedClass,
	                  appendTo: modalOptions.appendTo
	                });
	                modalOpenedDeferred.resolve(true);

	            }, function resolveError(reason) {
	              modalOpenedDeferred.reject(reason);
	              modalResultDeferred.reject(reason);
	            })['finally'](function() {
	              if (promiseChain === samePromise) {
	                promiseChain = null;
	              }
	            });

	            return modalInstance;
	          };

	          return $modal;
	        }
	      ]
	    };

	    return $modalProvider;
	  });

	angular.module('ui.bootstrap.paging', [])
	/**
	 * Helper internal service for generating common controller code between the
	 * pager and pagination components
	 */
	.factory('uibPaging', ['$parse', function($parse) {
	  return {
	    create: function(ctrl, $scope, $attrs) {
	      ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
	      ctrl.ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl
	      ctrl._watchers = [];

	      ctrl.init = function(ngModelCtrl, config) {
	        ctrl.ngModelCtrl = ngModelCtrl;
	        ctrl.config = config;

	        ngModelCtrl.$render = function() {
	          ctrl.render();
	        };

	        if ($attrs.itemsPerPage) {
	          ctrl._watchers.push($scope.$parent.$watch($attrs.itemsPerPage, function(value) {
	            ctrl.itemsPerPage = parseInt(value, 10);
	            $scope.totalPages = ctrl.calculateTotalPages();
	            ctrl.updatePage();
	          }));
	        } else {
	          ctrl.itemsPerPage = config.itemsPerPage;
	        }

	        $scope.$watch('totalItems', function(newTotal, oldTotal) {
	          if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
	            $scope.totalPages = ctrl.calculateTotalPages();
	            ctrl.updatePage();
	          }
	        });
	      };

	      ctrl.calculateTotalPages = function() {
	        var totalPages = ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage);
	        return Math.max(totalPages || 0, 1);
	      };

	      ctrl.render = function() {
	        $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1;
	      };

	      $scope.selectPage = function(page, evt) {
	        if (evt) {
	          evt.preventDefault();
	        }

	        var clickAllowed = !$scope.ngDisabled || !evt;
	        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
	          if (evt && evt.target) {
	            evt.target.blur();
	          }
	          ctrl.ngModelCtrl.$setViewValue(page);
	          ctrl.ngModelCtrl.$render();
	        }
	      };

	      $scope.getText = function(key) {
	        return $scope[key + 'Text'] || ctrl.config[key + 'Text'];
	      };

	      $scope.noPrevious = function() {
	        return $scope.page === 1;
	      };

	      $scope.noNext = function() {
	        return $scope.page === $scope.totalPages;
	      };

	      ctrl.updatePage = function() {
	        ctrl.setNumPages($scope.$parent, $scope.totalPages); // Readonly variable

	        if ($scope.page > $scope.totalPages) {
	          $scope.selectPage($scope.totalPages);
	        } else {
	          ctrl.ngModelCtrl.$render();
	        }
	      };

	      $scope.$on('$destroy', function() {
	        while (ctrl._watchers.length) {
	          ctrl._watchers.shift()();
	        }
	      });
	    }
	  };
	}]);

	angular.module('ui.bootstrap.pager', ['ui.bootstrap.paging'])

	.controller('UibPagerController', ['$scope', '$attrs', 'uibPaging', 'uibPagerConfig', function($scope, $attrs, uibPaging, uibPagerConfig) {
	  $scope.align = angular.isDefined($attrs.align) ? $scope.$parent.$eval($attrs.align) : uibPagerConfig.align;

	  uibPaging.create(this, $scope, $attrs);
	}])

	.constant('uibPagerConfig', {
	  itemsPerPage: 10,
	  previousText: '« Previous',
	  nextText: 'Next »',
	  align: true
	})

	.directive('uibPager', ['uibPagerConfig', function(uibPagerConfig) {
	  return {
	    scope: {
	      totalItems: '=',
	      previousText: '@',
	      nextText: '@',
	      ngDisabled: '='
	    },
	    require: ['uibPager', '?ngModel'],
	    controller: 'UibPagerController',
	    controllerAs: 'pager',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/pager/pager.html';
	    },
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	        return; // do nothing if no ng-model
	      }

	      paginationCtrl.init(ngModelCtrl, uibPagerConfig);
	    }
	  };
	}]);

	angular.module('ui.bootstrap.pagination', ['ui.bootstrap.paging'])
	.controller('UibPaginationController', ['$scope', '$attrs', '$parse', 'uibPaging', 'uibPaginationConfig', function($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
	  var ctrl = this;
	  // Setup configuration parameters
	  var maxSize = angular.isDefined($attrs.maxSize) ? $scope.$parent.$eval($attrs.maxSize) : uibPaginationConfig.maxSize,
	    rotate = angular.isDefined($attrs.rotate) ? $scope.$parent.$eval($attrs.rotate) : uibPaginationConfig.rotate,
	    forceEllipses = angular.isDefined($attrs.forceEllipses) ? $scope.$parent.$eval($attrs.forceEllipses) : uibPaginationConfig.forceEllipses,
	    boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers) ? $scope.$parent.$eval($attrs.boundaryLinkNumbers) : uibPaginationConfig.boundaryLinkNumbers,
	    pageLabel = angular.isDefined($attrs.pageLabel) ? function(idx) { return $scope.$parent.$eval($attrs.pageLabel, {$page: idx}); } : angular.identity;
	  $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks) ? $scope.$parent.$eval($attrs.boundaryLinks) : uibPaginationConfig.boundaryLinks;
	  $scope.directionLinks = angular.isDefined($attrs.directionLinks) ? $scope.$parent.$eval($attrs.directionLinks) : uibPaginationConfig.directionLinks;

	  uibPaging.create(this, $scope, $attrs);

	  if ($attrs.maxSize) {
	    ctrl._watchers.push($scope.$parent.$watch($parse($attrs.maxSize), function(value) {
	      maxSize = parseInt(value, 10);
	      ctrl.render();
	    }));
	  }

	  // Create page object used in template
	  function makePage(number, text, isActive) {
	    return {
	      number: number,
	      text: text,
	      active: isActive
	    };
	  }

	  function getPages(currentPage, totalPages) {
	    var pages = [];

	    // Default page limits
	    var startPage = 1, endPage = totalPages;
	    var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;

	    // recompute if maxSize
	    if (isMaxSized) {
	      if (rotate) {
	        // Current page is displayed in the middle of the visible ones
	        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
	        endPage = startPage + maxSize - 1;

	        // Adjust if limit is exceeded
	        if (endPage > totalPages) {
	          endPage = totalPages;
	          startPage = endPage - maxSize + 1;
	        }
	      } else {
	        // Visible pages are paginated with maxSize
	        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;

	        // Adjust last page if limit is exceeded
	        endPage = Math.min(startPage + maxSize - 1, totalPages);
	      }
	    }

	    // Add page number links
	    for (var number = startPage; number <= endPage; number++) {
	      var page = makePage(number, pageLabel(number), number === currentPage);
	      pages.push(page);
	    }

	    // Add links to move between page sets
	    if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
	      if (startPage > 1) {
	        if (!boundaryLinkNumbers || startPage > 3) { //need ellipsis for all options unless range is too close to beginning
	        var previousPageSet = makePage(startPage - 1, '...', false);
	        pages.unshift(previousPageSet);
	      }
	        if (boundaryLinkNumbers) {
	          if (startPage === 3) { //need to replace ellipsis when the buttons would be sequential
	            var secondPageLink = makePage(2, '2', false);
	            pages.unshift(secondPageLink);
	          }
	          //add the first page
	          var firstPageLink = makePage(1, '1', false);
	          pages.unshift(firstPageLink);
	        }
	      }

	      if (endPage < totalPages) {
	        if (!boundaryLinkNumbers || endPage < totalPages - 2) { //need ellipsis for all options unless range is too close to end
	        var nextPageSet = makePage(endPage + 1, '...', false);
	        pages.push(nextPageSet);
	      }
	        if (boundaryLinkNumbers) {
	          if (endPage === totalPages - 2) { //need to replace ellipsis when the buttons would be sequential
	            var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false);
	            pages.push(secondToLastPageLink);
	          }
	          //add the last page
	          var lastPageLink = makePage(totalPages, totalPages, false);
	          pages.push(lastPageLink);
	        }
	      }
	    }
	    return pages;
	  }

	  var originalRender = this.render;
	  this.render = function() {
	    originalRender();
	    if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
	      $scope.pages = getPages($scope.page, $scope.totalPages);
	    }
	  };
	}])

	.constant('uibPaginationConfig', {
	  itemsPerPage: 10,
	  boundaryLinks: false,
	  boundaryLinkNumbers: false,
	  directionLinks: true,
	  firstText: 'First',
	  previousText: 'Previous',
	  nextText: 'Next',
	  lastText: 'Last',
	  rotate: true,
	  forceEllipses: false
	})

	.directive('uibPagination', ['$parse', 'uibPaginationConfig', function($parse, uibPaginationConfig) {
	  return {
	    scope: {
	      totalItems: '=',
	      firstText: '@',
	      previousText: '@',
	      nextText: '@',
	      lastText: '@',
	      ngDisabled:'='
	    },
	    require: ['uibPagination', '?ngModel'],
	    controller: 'UibPaginationController',
	    controllerAs: 'pagination',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/pagination/pagination.html';
	    },
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (!ngModelCtrl) {
	         return; // do nothing if no ng-model
	      }

	      paginationCtrl.init(ngModelCtrl, uibPaginationConfig);
	    }
	  };
	}]);

	/**
	 * The following features are still outstanding: animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, html tooltips, and selector delegation.
	 */
	angular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

	/**
	 * The $tooltip service creates tooltip- and popover-like directives as well as
	 * houses global options for them.
	 */
	.provider('$uibTooltip', function() {
	  // The default options tooltip and popover.
	  var defaultOptions = {
	    placement: 'top',
	    placementClassPrefix: '',
	    animation: true,
	    popupDelay: 0,
	    popupCloseDelay: 0,
	    useContentExp: false
	  };

	  // Default hide triggers for each show trigger
	  var triggerMap = {
	    'mouseenter': 'mouseleave',
	    'click': 'click',
	    'outsideClick': 'outsideClick',
	    'focus': 'blur',
	    'none': ''
	  };

	  // The options specified to the provider globally.
	  var globalOptions = {};

	  /**
	   * `options({})` allows global configuration of all tooltips in the
	   * application.
	   *
	   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
	   *     // place tooltips left instead of top by default
	   *     $tooltipProvider.options( { placement: 'left' } );
	   *   });
	   */
		this.options = function(value) {
			angular.extend(globalOptions, value);
		};

	  /**
	   * This allows you to extend the set of trigger mappings available. E.g.:
	   *
	   *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
	   */
	  this.setTriggers = function setTriggers(triggers) {
	    angular.extend(triggerMap, triggers);
	  };

	  /**
	   * This is a helper function for translating camel-case to snake_case.
	   */
	  function snake_case(name) {
	    var regexp = /[A-Z]/g;
	    var separator = '-';
	    return name.replace(regexp, function(letter, pos) {
	      return (pos ? separator : '') + letter.toLowerCase();
	    });
	  }

	  /**
	   * Returns the actual instance of the $tooltip service.
	   * TODO support multiple triggers
	   */
	  this.$get = ['$window', '$compile', '$timeout', '$document', '$uibPosition', '$interpolate', '$rootScope', '$parse', '$$stackedMap', function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse, $$stackedMap) {
	    var openedTooltips = $$stackedMap.createNew();
	    $document.on('keypress', keypressListener);

	    $rootScope.$on('$destroy', function() {
	      $document.off('keypress', keypressListener);
	    });

	    function keypressListener(e) {
	      if (e.which === 27) {
	        var last = openedTooltips.top();
	        if (last) {
	          last.value.close();
	          openedTooltips.removeTop();
	          last = null;
	        }
	      }
	    }

	    return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
	      options = angular.extend({}, defaultOptions, globalOptions, options);

	      /**
	       * Returns an object of show and hide triggers.
	       *
	       * If a trigger is supplied,
	       * it is used to show the tooltip; otherwise, it will use the `trigger`
	       * option passed to the `$tooltipProvider.options` method; else it will
	       * default to the trigger supplied to this directive factory.
	       *
	       * The hide trigger is based on the show trigger. If the `trigger` option
	       * was passed to the `$tooltipProvider.options` method, it will use the
	       * mapped trigger from `triggerMap` or the passed trigger if the map is
	       * undefined; otherwise, it uses the `triggerMap` value of the show
	       * trigger; else it will just use the show trigger.
	       */
	      function getTriggers(trigger) {
	        var show = (trigger || options.trigger || defaultTriggerShow).split(' ');
	        var hide = show.map(function(trigger) {
	          return triggerMap[trigger] || trigger;
	        });
	        return {
	          show: show,
	          hide: hide
	        };
	      }

	      var directiveName = snake_case(ttType);

	      var startSym = $interpolate.startSymbol();
	      var endSym = $interpolate.endSymbol();
	      var template =
	        '<div '+ directiveName + '-popup ' +
	          'uib-title="' + startSym + 'title' + endSym + '" ' +
	          (options.useContentExp ?
	            'content-exp="contentExp()" ' :
	            'content="' + startSym + 'content' + endSym + '" ') +
	          'placement="' + startSym + 'placement' + endSym + '" ' +
	          'popup-class="' + startSym + 'popupClass' + endSym + '" ' +
	          'animation="animation" ' +
	          'is-open="isOpen" ' +
	          'origin-scope="origScope" ' +
	          'class="uib-position-measure"' +
	          '>' +
	        '</div>';

	      return {
	        compile: function(tElem, tAttrs) {
	          var tooltipLinker = $compile(template);

	          return function link(scope, element, attrs, tooltipCtrl) {
	            var tooltip;
	            var tooltipLinkedScope;
	            var transitionTimeout;
	            var showTimeout;
	            var hideTimeout;
	            var positionTimeout;
	            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
	            var triggers = getTriggers(undefined);
	            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);
	            var ttScope = scope.$new(true);
	            var repositionScheduled = false;
	            var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen']) ? $parse(attrs[prefix + 'IsOpen']) : false;
	            var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false;
	            var observers = [];
	            var lastPlacement;

	            var positionTooltip = function() {
	              // check if tooltip exists and is not empty
	              if (!tooltip || !tooltip.html()) { return; }

	              if (!positionTimeout) {
	                positionTimeout = $timeout(function() {
	                  var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
	                  tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' });

	                  if (!tooltip.hasClass(ttPosition.placement.split('-')[0])) {
	                    tooltip.removeClass(lastPlacement.split('-')[0]);
	                    tooltip.addClass(ttPosition.placement.split('-')[0]);
	                  }

	                  if (!tooltip.hasClass(options.placementClassPrefix + ttPosition.placement)) {
	                    tooltip.removeClass(options.placementClassPrefix + lastPlacement);
	                    tooltip.addClass(options.placementClassPrefix + ttPosition.placement);
	                  }

	                  // first time through tt element will have the
	                  // uib-position-measure class or if the placement
	                  // has changed we need to position the arrow.
	                  if (tooltip.hasClass('uib-position-measure')) {
	                    $position.positionArrow(tooltip, ttPosition.placement);
	                    tooltip.removeClass('uib-position-measure');
	                  } else if (lastPlacement !== ttPosition.placement) {
	                    $position.positionArrow(tooltip, ttPosition.placement);
	                  }
	                  lastPlacement = ttPosition.placement;

	                  positionTimeout = null;
	                }, 0, false);
	              }
	            };

	            // Set up the correct scope to allow transclusion later
	            ttScope.origScope = scope;

	            // By default, the tooltip is not open.
	            // TODO add ability to start tooltip opened
	            ttScope.isOpen = false;
	            openedTooltips.add(ttScope, {
	              close: hide
	            });

	            function toggleTooltipBind() {
	              if (!ttScope.isOpen) {
	                showTooltipBind();
	              } else {
	                hideTooltipBind();
	              }
	            }

	            // Show the tooltip with delay if specified, otherwise show it immediately
	            function showTooltipBind() {
	              if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
	                return;
	              }

	              cancelHide();
	              prepareTooltip();

	              if (ttScope.popupDelay) {
	                // Do nothing if the tooltip was already scheduled to pop-up.
	                // This happens if show is triggered multiple times before any hide is triggered.
	                if (!showTimeout) {
	                  showTimeout = $timeout(show, ttScope.popupDelay, false);
	                }
	              } else {
	                show();
	              }
	            }

	            function hideTooltipBind() {
	              cancelShow();

	              if (ttScope.popupCloseDelay) {
	                if (!hideTimeout) {
	                  hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false);
	                }
	              } else {
	                hide();
	              }
	            }

	            // Show the tooltip popup element.
	            function show() {
	              cancelShow();
	              cancelHide();

	              // Don't show empty tooltips.
	              if (!ttScope.content) {
	                return angular.noop;
	              }

	              createTooltip();

	              // And show the tooltip.
	              ttScope.$evalAsync(function() {
	                ttScope.isOpen = true;
	                assignIsOpen(true);
	                positionTooltip();
	              });
	            }

	            function cancelShow() {
	              if (showTimeout) {
	                $timeout.cancel(showTimeout);
	                showTimeout = null;
	              }

	              if (positionTimeout) {
	                $timeout.cancel(positionTimeout);
	                positionTimeout = null;
	              }
	            }

	            // Hide the tooltip popup element.
	            function hide() {
	              if (!ttScope) {
	                return;
	              }

	              // First things first: we don't show it anymore.
	              ttScope.$evalAsync(function() {
	                if (ttScope) {
	                  ttScope.isOpen = false;
	                  assignIsOpen(false);
	                  // And now we remove it from the DOM. However, if we have animation, we
	                  // need to wait for it to expire beforehand.
	                  // FIXME: this is a placeholder for a port of the transitions library.
	                  // The fade transition in TWBS is 150ms.
	                  if (ttScope.animation) {
	                    if (!transitionTimeout) {
	                      transitionTimeout = $timeout(removeTooltip, 150, false);
	                    }
	                  } else {
	                    removeTooltip();
	                  }
	                }
	              });
	            }

	            function cancelHide() {
	              if (hideTimeout) {
	                $timeout.cancel(hideTimeout);
	                hideTimeout = null;
	              }

	              if (transitionTimeout) {
	                $timeout.cancel(transitionTimeout);
	                transitionTimeout = null;
	              }
	            }

	            function createTooltip() {
	              // There can only be one tooltip element per directive shown at once.
	              if (tooltip) {
	                return;
	              }

	              tooltipLinkedScope = ttScope.$new();
	              tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
	                if (appendToBody) {
	                  $document.find('body').append(tooltip);
	                } else {
	                  element.after(tooltip);
	                }
	              });

	              prepObservers();
	            }

	            function removeTooltip() {
	              cancelShow();
	              cancelHide();
	              unregisterObservers();

	              if (tooltip) {
	                tooltip.remove();
	                tooltip = null;
	              }
	              if (tooltipLinkedScope) {
	                tooltipLinkedScope.$destroy();
	                tooltipLinkedScope = null;
	              }
	            }

	            /**
	             * Set the initial scope values. Once
	             * the tooltip is created, the observers
	             * will be added to keep things in sync.
	             */
	            function prepareTooltip() {
	              ttScope.title = attrs[prefix + 'Title'];
	              if (contentParse) {
	                ttScope.content = contentParse(scope);
	              } else {
	                ttScope.content = attrs[ttType];
	              }

	              ttScope.popupClass = attrs[prefix + 'Class'];
	              ttScope.placement = angular.isDefined(attrs[prefix + 'Placement']) ? attrs[prefix + 'Placement'] : options.placement;
	              var placement = $position.parsePlacement(ttScope.placement);
	              lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0];

	              var delay = parseInt(attrs[prefix + 'PopupDelay'], 10);
	              var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10);
	              ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
	              ttScope.popupCloseDelay = !isNaN(closeDelay) ? closeDelay : options.popupCloseDelay;
	            }

	            function assignIsOpen(isOpen) {
	              if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
	                isOpenParse.assign(scope, isOpen);
	              }
	            }

	            ttScope.contentExp = function() {
	              return ttScope.content;
	            };

	            /**
	             * Observe the relevant attributes.
	             */
	            attrs.$observe('disabled', function(val) {
	              if (val) {
	                cancelShow();
	              }

	              if (val && ttScope.isOpen) {
	                hide();
	              }
	            });

	            if (isOpenParse) {
	              scope.$watch(isOpenParse, function(val) {
	                if (ttScope && !val === ttScope.isOpen) {
	                  toggleTooltipBind();
	                }
	              });
	            }

	            function prepObservers() {
	              observers.length = 0;

	              if (contentParse) {
	                observers.push(
	                  scope.$watch(contentParse, function(val) {
	                    ttScope.content = val;
	                    if (!val && ttScope.isOpen) {
	                      hide();
	                    }
	                  })
	                );

	                observers.push(
	                  tooltipLinkedScope.$watch(function() {
	                    if (!repositionScheduled) {
	                      repositionScheduled = true;
	                      tooltipLinkedScope.$$postDigest(function() {
	                        repositionScheduled = false;
	                        if (ttScope && ttScope.isOpen) {
	                          positionTooltip();
	                        }
	                      });
	                    }
	                  })
	                );
	              } else {
	                observers.push(
	                  attrs.$observe(ttType, function(val) {
	                    ttScope.content = val;
	                    if (!val && ttScope.isOpen) {
	                      hide();
	                    } else {
	                      positionTooltip();
	                    }
	                  })
	                );
	              }

	              observers.push(
	                attrs.$observe(prefix + 'Title', function(val) {
	                  ttScope.title = val;
	                  if (ttScope.isOpen) {
	                    positionTooltip();
	                  }
	                })
	              );

	              observers.push(
	                attrs.$observe(prefix + 'Placement', function(val) {
	                  ttScope.placement = val ? val : options.placement;
	                  if (ttScope.isOpen) {
	                    positionTooltip();
	                  }
	                })
	              );
	            }

	            function unregisterObservers() {
	              if (observers.length) {
	                angular.forEach(observers, function(observer) {
	                  observer();
	                });
	                observers.length = 0;
	              }
	            }

	            // hide tooltips/popovers for outsideClick trigger
	            function bodyHideTooltipBind(e) {
	              if (!ttScope || !ttScope.isOpen || !tooltip) {
	                return;
	              }
	              // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
	              if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
	                hideTooltipBind();
	              }
	            }

	            var unregisterTriggers = function() {
	              triggers.show.forEach(function(trigger) {
	                if (trigger === 'outsideClick') {
	                  element.off('click', toggleTooltipBind);
	                } else {
	                  element.off(trigger, showTooltipBind);
	                  element.off(trigger, toggleTooltipBind);
	                }
	              });
	              triggers.hide.forEach(function(trigger) {
	                if (trigger === 'outsideClick') {
	                  $document.off('click', bodyHideTooltipBind);
	                } else {
	                  element.off(trigger, hideTooltipBind);
	                }
	              });
	            };

	            function prepTriggers() {
	              var val = attrs[prefix + 'Trigger'];
	              unregisterTriggers();

	              triggers = getTriggers(val);

	              if (triggers.show !== 'none') {
	                triggers.show.forEach(function(trigger, idx) {
	                  if (trigger === 'outsideClick') {
	                    element.on('click', toggleTooltipBind);
	                    $document.on('click', bodyHideTooltipBind);
	                  } else if (trigger === triggers.hide[idx]) {
	                    element.on(trigger, toggleTooltipBind);
	                  } else if (trigger) {
	                    element.on(trigger, showTooltipBind);
	                    element.on(triggers.hide[idx], hideTooltipBind);
	                  }

	                  element.on('keypress', function(e) {
	                    if (e.which === 27) {
	                      hideTooltipBind();
	                    }
	                  });
	                });
	              }
	            }

	            prepTriggers();

	            var animation = scope.$eval(attrs[prefix + 'Animation']);
	            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

	            var appendToBodyVal;
	            var appendKey = prefix + 'AppendToBody';
	            if (appendKey in attrs && attrs[appendKey] === undefined) {
	              appendToBodyVal = true;
	            } else {
	              appendToBodyVal = scope.$eval(attrs[appendKey]);
	            }

	            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

	            // Make sure tooltip is destroyed and removed.
	            scope.$on('$destroy', function onDestroyTooltip() {
	              unregisterTriggers();
	              removeTooltip();
	              openedTooltips.remove(ttScope);
	              ttScope = null;
	            });
	          };
	        }
	      };
	    };
	  }];
	})

	// This is mostly ngInclude code but with a custom scope
	.directive('uibTooltipTemplateTransclude', [
	         '$animate', '$sce', '$compile', '$templateRequest',
	function ($animate, $sce, $compile, $templateRequest) {
	  return {
	    link: function(scope, elem, attrs) {
	      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

	      var changeCounter = 0,
	        currentScope,
	        previousElement,
	        currentElement;

	      var cleanupLastIncludeContent = function() {
	        if (previousElement) {
	          previousElement.remove();
	          previousElement = null;
	        }

	        if (currentScope) {
	          currentScope.$destroy();
	          currentScope = null;
	        }

	        if (currentElement) {
	          $animate.leave(currentElement).then(function() {
	            previousElement = null;
	          });
	          previousElement = currentElement;
	          currentElement = null;
	        }
	      };

	      scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function(src) {
	        var thisChangeId = ++changeCounter;

	        if (src) {
	          //set the 2nd param to true to ignore the template request error so that the inner
	          //contents and scope can be cleaned up.
	          $templateRequest(src, true).then(function(response) {
	            if (thisChangeId !== changeCounter) { return; }
	            var newScope = origScope.$new();
	            var template = response;

	            var clone = $compile(template)(newScope, function(clone) {
	              cleanupLastIncludeContent();
	              $animate.enter(clone, elem);
	            });

	            currentScope = newScope;
	            currentElement = clone;

	            currentScope.$emit('$includeContentLoaded', src);
	          }, function() {
	            if (thisChangeId === changeCounter) {
	              cleanupLastIncludeContent();
	              scope.$emit('$includeContentError', src);
	            }
	          });
	          scope.$emit('$includeContentRequested', src);
	        } else {
	          cleanupLastIncludeContent();
	        }
	      });

	      scope.$on('$destroy', cleanupLastIncludeContent);
	    }
	  };
	}])

	/**
	 * Note that it's intentional that these classes are *not* applied through $animate.
	 * They must not be animated as they're expected to be present on the tooltip on
	 * initialization.
	 */
	.directive('uibTooltipClasses', ['$uibPosition', function($uibPosition) {
	  return {
	    restrict: 'A',
	    link: function(scope, element, attrs) {
	      // need to set the primary position so the
	      // arrow has space during position measure.
	      // tooltip.positionTooltip()
	      if (scope.placement) {
	        // // There are no top-left etc... classes
	        // // in TWBS, so we need the primary position.
	        var position = $uibPosition.parsePlacement(scope.placement);
	        element.addClass(position[0]);
	      }

	      if (scope.popupClass) {
	        element.addClass(scope.popupClass);
	      }

	      if (scope.animation()) {
	        element.addClass(attrs.tooltipAnimationClass);
	      }
	    }
	  };
	}])

	.directive('uibTooltipPopup', function() {
	  return {
	    replace: true,
	    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-popup.html'
	  };
	})

	.directive('uibTooltip', [ '$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter');
	}])

	.directive('uibTooltipTemplatePopup', function() {
	  return {
	    replace: true,
	    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
	      originScope: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'
	  };
	})

	.directive('uibTooltipTemplate', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
	    useContentExp: true
	  });
	}])

	.directive('uibTooltipHtmlPopup', function() {
	  return {
	    replace: true,
	    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/tooltip/tooltip-html-popup.html'
	  };
	})

	.directive('uibTooltipHtml', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
	    useContentExp: true
	  });
	}]);

	/**
	 * The following features are still outstanding: popup delay, animation as a
	 * function, placement as a function, inside, support for more triggers than
	 * just mouse enter/leave, and selector delegatation.
	 */
	angular.module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

	.directive('uibPopoverTemplatePopup', function() {
	  return {
	    replace: true,
	    scope: { uibTitle: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
	      originScope: '&' },
	    templateUrl: 'uib/template/popover/popover-template.html'
	  };
	})

	.directive('uibPopoverTemplate', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
	    useContentExp: true
	  });
	}])

	.directive('uibPopoverHtmlPopup', function() {
	  return {
	    replace: true,
	    scope: { contentExp: '&', uibTitle: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/popover/popover-html.html'
	  };
	})

	.directive('uibPopoverHtml', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
	    useContentExp: true
	  });
	}])

	.directive('uibPopoverPopup', function() {
	  return {
	    replace: true,
	    scope: { uibTitle: '@', content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
	    templateUrl: 'uib/template/popover/popover.html'
	  };
	})

	.directive('uibPopover', ['$uibTooltip', function($uibTooltip) {
	  return $uibTooltip('uibPopover', 'popover', 'click');
	}]);

	angular.module('ui.bootstrap.progressbar', [])

	.constant('uibProgressConfig', {
	  animate: true,
	  max: 100
	})

	.controller('UibProgressController', ['$scope', '$attrs', 'uibProgressConfig', function($scope, $attrs, progressConfig) {
	  var self = this,
	      animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

	  this.bars = [];
	  $scope.max = getMaxOrDefault();

	  this.addBar = function(bar, element, attrs) {
	    if (!animate) {
	      element.css({'transition': 'none'});
	    }

	    this.bars.push(bar);

	    bar.max = getMaxOrDefault();
	    bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar';

	    bar.$watch('value', function(value) {
	      bar.recalculatePercentage();
	    });

	    bar.recalculatePercentage = function() {
	      var totalPercentage = self.bars.reduce(function(total, bar) {
	        bar.percent = +(100 * bar.value / bar.max).toFixed(2);
	        return total + bar.percent;
	      }, 0);

	      if (totalPercentage > 100) {
	        bar.percent -= totalPercentage - 100;
	      }
	    };

	    bar.$on('$destroy', function() {
	      element = null;
	      self.removeBar(bar);
	    });
	  };

	  this.removeBar = function(bar) {
	    this.bars.splice(this.bars.indexOf(bar), 1);
	    this.bars.forEach(function (bar) {
	      bar.recalculatePercentage();
	    });
	  };

	  //$attrs.$observe('maxParam', function(maxParam) {
	  $scope.$watch('maxParam', function(maxParam) {
	    self.bars.forEach(function(bar) {
	      bar.max = getMaxOrDefault();
	      bar.recalculatePercentage();
	    });
	  });

	  function getMaxOrDefault () {
	    return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max;
	  }
	}])

	.directive('uibProgress', function() {
	  return {
	    replace: true,
	    transclude: true,
	    controller: 'UibProgressController',
	    require: 'uibProgress',
	    scope: {
	      maxParam: '=?max'
	    },
	    templateUrl: 'uib/template/progressbar/progress.html'
	  };
	})

	.directive('uibBar', function() {
	  return {
	    replace: true,
	    transclude: true,
	    require: '^uibProgress',
	    scope: {
	      value: '=',
	      type: '@'
	    },
	    templateUrl: 'uib/template/progressbar/bar.html',
	    link: function(scope, element, attrs, progressCtrl) {
	      progressCtrl.addBar(scope, element, attrs);
	    }
	  };
	})

	.directive('uibProgressbar', function() {
	  return {
	    replace: true,
	    transclude: true,
	    controller: 'UibProgressController',
	    scope: {
	      value: '=',
	      maxParam: '=?max',
	      type: '@'
	    },
	    templateUrl: 'uib/template/progressbar/progressbar.html',
	    link: function(scope, element, attrs, progressCtrl) {
	      progressCtrl.addBar(scope, angular.element(element.children()[0]), {title: attrs.title});
	    }
	  };
	});

	angular.module('ui.bootstrap.rating', [])

	.constant('uibRatingConfig', {
	  max: 5,
	  stateOn: null,
	  stateOff: null,
	  enableReset: true,
	  titles : ['one', 'two', 'three', 'four', 'five']
	})

	.controller('UibRatingController', ['$scope', '$attrs', 'uibRatingConfig', function($scope, $attrs, ratingConfig) {
	  var ngModelCtrl = { $setViewValue: angular.noop },
	    self = this;

	  this.init = function(ngModelCtrl_) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    ngModelCtrl.$formatters.push(function(value) {
	      if (angular.isNumber(value) && value << 0 !== value) {
	        value = Math.round(value);
	      }

	      return value;
	    });

	    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
	    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
	    this.enableReset = angular.isDefined($attrs.enableReset) ?
	      $scope.$parent.$eval($attrs.enableReset) : ratingConfig.enableReset;
	    var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
	    this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ?
	      tmpTitles : ratingConfig.titles;

	    var ratingStates = angular.isDefined($attrs.ratingStates) ?
	      $scope.$parent.$eval($attrs.ratingStates) :
	      new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
	    $scope.range = this.buildTemplateObjects(ratingStates);
	  };

	  this.buildTemplateObjects = function(states) {
	    for (var i = 0, n = states.length; i < n; i++) {
	      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) }, states[i]);
	    }
	    return states;
	  };

	  this.getTitle = function(index) {
	    if (index >= this.titles.length) {
	      return index + 1;
	    }

	    return this.titles[index];
	  };

	  $scope.rate = function(value) {
	    if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
	      var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value;
	      ngModelCtrl.$setViewValue(newViewValue);
	      ngModelCtrl.$render();
	    }
	  };

	  $scope.enter = function(value) {
	    if (!$scope.readonly) {
	      $scope.value = value;
	    }
	    $scope.onHover({value: value});
	  };

	  $scope.reset = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.onLeave();
	  };

	  $scope.onKeydown = function(evt) {
	    if (/(37|38|39|40)/.test(evt.which)) {
	      evt.preventDefault();
	      evt.stopPropagation();
	      $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
	    }
	  };

	  this.render = function() {
	    $scope.value = ngModelCtrl.$viewValue;
	    $scope.title = self.getTitle($scope.value - 1);
	  };
	}])

	.directive('uibRating', function() {
	  return {
	    require: ['uibRating', 'ngModel'],
	    scope: {
	      readonly: '=?readOnly',
	      onHover: '&',
	      onLeave: '&'
	    },
	    controller: 'UibRatingController',
	    templateUrl: 'uib/template/rating/rating.html',
	    replace: true,
	    link: function(scope, element, attrs, ctrls) {
	      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
	      ratingCtrl.init(ngModelCtrl);
	    }
	  };
	});

	angular.module('ui.bootstrap.tabs', [])

	.controller('UibTabsetController', ['$scope', function ($scope) {
	  var ctrl = this,
	    oldIndex;
	  ctrl.tabs = [];

	  ctrl.select = function(index, evt) {
	    if (!destroyed) {
	      var previousIndex = findTabIndex(oldIndex);
	      var previousSelected = ctrl.tabs[previousIndex];
	      if (previousSelected) {
	        previousSelected.tab.onDeselect({
	          $event: evt,
	          $selectedIndex: index
	        });
	        if (evt && evt.isDefaultPrevented()) {
	          return;
	        }
	        previousSelected.tab.active = false;
	      }

	      var selected = ctrl.tabs[index];
	      if (selected) {
	        selected.tab.onSelect({
	          $event: evt
	        });
	        selected.tab.active = true;
	        ctrl.active = selected.index;
	        oldIndex = selected.index;
	      } else if (!selected && angular.isDefined(oldIndex)) {
	        ctrl.active = null;
	        oldIndex = null;
	      }
	    }
	  };

	  ctrl.addTab = function addTab(tab) {
	    ctrl.tabs.push({
	      tab: tab,
	      index: tab.index
	    });
	    ctrl.tabs.sort(function(t1, t2) {
	      if (t1.index > t2.index) {
	        return 1;
	      }

	      if (t1.index < t2.index) {
	        return -1;
	      }

	      return 0;
	    });

	    if (tab.index === ctrl.active || !angular.isDefined(ctrl.active) && ctrl.tabs.length === 1) {
	      var newActiveIndex = findTabIndex(tab.index);
	      ctrl.select(newActiveIndex);
	    }
	  };

	  ctrl.removeTab = function removeTab(tab) {
	    var index;
	    for (var i = 0; i < ctrl.tabs.length; i++) {
	      if (ctrl.tabs[i].tab === tab) {
	        index = i;
	        break;
	      }
	    }

	    if (ctrl.tabs[index].index === ctrl.active) {
	      var newActiveTabIndex = index === ctrl.tabs.length - 1 ?
	        index - 1 : index + 1 % ctrl.tabs.length;
	      ctrl.select(newActiveTabIndex);
	    }

	    ctrl.tabs.splice(index, 1);
	  };

	  $scope.$watch('tabset.active', function(val) {
	    if (angular.isDefined(val) && val !== oldIndex) {
	      ctrl.select(findTabIndex(val));
	    }
	  });

	  var destroyed;
	  $scope.$on('$destroy', function() {
	    destroyed = true;
	  });

	  function findTabIndex(index) {
	    for (var i = 0; i < ctrl.tabs.length; i++) {
	      if (ctrl.tabs[i].index === index) {
	        return i;
	      }
	    }
	  }
	}])

	.directive('uibTabset', function() {
	  return {
	    transclude: true,
	    replace: true,
	    scope: {},
	    bindToController: {
	      active: '=?',
	      type: '@'
	    },
	    controller: 'UibTabsetController',
	    controllerAs: 'tabset',
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/tabs/tabset.html';
	    },
	    link: function(scope, element, attrs) {
	      scope.vertical = angular.isDefined(attrs.vertical) ?
	        scope.$parent.$eval(attrs.vertical) : false;
	      scope.justified = angular.isDefined(attrs.justified) ?
	        scope.$parent.$eval(attrs.justified) : false;
	    }
	  };
	})

	.directive('uibTab', ['$parse', function($parse) {
	  return {
	    require: '^uibTabset',
	    replace: true,
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || 'uib/template/tabs/tab.html';
	    },
	    transclude: true,
	    scope: {
	      heading: '@',
	      index: '=?',
	      classes: '@?',
	      onSelect: '&select', //This callback is called in contentHeadingTransclude
	                          //once it inserts the tab's content into the dom
	      onDeselect: '&deselect'
	    },
	    controller: function() {
	      //Empty controller so other directives can require being 'under' a tab
	    },
	    controllerAs: 'tab',
	    link: function(scope, elm, attrs, tabsetCtrl, transclude) {
	      scope.disabled = false;
	      if (attrs.disable) {
	        scope.$parent.$watch($parse(attrs.disable), function(value) {
	          scope.disabled = !! value;
	        });
	      }

	      if (angular.isUndefined(attrs.index)) {
	        if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
	          scope.index = Math.max.apply(null, tabsetCtrl.tabs.map(function(t) { return t.index; })) + 1;
	        } else {
	          scope.index = 0;
	        }
	      }

	      if (angular.isUndefined(attrs.classes)) {
	        scope.classes = '';
	      }

	      scope.select = function(evt) {
	        if (!scope.disabled) {
	          var index;
	          for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
	            if (tabsetCtrl.tabs[i].tab === scope) {
	              index = i;
	              break;
	            }
	          }

	          tabsetCtrl.select(index, evt);
	        }
	      };

	      tabsetCtrl.addTab(scope);
	      scope.$on('$destroy', function() {
	        tabsetCtrl.removeTab(scope);
	      });

	      //We need to transclude later, once the content container is ready.
	      //when this link happens, we're inside a tab heading.
	      scope.$transcludeFn = transclude;
	    }
	  };
	}])

	.directive('uibTabHeadingTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^uibTab',
	    link: function(scope, elm) {
	      scope.$watch('headingElement', function updateHeadingElement(heading) {
	        if (heading) {
	          elm.html('');
	          elm.append(heading);
	        }
	      });
	    }
	  };
	})

	.directive('uibTabContentTransclude', function() {
	  return {
	    restrict: 'A',
	    require: '^uibTabset',
	    link: function(scope, elm, attrs) {
	      var tab = scope.$eval(attrs.uibTabContentTransclude).tab;

	      //Now our tab is ready to be transcluded: both the tab heading area
	      //and the tab content area are loaded.  Transclude 'em both.
	      tab.$transcludeFn(tab.$parent, function(contents) {
	        angular.forEach(contents, function(node) {
	          if (isTabHeading(node)) {
	            //Let tabHeadingTransclude know.
	            tab.headingElement = node;
	          } else {
	            elm.append(node);
	          }
	        });
	      });
	    }
	  };

	  function isTabHeading(node) {
	    return node.tagName && (
	      node.hasAttribute('uib-tab-heading') ||
	      node.hasAttribute('data-uib-tab-heading') ||
	      node.hasAttribute('x-uib-tab-heading') ||
	      node.tagName.toLowerCase() === 'uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
	      node.tagName.toLowerCase() === 'uib:tab-heading'
	    );
	  }
	});

	angular.module('ui.bootstrap.timepicker', [])

	.constant('uibTimepickerConfig', {
	  hourStep: 1,
	  minuteStep: 1,
	  secondStep: 1,
	  showMeridian: true,
	  showSeconds: false,
	  meridians: null,
	  readonlyInput: false,
	  mousewheel: true,
	  arrowkeys: true,
	  showSpinners: true,
	  templateUrl: 'uib/template/timepicker/timepicker.html'
	})

	.controller('UibTimepickerController', ['$scope', '$element', '$attrs', '$parse', '$log', '$locale', 'uibTimepickerConfig', function($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
	  var selected = new Date(),
	    watchers = [],
	    ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
	    meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
	    padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true;

	  $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0;
	  $element.removeAttr('tabindex');

	  this.init = function(ngModelCtrl_, inputs) {
	    ngModelCtrl = ngModelCtrl_;
	    ngModelCtrl.$render = this.render;

	    ngModelCtrl.$formatters.unshift(function(modelValue) {
	      return modelValue ? new Date(modelValue) : null;
	    });

	    var hoursInputEl = inputs.eq(0),
	        minutesInputEl = inputs.eq(1),
	        secondsInputEl = inputs.eq(2);

	    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;

	    if (mousewheel) {
	      this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	    }

	    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
	    if (arrowkeys) {
	      this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	    }

	    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
	    this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl);
	  };

	  var hourStep = timepickerConfig.hourStep;
	  if ($attrs.hourStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.hourStep), function(value) {
	      hourStep = +value;
	    }));
	  }

	  var minuteStep = timepickerConfig.minuteStep;
	  if ($attrs.minuteStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
	      minuteStep = +value;
	    }));
	  }

	  var min;
	  watchers.push($scope.$parent.$watch($parse($attrs.min), function(value) {
	    var dt = new Date(value);
	    min = isNaN(dt) ? undefined : dt;
	  }));

	  var max;
	  watchers.push($scope.$parent.$watch($parse($attrs.max), function(value) {
	    var dt = new Date(value);
	    max = isNaN(dt) ? undefined : dt;
	  }));

	  var disabled = false;
	  if ($attrs.ngDisabled) {
	    watchers.push($scope.$parent.$watch($parse($attrs.ngDisabled), function(value) {
	      disabled = value;
	    }));
	  }

	  $scope.noIncrementHours = function() {
	    var incrementedSelected = addMinutes(selected, hourStep * 60);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementHours = function() {
	    var decrementedSelected = addMinutes(selected, -hourStep * 60);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noIncrementMinutes = function() {
	    var incrementedSelected = addMinutes(selected, minuteStep);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementMinutes = function() {
	    var decrementedSelected = addMinutes(selected, -minuteStep);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noIncrementSeconds = function() {
	    var incrementedSelected = addSeconds(selected, secondStep);
	    return disabled || incrementedSelected > max ||
	      incrementedSelected < selected && incrementedSelected < min;
	  };

	  $scope.noDecrementSeconds = function() {
	    var decrementedSelected = addSeconds(selected, -secondStep);
	    return disabled || decrementedSelected < min ||
	      decrementedSelected > selected && decrementedSelected > max;
	  };

	  $scope.noToggleMeridian = function() {
	    if (selected.getHours() < 12) {
	      return disabled || addMinutes(selected, 12 * 60) > max;
	    }

	    return disabled || addMinutes(selected, -12 * 60) < min;
	  };

	  var secondStep = timepickerConfig.secondStep;
	  if ($attrs.secondStep) {
	    watchers.push($scope.$parent.$watch($parse($attrs.secondStep), function(value) {
	      secondStep = +value;
	    }));
	  }

	  $scope.showSeconds = timepickerConfig.showSeconds;
	  if ($attrs.showSeconds) {
	    watchers.push($scope.$parent.$watch($parse($attrs.showSeconds), function(value) {
	      $scope.showSeconds = !!value;
	    }));
	  }

	  // 12H / 24H mode
	  $scope.showMeridian = timepickerConfig.showMeridian;
	  if ($attrs.showMeridian) {
	    watchers.push($scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
	      $scope.showMeridian = !!value;

	      if (ngModelCtrl.$error.time) {
	        // Evaluate from template
	        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
	        if (angular.isDefined(hours) && angular.isDefined(minutes)) {
	          selected.setHours(hours);
	          refresh();
	        }
	      } else {
	        updateTemplate();
	      }
	    }));
	  }

	  // Get $scope.hours in 24H mode if valid
	  function getHoursFromTemplate() {
	    var hours = +$scope.hours;
	    var valid = $scope.showMeridian ? hours > 0 && hours < 13 :
	      hours >= 0 && hours < 24;
	    if (!valid || $scope.hours === '') {
	      return undefined;
	    }

	    if ($scope.showMeridian) {
	      if (hours === 12) {
	        hours = 0;
	      }
	      if ($scope.meridian === meridians[1]) {
	        hours = hours + 12;
	      }
	    }
	    return hours;
	  }

	  function getMinutesFromTemplate() {
	    var minutes = +$scope.minutes;
	    var valid = minutes >= 0 && minutes < 60;
	    if (!valid || $scope.minutes === '') {
	      return undefined;
	    }
	    return minutes;
	  }

	  function getSecondsFromTemplate() {
	    var seconds = +$scope.seconds;
	    return seconds >= 0 && seconds < 60 ? seconds : undefined;
	  }

	  function pad(value, noPad) {
	    if (value === null) {
	      return '';
	    }

	    return angular.isDefined(value) && value.toString().length < 2 && !noPad ?
	      '0' + value : value.toString();
	  }

	  // Respond on mousewheel spin
	  this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    var isScrollingUp = function(e) {
	      if (e.originalEvent) {
	        e = e.originalEvent;
	      }
	      //pick correct delta variable depending on event
	      var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
	      return e.detail || delta > 0;
	    };

	    hoursInputEl.bind('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
	      }
	      e.preventDefault();
	    });

	    minutesInputEl.bind('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
	      }
	      e.preventDefault();
	    });

	     secondsInputEl.bind('mousewheel wheel', function(e) {
	      if (!disabled) {
	        $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds());
	      }
	      e.preventDefault();
	    });
	  };

	  // Respond on up/down arrowkeys
	  this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    hoursInputEl.bind('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementHours();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementHours();
	          $scope.$apply();
	        }
	      }
	    });

	    minutesInputEl.bind('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementMinutes();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementMinutes();
	          $scope.$apply();
	        }
	      }
	    });

	    secondsInputEl.bind('keydown', function(e) {
	      if (!disabled) {
	        if (e.which === 38) { // up
	          e.preventDefault();
	          $scope.incrementSeconds();
	          $scope.$apply();
	        } else if (e.which === 40) { // down
	          e.preventDefault();
	          $scope.decrementSeconds();
	          $scope.$apply();
	        }
	      }
	    });
	  };

	  this.setupInputEvents = function(hoursInputEl, minutesInputEl, secondsInputEl) {
	    if ($scope.readonlyInput) {
	      $scope.updateHours = angular.noop;
	      $scope.updateMinutes = angular.noop;
	      $scope.updateSeconds = angular.noop;
	      return;
	    }

	    var invalidate = function(invalidHours, invalidMinutes, invalidSeconds) {
	      ngModelCtrl.$setViewValue(null);
	      ngModelCtrl.$setValidity('time', false);
	      if (angular.isDefined(invalidHours)) {
	        $scope.invalidHours = invalidHours;
	      }

	      if (angular.isDefined(invalidMinutes)) {
	        $scope.invalidMinutes = invalidMinutes;
	      }

	      if (angular.isDefined(invalidSeconds)) {
	        $scope.invalidSeconds = invalidSeconds;
	      }
	    };

	    $scope.updateHours = function() {
	      var hours = getHoursFromTemplate(),
	        minutes = getMinutesFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(hours) && angular.isDefined(minutes)) {
	        selected.setHours(hours);
	        selected.setMinutes(minutes);
	        if (selected < min || selected > max) {
	          invalidate(true);
	        } else {
	          refresh('h');
	        }
	      } else {
	        invalidate(true);
	      }
	    };

	    hoursInputEl.bind('blur', function(e) {
	      ngModelCtrl.$setTouched();
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if ($scope.hours === null || $scope.hours === '') {
	        invalidate(true);
	      } else if (!$scope.invalidHours && $scope.hours < 10) {
	        $scope.$apply(function() {
	          $scope.hours = pad($scope.hours, !padHours);
	        });
	      }
	    });

	    $scope.updateMinutes = function() {
	      var minutes = getMinutesFromTemplate(),
	        hours = getHoursFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
	        selected.setHours(hours);
	        selected.setMinutes(minutes);
	        if (selected < min || selected > max) {
	          invalidate(undefined, true);
	        } else {
	          refresh('m');
	        }
	      } else {
	        invalidate(undefined, true);
	      }
	    };

	    minutesInputEl.bind('blur', function(e) {
	      ngModelCtrl.$setTouched();
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if ($scope.minutes === null) {
	        invalidate(undefined, true);
	      } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
	        $scope.$apply(function() {
	          $scope.minutes = pad($scope.minutes);
	        });
	      }
	    });

	    $scope.updateSeconds = function() {
	      var seconds = getSecondsFromTemplate();

	      ngModelCtrl.$setDirty();

	      if (angular.isDefined(seconds)) {
	        selected.setSeconds(seconds);
	        refresh('s');
	      } else {
	        invalidate(undefined, undefined, true);
	      }
	    };

	    secondsInputEl.bind('blur', function(e) {
	      if (modelIsEmpty()) {
	        makeValid();
	      } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
	        $scope.$apply( function() {
	          $scope.seconds = pad($scope.seconds);
	        });
	      }
	    });

	  };

	  this.render = function() {
	    var date = ngModelCtrl.$viewValue;

	    if (isNaN(date)) {
	      ngModelCtrl.$setValidity('time', false);
	      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
	    } else {
	      if (date) {
	        selected = date;
	      }

	      if (selected < min || selected > max) {
	        ngModelCtrl.$setValidity('time', false);
	        $scope.invalidHours = true;
	        $scope.invalidMinutes = true;
	      } else {
	        makeValid();
	      }
	      updateTemplate();
	    }
	  };

	  // Call internally when we know that model is valid.
	  function refresh(keyboardChange) {
	    makeValid();
	    ngModelCtrl.$setViewValue(new Date(selected));
	    updateTemplate(keyboardChange);
	  }

	  function makeValid() {
	    ngModelCtrl.$setValidity('time', true);
	    $scope.invalidHours = false;
	    $scope.invalidMinutes = false;
	    $scope.invalidSeconds = false;
	  }

	  function updateTemplate(keyboardChange) {
	    if (!ngModelCtrl.$modelValue) {
	      $scope.hours = null;
	      $scope.minutes = null;
	      $scope.seconds = null;
	      $scope.meridian = meridians[0];
	    } else {
	      var hours = selected.getHours(),
	        minutes = selected.getMinutes(),
	        seconds = selected.getSeconds();

	      if ($scope.showMeridian) {
	        hours = hours === 0 || hours === 12 ? 12 : hours % 12; // Convert 24 to 12 hour system
	      }

	      $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours);
	      if (keyboardChange !== 'm') {
	        $scope.minutes = pad(minutes);
	      }
	      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];

	      if (keyboardChange !== 's') {
	        $scope.seconds = pad(seconds);
	      }
	      $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
	    }
	  }

	  function addSecondsToSelected(seconds) {
	    selected = addSeconds(selected, seconds);
	    refresh();
	  }

	  function addMinutes(selected, minutes) {
	    return addSeconds(selected, minutes*60);
	  }

	  function addSeconds(date, seconds) {
	    var dt = new Date(date.getTime() + seconds * 1000);
	    var newDate = new Date(date);
	    newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds());
	    return newDate;
	  }

	  function modelIsEmpty() {
	    return ($scope.hours === null || $scope.hours === '') &&
	      ($scope.minutes === null || $scope.minutes === '') &&
	      (!$scope.showSeconds || $scope.showSeconds && ($scope.seconds === null || $scope.seconds === ''));
	  }

	  $scope.showSpinners = angular.isDefined($attrs.showSpinners) ?
	    $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;

	  $scope.incrementHours = function() {
	    if (!$scope.noIncrementHours()) {
	      addSecondsToSelected(hourStep * 60 * 60);
	    }
	  };

	  $scope.decrementHours = function() {
	    if (!$scope.noDecrementHours()) {
	      addSecondsToSelected(-hourStep * 60 * 60);
	    }
	  };

	  $scope.incrementMinutes = function() {
	    if (!$scope.noIncrementMinutes()) {
	      addSecondsToSelected(minuteStep * 60);
	    }
	  };

	  $scope.decrementMinutes = function() {
	    if (!$scope.noDecrementMinutes()) {
	      addSecondsToSelected(-minuteStep * 60);
	    }
	  };

	  $scope.incrementSeconds = function() {
	    if (!$scope.noIncrementSeconds()) {
	      addSecondsToSelected(secondStep);
	    }
	  };

	  $scope.decrementSeconds = function() {
	    if (!$scope.noDecrementSeconds()) {
	      addSecondsToSelected(-secondStep);
	    }
	  };

	  $scope.toggleMeridian = function() {
	    var minutes = getMinutesFromTemplate(),
	        hours = getHoursFromTemplate();

	    if (!$scope.noToggleMeridian()) {
	      if (angular.isDefined(minutes) && angular.isDefined(hours)) {
	        addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60));
	      } else {
	        $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0];
	      }
	    }
	  };

	  $scope.blur = function() {
	    ngModelCtrl.$setTouched();
	  };

	  $scope.$on('$destroy', function() {
	    while (watchers.length) {
	      watchers.shift()();
	    }
	  });
	}])

	.directive('uibTimepicker', ['uibTimepickerConfig', function(uibTimepickerConfig) {
	  return {
	    require: ['uibTimepicker', '?^ngModel'],
	    controller: 'UibTimepickerController',
	    controllerAs: 'timepicker',
	    replace: true,
	    scope: {},
	    templateUrl: function(element, attrs) {
	      return attrs.templateUrl || uibTimepickerConfig.templateUrl;
	    },
	    link: function(scope, element, attrs, ctrls) {
	      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

	      if (ngModelCtrl) {
	        timepickerCtrl.init(ngModelCtrl, element.find('input'));
	      }
	    }
	  };
	}]);

	angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

	/**
	 * A helper service that can parse typeahead's syntax (string provided by users)
	 * Extracted to a separate service for ease of unit testing
	 */
	  .factory('uibTypeaheadParser', ['$parse', function($parse) {
	    //                      00000111000000000000022200000000000000003333333333333330000000000044000
	    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
	    return {
	      parse: function(input) {
	        var match = input.match(TYPEAHEAD_REGEXP);
	        if (!match) {
	          throw new Error(
	            'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
	              ' but got "' + input + '".');
	        }

	        return {
	          itemName: match[3],
	          source: $parse(match[4]),
	          viewMapper: $parse(match[2] || match[1]),
	          modelMapper: $parse(match[1])
	        };
	      }
	    };
	  }])

	  .controller('UibTypeaheadController', ['$scope', '$element', '$attrs', '$compile', '$parse', '$q', '$timeout', '$document', '$window', '$rootScope', '$$debounce', '$uibPosition', 'uibTypeaheadParser',
	    function(originalScope, element, attrs, $compile, $parse, $q, $timeout, $document, $window, $rootScope, $$debounce, $position, typeaheadParser) {
	    var HOT_KEYS = [9, 13, 27, 38, 40];
	    var eventDebounceTime = 200;
	    var modelCtrl, ngModelOptions;
	    //SUPPORTED ATTRIBUTES (OPTIONS)

	    //minimal no of characters that needs to be entered before typeahead kicks-in
	    var minLength = originalScope.$eval(attrs.typeaheadMinLength);
	    if (!minLength && minLength !== 0) {
	      minLength = 1;
	    }

	    originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
	        minLength = !newVal && newVal !== 0 ? 1 : newVal;
	    });

	    //minimal wait time after last character typed before typeahead kicks-in
	    var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

	    //should it restrict model values to the ones selected from the popup only?
	    var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
	    originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
	      isEditable = newVal !== false;
	    });

	    //binding to a variable that indicates if matches are being retrieved asynchronously
	    var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

	    //a function to determine if an event should cause selection
	    var isSelectEvent = attrs.typeaheadShouldSelect ? $parse(attrs.typeaheadShouldSelect) : function(scope, vals) {
	      var evt = vals.$event;
	      return evt.which === 13 || evt.which === 9;
	    };

	    //a callback executed when a match is selected
	    var onSelectCallback = $parse(attrs.typeaheadOnSelect);

	    //should it select highlighted popup value when losing focus?
	    var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;

	    //binding to a variable that indicates if there were no results after the query is completed
	    var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;

	    var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

	    var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

	    var appendTo = attrs.typeaheadAppendTo ?
	      originalScope.$eval(attrs.typeaheadAppendTo) : null;

	    var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

	    //If input matches an item of the list exactly, select it automatically
	    var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;

	    //binding to a variable that indicates if dropdown is open
	    var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop;

	    var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false;

	    //INTERNAL VARIABLES

	    //model setter executed upon match selection
	    var parsedModel = $parse(attrs.ngModel);
	    var invokeModelSetter = $parse(attrs.ngModel + '($$$p)');
	    var $setModelValue = function(scope, newValue) {
	      if (angular.isFunction(parsedModel(originalScope)) &&
	        ngModelOptions && ngModelOptions.$options && ngModelOptions.$options.getterSetter) {
	        return invokeModelSetter(scope, {$$$p: newValue});
	      }

	      return parsedModel.assign(scope, newValue);
	    };

	    //expressions used by typeahead
	    var parserResult = typeaheadParser.parse(attrs.uibTypeahead);

	    var hasFocus;

	    //Used to avoid bug in iOS webview where iOS keyboard does not fire
	    //mousedown & mouseup events
	    //Issue #3699
	    var selected;

	    //create a child scope for the typeahead directive so we are not polluting original scope
	    //with typeahead-specific data (matches, query etc.)
	    var scope = originalScope.$new();
	    var offDestroy = originalScope.$on('$destroy', function() {
	      scope.$destroy();
	    });
	    scope.$on('$destroy', offDestroy);

	    // WAI-ARIA
	    var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
	    element.attr({
	      'aria-autocomplete': 'list',
	      'aria-expanded': false,
	      'aria-owns': popupId
	    });

	    var inputsContainer, hintInputElem;
	    //add read-only input to show hint
	    if (showHint) {
	      inputsContainer = angular.element('<div></div>');
	      inputsContainer.css('position', 'relative');
	      element.after(inputsContainer);
	      hintInputElem = element.clone();
	      hintInputElem.attr('placeholder', '');
	      hintInputElem.attr('tabindex', '-1');
	      hintInputElem.val('');
	      hintInputElem.css({
	        'position': 'absolute',
	        'top': '0px',
	        'left': '0px',
	        'border-color': 'transparent',
	        'box-shadow': 'none',
	        'opacity': 1,
	        'background': 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
	        'color': '#999'
	      });
	      element.css({
	        'position': 'relative',
	        'vertical-align': 'top',
	        'background-color': 'transparent'
	      });
	      inputsContainer.append(hintInputElem);
	      hintInputElem.after(element);
	    }

	    //pop-up element used to display matches
	    var popUpEl = angular.element('<div uib-typeahead-popup></div>');
	    popUpEl.attr({
	      id: popupId,
	      matches: 'matches',
	      active: 'activeIdx',
	      select: 'select(activeIdx, evt)',
	      'move-in-progress': 'moveInProgress',
	      query: 'query',
	      position: 'position',
	      'assign-is-open': 'assignIsOpen(isOpen)',
	      debounce: 'debounceUpdate'
	    });
	    //custom item template
	    if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
	      popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
	    }

	    if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
	      popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl);
	    }

	    var resetHint = function() {
	      if (showHint) {
	        hintInputElem.val('');
	      }
	    };

	    var resetMatches = function() {
	      scope.matches = [];
	      scope.activeIdx = -1;
	      element.attr('aria-expanded', false);
	      resetHint();
	    };

	    var getMatchId = function(index) {
	      return popupId + '-option-' + index;
	    };

	    // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
	    // This attribute is added or removed automatically when the `activeIdx` changes.
	    scope.$watch('activeIdx', function(index) {
	      if (index < 0) {
	        element.removeAttr('aria-activedescendant');
	      } else {
	        element.attr('aria-activedescendant', getMatchId(index));
	      }
	    });

	    var inputIsExactMatch = function(inputValue, index) {
	      if (scope.matches.length > index && inputValue) {
	        return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
	      }

	      return false;
	    };

	    var getMatchesAsync = function(inputValue, evt) {
	      var locals = {$viewValue: inputValue};
	      isLoadingSetter(originalScope, true);
	      isNoResultsSetter(originalScope, false);
	      $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
	        //it might happen that several async queries were in progress if a user were typing fast
	        //but we are interested only in responses that correspond to the current view value
	        var onCurrentRequest = inputValue === modelCtrl.$viewValue;
	        if (onCurrentRequest && hasFocus) {
	          if (matches && matches.length > 0) {
	            scope.activeIdx = focusFirst ? 0 : -1;
	            isNoResultsSetter(originalScope, false);
	            scope.matches.length = 0;

	            //transform labels
	            for (var i = 0; i < matches.length; i++) {
	              locals[parserResult.itemName] = matches[i];
	              scope.matches.push({
	                id: getMatchId(i),
	                label: parserResult.viewMapper(scope, locals),
	                model: matches[i]
	              });
	            }

	            scope.query = inputValue;
	            //position pop-up with matches - we need to re-calculate its position each time we are opening a window
	            //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
	            //due to other elements being rendered
	            recalculatePosition();

	            element.attr('aria-expanded', true);

	            //Select the single remaining option if user input matches
	            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
	              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
	                $$debounce(function() {
	                  scope.select(0, evt);
	                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
	              } else {
	                scope.select(0, evt);
	              }
	            }

	            if (showHint) {
	              var firstLabel = scope.matches[0].label;
	              if (angular.isString(inputValue) &&
	                inputValue.length > 0 &&
	                firstLabel.slice(0, inputValue.length).toUpperCase() === inputValue.toUpperCase()) {
	                hintInputElem.val(inputValue + firstLabel.slice(inputValue.length));
	              } else {
	                hintInputElem.val('');
	              }
	            }
	          } else {
	            resetMatches();
	            isNoResultsSetter(originalScope, true);
	          }
	        }
	        if (onCurrentRequest) {
	          isLoadingSetter(originalScope, false);
	        }
	      }, function() {
	        resetMatches();
	        isLoadingSetter(originalScope, false);
	        isNoResultsSetter(originalScope, true);
	      });
	    };

	    // bind events only if appendToBody params exist - performance feature
	    if (appendToBody) {
	      angular.element($window).on('resize', fireRecalculating);
	      $document.find('body').on('scroll', fireRecalculating);
	    }

	    // Declare the debounced function outside recalculating for
	    // proper debouncing
	    var debouncedRecalculate = $$debounce(function() {
	      // if popup is visible
	      if (scope.matches.length) {
	        recalculatePosition();
	      }

	      scope.moveInProgress = false;
	    }, eventDebounceTime);

	    // Default progress type
	    scope.moveInProgress = false;

	    function fireRecalculating() {
	      if (!scope.moveInProgress) {
	        scope.moveInProgress = true;
	        scope.$digest();
	      }

	      debouncedRecalculate();
	    }

	    // recalculate actual position and set new values to scope
	    // after digest loop is popup in right position
	    function recalculatePosition() {
	      scope.position = appendToBody ? $position.offset(element) : $position.position(element);
	      scope.position.top += element.prop('offsetHeight');
	    }

	    //we need to propagate user's query so we can higlight matches
	    scope.query = undefined;

	    //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
	    var timeoutPromise;

	    var scheduleSearchWithTimeout = function(inputValue) {
	      timeoutPromise = $timeout(function() {
	        getMatchesAsync(inputValue);
	      }, waitTime);
	    };

	    var cancelPreviousTimeout = function() {
	      if (timeoutPromise) {
	        $timeout.cancel(timeoutPromise);
	      }
	    };

	    resetMatches();

	    scope.assignIsOpen = function (isOpen) {
	      isOpenSetter(originalScope, isOpen);
	    };

	    scope.select = function(activeIdx, evt) {
	      //called from within the $digest() cycle
	      var locals = {};
	      var model, item;

	      selected = true;
	      locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
	      model = parserResult.modelMapper(originalScope, locals);
	      $setModelValue(originalScope, model);
	      modelCtrl.$setValidity('editable', true);
	      modelCtrl.$setValidity('parse', true);

	      onSelectCallback(originalScope, {
	        $item: item,
	        $model: model,
	        $label: parserResult.viewMapper(originalScope, locals),
	        $event: evt
	      });

	      resetMatches();

	      //return focus to the input element if a match was selected via a mouse click event
	      // use timeout to avoid $rootScope:inprog error
	      if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
	        $timeout(function() { element[0].focus(); }, 0, false);
	      }
	    };

	    //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
	    element.on('keydown', function(evt) {
	      //typeahead is open and an "interesting" key was pressed
	      if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
	        return;
	      }

	      var shouldSelect = isSelectEvent(originalScope, {$event: evt});

	      /**
	       * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
	       * or
	       * shift + tab is pressed to bring focus to the previous element
	       * then clear the results
	       */
	      if (scope.activeIdx === -1 && shouldSelect || evt.which === 9 && !!evt.shiftKey) {
	        resetMatches();
	        scope.$digest();
	        return;
	      }

	      evt.preventDefault();
	      var target;
	      switch (evt.which) {
	        case 27: // escape
	          evt.stopPropagation();

	          resetMatches();
	          originalScope.$digest();
	          break;
	        case 38: // up arrow
	          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
	          scope.$digest();
	          target = popUpEl.find('li')[scope.activeIdx];
	          target.parentNode.scrollTop = target.offsetTop;
	          break;
	        case 40: // down arrow
	          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
	          scope.$digest();
	          target = popUpEl.find('li')[scope.activeIdx];
	          target.parentNode.scrollTop = target.offsetTop;
	          break;
	        default:
	          if (shouldSelect) {
	            scope.$apply(function() {
	              if (angular.isNumber(scope.debounceUpdate) || angular.isObject(scope.debounceUpdate)) {
	                $$debounce(function() {
	                  scope.select(scope.activeIdx, evt);
	                }, angular.isNumber(scope.debounceUpdate) ? scope.debounceUpdate : scope.debounceUpdate['default']);
	              } else {
	                scope.select(scope.activeIdx, evt);
	              }
	            });
	          }
	      }
	    });

	    element.bind('focus', function (evt) {
	      hasFocus = true;
	      if (minLength === 0 && !modelCtrl.$viewValue) {
	        $timeout(function() {
	          getMatchesAsync(modelCtrl.$viewValue, evt);
	        }, 0);
	      }
	    });

	    element.bind('blur', function(evt) {
	      if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
	        selected = true;
	        scope.$apply(function() {
	          if (angular.isObject(scope.debounceUpdate) && angular.isNumber(scope.debounceUpdate.blur)) {
	            $$debounce(function() {
	              scope.select(scope.activeIdx, evt);
	            }, scope.debounceUpdate.blur);
	          } else {
	            scope.select(scope.activeIdx, evt);
	          }
	        });
	      }
	      if (!isEditable && modelCtrl.$error.editable) {
	        modelCtrl.$setViewValue();
	        // Reset validity as we are clearing
	        modelCtrl.$setValidity('editable', true);
	        modelCtrl.$setValidity('parse', true);
	        element.val('');
	      }
	      hasFocus = false;
	      selected = false;
	    });

	    // Keep reference to click handler to unbind it.
	    var dismissClickHandler = function(evt) {
	      // Issue #3973
	      // Firefox treats right click as a click on document
	      if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
	        resetMatches();
	        if (!$rootScope.$$phase) {
	          originalScope.$digest();
	        }
	      }
	    };

	    $document.on('click', dismissClickHandler);

	    originalScope.$on('$destroy', function() {
	      $document.off('click', dismissClickHandler);
	      if (appendToBody || appendTo) {
	        $popup.remove();
	      }

	      if (appendToBody) {
	        angular.element($window).off('resize', fireRecalculating);
	        $document.find('body').off('scroll', fireRecalculating);
	      }
	      // Prevent jQuery cache memory leak
	      popUpEl.remove();

	      if (showHint) {
	          inputsContainer.remove();
	      }
	    });

	    var $popup = $compile(popUpEl)(scope);

	    if (appendToBody) {
	      $document.find('body').append($popup);
	    } else if (appendTo) {
	      angular.element(appendTo).eq(0).append($popup);
	    } else {
	      element.after($popup);
	    }

	    this.init = function(_modelCtrl, _ngModelOptions) {
	      modelCtrl = _modelCtrl;
	      ngModelOptions = _ngModelOptions;

	      scope.debounceUpdate = modelCtrl.$options && $parse(modelCtrl.$options.debounce)(originalScope);

	      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
	      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
	      modelCtrl.$parsers.unshift(function(inputValue) {
	        hasFocus = true;

	        if (minLength === 0 || inputValue && inputValue.length >= minLength) {
	          if (waitTime > 0) {
	            cancelPreviousTimeout();
	            scheduleSearchWithTimeout(inputValue);
	          } else {
	            getMatchesAsync(inputValue);
	          }
	        } else {
	          isLoadingSetter(originalScope, false);
	          cancelPreviousTimeout();
	          resetMatches();
	        }

	        if (isEditable) {
	          return inputValue;
	        }

	        if (!inputValue) {
	          // Reset in case user had typed something previously.
	          modelCtrl.$setValidity('editable', true);
	          return null;
	        }

	        modelCtrl.$setValidity('editable', false);
	        return undefined;
	      });

	      modelCtrl.$formatters.push(function(modelValue) {
	        var candidateViewValue, emptyViewValue;
	        var locals = {};

	        // The validity may be set to false via $parsers (see above) if
	        // the model is restricted to selected values. If the model
	        // is set manually it is considered to be valid.
	        if (!isEditable) {
	          modelCtrl.$setValidity('editable', true);
	        }

	        if (inputFormatter) {
	          locals.$model = modelValue;
	          return inputFormatter(originalScope, locals);
	        }

	        //it might happen that we don't have enough info to properly render input value
	        //we need to check for this situation and simply return model value if we can't apply custom formatting
	        locals[parserResult.itemName] = modelValue;
	        candidateViewValue = parserResult.viewMapper(originalScope, locals);
	        locals[parserResult.itemName] = undefined;
	        emptyViewValue = parserResult.viewMapper(originalScope, locals);

	        return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
	      });
	    };
	  }])

	  .directive('uibTypeahead', function() {
	    return {
	      controller: 'UibTypeaheadController',
	      require: ['ngModel', '^?ngModelOptions', 'uibTypeahead'],
	      link: function(originalScope, element, attrs, ctrls) {
	        ctrls[2].init(ctrls[0], ctrls[1]);
	      }
	    };
	  })

	  .directive('uibTypeaheadPopup', ['$$debounce', function($$debounce) {
	    return {
	      scope: {
	        matches: '=',
	        query: '=',
	        active: '=',
	        position: '&',
	        moveInProgress: '=',
	        select: '&',
	        assignIsOpen: '&',
	        debounce: '&'
	      },
	      replace: true,
	      templateUrl: function(element, attrs) {
	        return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html';
	      },
	      link: function(scope, element, attrs) {
	        scope.templateUrl = attrs.templateUrl;

	        scope.isOpen = function() {
	          var isDropdownOpen = scope.matches.length > 0;
	          scope.assignIsOpen({ isOpen: isDropdownOpen });
	          return isDropdownOpen;
	        };

	        scope.isActive = function(matchIdx) {
	          return scope.active === matchIdx;
	        };

	        scope.selectActive = function(matchIdx) {
	          scope.active = matchIdx;
	        };

	        scope.selectMatch = function(activeIdx, evt) {
	          var debounce = scope.debounce();
	          if (angular.isNumber(debounce) || angular.isObject(debounce)) {
	            $$debounce(function() {
	              scope.select({activeIdx: activeIdx, evt: evt});
	            }, angular.isNumber(debounce) ? debounce : debounce['default']);
	          } else {
	            scope.select({activeIdx: activeIdx, evt: evt});
	          }
	        };
	      }
	    };
	  }])

	  .directive('uibTypeaheadMatch', ['$templateRequest', '$compile', '$parse', function($templateRequest, $compile, $parse) {
	    return {
	      scope: {
	        index: '=',
	        match: '=',
	        query: '='
	      },
	      link: function(scope, element, attrs) {
	        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'uib/template/typeahead/typeahead-match.html';
	        $templateRequest(tplUrl).then(function(tplContent) {
	          var tplEl = angular.element(tplContent.trim());
	          element.replaceWith(tplEl);
	          $compile(tplEl)(scope);
	        });
	      }
	    };
	  }])

	  .filter('uibTypeaheadHighlight', ['$sce', '$injector', '$log', function($sce, $injector, $log) {
	    var isSanitizePresent;
	    isSanitizePresent = $injector.has('$sanitize');

	    function escapeRegexp(queryToEscape) {
	      // Regex: capture the whole query string and replace it with the string that will be used to match
	      // the results, for example if the capture is "a" the result will be \a
	      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	    }

	    function containsHtml(matchItem) {
	      return /<.*>/g.test(matchItem);
	    }

	    return function(matchItem, query) {
	      if (!isSanitizePresent && containsHtml(matchItem)) {
	        $log.warn('Unsafe use of typeahead please use ngSanitize'); // Warn the user about the danger
	      }
	      matchItem = query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem; // Replaces the capture string with a the same string inside of a "strong" tag
	      if (!isSanitizePresent) {
	        matchItem = $sce.trustAsHtml(matchItem); // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
	      }
	      return matchItem;
	    };
	  }]);

	angular.module("uib/template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/accordion/accordion-group.html",
	    "<div class=\"panel\" ng-class=\"panelClass || 'panel-default'\">\n" +
	    "  <div role=\"tab\" id=\"{{::headingId}}\" aria-selected=\"{{isOpen}}\" class=\"panel-heading\" ng-keypress=\"toggleOpen($event)\">\n" +
	    "    <h4 class=\"panel-title\">\n" +
	    "      <a role=\"button\" data-toggle=\"collapse\" href aria-expanded=\"{{isOpen}}\" aria-controls=\"{{::panelId}}\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" uib-accordion-transclude=\"heading\"><span uib-accordion-header ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
	    "    </h4>\n" +
	    "  </div>\n" +
	    "  <div id=\"{{::panelId}}\" aria-labelledby=\"{{::headingId}}\" aria-hidden=\"{{!isOpen}}\" role=\"tabpanel\" class=\"panel-collapse collapse\" uib-collapse=\"!isOpen\">\n" +
	    "    <div class=\"panel-body\" ng-transclude></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/accordion/accordion.html",
	    "<div role=\"tablist\" class=\"panel-group\" ng-transclude></div>");
	}]);

	angular.module("uib/template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/alert/alert.html",
	    "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissible' : null]\" role=\"alert\">\n" +
	    "    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close({$event: $event})\">\n" +
	    "        <span aria-hidden=\"true\">&times;</span>\n" +
	    "        <span class=\"sr-only\">Close</span>\n" +
	    "    </button>\n" +
	    "    <div ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/carousel/carousel.html",
	    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
	    "  <div class=\"carousel-inner\" ng-transclude></div>\n" +
	    "  <a role=\"button\" href class=\"left carousel-control\" ng-click=\"prev()\" ng-class=\"{ disabled: isPrevDisabled() }\" ng-show=\"slides.length > 1\">\n" +
	    "    <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-left\"></span>\n" +
	    "    <span class=\"sr-only\">previous</span>\n" +
	    "  </a>\n" +
	    "  <a role=\"button\" href class=\"right carousel-control\" ng-click=\"next()\" ng-class=\"{ disabled: isNextDisabled() }\" ng-show=\"slides.length > 1\">\n" +
	    "    <span aria-hidden=\"true\" class=\"glyphicon glyphicon-chevron-right\"></span>\n" +
	    "    <span class=\"sr-only\">next</span>\n" +
	    "  </a>\n" +
	    "  <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
	    "    <li ng-repeat=\"slide in slides | orderBy:indexOfSlide track by $index\" ng-class=\"{ active: isActive(slide) }\" ng-click=\"select(slide)\">\n" +
	    "      <span class=\"sr-only\">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if=\"isActive(slide)\">, currently active</span></span>\n" +
	    "    </li>\n" +
	    "  </ol>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/carousel/slide.html",
	    "<div ng-class=\"{\n" +
	    "    'active': active\n" +
	    "  }\" class=\"item text-center\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/datepicker.html",
	    "<div class=\"uib-datepicker\" ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
	    "  <uib-daypicker ng-switch-when=\"day\" tabindex=\"0\"></uib-daypicker>\n" +
	    "  <uib-monthpicker ng-switch-when=\"month\" tabindex=\"0\"></uib-monthpicker>\n" +
	    "  <uib-yearpicker ng-switch-when=\"year\" tabindex=\"0\"></uib-yearpicker>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/day.html",
	    "<table class=\"uib-daypicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
	    "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-weeks\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-day text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default btn-sm\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/month.html",
	    "<table class=\"uib-monthpicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-months\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-month text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepicker/year.html",
	    "<table class=\"uib-yearpicker\" role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
	    "  <thead>\n" +
	    "    <tr>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left uib-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
	    "      <th colspan=\"{{::columns - 2}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm uib-title\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\"><strong>{{title}}</strong></button></th>\n" +
	    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right uib-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
	    "    </tr>\n" +
	    "  </thead>\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"uib-years\" ng-repeat=\"row in rows track by $index\">\n" +
	    "      <td ng-repeat=\"dt in row\" class=\"uib-year text-center\" role=\"gridcell\"\n" +
	    "        id=\"{{::dt.uid}}\"\n" +
	    "        ng-class=\"::dt.customClass\">\n" +
	    "        <button type=\"button\" class=\"btn btn-default\"\n" +
	    "          uib-is-class=\"\n" +
	    "            'btn-info' for selectedDt,\n" +
	    "            'active' for activeDt\n" +
	    "            on dt\"\n" +
	    "          ng-click=\"select(dt.date)\"\n" +
	    "          ng-disabled=\"::dt.disabled\"\n" +
	    "          tabindex=\"-1\"><span ng-class=\"::{'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
	    "      </td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/datepickerPopup/popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/datepickerPopup/popup.html",
	    "<div>\n" +
	    "  <ul class=\"uib-datepicker-popup dropdown-menu uib-position-measure\" dropdown-nested ng-if=\"isOpen\" ng-keydown=\"keydown($event)\" ng-click=\"$event.stopPropagation()\">\n" +
	    "    <li ng-transclude></li>\n" +
	    "    <li ng-if=\"showButtonBar\" class=\"uib-button-bar\">\n" +
	    "      <span class=\"btn-group pull-left\">\n" +
	    "        <button type=\"button\" class=\"btn btn-sm btn-info uib-datepicker-current\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('current') }}</button>\n" +
	    "        <button type=\"button\" class=\"btn btn-sm btn-danger uib-clear\" ng-click=\"select(null, $event)\">{{ getText('clear') }}</button>\n" +
	    "      </span>\n" +
	    "      <button type=\"button\" class=\"btn btn-sm btn-success pull-right uib-close\" ng-click=\"close($event)\">{{ getText('close') }}</button>\n" +
	    "    </li>\n" +
	    "  </ul>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/backdrop.html",
	    "<div class=\"modal-backdrop\"\n" +
	    "     uib-modal-animation-class=\"fade\"\n" +
	    "     modal-in-class=\"in\"\n" +
	    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
	    "></div>\n" +
	    "");
	}]);

	angular.module("uib/template/modal/window.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/window.html",
	    "<div modal-render=\"{{$isRendered}}\" tabindex=\"-1\" role=\"dialog\" class=\"modal\"\n" +
	    "    uib-modal-animation-class=\"fade\"\n" +
	    "    modal-in-class=\"in\"\n" +
	    "    ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\">\n" +
	    "    <div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/pager/pager.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/pager/pager.html",
	    "<ul class=\"pager\">\n" +
	    "  <li ng-class=\"{disabled: noPrevious()||ngDisabled, previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\">{{::getText('previous')}}</a></li>\n" +
	    "  <li ng-class=\"{disabled: noNext()||ngDisabled, next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\">{{::getText('next')}}</a></li>\n" +
	    "</ul>\n" +
	    "");
	}]);

	angular.module("uib/template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/pagination/pagination.html",
	    "<ul class=\"pagination\">\n" +
	    "  <li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-first\"><a href ng-click=\"selectPage(1, $event)\">{{::getText('first')}}</a></li>\n" +
	    "  <li ng-if=\"::directionLinks\" ng-class=\"{disabled: noPrevious()||ngDisabled}\" class=\"pagination-prev\"><a href ng-click=\"selectPage(page - 1, $event)\">{{::getText('previous')}}</a></li>\n" +
	    "  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active,disabled: ngDisabled&&!page.active}\" class=\"pagination-page\"><a href ng-click=\"selectPage(page.number, $event)\">{{page.text}}</a></li>\n" +
	    "  <li ng-if=\"::directionLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-next\"><a href ng-click=\"selectPage(page + 1, $event)\">{{::getText('next')}}</a></li>\n" +
	    "  <li ng-if=\"::boundaryLinks\" ng-class=\"{disabled: noNext()||ngDisabled}\" class=\"pagination-last\"><a href ng-click=\"selectPage(totalPages, $event)\">{{::getText('last')}}</a></li>\n" +
	    "</ul>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-html-popup.html",
	    "<div class=\"tooltip\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-popup.html",
	    "<div class=\"tooltip\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tooltip/tooltip-template-popup.html",
	    "<div class=\"tooltip\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"tooltip-arrow\"></div>\n" +
	    "  <div class=\"tooltip-inner\"\n" +
	    "    uib-tooltip-template-transclude=\"contentExp()\"\n" +
	    "    tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover-html.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover-html.html",
	    "<div class=\"popover\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "      <div class=\"popover-content\" ng-bind-html=\"contentExp()\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover-template.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover-template.html",
	    "<div class=\"popover\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "      <div class=\"popover-content\"\n" +
	    "        uib-tooltip-template-transclude=\"contentExp()\"\n" +
	    "        tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/popover/popover.html",
	    "<div class=\"popover\"\n" +
	    "  tooltip-animation-class=\"fade\"\n" +
	    "  uib-tooltip-classes\n" +
	    "  ng-class=\"{ in: isOpen() }\">\n" +
	    "  <div class=\"arrow\"></div>\n" +
	    "\n" +
	    "  <div class=\"popover-inner\">\n" +
	    "      <h3 class=\"popover-title\" ng-bind=\"uibTitle\" ng-if=\"uibTitle\"></h3>\n" +
	    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/bar.html",
	    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
	    "");
	}]);

	angular.module("uib/template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/progress.html",
	    "<div class=\"progress\" ng-transclude aria-labelledby=\"{{::title}}\"></div>");
	}]);

	angular.module("uib/template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/progressbar/progressbar.html",
	    "<div class=\"progress\">\n" +
	    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" aria-labelledby=\"{{::title}}\" ng-transclude></div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/rating/rating.html",
	    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\" aria-valuetext=\"{{title}}\">\n" +
	    "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
	    "    <i ng-repeat-end ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\" ng-attr-title=\"{{r.title}}\"></i>\n" +
	    "</span>\n" +
	    "");
	}]);

	angular.module("uib/template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tabs/tab.html",
	    "<li ng-class=\"[{active: active, disabled: disabled}, classes]\" class=\"uib-tab nav-item\">\n" +
	    "  <a href ng-click=\"select($event)\" class=\"nav-link\" uib-tab-heading-transclude>{{heading}}</a>\n" +
	    "</li>\n" +
	    "");
	}]);

	angular.module("uib/template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/tabs/tabset.html",
	    "<div>\n" +
	    "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
	    "  <div class=\"tab-content\">\n" +
	    "    <div class=\"tab-pane\"\n" +
	    "         ng-repeat=\"tab in tabset.tabs\"\n" +
	    "         ng-class=\"{active: tabset.active === tab.index}\"\n" +
	    "         uib-tab-content-transclude=\"tab\">\n" +
	    "    </div>\n" +
	    "  </div>\n" +
	    "</div>\n" +
	    "");
	}]);

	angular.module("uib/template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/timepicker/timepicker.html",
	    "<table class=\"uib-timepicker\">\n" +
	    "  <tbody>\n" +
	    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
	    "      <td class=\"uib-increment hours\"><a ng-click=\"incrementHours()\" ng-class=\"{disabled: noIncrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementHours()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td>&nbsp;</td>\n" +
	    "      <td class=\"uib-increment minutes\"><a ng-click=\"incrementMinutes()\" ng-class=\"{disabled: noIncrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementMinutes()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-increment seconds\"><a ng-click=\"incrementSeconds()\" ng-class=\"{disabled: noIncrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noIncrementSeconds()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
	    "      <td ng-show=\"showMeridian\"></td>\n" +
	    "    </tr>\n" +
	    "    <tr>\n" +
	    "      <td class=\"form-group uib-time hours\" ng-class=\"{'has-error': invalidHours}\">\n" +
	    "        <input type=\"text\" placeholder=\"HH\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementHours()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td class=\"uib-separator\">:</td>\n" +
	    "      <td class=\"form-group uib-time minutes\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
	    "        <input type=\"text\" placeholder=\"MM\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"::readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementMinutes()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-separator\">:</td>\n" +
	    "      <td class=\"form-group uib-time seconds\" ng-class=\"{'has-error': invalidSeconds}\" ng-show=\"showSeconds\">\n" +
	    "        <input type=\"text\" placeholder=\"SS\" ng-model=\"seconds\" ng-change=\"updateSeconds()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\" tabindex=\"{{::tabindex}}\" ng-disabled=\"noIncrementSeconds()\" ng-blur=\"blur()\">\n" +
	    "      </td>\n" +
	    "      <td ng-show=\"showMeridian\" class=\"uib-time am-pm\"><button type=\"button\" ng-class=\"{disabled: noToggleMeridian()}\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\" ng-disabled=\"noToggleMeridian()\" tabindex=\"{{::tabindex}}\">{{meridian}}</button></td>\n" +
	    "    </tr>\n" +
	    "    <tr class=\"text-center\" ng-show=\"::showSpinners\">\n" +
	    "      <td class=\"uib-decrement hours\"><a ng-click=\"decrementHours()\" ng-class=\"{disabled: noDecrementHours()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementHours()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td>&nbsp;</td>\n" +
	    "      <td class=\"uib-decrement minutes\"><a ng-click=\"decrementMinutes()\" ng-class=\"{disabled: noDecrementMinutes()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementMinutes()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td ng-show=\"showSeconds\">&nbsp;</td>\n" +
	    "      <td ng-show=\"showSeconds\" class=\"uib-decrement seconds\"><a ng-click=\"decrementSeconds()\" ng-class=\"{disabled: noDecrementSeconds()}\" class=\"btn btn-link\" ng-disabled=\"noDecrementSeconds()\" tabindex=\"{{::tabindex}}\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
	    "      <td ng-show=\"showMeridian\"></td>\n" +
	    "    </tr>\n" +
	    "  </tbody>\n" +
	    "</table>\n" +
	    "");
	}]);

	angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/typeahead/typeahead-match.html",
	    "<a href\n" +
	    "   tabindex=\"-1\"\n" +
	    "   ng-bind-html=\"match.label | uibTypeaheadHighlight:query\"\n" +
	    "   ng-attr-title=\"{{match.label}}\"></a>\n" +
	    "");
	}]);

	angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/typeahead/typeahead-popup.html",
	    "<ul class=\"dropdown-menu\" ng-show=\"isOpen() && !moveInProgress\" ng-style=\"{top: position().top+'px', left: position().left+'px'}\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
	    "    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index, $event)\" role=\"option\" id=\"{{::match.id}}\">\n" +
	    "        <div uib-typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
	    "    </li>\n" +
	    "</ul>\n" +
	    "");
	}]);
	angular.module('ui.bootstrap.carousel').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibCarouselCss && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'); angular.$$uibCarouselCss = true; });
	angular.module('ui.bootstrap.datepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'); angular.$$uibDatepickerCss = true; });
	angular.module('ui.bootstrap.position').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'); angular.$$uibPositionCss = true; });
	angular.module('ui.bootstrap.datepickerPopup').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibDatepickerpopupCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'); angular.$$uibDatepickerpopupCss = true; });
	angular.module('ui.bootstrap.tooltip').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTooltipCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'); angular.$$uibTooltipCss = true; });
	angular.module('ui.bootstrap.timepicker').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTimepickerCss && angular.element(document).find('head').prepend('<style type="text/css">.uib-time input{width:50px;}</style>'); angular.$$uibTimepickerCss = true; });
	angular.module('ui.bootstrap.typeahead').run(function() {!angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find('head').prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'); angular.$$uibTypeaheadCss = true; });

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(52);
	__webpack_require__(54);
	__webpack_require__(56);
	__webpack_require__(57);
	__webpack_require__(58);

	var MODULE_NAME = 'ui.bootstrap.module.modal';

	angular.module(MODULE_NAME, ['ui.bootstrap.modal', 'uib/template/modal/backdrop.html', 'uib/template/modal/window.html']);

	module.exports = MODULE_NAME;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(53);

	var MODULE_NAME = 'ui.bootstrap.module.position';

	angular.module(MODULE_NAME, ['ui.bootstrap.position']);

	module.exports = MODULE_NAME;


/***/ },
/* 53 */
/***/ function(module, exports) {

	angular.module('ui.bootstrap.position', [])

	/**
	 * A set of utility methods for working with the DOM.
	 * It is meant to be used where we need to absolute-position elements in
	 * relation to another element (this is the case for tooltips, popovers,
	 * typeahead suggestions etc.).
	 */
	  .factory('$uibPosition', ['$document', '$window', function($document, $window) {
	    /**
	     * Used by scrollbarWidth() function to cache scrollbar's width.
	     * Do not access this variable directly, use scrollbarWidth() instead.
	     */
	    var SCROLLBAR_WIDTH;
	    /**
	     * scrollbar on body and html element in IE and Edge overlay
	     * content and should be considered 0 width.
	     */
	    var BODY_SCROLLBAR_WIDTH;
	    var OVERFLOW_REGEX = {
	      normal: /(auto|scroll)/,
	      hidden: /(auto|scroll|hidden)/
	    };
	    var PLACEMENT_REGEX = {
	      auto: /\s?auto?\s?/i,
	      primary: /^(top|bottom|left|right)$/,
	      secondary: /^(top|bottom|left|right|center)$/,
	      vertical: /^(top|bottom)$/
	    };
	    var BODY_REGEX = /(HTML|BODY)/;

	    return {

	      /**
	       * Provides a raw DOM element from a jQuery/jQLite element.
	       *
	       * @param {element} elem - The element to convert.
	       *
	       * @returns {element} A HTML element.
	       */
	      getRawNode: function(elem) {
	        return elem.nodeName ? elem : elem[0] || elem;
	      },

	      /**
	       * Provides a parsed number for a style property.  Strips
	       * units and casts invalid numbers to 0.
	       *
	       * @param {string} value - The style value to parse.
	       *
	       * @returns {number} A valid number.
	       */
	      parseStyle: function(value) {
	        value = parseFloat(value);
	        return isFinite(value) ? value : 0;
	      },

	      /**
	       * Provides the closest positioned ancestor.
	       *
	       * @param {element} element - The element to get the offest parent for.
	       *
	       * @returns {element} The closest positioned ancestor.
	       */
	      offsetParent: function(elem) {
	        elem = this.getRawNode(elem);

	        var offsetParent = elem.offsetParent || $document[0].documentElement;

	        function isStaticPositioned(el) {
	          return ($window.getComputedStyle(el).position || 'static') === 'static';
	        }

	        while (offsetParent && offsetParent !== $document[0].documentElement && isStaticPositioned(offsetParent)) {
	          offsetParent = offsetParent.offsetParent;
	        }

	        return offsetParent || $document[0].documentElement;
	      },

	      /**
	       * Provides the scrollbar width, concept from TWBS measureScrollbar()
	       * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
	       * In IE and Edge, scollbar on body and html element overlay and should
	       * return a width of 0.
	       *
	       * @returns {number} The width of the browser scollbar.
	       */
	      scrollbarWidth: function(isBody) {
	        if (isBody) {
	          if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
	            var bodyElem = $document.find('body');
	            bodyElem.addClass('uib-position-body-scrollbar-measure');
	            BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth;
	            BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0;
	            bodyElem.removeClass('uib-position-body-scrollbar-measure');
	          }
	          return BODY_SCROLLBAR_WIDTH;
	        }

	        if (angular.isUndefined(SCROLLBAR_WIDTH)) {
	          var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>');
	          $document.find('body').append(scrollElem);
	          SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth;
	          SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0;
	          scrollElem.remove();
	        }

	        return SCROLLBAR_WIDTH;
	      },

	      /**
	       * Provides the padding required on an element to replace the scrollbar.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**scrollbarWidth**: the width of the scrollbar</li>
	       *     <li>**widthOverflow**: whether the the width is overflowing</li>
	       *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
	       *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
	       *     <li>**heightOverflow**: whether the the height is overflowing</li>
	       *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
	       *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
	       *   </ul>
	       */
	      scrollbarPadding: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemStyle = $window.getComputedStyle(elem);
	        var paddingRight = this.parseStyle(elemStyle.paddingRight);
	        var paddingBottom = this.parseStyle(elemStyle.paddingBottom);
	        var scrollParent = this.scrollParent(elem, false, true);
	        var scrollbarWidth = this.scrollbarWidth(scrollParent, BODY_REGEX.test(scrollParent.tagName));

	        return {
	          scrollbarWidth: scrollbarWidth,
	          widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
	          right: paddingRight + scrollbarWidth,
	          originalRight: paddingRight,
	          heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
	          bottom: paddingBottom + scrollbarWidth,
	          originalBottom: paddingBottom
	         };
	      },

	      /**
	       * Checks to see if the element is scrollable.
	       *
	       * @param {element} elem - The element to check.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       *
	       * @returns {boolean} Whether the element is scrollable.
	       */
	      isScrollable: function(elem, includeHidden) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var elemStyle = $window.getComputedStyle(elem);
	        return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX);
	      },

	      /**
	       * Provides the closest scrollable ancestor.
	       * A port of the jQuery UI scrollParent method:
	       * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
	       *
	       * @param {element} elem - The element to find the scroll parent of.
	       * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
	       *   default is false.
	       * @param {boolean=} [includeSelf=false] - Should the element being passed be
	       * included in the scrollable llokup.
	       *
	       * @returns {element} A HTML element.
	       */
	      scrollParent: function(elem, includeHidden, includeSelf) {
	        elem = this.getRawNode(elem);

	        var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal;
	        var documentEl = $document[0].documentElement;
	        var elemStyle = $window.getComputedStyle(elem);
	        if (includeSelf && overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)) {
	          return elem;
	        }
	        var excludeStatic = elemStyle.position === 'absolute';
	        var scrollParent = elem.parentElement || documentEl;

	        if (scrollParent === documentEl || elemStyle.position === 'fixed') {
	          return documentEl;
	        }

	        while (scrollParent.parentElement && scrollParent !== documentEl) {
	          var spStyle = $window.getComputedStyle(scrollParent);
	          if (excludeStatic && spStyle.position !== 'static') {
	            excludeStatic = false;
	          }

	          if (!excludeStatic && overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)) {
	            break;
	          }
	          scrollParent = scrollParent.parentElement;
	        }

	        return scrollParent;
	      },

	      /**
	       * Provides read-only equivalent of jQuery's position function:
	       * http://api.jquery.com/position/ - distance to closest positioned
	       * ancestor.  Does not account for margins by default like jQuery position.
	       *
	       * @param {element} elem - The element to caclulate the position on.
	       * @param {boolean=} [includeMargins=false] - Should margins be accounted
	       * for, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of offset parent</li>
	       *     <li>**left**: distance to left edge of offset parent</li>
	       *   </ul>
	       */
	      position: function(elem, includeMagins) {
	        elem = this.getRawNode(elem);

	        var elemOffset = this.offset(elem);
	        if (includeMagins) {
	          var elemStyle = $window.getComputedStyle(elem);
	          elemOffset.top -= this.parseStyle(elemStyle.marginTop);
	          elemOffset.left -= this.parseStyle(elemStyle.marginLeft);
	        }
	        var parent = this.offsetParent(elem);
	        var parentOffset = {top: 0, left: 0};

	        if (parent !== $document[0].documentElement) {
	          parentOffset = this.offset(parent);
	          parentOffset.top += parent.clientTop - parent.scrollTop;
	          parentOffset.left += parent.clientLeft - parent.scrollLeft;
	        }

	        return {
	          width: Math.round(angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight),
	          top: Math.round(elemOffset.top - parentOffset.top),
	          left: Math.round(elemOffset.left - parentOffset.left)
	        };
	      },

	      /**
	       * Provides read-only equivalent of jQuery's offset function:
	       * http://api.jquery.com/offset/ - distance to viewport.  Does
	       * not account for borders, margins, or padding on the body
	       * element.
	       *
	       * @param {element} elem - The element to calculate the offset on.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**width**: the width of the element</li>
	       *     <li>**height**: the height of the element</li>
	       *     <li>**top**: distance to top edge of viewport</li>
	       *     <li>**right**: distance to bottom edge of viewport</li>
	       *   </ul>
	       */
	      offset: function(elem) {
	        elem = this.getRawNode(elem);

	        var elemBCR = elem.getBoundingClientRect();
	        return {
	          width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
	          height: Math.round(angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight),
	          top: Math.round(elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)),
	          left: Math.round(elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft))
	        };
	      },

	      /**
	       * Provides offset distance to the closest scrollable ancestor
	       * or viewport.  Accounts for border and scrollbar width.
	       *
	       * Right and bottom dimensions represent the distance to the
	       * respective edge of the viewport element.  If the element
	       * edge extends beyond the viewport, a negative value will be
	       * reported.
	       *
	       * @param {element} elem - The element to get the viewport offset for.
	       * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
	       * of the first scrollable element, default is false.
	       * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
	       * be accounted for, default is true.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: distance to the top content edge of viewport element</li>
	       *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
	       *     <li>**left**: distance to the left content edge of viewport element</li>
	       *     <li>**right**: distance to the right content edge of viewport element</li>
	       *   </ul>
	       */
	      viewportOffset: function(elem, useDocument, includePadding) {
	        elem = this.getRawNode(elem);
	        includePadding = includePadding !== false ? true : false;

	        var elemBCR = elem.getBoundingClientRect();
	        var offsetBCR = {top: 0, left: 0, bottom: 0, right: 0};

	        var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem);
	        var offsetParentBCR = offsetParent.getBoundingClientRect();

	        offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop;
	        offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft;
	        if (offsetParent === $document[0].documentElement) {
	          offsetBCR.top += $window.pageYOffset;
	          offsetBCR.left += $window.pageXOffset;
	        }
	        offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight;
	        offsetBCR.right = offsetBCR.left + offsetParent.clientWidth;

	        if (includePadding) {
	          var offsetParentStyle = $window.getComputedStyle(offsetParent);
	          offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop);
	          offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom);
	          offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft);
	          offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight);
	        }

	        return {
	          top: Math.round(elemBCR.top - offsetBCR.top),
	          bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
	          left: Math.round(elemBCR.left - offsetBCR.left),
	          right: Math.round(offsetBCR.right - elemBCR.right)
	        };
	      },

	      /**
	       * Provides an array of placement values parsed from a placement string.
	       * Along with the 'auto' indicator, supported placement strings are:
	       *   <ul>
	       *     <li>top: element on top, horizontally centered on host element.</li>
	       *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
	       *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
	       *     <li>bottom: element on bottom, horizontally centered on host element.</li>
	       *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
	       *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
	       *     <li>left: element on left, vertically centered on host element.</li>
	       *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
	       *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
	       *     <li>right: element on right, vertically centered on host element.</li>
	       *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
	       *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
	       *   </ul>
	       * A placement string with an 'auto' indicator is expected to be
	       * space separated from the placement, i.e: 'auto bottom-left'  If
	       * the primary and secondary placement values do not match 'top,
	       * bottom, left, right' then 'top' will be the primary placement and
	       * 'center' will be the secondary placement.  If 'auto' is passed, true
	       * will be returned as the 3rd value of the array.
	       *
	       * @param {string} placement - The placement string to parse.
	       *
	       * @returns {array} An array with the following values
	       * <ul>
	       *   <li>**[0]**: The primary placement.</li>
	       *   <li>**[1]**: The secondary placement.</li>
	       *   <li>**[2]**: If auto is passed: true, else undefined.</li>
	       * </ul>
	       */
	      parsePlacement: function(placement) {
	        var autoPlace = PLACEMENT_REGEX.auto.test(placement);
	        if (autoPlace) {
	          placement = placement.replace(PLACEMENT_REGEX.auto, '');
	        }

	        placement = placement.split('-');

	        placement[0] = placement[0] || 'top';
	        if (!PLACEMENT_REGEX.primary.test(placement[0])) {
	          placement[0] = 'top';
	        }

	        placement[1] = placement[1] || 'center';
	        if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
	          placement[1] = 'center';
	        }

	        if (autoPlace) {
	          placement[2] = true;
	        } else {
	          placement[2] = false;
	        }

	        return placement;
	      },

	      /**
	       * Provides coordinates for an element to be positioned relative to
	       * another element.  Passing 'auto' as part of the placement parameter
	       * will enable smart placement - where the element fits. i.e:
	       * 'auto left-top' will check to see if there is enough space to the left
	       * of the hostElem to fit the targetElem, if not place right (same for secondary
	       * top placement).  Available space is calculated using the viewportOffset
	       * function.
	       *
	       * @param {element} hostElem - The element to position against.
	       * @param {element} targetElem - The element to position.
	       * @param {string=} [placement=top] - The placement for the targetElem,
	       *   default is 'top'. 'center' is assumed as secondary placement for
	       *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
	       *   <ul>
	       *     <li>top</li>
	       *     <li>top-right</li>
	       *     <li>top-left</li>
	       *     <li>bottom</li>
	       *     <li>bottom-left</li>
	       *     <li>bottom-right</li>
	       *     <li>left</li>
	       *     <li>left-top</li>
	       *     <li>left-bottom</li>
	       *     <li>right</li>
	       *     <li>right-top</li>
	       *     <li>right-bottom</li>
	       *   </ul>
	       * @param {boolean=} [appendToBody=false] - Should the top and left values returned
	       *   be calculated from the body element, default is false.
	       *
	       * @returns {object} An object with the following properties:
	       *   <ul>
	       *     <li>**top**: Value for targetElem top.</li>
	       *     <li>**left**: Value for targetElem left.</li>
	       *     <li>**placement**: The resolved placement.</li>
	       *   </ul>
	       */
	      positionElements: function(hostElem, targetElem, placement, appendToBody) {
	        hostElem = this.getRawNode(hostElem);
	        targetElem = this.getRawNode(targetElem);

	        // need to read from prop to support tests.
	        var targetWidth = angular.isDefined(targetElem.offsetWidth) ? targetElem.offsetWidth : targetElem.prop('offsetWidth');
	        var targetHeight = angular.isDefined(targetElem.offsetHeight) ? targetElem.offsetHeight : targetElem.prop('offsetHeight');

	        placement = this.parsePlacement(placement);

	        var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem);
	        var targetElemPos = {top: 0, left: 0, placement: ''};

	        if (placement[2]) {
	          var viewportOffset = this.viewportOffset(hostElem, appendToBody);

	          var targetElemStyle = $window.getComputedStyle(targetElem);
	          var adjustedSize = {
	            width: targetWidth + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginLeft) + this.parseStyle(targetElemStyle.marginRight))),
	            height: targetHeight + Math.round(Math.abs(this.parseStyle(targetElemStyle.marginTop) + this.parseStyle(targetElemStyle.marginBottom)))
	          };

	          placement[0] = placement[0] === 'top' && adjustedSize.height > viewportOffset.top && adjustedSize.height <= viewportOffset.bottom ? 'bottom' :
	                         placement[0] === 'bottom' && adjustedSize.height > viewportOffset.bottom && adjustedSize.height <= viewportOffset.top ? 'top' :
	                         placement[0] === 'left' && adjustedSize.width > viewportOffset.left && adjustedSize.width <= viewportOffset.right ? 'right' :
	                         placement[0] === 'right' && adjustedSize.width > viewportOffset.right && adjustedSize.width <= viewportOffset.left ? 'left' :
	                         placement[0];

	          placement[1] = placement[1] === 'top' && adjustedSize.height - hostElemPos.height > viewportOffset.bottom && adjustedSize.height - hostElemPos.height <= viewportOffset.top ? 'bottom' :
	                         placement[1] === 'bottom' && adjustedSize.height - hostElemPos.height > viewportOffset.top && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom ? 'top' :
	                         placement[1] === 'left' && adjustedSize.width - hostElemPos.width > viewportOffset.right && adjustedSize.width - hostElemPos.width <= viewportOffset.left ? 'right' :
	                         placement[1] === 'right' && adjustedSize.width - hostElemPos.width > viewportOffset.left && adjustedSize.width - hostElemPos.width <= viewportOffset.right ? 'left' :
	                         placement[1];

	          if (placement[1] === 'center') {
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              var xOverflow = hostElemPos.width / 2 - targetWidth / 2;
	              if (viewportOffset.left + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.right) {
	                placement[1] = 'left';
	              } else if (viewportOffset.right + xOverflow < 0 && adjustedSize.width - hostElemPos.width <= viewportOffset.left) {
	                placement[1] = 'right';
	              }
	            } else {
	              var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2;
	              if (viewportOffset.top + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.bottom) {
	                placement[1] = 'top';
	              } else if (viewportOffset.bottom + yOverflow < 0 && adjustedSize.height - hostElemPos.height <= viewportOffset.top) {
	                placement[1] = 'bottom';
	              }
	            }
	          }
	        }

	        switch (placement[0]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top - targetHeight;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left - targetWidth;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width;
	            break;
	        }

	        switch (placement[1]) {
	          case 'top':
	            targetElemPos.top = hostElemPos.top;
	            break;
	          case 'bottom':
	            targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight;
	            break;
	          case 'left':
	            targetElemPos.left = hostElemPos.left;
	            break;
	          case 'right':
	            targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth;
	            break;
	          case 'center':
	            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	              targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2;
	            } else {
	              targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2;
	            }
	            break;
	        }

	        targetElemPos.top = Math.round(targetElemPos.top);
	        targetElemPos.left = Math.round(targetElemPos.left);
	        targetElemPos.placement = placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1];

	        return targetElemPos;
	      },

	      /**
	      * Provides a way for positioning tooltip & dropdown
	      * arrows when using placement options beyond the standard
	      * left, right, top, or bottom.
	      *
	      * @param {element} elem - The tooltip/dropdown element.
	      * @param {string} placement - The placement for the elem.
	      */
	      positionArrow: function(elem, placement) {
	        elem = this.getRawNode(elem);

	        var innerElem = elem.querySelector('.tooltip-inner, .popover-inner');
	        if (!innerElem) {
	          return;
	        }

	        var isTooltip = angular.element(innerElem).hasClass('tooltip-inner');

	        var arrowElem = isTooltip ? elem.querySelector('.tooltip-arrow') : elem.querySelector('.arrow');
	        if (!arrowElem) {
	          return;
	        }

	        var arrowCss = {
	          top: '',
	          bottom: '',
	          left: '',
	          right: ''
	        };

	        placement = this.parsePlacement(placement);
	        if (placement[1] === 'center') {
	          // no adjustment necessary - just reset styles
	          angular.element(arrowElem).css(arrowCss);
	          return;
	        }

	        var borderProp = 'border-' + placement[0] + '-width';
	        var borderWidth = $window.getComputedStyle(arrowElem)[borderProp];

	        var borderRadiusProp = 'border-';
	        if (PLACEMENT_REGEX.vertical.test(placement[0])) {
	          borderRadiusProp += placement[0] + '-' + placement[1];
	        } else {
	          borderRadiusProp += placement[1] + '-' + placement[0];
	        }
	        borderRadiusProp += '-radius';
	        var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[borderRadiusProp];

	        switch (placement[0]) {
	          case 'top':
	            arrowCss.bottom = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'bottom':
	            arrowCss.top = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'left':
	            arrowCss.right = isTooltip ? '0' : '-' + borderWidth;
	            break;
	          case 'right':
	            arrowCss.left = isTooltip ? '0' : '-' + borderWidth;
	            break;
	        }

	        arrowCss[placement[1]] = borderRadius;

	        angular.element(arrowElem).css(arrowCss);
	      }
	    };
	  }]);


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(55);

	var MODULE_NAME = 'ui.bootstrap.module.stackedMap';

	angular.module(MODULE_NAME, ['ui.bootstrap.stackedMap']);

	module.exports = MODULE_NAME;


/***/ },
/* 55 */
/***/ function(module, exports) {

	angular.module('ui.bootstrap.stackedMap', [])
	/**
	 * A helper, internal data structure that acts as a map but also allows getting / removing
	 * elements in the LIFO order
	 */
	  .factory('$$stackedMap', function() {
	    return {
	      createNew: function() {
	        var stack = [];

	        return {
	          add: function(key, value) {
	            stack.push({
	              key: key,
	              value: value
	            });
	          },
	          get: function(key) {
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                return stack[i];
	              }
	            }
	          },
	          keys: function() {
	            var keys = [];
	            for (var i = 0; i < stack.length; i++) {
	              keys.push(stack[i].key);
	            }
	            return keys;
	          },
	          top: function() {
	            return stack[stack.length - 1];
	          },
	          remove: function(key) {
	            var idx = -1;
	            for (var i = 0; i < stack.length; i++) {
	              if (key === stack[i].key) {
	                idx = i;
	                break;
	              }
	            }
	            return stack.splice(idx, 1)[0];
	          },
	          removeTop: function() {
	            return stack.splice(stack.length - 1, 1)[0];
	          },
	          length: function() {
	            return stack.length;
	          }
	        };
	      }
	    };
	  });

/***/ },
/* 56 */
/***/ function(module, exports) {

	angular.module("uib/template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/backdrop.html",
	    "<div class=\"modal-backdrop\"\n" +
	    "     uib-modal-animation-class=\"fade\"\n" +
	    "     modal-in-class=\"in\"\n" +
	    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
	    "></div>\n" +
	    "");
	}]);


/***/ },
/* 57 */
/***/ function(module, exports) {

	angular.module("uib/template/modal/window.html", []).run(["$templateCache", function($templateCache) {
	  $templateCache.put("uib/template/modal/window.html",
	    "<div modal-render=\"{{$isRendered}}\" tabindex=\"-1\" role=\"dialog\" class=\"modal\"\n" +
	    "    uib-modal-animation-class=\"fade\"\n" +
	    "    modal-in-class=\"in\"\n" +
	    "    ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\">\n" +
	    "    <div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n" +
	    "</div>\n" +
	    "");
	}]);


/***/ },
/* 58 */
/***/ function(module, exports) {

	angular.module('ui.bootstrap.modal', ['ui.bootstrap.stackedMap', 'ui.bootstrap.position'])
	/**
	 * A helper, internal data structure that stores all references attached to key
	 */
	  .factory('$$multiMap', function() {
	    return {
	      createNew: function() {
	        var map = {};

	        return {
	          entries: function() {
	            return Object.keys(map).map(function(key) {
	              return {
	                key: key,
	                value: map[key]
	              };
	            });
	          },
	          get: function(key) {
	            return map[key];
	          },
	          hasKey: function(key) {
	            return !!map[key];
	          },
	          keys: function() {
	            return Object.keys(map);
	          },
	          put: function(key, value) {
	            if (!map[key]) {
	              map[key] = [];
	            }

	            map[key].push(value);
	          },
	          remove: function(key, value) {
	            var values = map[key];

	            if (!values) {
	              return;
	            }

	            var idx = values.indexOf(value);

	            if (idx !== -1) {
	              values.splice(idx, 1);
	            }

	            if (!values.length) {
	              delete map[key];
	            }
	          }
	        };
	      }
	    };
	  })

	/**
	 * Pluggable resolve mechanism for the modal resolve resolution
	 * Supports UI Router's $resolve service
	 */
	  .provider('$uibResolve', function() {
	    var resolve = this;
	    this.resolver = null;

	    this.setResolver = function(resolver) {
	      this.resolver = resolver;
	    };

	    this.$get = ['$injector', '$q', function($injector, $q) {
	      var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null;
	      return {
	        resolve: function(invocables, locals, parent, self) {
	          if (resolver) {
	            return resolver.resolve(invocables, locals, parent, self);
	          }

	          var promises = [];

	          angular.forEach(invocables, function(value) {
	            if (angular.isFunction(value) || angular.isArray(value)) {
	              promises.push($q.resolve($injector.invoke(value)));
	            } else if (angular.isString(value)) {
	              promises.push($q.resolve($injector.get(value)));
	            } else {
	              promises.push($q.resolve(value));
	            }
	          });

	          return $q.all(promises).then(function(resolves) {
	            var resolveObj = {};
	            var resolveIter = 0;
	            angular.forEach(invocables, function(value, key) {
	              resolveObj[key] = resolves[resolveIter++];
	            });

	            return resolveObj;
	          });
	        }
	      };
	    }];
	  })

	/**
	 * A helper directive for the $modal service. It creates a backdrop element.
	 */
	  .directive('uibModalBackdrop', ['$animate', '$injector', '$uibModalStack',
	  function($animate, $injector, $modalStack) {
	    return {
	      replace: true,
	      templateUrl: 'uib/template/modal/backdrop.html',
	      compile: function(tElement, tAttrs) {
	        tElement.addClass(tAttrs.backdropClass);
	        return linkFn;
	      }
	    };

	    function linkFn(scope, element, attrs) {
	      if (attrs.modalInClass) {
	        $animate.addClass(element, attrs.modalInClass);

	        scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	          var done = setIsAsync();
	          if (scope.modalOptions.animation) {
	            $animate.removeClass(element, attrs.modalInClass).then(done);
	          } else {
	            done();
	          }
	        });
	      }
	    }
	  }])

	  .directive('uibModalWindow', ['$uibModalStack', '$q', '$animateCss', '$document',
	  function($modalStack, $q, $animateCss, $document) {
	    return {
	      scope: {
	        index: '@'
	      },
	      replace: true,
	      transclude: true,
	      templateUrl: function(tElement, tAttrs) {
	        return tAttrs.templateUrl || 'uib/template/modal/window.html';
	      },
	      link: function(scope, element, attrs) {
	        element.addClass(attrs.windowClass || '');
	        element.addClass(attrs.windowTopClass || '');
	        scope.size = attrs.size;

	        scope.close = function(evt) {
	          var modal = $modalStack.getTop();
	          if (modal && modal.value.backdrop &&
	            modal.value.backdrop !== 'static' &&
	            evt.target === evt.currentTarget) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            $modalStack.dismiss(modal.key, 'backdrop click');
	          }
	        };

	        // moved from template to fix issue #2280
	        element.on('click', scope.close);

	        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
	        // We can detect that by using this property in the template associated with this directive and then use
	        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
	        scope.$isRendered = true;

	        // Deferred object that will be resolved when this modal is render.
	        var modalRenderDeferObj = $q.defer();
	        // Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.
	        // In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.
	        attrs.$observe('modalRender', function(value) {
	          if (value === 'true') {
	            modalRenderDeferObj.resolve();
	          }
	        });

	        modalRenderDeferObj.promise.then(function() {
	          var animationPromise = null;

	          if (attrs.modalInClass) {
	            animationPromise = $animateCss(element, {
	              addClass: attrs.modalInClass
	            }).start();

	            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
	              var done = setIsAsync();
	              $animateCss(element, {
	                removeClass: attrs.modalInClass
	              }).start().then(done);
	            });
	          }


	          $q.when(animationPromise).then(function() {
	            // Notify {@link $modalStack} that modal is rendered.
	            var modal = $modalStack.getTop();
	            if (modal) {
	              $modalStack.modalRendered(modal.key);
	            }

	            /**
	             * If something within the freshly-opened modal already has focus (perhaps via a
	             * directive that causes focus). then no need to try and focus anything.
	             */
	            if (!($document[0].activeElement && element[0].contains($document[0].activeElement))) {
	              var inputWithAutofocus = element[0].querySelector('[autofocus]');
	              /**
	               * Auto-focusing of a freshly-opened modal element causes any child elements
	               * with the autofocus attribute to lose focus. This is an issue on touch
	               * based devices which will show and then hide the onscreen keyboard.
	               * Attempts to refocus the autofocus element via JavaScript will not reopen
	               * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
	               * the modal element if the modal does not contain an autofocus element.
	               */
	              if (inputWithAutofocus) {
	                inputWithAutofocus.focus();
	              } else {
	                element[0].focus();
	              }
	            }
	          });
	        });
	      }
	    };
	  }])

	  .directive('uibModalAnimationClass', function() {
	    return {
	      compile: function(tElement, tAttrs) {
	        if (tAttrs.modalAnimation) {
	          tElement.addClass(tAttrs.uibModalAnimationClass);
	        }
	      }
	    };
	  })

	  .directive('uibModalTransclude', function() {
	    return {
	      link: function(scope, element, attrs, controller, transclude) {
	        transclude(scope.$parent, function(clone) {
	          element.empty();
	          element.append(clone);
	        });
	      }
	    };
	  })

	  .factory('$uibModalStack', ['$animate', '$animateCss', '$document',
	    '$compile', '$rootScope', '$q', '$$multiMap', '$$stackedMap', '$uibPosition',
	    function($animate, $animateCss, $document, $compile, $rootScope, $q, $$multiMap, $$stackedMap, $uibPosition) {
	      var OPENED_MODAL_CLASS = 'modal-open';

	      var backdropDomEl, backdropScope;
	      var openedWindows = $$stackedMap.createNew();
	      var openedClasses = $$multiMap.createNew();
	      var $modalStack = {
	        NOW_CLOSING_EVENT: 'modal.stack.now-closing'
	      };
	      var topModalIndex = 0;
	      var previousTopOpenedModal = null;

	      //Modal focus behavior
	      var tabableSelector = 'a[href], area[href], input:not([disabled]), ' +
	        'button:not([disabled]),select:not([disabled]), textarea:not([disabled]), ' +
	        'iframe, object, embed, *[tabindex], *[contenteditable=true]';
	      var scrollbarPadding;

	      function isVisible(element) {
	        return !!(element.offsetWidth ||
	          element.offsetHeight ||
	          element.getClientRects().length);
	      }

	      function backdropIndex() {
	        var topBackdropIndex = -1;
	        var opened = openedWindows.keys();
	        for (var i = 0; i < opened.length; i++) {
	          if (openedWindows.get(opened[i]).value.backdrop) {
	            topBackdropIndex = i;
	          }
	        }

	        // If any backdrop exist, ensure that it's index is always
	        // right below the top modal
	        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
	          topBackdropIndex = topModalIndex;
	        }
	        return topBackdropIndex;
	      }

	      $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
	        if (backdropScope) {
	          backdropScope.index = newBackdropIndex;
	        }
	      });

	      function removeModalWindow(modalInstance, elementToReceiveFocus) {
	        var modalWindow = openedWindows.get(modalInstance).value;
	        var appendToElement = modalWindow.appendTo;

	        //clean up the stack
	        openedWindows.remove(modalInstance);
	        previousTopOpenedModal = openedWindows.top();
	        if (previousTopOpenedModal) {
	          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10);
	        }

	        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
	          var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
	          openedClasses.remove(modalBodyClass, modalInstance);
	          var areAnyOpen = openedClasses.hasKey(modalBodyClass);
	          appendToElement.toggleClass(modalBodyClass, areAnyOpen);
	          if (!areAnyOpen && scrollbarPadding && scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            if (scrollbarPadding.originalRight) {
	              appendToElement.css({paddingRight: scrollbarPadding.originalRight + 'px'});
	            } else {
	              appendToElement.css({paddingRight: ''});
	            }
	            scrollbarPadding = null;
	          }
	          toggleTopWindowClass(true);
	        }, modalWindow.closedDeferred);
	        checkRemoveBackdrop();

	        //move focus to specified element if available, or else to body
	        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
	          elementToReceiveFocus.focus();
	        } else if (appendToElement.focus) {
	          appendToElement.focus();
	        }
	      }

	      // Add or remove "windowTopClass" from the top window in the stack
	      function toggleTopWindowClass(toggleSwitch) {
	        var modalWindow;

	        if (openedWindows.length() > 0) {
	          modalWindow = openedWindows.top().value;
	          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch);
	        }
	      }

	      function checkRemoveBackdrop() {
	        //remove backdrop if no longer needed
	        if (backdropDomEl && backdropIndex() === -1) {
	          var backdropScopeRef = backdropScope;
	          removeAfterAnimate(backdropDomEl, backdropScope, function() {
	            backdropScopeRef = null;
	          });
	          backdropDomEl = undefined;
	          backdropScope = undefined;
	        }
	      }

	      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
	        var asyncDeferred;
	        var asyncPromise = null;
	        var setIsAsync = function() {
	          if (!asyncDeferred) {
	            asyncDeferred = $q.defer();
	            asyncPromise = asyncDeferred.promise;
	          }

	          return function asyncDone() {
	            asyncDeferred.resolve();
	          };
	        };
	        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);

	        // Note that it's intentional that asyncPromise might be null.
	        // That's when setIsAsync has not been called during the
	        // NOW_CLOSING_EVENT broadcast.
	        return $q.when(asyncPromise).then(afterAnimating);

	        function afterAnimating() {
	          if (afterAnimating.done) {
	            return;
	          }
	          afterAnimating.done = true;

	          $animate.leave(domEl).then(function() {
	            domEl.remove();
	            if (closedDeferred) {
	              closedDeferred.resolve();
	            }
	          });

	          scope.$destroy();
	          if (done) {
	            done();
	          }
	        }
	      }

	      $document.on('keydown', keydownListener);

	      $rootScope.$on('$destroy', function() {
	        $document.off('keydown', keydownListener);
	      });

	      function keydownListener(evt) {
	        if (evt.isDefaultPrevented()) {
	          return evt;
	        }

	        var modal = openedWindows.top();
	        if (modal) {
	          switch (evt.which) {
	            case 27: {
	              if (modal.value.keyboard) {
	                evt.preventDefault();
	                $rootScope.$apply(function() {
	                  $modalStack.dismiss(modal.key, 'escape key press');
	                });
	              }
	              break;
	            }
	            case 9: {
	              var list = $modalStack.loadFocusElementList(modal);
	              var focusChanged = false;
	              if (evt.shiftKey) {
	                if ($modalStack.isFocusInFirstItem(evt, list) || $modalStack.isModalFocused(evt, modal)) {
	                  focusChanged = $modalStack.focusLastFocusableElement(list);
	                }
	              } else {
	                if ($modalStack.isFocusInLastItem(evt, list)) {
	                  focusChanged = $modalStack.focusFirstFocusableElement(list);
	                }
	              }

	              if (focusChanged) {
	                evt.preventDefault();
	                evt.stopPropagation();
	              }

	              break;
	            }
	          }
	        }
	      }

	      $modalStack.open = function(modalInstance, modal) {
	        var modalOpener = $document[0].activeElement,
	          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;

	        toggleTopWindowClass(false);

	        // Store the current top first, to determine what index we ought to use
	        // for the current top modal
	        previousTopOpenedModal = openedWindows.top();

	        openedWindows.add(modalInstance, {
	          deferred: modal.deferred,
	          renderDeferred: modal.renderDeferred,
	          closedDeferred: modal.closedDeferred,
	          modalScope: modal.scope,
	          backdrop: modal.backdrop,
	          keyboard: modal.keyboard,
	          openedClass: modal.openedClass,
	          windowTopClass: modal.windowTopClass,
	          animation: modal.animation,
	          appendTo: modal.appendTo
	        });

	        openedClasses.put(modalBodyClass, modalInstance);

	        var appendToElement = modal.appendTo,
	            currBackdropIndex = backdropIndex();

	        if (!appendToElement.length) {
	          throw new Error('appendTo element not found. Make sure that the element passed is in DOM.');
	        }

	        if (currBackdropIndex >= 0 && !backdropDomEl) {
	          backdropScope = $rootScope.$new(true);
	          backdropScope.modalOptions = modal;
	          backdropScope.index = currBackdropIndex;
	          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');
	          backdropDomEl.attr('backdrop-class', modal.backdropClass);
	          if (modal.animation) {
	            backdropDomEl.attr('modal-animation', 'true');
	          }
	          $compile(backdropDomEl)(backdropScope);
	          $animate.enter(backdropDomEl, appendToElement);
	          scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement);
	          if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
	            appendToElement.css({paddingRight: scrollbarPadding.right + 'px'});
	          }
	        }

	        // Set the top modal index based on the index of the previous top modal
	        topModalIndex = previousTopOpenedModal ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1 : 0;
	        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>');
	        angularDomEl.attr({
	          'template-url': modal.windowTemplateUrl,
	          'window-class': modal.windowClass,
	          'window-top-class': modal.windowTopClass,
	          'size': modal.size,
	          'index': topModalIndex,
	          'animate': 'animate'
	        }).html(modal.content);
	        if (modal.animation) {
	          angularDomEl.attr('modal-animation', 'true');
	        }

	        appendToElement.addClass(modalBodyClass);
	        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement);

	        openedWindows.top().value.modalDomEl = angularDomEl;
	        openedWindows.top().value.modalOpener = modalOpener;
	      };

	      function broadcastClosing(modalWindow, resultOrReason, closing) {
	        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
	      }

	      $modalStack.close = function(modalInstance, result) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.resolve(result);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismiss = function(modalInstance, reason) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
	          modalWindow.value.modalScope.$$uibDestructionScheduled = true;
	          modalWindow.value.deferred.reject(reason);
	          removeModalWindow(modalInstance, modalWindow.value.modalOpener);
	          return true;
	        }
	        return !modalWindow;
	      };

	      $modalStack.dismissAll = function(reason) {
	        var topModal = this.getTop();
	        while (topModal && this.dismiss(topModal.key, reason)) {
	          topModal = this.getTop();
	        }
	      };

	      $modalStack.getTop = function() {
	        return openedWindows.top();
	      };

	      $modalStack.modalRendered = function(modalInstance) {
	        var modalWindow = openedWindows.get(modalInstance);
	        if (modalWindow) {
	          modalWindow.value.renderDeferred.resolve();
	        }
	      };

	      $modalStack.focusFirstFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[0].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.focusLastFocusableElement = function(list) {
	        if (list.length > 0) {
	          list[list.length - 1].focus();
	          return true;
	        }
	        return false;
	      };

	      $modalStack.isModalFocused = function(evt, modalWindow) {
	        if (evt && modalWindow) {
	          var modalDomEl = modalWindow.value.modalDomEl;
	          if (modalDomEl && modalDomEl.length) {
	            return (evt.target || evt.srcElement) === modalDomEl[0];
	          }
	        }
	        return false;
	      };

	      $modalStack.isFocusInFirstItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[0];
	        }
	        return false;
	      };

	      $modalStack.isFocusInLastItem = function(evt, list) {
	        if (list.length > 0) {
	          return (evt.target || evt.srcElement) === list[list.length - 1];
	        }
	        return false;
	      };

	      $modalStack.loadFocusElementList = function(modalWindow) {
	        if (modalWindow) {
	          var modalDomE1 = modalWindow.value.modalDomEl;
	          if (modalDomE1 && modalDomE1.length) {
	            var elements = modalDomE1[0].querySelectorAll(tabableSelector);
	            return elements ?
	              Array.prototype.filter.call(elements, function(element) {
	                return isVisible(element);
	              }) : elements;
	          }
	        }
	      };

	      return $modalStack;
	    }])

	  .provider('$uibModal', function() {
	    var $modalProvider = {
	      options: {
	        animation: true,
	        backdrop: true, //can also be false or 'static'
	        keyboard: true
	      },
	      $get: ['$rootScope', '$q', '$document', '$templateRequest', '$controller', '$uibResolve', '$uibModalStack',
	        function ($rootScope, $q, $document, $templateRequest, $controller, $uibResolve, $modalStack) {
	          var $modal = {};

	          function getTemplatePromise(options) {
	            return options.template ? $q.when(options.template) :
	              $templateRequest(angular.isFunction(options.templateUrl) ?
	                options.templateUrl() : options.templateUrl);
	          }

	          var promiseChain = null;
	          $modal.getPromiseChain = function() {
	            return promiseChain;
	          };

	          $modal.open = function(modalOptions) {
	            var modalResultDeferred = $q.defer();
	            var modalOpenedDeferred = $q.defer();
	            var modalClosedDeferred = $q.defer();
	            var modalRenderDeferred = $q.defer();

	            //prepare an instance of a modal to be injected into controllers and returned to a caller
	            var modalInstance = {
	              result: modalResultDeferred.promise,
	              opened: modalOpenedDeferred.promise,
	              closed: modalClosedDeferred.promise,
	              rendered: modalRenderDeferred.promise,
	              close: function (result) {
	                return $modalStack.close(modalInstance, result);
	              },
	              dismiss: function (reason) {
	                return $modalStack.dismiss(modalInstance, reason);
	              }
	            };

	            //merge and clean up options
	            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
	            modalOptions.resolve = modalOptions.resolve || {};
	            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0);

	            //verify options
	            if (!modalOptions.template && !modalOptions.templateUrl) {
	              throw new Error('One of template or templateUrl options is required.');
	            }

	            var templateAndResolvePromise =
	              $q.all([getTemplatePromise(modalOptions), $uibResolve.resolve(modalOptions.resolve, {}, null, null)]);

	            function resolveWithTemplate() {
	              return templateAndResolvePromise;
	            }

	            // Wait for the resolution of the existing promise chain.
	            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
	            // Then add to $modalStack and resolve opened.
	            // Finally clean up the chain variable if no subsequent modal has overwritten it.
	            var samePromise;
	            samePromise = promiseChain = $q.all([promiseChain])
	              .then(resolveWithTemplate, resolveWithTemplate)
	              .then(function resolveSuccess(tplAndVars) {
	                var providedScope = modalOptions.scope || $rootScope;

	                var modalScope = providedScope.$new();
	                modalScope.$close = modalInstance.close;
	                modalScope.$dismiss = modalInstance.dismiss;

	                modalScope.$on('$destroy', function() {
	                  if (!modalScope.$$uibDestructionScheduled) {
	                    modalScope.$dismiss('$uibUnscheduledDestruction');
	                  }
	                });

	                var ctrlInstance, ctrlInstantiate, ctrlLocals = {};

	                //controllers
	                if (modalOptions.controller) {
	                  ctrlLocals.$scope = modalScope;
	                  ctrlLocals.$scope.$resolve = {};
	                  ctrlLocals.$uibModalInstance = modalInstance;
	                  angular.forEach(tplAndVars[1], function(value, key) {
	                    ctrlLocals[key] = value;
	                    ctrlLocals.$scope.$resolve[key] = value;
	                  });

	                  // the third param will make the controller instantiate later,private api
	                  // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
	                  ctrlInstantiate = $controller(modalOptions.controller, ctrlLocals, true, modalOptions.controllerAs);
	                  if (modalOptions.controllerAs && modalOptions.bindToController) {
	                    ctrlInstance = ctrlInstantiate.instance;
	                    ctrlInstance.$close = modalScope.$close;
	                    ctrlInstance.$dismiss = modalScope.$dismiss;
	                    angular.extend(ctrlInstance, {
	                      $resolve: ctrlLocals.$scope.$resolve
	                    }, providedScope);
	                  }

	                  ctrlInstance = ctrlInstantiate();

	                  if (angular.isFunction(ctrlInstance.$onInit)) {
	                    ctrlInstance.$onInit();
	                  }
	                }

	                $modalStack.open(modalInstance, {
	                  scope: modalScope,
	                  deferred: modalResultDeferred,
	                  renderDeferred: modalRenderDeferred,
	                  closedDeferred: modalClosedDeferred,
	                  content: tplAndVars[0],
	                  animation: modalOptions.animation,
	                  backdrop: modalOptions.backdrop,
	                  keyboard: modalOptions.keyboard,
	                  backdropClass: modalOptions.backdropClass,
	                  windowTopClass: modalOptions.windowTopClass,
	                  windowClass: modalOptions.windowClass,
	                  windowTemplateUrl: modalOptions.windowTemplateUrl,
	                  size: modalOptions.size,
	                  openedClass: modalOptions.openedClass,
	                  appendTo: modalOptions.appendTo
	                });
	                modalOpenedDeferred.resolve(true);

	            }, function resolveError(reason) {
	              modalOpenedDeferred.reject(reason);
	              modalResultDeferred.reject(reason);
	            })['finally'](function() {
	              if (promiseChain === samePromise) {
	                promiseChain = null;
	              }
	            });

	            return modalInstance;
	          };

	          return $modal;
	        }
	      ]
	    };

	    return $modalProvider;
	  });


/***/ }
/******/ ]);